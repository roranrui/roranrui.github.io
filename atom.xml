<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>若然无亦的Blog</title>
  
  <subtitle>长日终有时, 长梦终有逝</subtitle>
  <link href="https://roranrui.cn/atom.xml" rel="self"/>
  
  <link href="https://roranrui.cn/"/>
  <updated>2022-05-16T01:00:50.689Z</updated>
  <id>https://roranrui.cn/</id>
  
  <author>
    <name>若然无亦</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第二十二天_数学(简单)</title>
    <link href="https://roranrui.cn/posts/97c4b9c8/"/>
    <id>https://roranrui.cn/posts/97c4b9c8/</id>
    <published>2022-05-16T00:28:22.000Z</published>
    <updated>2022-05-16T01:00:50.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二十二天-数学-简单"><a href="#第二十二天-数学-简单" class="headerlink" title="第二十二天_数学(简单)"></a>第二十二天_数学(简单)</h1><blockquote><p>刷题日程指引: <a href="https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/px2ds5/">行百里者半九十。坚持一个月刷完，一起加油！</a></p></blockquote><h2 id="一-知识学习"><a href="#一-知识学习" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h2 id="二-题目练习"><a href="#二-题目练习" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="数组中出现次数超过一半的数字"><a href="#数组中出现次数超过一半的数字" class="headerlink" title="数组中出现次数超过一半的数字"></a>数组中出现次数超过一半的数字</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220516083856792.png"></p><p><strong>解题思路:</strong></p><p><strong>1.hashmap</strong></p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> dic<span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            count <span class="token operator">=</span> <span class="token operator">++</span>dic<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220516084222132.png"></p><p><strong>2.先排序, 中点必是众数</strong></p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220516084156944.png"></p><p><strong>3.摩尔投票法</strong></p><p> 核心理念为 <strong>票数正负抵消</strong> </p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220516084358825.png"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1603612327-bOQxzq-Picture1.png"></p><p>每轮发生 票数和 = 0 都可以 缩小剩余数组区间</p><p>当遍历完成时，最后一轮假设的数字即为众数</p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> votes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>votes <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> x <span class="token operator">=</span> num<span class="token punctuation">;</span>            votes <span class="token operator">+</span><span class="token operator">=</span> num <span class="token operator">==</span> x <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 验证 x 是否为众数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> x<span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count <span class="token operator">></span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">?</span> x <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当无众数时返回 0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构建乘积数组"><a href="#构建乘积数组" class="headerlink" title="构建乘积数组"></a>构建乘积数组</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220516085056079.png"></p><p><strong>解题思路:</strong></p><p>本题的难点在于 <strong>不能使用除法</strong> ，即需要 <strong>只用乘法</strong> 生成数组 B。根据题目对 B[i]的定义，可列表格，如下图所示。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1624619180-vpyyqh-Picture1.png" alt="Picture1.png"></p><p>实现</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">constructArr</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>  <span class="token function">b</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            tmp <span class="token operator">*</span><span class="token operator">=</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span><span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220516090047075.png"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第二十二天-数学-简单&quot;&gt;&lt;a href=&quot;#第二十二天-数学-简单&quot; class=&quot;headerlink&quot; title=&quot;第二十二天_数学(简单)&quot;&gt;&lt;/a&gt;第二十二天_数学(简单)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;刷题日程指引: &lt;a href=&quot;ht</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://roranrui.cn/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
    <category term="算法" scheme="https://roranrui.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>第二十二天_位运算(中等)</title>
    <link href="https://roranrui.cn/posts/f66ba6ca/"/>
    <id>https://roranrui.cn/posts/f66ba6ca/</id>
    <published>2022-05-15T05:32:51.000Z</published>
    <updated>2022-05-15T06:27:35.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二十二天-位运算-中等"><a href="#第二十二天-位运算-中等" class="headerlink" title="第二十二天_位运算(中等)"></a>第二十二天_位运算(中等)</h1><blockquote><p>刷题日程指引: <a href="https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/px2ds5/">行百里者半九十。坚持一个月刷完，一起加油！</a></p></blockquote><h2 id="一-知识学习"><a href="#一-知识学习" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h2 id="二-题目练习"><a href="#二-题目练习" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-数组中数字出现的次数-I"><a href="#1-数组中数字出现的次数-I" class="headerlink" title="1. 数组中数字出现的次数 I"></a>1. 数组中数字出现的次数 I</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220515133802999.png"></p><p><strong>解题思路</strong></p><p>题目要求时间复杂度 O(N)，空间复杂度 O(1)，因此首先排除 <strong>暴力法</strong> 和 <strong>哈希表统计法</strong> 。</p><blockquote><p>  异或运算有个重要的性质，两个相同数字异或为 0 ，即对于任意整数 a 有a ^ a=0 。因此，若将 nums中所有数字执行异或运算，留下的结果则为 出现一次的数字 x</p></blockquote><p><strong>本题难点：</strong> 数组 nums有 <strong>两个</strong> 只出现一次的数字，因此无法通过异或直接得到这两个数字。</p><p>设两个只出现一次的数字为x,y,由于x ≠ y,则x和y二进制至少有一位不同(即分别为0和1) ,根据此位<br>可以将nums拆分为分别包含x和y的两个子数组。<br>易知两子数组都满足「除-一个数字之外，其他数字都出现了两次」。因此，仿照以上简化问题的思路,分别对两<br>子数组遍历执行异或操作，即可得到两个只出现一次的数字x, y。.</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1614836837-oygHyk-Picture2.png"></p><p><strong>实现:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">singleNumbers</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            n <span class="token operator">^</span><span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> m<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> m <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">&amp;</span> m<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> x <span class="token operator">^</span><span class="token operator">=</span> num<span class="token punctuation">;</span>            <span class="token keyword">else</span> y <span class="token operator">^</span><span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token punctuation">{</span>x<span class="token punctuation">,</span> y<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220515140939165.png"></p><h3 id="2-数组中数字出现的次数-II"><a href="#2-数组中数字出现的次数-II" class="headerlink" title="2. 数组中数字出现的次数 II"></a>2. 数组中数字出现的次数 II</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220515140931286.png" alt="image-20220515140931286"></p><p><strong>解题思路</strong>：</p><p>如下图所示，考虑数字的二进制形式，对于出现三次的数字，各 二进制位 出现的次数都是 3 的倍数。<br>因此，统计所有数字的各二进制位中 1 的出现次数，并对 3 求余，结果则为只出现一次的数字。</p><p><strong>暂时只想到遍历统计</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">int</span> counts<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// C++ 初始化数组需要写明初始值 0</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> num <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 更新第 i 位 1 的个数之和</span>                num <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 第 i 位 --> 第 i 位</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>            res <span class="token operator">|</span><span class="token operator">=</span> counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> m<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 恢复第 i 位</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220515142732000.png"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第二十二天-位运算-中等&quot;&gt;&lt;a href=&quot;#第二十二天-位运算-中等&quot; class=&quot;headerlink&quot; title=&quot;第二十二天_位运算(中等)&quot;&gt;&lt;/a&gt;第二十二天_位运算(中等)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;刷题日程指引: &lt;a href</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://roranrui.cn/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
    <category term="算法" scheme="https://roranrui.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>爬虫学习（二）</title>
    <link href="https://roranrui.cn/posts/320b7ec0/"/>
    <id>https://roranrui.cn/posts/320b7ec0/</id>
    <published>2022-05-14T03:45:39.000Z</published>
    <updated>2022-05-15T06:29:38.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬虫学习（二）"><a href="#爬虫学习（二）" class="headerlink" title="爬虫学习（二）"></a>爬虫学习（二）</h1><h2 id="一-数据解析"><a href="#一-数据解析" class="headerlink" title="一. 数据解析"></a>一. 数据解析</h2><blockquote><p>  通过全局爬虫获取整张页面信息, 在对数据进行提取</p></blockquote><ul><li><strong>正则匹配</strong></li><li><strong>bs4</strong></li><li><strong>xpath</strong>*</li></ul><p><strong>数据解析原理概述:</strong> </p><ul><li><p>解析的局部的文本内容都会在标签之间或者标签对应的属性中进行存储</p></li><li><ol><li>进行指定标签的定位</li><li>标签或者对应标签对应的属性中存储的数据进行提取(解析)</li></ol></li></ul><h2 id="二-正则表达式"><a href="#二-正则表达式" class="headerlink" title="二. 正则表达式"></a>二. 正则表达式</h2><p>详情可参考: </p><ul><li><a href="https://www.runoob.com/regexp/regexp-tutorial.html">正则表达式 – 教程 | 菜鸟教程 (runoob.com)</a></li><li><a href="https://www.runoob.com/python/python-reg-expressions.html">Python 正则表达式 | 菜鸟教程 (runoob.com)</a></li></ul><h3 id="案例一-图片数据爬取"><a href="#案例一-图片数据爬取" class="headerlink" title="案例一: 图片数据爬取"></a>案例一: 图片数据爬取</h3><blockquote><ul><li>text(字符串)</li><li>content(二进制)</li><li>json(对象)</li></ul></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;爬虫学习（二）&quot;&gt;&lt;a href=&quot;#爬虫学习（二）&quot; class=&quot;headerlink&quot; title=&quot;爬虫学习（二）&quot;&gt;&lt;/a&gt;爬虫学习（二）&lt;/h1&gt;&lt;h2 id=&quot;一-数据解析&quot;&gt;&lt;a href=&quot;#一-数据解析&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="爬虫笔记" scheme="https://roranrui.cn/categories/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Python" scheme="https://roranrui.cn/tags/Python/"/>
    
    <category term="爬虫" scheme="https://roranrui.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>第二十一天_位运算(简单)</title>
    <link href="https://roranrui.cn/posts/571a03bb/"/>
    <id>https://roranrui.cn/posts/571a03bb/</id>
    <published>2022-05-14T01:31:49.000Z</published>
    <updated>2022-05-14T02:23:23.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二十一天-位运算-简单"><a href="#第二十一天-位运算-简单" class="headerlink" title="第二十一天_位运算(简单)"></a>第二十一天_位运算(简单)</h1><blockquote><p>刷题日程指引: <a href="https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/px2ds5/">行百里者半九十。坚持一个月刷完，一起加油！</a></p></blockquote><h2 id="一-知识学习"><a href="#一-知识学习" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><p>传送门: <a href="https://roranrui.cn/posts/a2d105e0/">第十三天_双指针(简单) | 若然无亦的Blog (roranrui.cn)</a></p><h2 id="二-题目练习"><a href="#二-题目练习" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="二进制中-1-的个数"><a href="#二进制中-1-的个数" class="headerlink" title="二进制中 1 的个数"></a>二进制中 1 的个数</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220514094744918.png"></p><p><strong>解题思路：</strong></p><p>1.逐位判断</p><p>利用与运算符， 判断最后一位</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span>uint32_t n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res <span class="token operator">+</span><span class="token operator">=</span> n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>            n <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220514100345123.png"></p><p>2.巧用 n &amp; (n - 1)</p><ul><li>(n−1) 解析： 二进制数字 n <strong>最右边</strong> 的 1 变成 0 ，此 1 右边的 0 都变成 1 。</li><li>n &amp; (n - 1) 解析： 二进制数字 n <strong>最右边</strong> 的 1 变成 0 ，其余不变。</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/f23d9ef4fcfd65d7fbe29e477cbf36110b2f34558020e8cff09a1e13c0275c43-Picture1.png"></p><p><strong>实现：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span>uint32_t n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res <span class="token operator">++</span><span class="token punctuation">;</span>            n <span class="token operator">&amp;</span><span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220514100835432.png"></p><h3 id="2-不用加减乘除做加法"><a href="#2-不用加减乘除做加法" class="headerlink" title="2. 不用加减乘除做加法"></a>2. 不用加减乘除做加法</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220514100924582.png"></p><p><strong>解题思路：</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220514101940510.png"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/9716b1a1ead21824b8216c7d54910bee4d838c011581f4e3d82a14f71cb392a1-Picture1.png"></p><p><strong>实现</strong>:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>            a <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">;</span>            b <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第二十一天-位运算-简单&quot;&gt;&lt;a href=&quot;#第二十一天-位运算-简单&quot; class=&quot;headerlink&quot; title=&quot;第二十一天_位运算(简单)&quot;&gt;&lt;/a&gt;第二十一天_位运算(简单)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;刷题日程指引: &lt;a href</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://roranrui.cn/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
    <category term="算法" scheme="https://roranrui.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>第二十天_分治算法(中等)</title>
    <link href="https://roranrui.cn/posts/d671518c/"/>
    <id>https://roranrui.cn/posts/d671518c/</id>
    <published>2022-05-13T03:56:41.000Z</published>
    <updated>2022-05-13T10:58:06.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二十天-分治算法-中等"><a href="#第二十天-分治算法-中等" class="headerlink" title="第二十天_分治算法(中等)"></a>第二十天_分治算法(中等)</h1><blockquote><p>刷题日程指引: <a href="https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/px2ds5/">行百里者半九十。坚持一个月刷完，一起加油！</a></p></blockquote><h2 id="一-知识学习"><a href="#一-知识学习" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h3 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h3><p>归并排序体现了 “分而治之” 的算法思想，具体为：</p><p><strong>「分」：</strong> 不断将数组从 中点位置 划分开，将原数组的排序问题转化为子数组的排序问题；<br><strong>「治」：</strong> 划分到子数组长度为 1 时，开始向上合并，不断将 左右两个较短排序数组 合并为 一个较长排序数组，直至合并至原数组时完成排序；<br>如下图所示，为数组 [7,3,2,6,0,1,5,4] 的归并排序过程。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/1632675739-CNHaOu-Picture1.png"></p><h2 id="二-题目练习"><a href="#二-题目练习" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-重建二叉树"><a href="#1-重建二叉树" class="headerlink" title="1. *重建二叉树"></a>1. *重建二叉树</h3><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513120324436.png"></p><p><strong>解题思路：</strong></p><p>前序遍历性质： 节点按照 <code>[ 根节点 | 左子树 | 右子树 ]</code> 排序。<br>中序遍历性质： 节点按照 <code>[ 左子树 | 根节点 | 右子树 ]</code> 排序。</p><p>根据以上性质，可得出以下推论：</p><ul><li>前序遍历的首元素 为 树的根节点 node 的值。</li><li>在中序遍历中搜索根节点 node 的索引 ，可将 中序遍历 划分为 <code>[ 左子树 | 根节点 | 右子树 ]</code> 。</li><li>根据中序遍历中的左（右）子树的节点数量，可将 前序遍历 划分为 <code>[ 根节点 | 左子树 | 右子树 ]</code> 。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/1629825510-roByLr-Picture1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513122020000.png"></p><p><strong>实现</strong>:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> preorder<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> inorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>preorder <span class="token operator">=</span> preorder<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dic<span class="token punctuation">[</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> preorder<span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> dic<span class="token punctuation">;</span>    TreeNode<span class="token operator">*</span> <span class="token function">recur</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> right<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        TreeNode<span class="token operator">*</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> dic<span class="token punctuation">[</span>preorder<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        node<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> <span class="token function">recur</span><span class="token punctuation">(</span>root <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> <span class="token function">recur</span><span class="token punctuation">(</span>i <span class="token operator">-</span> left <span class="token operator">+</span> root <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513123110737.png"></p><h3 id="2-数值的整数次方"><a href="#2-数值的整数次方" class="headerlink" title="2. 数值的整数次方"></a>2. 数值的整数次方</h3><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513123509840.png"></p><p><strong>解题思路:</strong></p><p>除了n个x<strong>相乘</strong>, 还可以用<strong>快速幂法</strong>可将时间复杂度降低至 O(NlogN) ，以下从 「分治法」 和 「二进制」 两个角度解析快速幂法。</p><p>1.分治法</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513123721987.png"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/1599885604-YzlkAN-Picture2.png"></p><blockquote><p>  转化为位运算：<br>  向下整除 n // 2 等价于 右移一位 n &gt;&gt; 1；<br>  取余数 n % 2 等价于 判断二进制最右位 n &amp; 1；</p></blockquote><p>2.二进制</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513123843252.png"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/1599885604-yDzVYK-Picture1.png"></p><p><strong>实现:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token function">myPow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token operator">-</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token function">myPow</span><span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">,</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">myPow</span><span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">,</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513125324781.png"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0.0f</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> res <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            x <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> x<span class="token punctuation">;</span>            n <span class="token operator">=</span> <span class="token operator">-</span>n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">*</span><span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// n为奇数</span>            x <span class="token operator">*</span><span class="token operator">=</span> x<span class="token punctuation">;</span>            n <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513124509093.png"></p><h3 id="3-二叉搜索树的后序遍历序列"><a href="#3-二叉搜索树的后序遍历序列" class="headerlink" title="3.  二叉搜索树的后序遍历序列"></a>3.  二叉搜索树的后序遍历序列</h3><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513125719563.png"></p><p>解题思路：<br>后序遍历定义： <code>[ 左子树 | 右子树 | 根节点 ]</code> ，即遍历顺序为 “左、右、根” 。</p><p>二叉搜索树定义： 左子树中所有节点的值 &lt; 根节点的值；右子树中所有节点的值 &gt; 根节点的值；其左、右子树也分别为二叉搜索树。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/1599753507-JrFBjm-Picture1.png"></p><p>1.递归</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513131353240.png"></p><p><strong>实现</strong>:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">verifyPostorder</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> postorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span>postorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> postorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">recur</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> postorder<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> j<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>postorder<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">&lt;</span> postorder<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> p<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> p<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 第一个大于根节点的节点</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>postorder<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">></span> postorder<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> p<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 继续寻找</span>        <span class="token keyword">return</span> p <span class="token operator">==</span> j <span class="token operator">&amp;&amp;</span> <span class="token function">recur</span><span class="token punctuation">(</span>postorder<span class="token punctuation">,</span> i<span class="token punctuation">,</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">recur</span><span class="token punctuation">(</span>postorder<span class="token punctuation">,</span> m<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513131847608.png"></p><p>2.辅助栈</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513132029095.png"></p><p><strong>实现</strong>:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">verifyPostorder</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> postorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stk<span class="token punctuation">;</span>        <span class="token keyword">int</span> root <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> postorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>postorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> postorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                root <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>postorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513132328576.png"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第二十天-分治算法-中等&quot;&gt;&lt;a href=&quot;#第二十天-分治算法-中等&quot; class=&quot;headerlink&quot; title=&quot;第二十天_分治算法(中等)&quot;&gt;&lt;/a&gt;第二十天_分治算法(中等)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;刷题日程指引: &lt;a href</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://roranrui.cn/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
    <category term="算法" scheme="https://roranrui.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>第十九天_搜索与回溯算法（中等）</title>
    <link href="https://roranrui.cn/posts/f04e12e6/"/>
    <id>https://roranrui.cn/posts/f04e12e6/</id>
    <published>2022-05-12T05:13:15.000Z</published>
    <updated>2022-05-12T05:52:37.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十九天-搜索与回溯算法（中等）"><a href="#第十九天-搜索与回溯算法（中等）" class="headerlink" title="第十九天_搜索与回溯算法（中等）"></a>第十九天_搜索与回溯算法（中等）</h1><blockquote><p>  刷题日程指引: <a href="https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/px2ds5/">行百里者半九十。坚持一个月刷完，一起加油！</a></p></blockquote><h2 id="一-知识学习"><a href="#一-知识学习" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1081204.jpg" alt="静かな消えてゆく"></p><h3 id="逻辑运算符的短路效应"><a href="#逻辑运算符的短路效应" class="headerlink" title="逻辑运算符的短路效应"></a>逻辑运算符的短路效应</h3><p>常见的逻辑运算符有三种，即 “与 &amp;&amp; ”，“或 ||”，“非 !! ”；而其有重要的短路效应，如下所示：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>A <span class="token operator">&amp;&amp;</span> B<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 若 A 为 false ，则 B 的判断不会执行（即短路），直接判定 A &amp;&amp; B 为 false</span><span class="token keyword">if</span><span class="token punctuation">(</span>A <span class="token operator">||</span> B<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 若 A 为 true ，则 B 的判断不会执行（即短路），直接判定 A || B 为 true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="二叉树的祖先"><a href="#二叉树的祖先" class="headerlink" title="二叉树的祖先"></a>二叉树的祖先</h3><p><strong>祖先的定义</strong>： 若节点 pp 在节点 root 的左（右）子树中，或 p = root，则称 root是 p 的祖先。</p><p><strong>最近公共祖先的定义</strong>： 设节点 root 为节点 p,q的某公共祖先，若其左子节点 root.left和右子节点 root.right都不是 p,q的公共祖先，则称 root 是 “最近的公共祖先” 。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1599885085-LbAmPd-Picture1.png" alt="Picture1.png"></p><p>若 root是 p,q的 最近公共祖先 ，则只可能为以下三种情况之一：</p><p>p 和 q 在 root的子树中，且分列 root 的 异侧（即分别在左、右子树中）；<br>p = root 且 q 在 root的左或右子树中；<br>q = root 且 p 在 root 的左或右子树中；</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1599885085-mTpblH-Picture2.png"></p><h2 id="二-题目练习"><a href="#二-题目练习" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-求-1-2-…-n"><a href="#1-求-1-2-…-n" class="headerlink" title="1. 求 1 + 2 + … + n"></a>1. 求 1 + 2 + … + n</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220512131628421.png"></p><p><strong>解题思路：</strong></p><p>1.平均计算</p><p>此计算必须使用 <strong>乘除法</strong> ，因此本方法不可取，直接排除</p><p>2.迭代</p><p>循环必须使用 while或 for，因此本方法不可取，直接排除。</p><p>3.递归</p><p>终止条件需要使用 if，因此本方法不可取。</p><p>4.逻辑运算符代替if</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1603023621-WFZwzS-Picture1.png"></p><p>实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">sumNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        n <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">sumNums</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220512132223869.png"></p><p><strong>其他解法</strong>：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">sumNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">bool</span> arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  暂时未看懂</p></blockquote><h3 id="2-二叉搜索树的最近公共祖先"><a href="#2-二叉搜索树的最近公共祖先" class="headerlink" title="2.二叉搜索树的最近公共祖先"></a>2.二叉搜索树的最近公共祖先</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220512132844192.png"></p><p><strong>解题思路：</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220512133316273.png"></p><p>1.迭代</p><ul><li>循环搜索： 当节点 root 为空时跳出；</li><li>当 p, q 都在 root 的 右子树 中，则遍历至 root.right；</li><li>否则，当 p, q 都在 root 的 左子树 中，则遍历至 root.left；</li><li>否则，说明找到了 最近公共祖先 ，跳出；</li></ul><p><strong>实现</strong>：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;</span> p<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&amp;&amp;</span> root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;</span> q<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// p,q 都在 root 的右子树中</span>                root <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 遍历至右子节点</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">></span> p<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&amp;&amp;</span> root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">></span> q<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// p,q 都在 root 的左子树中</span>                root <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 遍历至左子节点</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220512134540298.png"></p><p>代码优化：若可保证 p.val &lt; q.val，则在循环中可减少判断条件，提升计算效率。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">></span> q<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span>            <span class="token function">swap</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;</span> p<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// p,q 都在 root 的右子树中</span>                root <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 遍历至右子节点</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">></span> q<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// p,q 都在 root 的左子树中</span>                root <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 遍历至左子节点</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.递归</p><p>递推工作：</p><ul><li>当 p, q 都在 root 的 右子树 中，则开启递归 root.right 并返回；</li><li>否则，当 p, q都在 root的 左子树 中，则开启递归 root.left 并返回；</li><li>返回值： 最近公共祖先 root ；</li></ul><p><strong>实现</strong>：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;</span> p<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&amp;&amp;</span> root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;</span> q<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// p,q 都在 root 的右子树中</span>            <span class="token keyword">return</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">></span> p<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&amp;&amp;</span> root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">></span> q<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// p,q都在 root 左子树中</span>            <span class="token keyword">return</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220512134402787.png"></p><h3 id="3-二叉树的最近公共祖先"><a href="#3-二叉树的最近公共祖先" class="headerlink" title="3. 二叉树的最近公共祖先"></a>3. 二叉树的最近公共祖先</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220512134725529.png"></p><p><strong>解题思路：</strong></p><p>若 root 是 p, q 的 最近公共祖先 ，则只可能为以下情况之一：</p><ul><li>p 和 q 在 root 的子树中，且分列 root 的 异侧（即分别在左、右子树中）；</li><li>p = root ，且 q 在 root 的左或右子树中；</li><li>q = root ，且 p 在 root的左或右子树中；</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1599885247-mgYjRv-Picture2.png"></p><p>考虑采用dfs遍历</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> root <span class="token operator">==</span> p <span class="token operator">||</span> root <span class="token operator">==</span> q<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>        TreeNode<span class="token operator">*</span> left <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode<span class="token operator">*</span> right <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> right<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> left<span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220512135221394.png"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第十九天-搜索与回溯算法（中等）&quot;&gt;&lt;a href=&quot;#第十九天-搜索与回溯算法（中等）&quot; class=&quot;headerlink&quot; title=&quot;第十九天_搜索与回溯算法（中等）&quot;&gt;&lt;/a&gt;第十九天_搜索与回溯算法（中等）&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; </summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://roranrui.cn/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
    <category term="算法" scheme="https://roranrui.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>爬虫学习（一）</title>
    <link href="https://roranrui.cn/posts/21d9218/"/>
    <id>https://roranrui.cn/posts/21d9218/</id>
    <published>2022-05-11T14:56:06.000Z</published>
    <updated>2022-05-14T03:47:10.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬虫学习（一）"><a href="#爬虫学习（一）" class="headerlink" title="爬虫学习（一）"></a>爬虫学习（一）</h1><h2 id="一-什么是爬虫"><a href="#一-什么是爬虫" class="headerlink" title="一. 什么是爬虫"></a>一. 什么是爬虫</h2><blockquote><p>  网络爬虫是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。</p></blockquote><p>网络爬虫（又称网络蜘蛛，机器人），就是模拟客户端发送网络请求，接收请求响应，一种按照一定的规则，自动地抓取互联网信息的程序。<br>只要浏览器能够做的事情，原则上，爬虫都能够做到。</p><p>简单来说，爬虫就是自动从网络上收集信息的一种程序，复杂点来说，就是一整套关于数据请求、处理、存储的程序。</p><p>原理</p><p>发送请求 -&gt; 接收响应 -&gt; 解析网页 (-&gt; 提取链接 -&gt; 发送请求) -&gt; 提取资源 -&gt; 保存资源</p><p><strong>爬虫分类</strong></p><ul><li>全局爬虫</li><li>聚焦爬虫</li><li>异步爬虫</li></ul><h2 id="二-robots-txt协议"><a href="#二-robots-txt协议" class="headerlink" title="二. robots.txt协议"></a>二. robots.txt协议</h2><blockquote><p>  <a href="http://t.csdn.cn/NLSJN">详情可以看这</a></p></blockquote><blockquote><p>  robots协议<br>          robots协议也叫robots.txt（统一小写）是一种存放于网站根目录下的ASCII编码的文本文件，它通常告诉网络搜索引擎的漫游器（又称网络蜘蛛），此网站中的哪些内容是不应被搜索引擎的漫游器获取的，哪些是可以被漫游器获取的。因为一些系统中的URL是大小写敏感的，所以robots.txt的文件名应统一为小写。</p><p>  robots.txt应放置于网站的根目录下。如果想单独定义搜索引擎的漫游器访问子目录时的行为，那么可以将自定的设置合并到根目录下的robots.txt，或者使用robots元数据（Metadata，又称元数据）。</p><p>  robots协议并不是一个规范，而只是约定俗成的，所以并不能保证网站的隐私。</p></blockquote><h2 id="三-http和https协议"><a href="#三-http和https协议" class="headerlink" title="三. http和https协议"></a>三. http和https协议</h2><p><strong>http协议</strong></p><blockquote><p>  服务器和客户端进行数据交互的一种信息</p></blockquote><h3 id="常用请求头信息"><a href="#常用请求头信息" class="headerlink" title="常用请求头信息"></a>常用请求头信息</h3><p><code>User-Agent</code>: 请求载体的身份标识(如edge浏览器, 代码)</p><p><code>Connection</code>: 请求完毕后是断开连接韩式保持连接</p><h3 id="常用响应头信息"><a href="#常用响应头信息" class="headerlink" title="常用响应头信息"></a>常用响应头信息</h3><p><code>Content-Type</code>: 服务器响应回客户端的信息</p><h3 id="加密方式"><a href="#加密方式" class="headerlink" title="加密方式"></a>加密方式</h3><ul><li><p>对称密钥加密: </p></li><li><p>非对称密钥加密</p></li><li><p>证书密钥加密</p></li></ul><p><strong>https协议</strong></p><blockquote><p>  是以安全为目标的HTTP<a href="https://so.csdn.net/so/search?q=%E9%80%9A%E9%81%93&amp;spm=1001.2101.3001.7020">通道</a>，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。HTTPS协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/7d8a6c1c8f9611c4e16d4a3d41992ef7.png"></p><p><a href="http://t.csdn.cn/f2QCk">漫画：什么是 HTTPS 协议？</a></p><h2 id="四-requests模块"><a href="#四-requests模块" class="headerlink" title="四. requests模块"></a>四. requests模块</h2><blockquote><p><strong>Requests</strong>是⽤Python语⾔编写，基于 urllib，采⽤<br>Apache2 Licensed 开源协议的 HTTP 库。<br>它⽐ urllib 更加⽅便，可以节约我们⼤量的⼯作，完全满⾜<br>HTTP 测试需求。<br><strong>⼀句话——Python实现的简单易⽤的HTTP库</strong></p></blockquote><p>使用步骤:</p><ul><li>指定url</li><li>发起请求</li><li>获取响应数据</li><li>持久化存储</li></ul><p>简单示例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests <span class="token keyword">as</span> re<span class="token comment" spellcheck="true"># 爬取搜狗首页页面数据</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    sogou <span class="token operator">=</span> <span class="token string">'https://www.sogou.com/'</span>    response <span class="token operator">=</span> re<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>sogou<span class="token punctuation">)</span>    page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true">#storge</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./sougou.html'</span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取完成"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="案例一-网页采集器"><a href="#案例一-网页采集器" class="headerlink" title="案例一: 网页采集器"></a>案例一: 网页采集器</h3><p>知识点: </p><ul><li>url携带的参数处理</li><li><code>User-Agent</code>伪装</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests <span class="token keyword">as</span> re<span class="token comment" spellcheck="true"># UA伪装 User-Agent</span><span class="token comment" spellcheck="true"># 门户网站的的服务器回检测对应请求的载体身份标识, 因此要伪装为浏览器</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 进行UA伪装: 将对应的UA封装到一个字典中</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0(Windows NT 10.0; Win64; x64) AppleWebKit/537.36(KHTML, likeGecko)Chrome/'</span>                      <span class="token string">'101.0.4951.54 Safari/537.36 Edg/101.0.1210.39'</span>    <span class="token punctuation">}</span>    url <span class="token operator">=</span> <span class="token string">'https://www.sogou.com/web'</span>    <span class="token comment" spellcheck="true"># 除了url携带的参数: 封装到字典中</span>    keyWord <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你要搜索的内容: "</span><span class="token punctuation">)</span>    param <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'query'</span><span class="token punctuation">:</span> keyWord    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 对指定的url发起的请求对应的url是带参数的,并且请求过程中处理了参数</span>    response <span class="token operator">=</span> re<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>param<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    data <span class="token operator">=</span> response<span class="token punctuation">.</span>text    fileName <span class="token operator">=</span> keyWord <span class="token operator">+</span> <span class="token string">'.html'</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"爬取成功!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="案例二-破解百度翻译"><a href="#案例二-破解百度翻译" class="headerlink" title="案例二: 破解百度翻译"></a>案例二: 破解百度翻译</h3><p>知识点:</p><ul><li>post请求(携带参数)</li><li>抓包工具使用 寻找ajax的<code>sug</code></li></ul><blockquote><p>ajax的工作原理就是通过XmlHttpRequest对象来向服务器发出异步请求，从服务器中获得数据，然后用Javascript来操作DOM从而更新局部页面。</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220513203151580.png"></p><p><strong>实现</strong>:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests <span class="token keyword">as</span> re<span class="token keyword">import</span> json<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 进行UA伪装</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0(Windows NT 10.0; Win64; x64) AppleWebKit/537.36(KHTML, likeGecko)Chrome/'</span>                      <span class="token string">'101.0.4951.54 Safari/537.36 Edg/101.0.1210.39'</span>    <span class="token punctuation">}</span>    word <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你要查询的单词: "</span><span class="token punctuation">)</span>    post_url <span class="token operator">=</span> <span class="token string">'https://fanyi.baidu.com/sug'</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'kw'</span><span class="token punctuation">:</span> word    <span class="token punctuation">}</span>    response <span class="token operator">=</span> re<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>post_url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 服务器响应数据</span>    dic_obj <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    fp <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'./word.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>dic_obj<span class="token punctuation">,</span> fp<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"查询完毕!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="案例三-爬取哔哩哔哩我的追番数据"><a href="#案例三-爬取哔哩哔哩我的追番数据" class="headerlink" title="案例三: 爬取哔哩哔哩我的追番数据"></a>案例三: 爬取哔哩哔哩我的追番数据</h3><p>实现:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests <span class="token keyword">as</span> re<span class="token keyword">import</span> json<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 进行UA伪装</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0(Windows NT 10.0; Win64; x64) AppleWebKit/537.36(KHTML, likeGecko)Chrome/'</span>                      <span class="token string">'101.0.4951.54 Safari/537.36 Edg/101.0.1210.39'</span>    <span class="token punctuation">}</span>    url <span class="token operator">=</span> <span class="token string">'https://api.bilibili.com/x/space/bangumi/follow/list'</span>    params <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>        <span class="token string">'follow_status'</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span>        <span class="token string">'pn'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>        <span class="token string">'ps'</span><span class="token punctuation">:</span> <span class="token string">'15'</span><span class="token punctuation">,</span>        <span class="token string">'vmid'</span><span class="token punctuation">:</span> <span class="token string">'30024259'</span><span class="token punctuation">,</span>        <span class="token string">'ts'</span><span class="token punctuation">:</span> <span class="token string">'1652447014110'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> re<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>params<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    dic_obj <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    fp <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'./bangumi.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>dic_obj<span class="token punctuation">,</span> fp<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取成功!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;爬虫学习（一）&quot;&gt;&lt;a href=&quot;#爬虫学习（一）&quot; class=&quot;headerlink&quot; title=&quot;爬虫学习（一）&quot;&gt;&lt;/a&gt;爬虫学习（一）&lt;/h1&gt;&lt;h2 id=&quot;一-什么是爬虫&quot;&gt;&lt;a href=&quot;#一-什么是爬虫&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="爬虫笔记" scheme="https://roranrui.cn/categories/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Python" scheme="https://roranrui.cn/tags/Python/"/>
    
    <category term="爬虫" scheme="https://roranrui.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>第十八天_搜索与回溯算法（中等）</title>
    <link href="https://roranrui.cn/posts/6d291dcd/"/>
    <id>https://roranrui.cn/posts/6d291dcd/</id>
    <published>2022-05-11T00:27:49.000Z</published>
    <updated>2022-05-11T01:24:30.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十八天-搜索与回溯算法（中等）"><a href="#第十八天-搜索与回溯算法（中等）" class="headerlink" title="第十八天_搜索与回溯算法（中等）"></a>第十八天_搜索与回溯算法（中等）</h1><blockquote><p>  刷题日程指引: <a href="https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/px2ds5/">行百里者半九十。坚持一个月刷完，一起加油！</a></p></blockquote><h2 id="一-知识学习"><a href="#一-知识学习" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1080593.png" alt="この町はたくさんの思い出が作った"></p><h2 id="二-题目练习"><a href="#二-题目练习" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-二叉树的深度"><a href="#1-二叉树的深度" class="headerlink" title="1. 二叉树的深度"></a>1. 二叉树的深度</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511083225547.png"></p><p><strong>解题思路</strong>:</p><p>遍历树的所有结点</p><p>1.<strong>后序遍历(dfs)</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1603024336-lXVRDd-Picture1.png"></p><blockquote><p>   <strong>关键点：</strong> 此树的深度和其左（右）子树的深度之间的关系。显然，<strong>此树的深度</strong> 等于 <strong>左子树的深度</strong> 与 <strong>右子树的深度</strong> 中的 <strong>最大值</strong> +1+1 。</p></blockquote><p>用递归实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511083913601.png"></p><p>2.<strong>层序遍历（bfs）</strong></p><ul><li>树的层序遍历 / 广度优先搜索往往利用 <strong>队列</strong> 实现。</li><li><strong>关键点：</strong> 每遍历一层，则计数器 +1+1 ，直到遍历完成，则可得到树的深度。</li></ul><p>实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> qu<span class="token punctuation">;</span>        qu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>qu<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> qu<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                TreeNode<span class="token operator">*</span> node <span class="token operator">=</span> qu<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span> qu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span> qu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                qu<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>           <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511085242263.png"></p><hr><h3 id="2-平衡二叉树"><a href="#2-平衡二叉树" class="headerlink" title="2.平衡二叉树"></a>2.平衡二叉树</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511085349239.png"></p><p><strong>解题思路：</strong></p><p>1.从顶至底</p><p>此方法容易想到，但会产生大量重复计算，时间复杂度较高。</p><p>思路是构造一个获取当前子树的深度的函数 depth(root) ，通过比较某子树的左右子树的深度差 abs(depth(root.left) - depth(root.right)) &lt;= 1 是否成立，来判断某子树是否是二叉平衡树。若所有子树都平衡，则此树平衡。</p><p>实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">depth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511091313594.png"></p><p>2.从底至顶（后序遍历+剪枝）</p><blockquote><p>  此方法为本题的最优解法，但剪枝的方法不易第一时间想到。</p></blockquote><p>思路是对二叉树做后序遍历，从底至顶返回子树深度，若判定某子树不是平衡树则 “剪枝” ，直接向上返回。</p><p>实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">recur</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">abs</span><span class="token punctuation">(</span>left <span class="token operator">-</span> right<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511092207143.png"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第十八天-搜索与回溯算法（中等）&quot;&gt;&lt;a href=&quot;#第十八天-搜索与回溯算法（中等）&quot; class=&quot;headerlink&quot; title=&quot;第十八天_搜索与回溯算法（中等）&quot;&gt;&lt;/a&gt;第十八天_搜索与回溯算法（中等）&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; </summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://roranrui.cn/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
    <category term="算法" scheme="https://roranrui.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>51单片机学习（三）</title>
    <link href="https://roranrui.cn/posts/3898cff1/"/>
    <id>https://roranrui.cn/posts/3898cff1/</id>
    <published>2022-05-10T14:25:24.000Z</published>
    <updated>2022-05-11T14:14:22.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="51单片机学习笔记-三"><a href="#51单片机学习笔记-三" class="headerlink" title="51单片机学习笔记(三)"></a>51单片机学习笔记(三)</h1><h2 id="一-定时器"><a href="#一-定时器" class="headerlink" title="一. 定时器"></a>一. 定时器</h2><p>定时器在单片机内部就像一个小闹钟一样，根据时钟的输出信号，每隔“一秒”，计数单元的数值就增加一，当计数单元数值增加到“设定的闹钟提醒时间”时，计数单元就会向中断系统发出中断申请，产生“响铃提醒”，使程序跳转到中断服务函数中执行。<br>STC89C52的T0和T1均有四种工作模式：</p><ul><li>模式0：13位定时器/计数器</li><li><strong>模式1：16位定时器/计数器（常用）</strong></li><li>模式2：8位自动重装模式</li><li>模式3：两个8位计数器</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511220105004.png" alt="工作模式1"></p><p><strong>工作模式一的说明</strong>:</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511215651375.png"></p><h3 id="中断程序"><a href="#中断程序" class="headerlink" title="中断程序"></a>中断程序</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/56edfa741e154946956b5cd523603496.png"></p><h3 id="STC89C52中断资源"><a href="#STC89C52中断资源" class="headerlink" title="STC89C52中断资源"></a>STC89C52中断资源</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511215150791.png"></p><h3 id="中断配置"><a href="#中断配置" class="headerlink" title="中断配置"></a>中断配置</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511220049661.png"></p><h3 id="定时器相关寄存器"><a href="#定时器相关寄存器" class="headerlink" title="定时器相关寄存器"></a>定时器相关寄存器</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511215429445.png" alt="TMOD"></p><h3 id="定时器配置"><a href="#定时器配置" class="headerlink" title="定时器配置"></a>定时器配置</h3><p>使用<code>stc-isp</code>中的定时器计算器进行配置</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511221245336.png"></p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p><strong>定时器时钟</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"lcd1602.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"timer0.h"</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Sec<span class="token punctuation">,</span> Min<span class="token punctuation">,</span> Hour<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Timer0Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Clock:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"  :  :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> Sec<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> Min<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Hour<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Timer0_Routine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">1</span>  <span class="token comment" spellcheck="true">// 中断 先执行这部分在执行主程序</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> T0Count<span class="token punctuation">;</span>    TL0 <span class="token operator">=</span> <span class="token number">0x18</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Initial timer value</span>    TH0 <span class="token operator">=</span> <span class="token number">0xFC</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Initial timer value</span>    T0Count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T0Count <span class="token operator">>=</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 1s 执行一次</span>    <span class="token punctuation">{</span>        T0Count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        Sec<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Sec <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Sec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            Min<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Min <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                Hour<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Hour <span class="token operator">>=</span> <span class="token number">24</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Hour <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>按键控制流水灯</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Timer0.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Key.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;INTRINS.H></span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> KeyNum<span class="token punctuation">,</span> LEDMode<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    P2 <span class="token operator">=</span> <span class="token number">0xFE</span><span class="token punctuation">;</span>    <span class="token function">Timer0Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        KeyNum <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>KeyNum<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>KeyNum <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                LEDMode<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>LEDMode <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span>LEDMode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Timer0_Routine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">1</span>  <span class="token comment" spellcheck="true">// 中断 先执行这部分在执行主程序</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> T0Count<span class="token punctuation">;</span>    TL0 <span class="token operator">=</span> <span class="token number">0x18</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Initial timer value</span>    TH0 <span class="token operator">=</span> <span class="token number">0xFC</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Initial timer value</span>    T0Count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T0Count <span class="token operator">>=</span> <span class="token number">500</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 1s 执行一次</span>    <span class="token punctuation">{</span>        T0Count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>LEDMode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            P2 <span class="token operator">=</span> <span class="token function">_crol_</span><span class="token punctuation">(</span>P2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>LEDMode <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            P2 <span class="token operator">=</span> <span class="token function">_cror_</span><span class="token punctuation">(</span>P2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-串口通信"><a href="#二-串口通信" class="headerlink" title="二. 串口通信"></a>二. 串口通信</h2><h3 id="串口介绍"><a href="#串口介绍" class="headerlink" title="串口介绍"></a>串口介绍</h3><blockquote><p>  串口是一种应用十分广泛的通讯接口，串口成本低、容易使用、通信线路简单，可实现两个设备的互相通信。<br>  单片机的串口可以使单片机与单片机、单片机与电脑、单片机与各式各样的模块互相通信，极大的扩展了单片机的应用范围，增强了单片机系统的硬件实力。51单片机内部自带UART（Universal Asynchronous Receiver Transmitter，通用异步收发器），可实现单片机的串口通信。</p></blockquote><h3 id="硬件电路"><a href="#硬件电路" class="headerlink" title="硬件电路"></a>硬件电路</h3><ul><li>简单双向串口通信有两根通信线（发送端TXD和接收端RXD）</li><li>TXD与RXD要交叉连接 （一个发送端、一个接收端）</li><li>当只需单向的数据传输时，可以直接一根通信线</li><li>当电平标准不一致时，需要加电平转换芯片</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220510222923452.png"></p><h3 id="电平标准"><a href="#电平标准" class="headerlink" title="电平标准"></a>电平标准</h3><p>电平标准是数据1和数据0的表达方式，是传输线缆中人为规定的电压与数据的对应关系，串口常用的电平标准有如下三种：</p><ul><li>TTL电平：+5V表示1，0V表示0</li><li>RS232电平：-3-15V表示1，+3+15V表示0</li><li>RS485电平：两线压差+2+6V表示1，-2-6V表示0（差分信号）</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220510223011003.png"></p><h3 id="常见通信接口比较"><a href="#常见通信接口比较" class="headerlink" title="常见通信接口比较"></a>常见通信接口比较</h3><p><strong>相关术语</strong></p><ul><li>全双工：通信双方可以在同一时刻互相传输数据</li><li>半双工：通信双方可以互相传输数据，但必须分时复用一根数据线</li><li>单工：通信只能有一方发送到另一方，不能反向传输</li><li>异步：通信双方各自约定通信速率</li><li>同步：通信双方靠一根时钟线来约定通信速率</li><li>总线：连接各个设备的数据传输线路（类似于一条马路，把路边各住户连接起来，使住户可以相互交流）</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511172706579.png"></p><h3 id="51单片机的UART"><a href="#51单片机的UART" class="headerlink" title="51单片机的UART"></a>51单片机的UART</h3><blockquote><p>  STC89C52有1个UART</p><ul><li>模式0：同步移位寄存器</li><li><strong>模式1：8位UART，波特率可变（常用）</strong></li><li><strong>模式2：9位UART，波特率固定</strong></li><li>模式3：9位UART，波特率可变</li></ul></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511173438310.png" alt="image-20220511173438310"></p><h3 id="串口参数及时序图-了解"><a href="#串口参数及时序图-了解" class="headerlink" title="串口参数及时序图(了解)"></a>串口参数及时序图(了解)</h3><ul><li>波特率：串口通信的速率（发送和接收各数据位的间隔时间）</li><li>检验位：用于数据验证</li><li>停止位：用于数据帧间隔</li></ul><blockquote><p>  校验方法: 奇偶校验 0,1校验</p><p>  以奇校验为例</p><p>  0000 0011 1(偶数补1)</p><p>  1110 0000 0(奇数补0)</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/94dae65dd76146a19042500b7ea3d156.png"></p><h3 id="串口模式图"><a href="#串口模式图" class="headerlink" title="串口模式图"></a>串口模式图</h3><blockquote><p>  SBUF：串口数据缓存寄存器，物理上是两个独立的寄存器，但占用相同的地址。写操作时，写入的是发送寄存器，读操作时，读出的是接收寄存器</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511175055139.png" alt="image-20220511175055139"></p><h3 id="串口相关寄存器"><a href="#串口相关寄存器" class="headerlink" title="串口相关寄存器"></a>串口相关寄存器</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511175416787.png" alt="image-20220511175416787"></p><blockquote><p>  51单片机使用: <strong>SCON SBUF</strong></p></blockquote><h3 id="串口和中断系统"><a href="#串口和中断系统" class="headerlink" title="串口和中断系统"></a>串口和中断系统</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/ff4a335bbdea469a8590f6b442c364e8.png"></p><h3 id="串口模式的配置"><a href="#串口模式的配置" class="headerlink" title="串口模式的配置"></a>串口模式的配置</h3><p>使用<code>stc-isp</code>中的串口助手进行配置</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511183039800.png"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511212103441.png"></p><blockquote><p>  文本模式: 以十六进制编码成ASCLL形式显示</p><p>  HEX模式: 以二进制/十六进制显示</p></blockquote><p><strong>SCON:</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511212819296.png"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511212832414.png"></p><p><strong>SBUF: 串口的数据都保存在此寄存器中, 数值为0~65535</strong></p><h3 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h3><p><strong>电脑向单片机发数据控制LED灯, 单片机向串口发数据</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"UART.h"</span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//串口初始化</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">UART_Routine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">4</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>RI<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果接收标志位为1，接收到了数据</span>    <span class="token punctuation">{</span>        P2<span class="token operator">=</span><span class="token operator">~</span>SBUF<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取数据，取反后输出到LED</span>        <span class="token function">UART_SendByte</span><span class="token punctuation">(</span>SBUF<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将受到的数据发回串口</span>        RI<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接收标志位清0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="附录-模块化编程"><a href="#附录-模块化编程" class="headerlink" title="附录: 模块化编程"></a>附录: 模块化编程</h2><h3 id="定时器部分"><a href="#定时器部分" class="headerlink" title="定时器部分"></a>定时器部分</h3><p><code>Timer0.h</code></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifdef</span> __TIMER0_H__</span><span class="token macro property">#<span class="token directive keyword">define</span> __TIMER0_H__</span><span class="token keyword">void</span> <span class="token function">Timer0Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Timer0.c</code></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token keyword">void</span> <span class="token function">Timer0Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    TMOD <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0xF0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置定时器模式</span>    TMOD <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置定时器模式</span>    TL0 <span class="token operator">=</span> <span class="token number">0x18</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置定时初值</span>    TH0 <span class="token operator">=</span> <span class="token number">0xFC</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置定时初值</span>    TF0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清除TF0标志</span>    TR0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定时器0开始计时</span>    ET0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 中断初值</span>    EA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 中断初值</span>    PT0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//void Timer0_Routine() interrupt 1  // 中断 先执行这部分在执行主程序</span><span class="token comment" spellcheck="true">//{</span><span class="token comment" spellcheck="true">//static unsigned int T0Count;</span><span class="token comment" spellcheck="true">//TL0 = 0x18;//Initial timer value</span><span class="token comment" spellcheck="true">//TH0 = 0xFC;//Initial timer value</span><span class="token comment" spellcheck="true">//T0Count++;</span><span class="token comment" spellcheck="true">//if (T0Count >= 1000)  // 1s 执行一次</span><span class="token comment" spellcheck="true">//{</span><span class="token comment" spellcheck="true">//T0Count = 0;</span><span class="token comment" spellcheck="true">//P2_0 = ~P2_0;</span><span class="token comment" spellcheck="true">//}</span><span class="token comment" spellcheck="true">//}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="串口部分"><a href="#串口部分" class="headerlink" title="串口部分"></a>串口部分</h3><p><code>UART.h</code></p><pre><code>#ifndef __UART_H__#define __UART_H__void UART_Init();void UART_SendByte(unsigned char Byte);#endif</code></pre><p><code>UART.c</code></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token comment" spellcheck="true">/**  * @brief  串口初始化，4800bps@12.000MHz  * @param  无  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SCON<span class="token operator">=</span><span class="token number">0x50</span><span class="token punctuation">;</span>    PCON <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x80</span><span class="token punctuation">;</span>    TMOD <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0x0F</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置定时器模式</span>    TMOD <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置定时器模式</span>    TL1 <span class="token operator">=</span> <span class="token number">0xF3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设定定时初值</span>    TH1 <span class="token operator">=</span> <span class="token number">0xF3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设定定时器重装值</span>    ET1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//禁止定时器1中断</span>    TR1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//启动定时器1</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  串口发送一个字节数据  * @param  Byte 要发送的一个字节数据  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">UART_SendByte</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Byte<span class="token punctuation">)</span><span class="token punctuation">{</span>    SBUF<span class="token operator">=</span>Byte<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>TI<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TI<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token comment" spellcheck="true">/**  * @brief  串口初始化，4800bps@12.000MHz  * @param  无  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SCON<span class="token operator">=</span><span class="token number">0x50</span><span class="token punctuation">;</span>    PCON <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x80</span><span class="token punctuation">;</span>    TMOD <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0x0F</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置定时器模式</span>    TMOD <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置定时器模式</span>    TL1 <span class="token operator">=</span> <span class="token number">0xF3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设定定时初值</span>    TH1 <span class="token operator">=</span> <span class="token number">0xF3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设定定时器重装值</span>    ET1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//禁止定时器1中断</span>    TR1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//启动定时器1</span>    EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    ES<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  串口发送一个字节数据  * @param  Byte 要发送的一个字节数据  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">UART_SendByte</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Byte<span class="token punctuation">)</span><span class="token punctuation">{</span>    SBUF<span class="token operator">=</span>Byte<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>TI<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TI<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*串口中断函数模板void UART_Routine() interrupt 4{    if(RI==1)    {                RI=0;    }}*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;51单片机学习笔记-三&quot;&gt;&lt;a href=&quot;#51单片机学习笔记-三&quot; class=&quot;headerlink&quot; title=&quot;51单片机学习笔记(三)&quot;&gt;&lt;/a&gt;51单片机学习笔记(三)&lt;/h1&gt;&lt;h2 id=&quot;一-定时器&quot;&gt;&lt;a href=&quot;#一-定时器&quot; cla</summary>
      
    
    
    
    <category term="嵌入式开发" scheme="https://roranrui.cn/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="51单片机" scheme="https://roranrui.cn/tags/51%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    <category term="Hardware" scheme="https://roranrui.cn/tags/Hardware/"/>
    
  </entry>
  
  <entry>
    <title>C++11_新特性</title>
    <link href="https://roranrui.cn/posts/7dec669e/"/>
    <id>https://roranrui.cn/posts/7dec669e/</id>
    <published>2022-05-10T07:41:32.000Z</published>
    <updated>2022-05-11T01:24:30.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-11新特性学习笔记"><a href="#C-11新特性学习笔记" class="headerlink" title="C++11新特性学习笔记"></a>C++11新特性学习笔记</h1><h2 id="一-枚举"><a href="#一-枚举" class="headerlink" title="一. 枚举"></a>一. 枚举</h2><blockquote><p>  C/C++语言可以使用#define和const创建符号常量，而使用enum工具不仅能够创建符号常量，还能定义新的数据类型，但是必须按照一定的规则进行.</p></blockquote><p>枚举类型的定义格式为：<code>enum &lt;类型名&gt; {&lt;枚举常量表&gt;};</code></p><h3 id="对枚举型的变量赋值"><a href="#对枚举型的变量赋值" class="headerlink" title="对枚举型的变量赋值"></a>对枚举型的变量赋值</h3><p>可以使用赋值运算符来赋值:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">enum</span> bits <span class="token punctuation">{</span>one <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> two <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> seven <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> eight <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="枚举的取值范围"><a href="#枚举的取值范围" class="headerlink" title="枚举的取值范围"></a>枚举的取值范围</h3><p><strong>枚举取值范围</strong>的概念：枚举的上限是 大于最大<strong>枚举量</strong>的 最小的2的幂，减去1；</p><p>枚举的下限有两种情况：</p><ol><li><strong>枚举量</strong>的最小值不小于0，则枚举下限取0；</li><li><strong>枚举量</strong>的最小值小于0，则枚举下限是 小于最小<strong>枚举量</strong>的 最大的2的幂，加上1。</li></ol><p><code>enum enumType1 { First=-5，Second=14，Third=10 };</code>则枚举的上限是16-1=15（16大于最大<strong>枚举量</strong>14，且为2的幂）；  枚举的下限是-8+1=-7（-8小于最小<strong>枚举量</strong>-5，且为2的幂）；</p><h2 id="二-typdef"><a href="#二-typdef" class="headerlink" title="二. typdef"></a>二. typdef</h2><blockquote><p>  typdef与define都是替一个对象取一个别名，以此来增强程序的可读性，但是它们在使用和作用上有几点不同：<br>  （1）原理不同<br>       #define是c语言中定义的语法，它是预处理指令，在预处理时进行简单而机械的字符串替换，不做正确性检查，不管含义是否正确照样带入，只有在编译已被展开的源程序时才会发现可能的错误并报错。<br>       typdef是关键字，它在编译时处理，所以typdef有类型检查的功能它在自己的作用域内给一个已经存在的类型一个别名，但是不能在一个函数定义里面使用标识符typdef</p><p>  （2） 功能不同<br>       typdef用来定义类型的别名，这些类型不止包含内部类型（int、double、char等），还包括自定义类型（如struct），可以起到使类型易于记忆的功能。<br>       #define不只是可以为类型取别名，还可以定义常量、变量、编译开关等。<br>  （3）作用域不同<br>       #define没有作用域的限制，只要是之前预定义过的宏，在以后的程序中都可以使用，而typdef有自己的作用域。</p></blockquote><h3 id="用途一："><a href="#用途一：" class="headerlink" title="用途一："></a>用途一：</h3><p>定义一种类型的别名，而不只是简单的宏替换。可以用作同时声明指针型的多个对象。比如：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">char</span><span class="token operator">*</span> pa<span class="token punctuation">,</span> pb<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这多数不符合我们的意图，它只声明了一个指向字符变量的指针和一个字符变量；</span><span class="token comment" spellcheck="true">//以下则可行：</span><span class="token keyword">typedef</span> <span class="token keyword">char</span><span class="token operator">*</span> PCHAR<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 一般用大写</span>PCHAR pa<span class="token punctuation">,</span> pb<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可行，同时声明了两个指向字符变量的指针</span><span class="token keyword">char</span> <span class="token operator">*</span>pa<span class="token punctuation">,</span> <span class="token operator">*</span>pb<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//虽然也可行，但相对来说没有用typedef的形式直观，尤其在需要大量指针的地方，typedef的方式更省事。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用途二："><a href="#用途二：" class="headerlink" title="用途二："></a>用途二：</h3><p>为复杂的声明定义一个新的简单的别名。方法是：在原来的声明里逐步用别名替换一部分复杂声明，如此循环，把带变量名的部分留到最后替换，得到的就是原声明的最简化版。</p><p>原声明：</p><p><code>int *(*a[5])(int, char*);</code><br>变量名为a，直接用一个新别名pFun替换a就可以了：</p><p><code>typedef int *(*pFun)(int, char*);</code> </p><p>原声明的最简化版：<br><code>pFun a[5];</code></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-11新特性学习笔记&quot;&gt;&lt;a href=&quot;#C-11新特性学习笔记&quot; class=&quot;headerlink&quot; title=&quot;C++11新特性学习笔记&quot;&gt;&lt;/a&gt;C++11新特性学习笔记&lt;/h1&gt;&lt;h2 id=&quot;一-枚举&quot;&gt;&lt;a href=&quot;#一-枚举&quot; class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第十七天_排序(中等)</title>
    <link href="https://roranrui.cn/posts/2f8ddd78/"/>
    <id>https://roranrui.cn/posts/2f8ddd78/</id>
    <published>2022-05-10T05:01:15.000Z</published>
    <updated>2022-05-13T03:56:22.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十七天-排序-中等"><a href="#第十七天-排序-中等" class="headerlink" title="第十七天_排序(中等)"></a>第十七天_排序(中等)</h1><blockquote><p>  刷题日程指引: <a href="https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/px2ds5/">行百里者半九十。坚持一个月刷完，一起加油！</a></p></blockquote><h2 id="一-知识学习"><a href="#一-知识学习" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1133891.jpg" alt="また晴れだね"></p><h3 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h3><blockquote><p>  <strong>优先队列</strong>具有队列的所有特性，包括基本操作，只是在这基础上添加了内部的一个排序，它本质是一个堆实现的</p></blockquote><p>和队列基本操作相同:</p><ul><li>top 访问队头元素</li><li>empty 队列是否为空</li><li>size 返回队列内元素个数</li><li>push 插入元素到队尾 (并排序)</li><li>emplace 原地构造一个元素并插入队列</li><li>pop 弹出队头元素</li><li>swap 交换内容</li></ul><p>定义：<code>priority_queue&lt;Type, Container, Functional&gt;</code><br>Type 就是数据类型，Container 就是容器类型（Container必须是用数组实现的容器，比如vector,deque等等，但不能用 list。STL里面默认用的是vector），Functional 就是比较的方式，当需要用自定义的数据类型时才需要传入这三个参数，使用基本数据类型时，只需要传入数据类型，默认是<strong>大顶堆</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//升序队列大顶堆</span>priority_queue <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> q<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//降序队列小顶堆</span>priority_queue <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>less<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span>q<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-题目练习"><a href="#二-题目练习" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-最小的-k-个数"><a href="#1-最小的-k-个数" class="headerlink" title="1. 最小的 k 个数"></a>1. 最小的 k 个数</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220510130344094.png"></p><p><strong>解题思路:</strong></p><p>先排序在找对应个数的解即可</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">getLeastNumbers</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-数据流中的中位数"><a href="#2-数据流中的中位数" class="headerlink" title="2. 数据流中的中位数"></a>2. 数据流中的中位数</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220510132437080.png"></p><p><strong>解题思路：</strong><br>给定一长度为 N 的无序数组，其中位数的计算方法：首先对数组执行排序（使用O(NlogN) 时间），然后返回中间元素即可（使用 O(1)时间）。</p><p>针对本题，根据以上思路，可以将数据流保存在一个列表中，并在添加元素时 保持数组有序 。此方 法的时间复杂度为 O(N)，其中包括： 查找元素插入位置 O(log N)（二分查找）、向数组某位置插入元素 O(N)（插入位置之后的元素都需要向后移动一位）。</p><p>借助 堆 可进一步优化时间复杂度。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220510132536061.png"></p><p>随后，中位数可仅根据 A, B的堆顶元素计算得到。</p><p>实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MedianFinder</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/** initialize your data structure here. */</span>    <span class="token function">MedianFinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> A<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 小顶堆 保存较大的一半</span>    priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> less<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> B<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 大顶堆 保存较小的一半</span>    <span class="token keyword">void</span> <span class="token function">addNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            A<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            B<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            A<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            B<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            A<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            B<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">double</span> <span class="token function">findMedian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> A<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> B<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Your MedianFinder object will be instantiated and called as such: * MedianFinder* obj = new MedianFinder(); * obj->addNum(num); * double param_2 = obj->findMedian(); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第十七天-排序-中等&quot;&gt;&lt;a href=&quot;#第十七天-排序-中等&quot; class=&quot;headerlink&quot; title=&quot;第十七天_排序(中等)&quot;&gt;&lt;/a&gt;第十七天_排序(中等)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;  刷题日程指引: &lt;a href=&quot;http</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://roranrui.cn/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
    <category term="算法" scheme="https://roranrui.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>第十六天_排序(简单)</title>
    <link href="https://roranrui.cn/posts/e7c0007f/"/>
    <id>https://roranrui.cn/posts/e7c0007f/</id>
    <published>2022-05-09T04:49:08.000Z</published>
    <updated>2022-05-09T05:32:38.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十六天-排序-简单"><a href="#第十六天-排序-简单" class="headerlink" title="第十六天_排序(简单)"></a>第十六天_排序(简单)</h1><blockquote><p>  刷题日程指引: <a href="https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/px2ds5/">行百里者半九十。坚持一个月刷完，一起加油！</a></p></blockquote><h2 id="一-知识学习"><a href="#一-知识学习" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><p><strong>排序算法</strong><br>排序算法用作实现列表的排序，列表元素可以是整数，也可以是浮点数、字符串等其他数据类型。生活中有许多需要排序算法的场景，例如：</p><ul><li>整数排序： 对于一个整数数组，我们希望将所有数字从小到大排序；</li><li>字符串排序： 对于一个姓名列表，我们希望将所有单词按照字符先后排序；</li><li>自定义排序： 对于任意一个 已定义比较规则 的集合，我们希望将其按规则排序；</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1629483616-HHvvqY-Picture1.png"></p><p>同时，某些算法需要在排序算法的基础上使用（即在排序数组上运行），例如：</p><ul><li>二分查找： 根据数组已排序的特性，才能每轮确定排除两部分中的哪一部分；</li><li>双指针： 例如合并两个排序链表，根据已排序特性，才能通过双指针移动在线性时间内将其合并为一个排序链表。</li></ul><h2 id="二-题目练习"><a href="#二-题目练习" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-把数组排成最小的数"><a href="#1-把数组排成最小的数" class="headerlink" title="1. 把数组排成最小的数"></a>1. 把数组排成最小的数</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220509130020373.png"></p><p><strong>解题思路：</strong><br>此题求拼接起来的最小数字，本质上是一个排序问题。设数组 nums 中任意两数字的字符串为 xx 和 y ，则规定 排序判断规则 为：</p><ul><li>若拼接字符串 x + y &gt; y + x ，则 xx “大于” y ；</li><li>反之，若 x + y &lt; y + x ，则 xx “小于” y ；</li></ul><blockquote><p>  x “小于” y 代表：排序完成后，数组中 x 应在 y 左边；“大于” 则反之。</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/95e81dbccc44f26292d88c509afd68204a86b37d342f83d109fa7aa0cd4a6049-Picture1.png"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220509130834666.png"></p><p><strong>实现:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">minNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> str<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            str<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">to_string</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sort</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> string <span class="token operator">&amp;</span>s2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> s1 <span class="token operator">+</span> s2 <span class="token operator">&lt;</span> s2 <span class="token operator">+</span> s1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string res<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res <span class="token operator">+</span><span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220509131444790.png"></p><hr><h3 id="2-扑克牌中的顺子"><a href="#2-扑克牌中的顺子" class="headerlink" title="2. 扑克牌中的顺子"></a>2. 扑克牌中的顺子</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220509130326115.png"></p><p><strong>解题思路：</strong><br>根据题意，此 5 张牌是顺子的 充分条件 如下：</p><p>除大小王外，所有牌 无重复 ；<br>设此 55 张牌中最大的牌为 max ，最小的牌为 min （大小王除外），则需满足：<br>                                <code>max - min &lt; 5</code></p><p>​<code>max − min &lt; 5</code></p><p>因此可将问题转化为：此 5 张牌是否满足以上两个条件？</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1599885716-MGMODX-Picture1.png"></p><p>1.排序遍历</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220509130859184.png"></p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isStraight</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> joker <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> joker<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>joker<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220509131420819.png"></p><p>2.set遍历</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220509132334415.png"></p><p><strong>实现:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isStraight</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> repeat<span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>repeat<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">!=</span> repeat<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            repeat<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a <span class="token operator">-</span> b <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220509132354690.png"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第十六天-排序-简单&quot;&gt;&lt;a href=&quot;#第十六天-排序-简单&quot; class=&quot;headerlink&quot; title=&quot;第十六天_排序(简单)&quot;&gt;&lt;/a&gt;第十六天_排序(简单)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;  刷题日程指引: &lt;a href=&quot;http</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://roranrui.cn/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
    <category term="算法" scheme="https://roranrui.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>C++-std::move总结</title>
    <link href="https://roranrui.cn/posts/62884e14/"/>
    <id>https://roranrui.cn/posts/62884e14/</id>
    <published>2022-05-08T07:06:43.000Z</published>
    <updated>2022-05-08T07:20:37.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-std-move总结"><a href="#C-std-move总结" class="headerlink" title="C++-std::move总结"></a>C++-std::move总结</h1><h2 id="一-移动语义"><a href="#一-移动语义" class="headerlink" title="一. 移动语义"></a>一. 移动语义</h2><p>移动语义可以使得编译器使用不那么昂贵的移动操作，来替换昂过的复制操作。同拷贝构造函数、拷贝赋值运算符赋予人们复制意义的能力一样，移动构造函数、移动赋值运算符也赋予人们移动语义的能力。更通俗的说：移动语义是通过移动构造函数或者移动赋值运算符实现的</p><p>举个例子，对于C++标准库提供的<code>std::shared_ptr&lt;&gt;</code>智能指针，当对其进行复制操作时，需要增加其引用计数，而引用计数是个原子类型，因此增加引用计数是个耗时操作；而当对其进行移动操作的时候，则引用计数会保持不变，也即无需进行引用计数的操作。</p><h2 id="二-左值引用和右值引用"><a href="#二-左值引用和右值引用" class="headerlink" title="二. 左值引用和右值引用"></a>二. 左值引用和右值引用</h2><p>已知左值引用的形式为 <code>T&amp; t</code></p><p>右值引用是在左值引用的基础上多加一个<code>&amp;</code>，形式变为 <code>T&amp;&amp; t</code></p><p>这种通过 <code>&amp;</code> 的个数区分左值引用和右值引用的方法，在大多数的普通函数中没有问题，但是放到模板参数或者 <code>auto</code> 关键字之后的位置就不太灵了，因为这些地方会推导实际的类型，正是有了参数推导，才使得模板中出现了“万能引用”的说法，也就是下面这样：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> year <span class="token operator">=</span> <span class="token number">2020</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  函数 <code>func</code> 即能接受变量 <code>year</code> 这样的左值作为参数，也能接受 <code>2020</code> 这样的常数作为右值，简直太完美。那么这里是怎样推导的呢？这就要请出一个引用的“折叠”规则了，描述如下：</p><p>  A&amp; &amp; 折叠成 A&amp;<br>  A&amp; &amp;&amp; 折叠成 A&amp;<br>  A&amp;&amp; &amp; 折叠成 A&amp;<br>  A&amp;&amp; &amp;&amp; 折叠成 A&amp;&amp;</p></blockquote><h2 id="三-std-move使用与作用"><a href="#三-std-move使用与作用" class="headerlink" title="三. std::move使用与作用"></a>三. std::move使用与作用</h2><p>把左值转化成右值的转化函数， <code>std::move</code> 函数的实现</p><pre class="line-numbers language-cpp"><code class="language-cpp">  <span class="token comment" spellcheck="true">/**   *  @brief  Convert a value to an rvalue.   *  @param  __t  A thing of arbitrary type.   *  @return The parameter cast to an rvalue-reference to allow moving it.  */</span>  <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> _Tp<span class="token operator">></span>    <span class="token keyword">constexpr</span> <span class="token keyword">typename</span> std<span class="token operator">::</span>remove_reference<span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token operator">::</span>type<span class="token operator">&amp;&amp;</span>    <span class="token function">move</span><span class="token punctuation">(</span>_Tp<span class="token operator">&amp;&amp;</span> __t<span class="token punctuation">)</span> <span class="token keyword">noexcept</span>    <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> std<span class="token operator">::</span>remove_reference<span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token operator">::</span>type<span class="token operator">&amp;&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>__t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>std::move 的内部只做了一个强制类型转换，除此之外啥也没干，其实就是对传入的参数重新解释了一下，并没有实质性的动作。</p><p><strong>作用</strong>:</p><p>那么为什么要使用 std::move 这个名字呢？这个名字更多的是起到提醒的作用，告诉使用者这里可能进行了到右值的转化，相关的对象后续可能发生移动，“被掏空”了，如果你继续使用这个对象，行为是未定义的，后果自负。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-std-move总结&quot;&gt;&lt;a href=&quot;#C-std-move总结&quot; class=&quot;headerlink&quot; title=&quot;C++-std::move总结&quot;&gt;&lt;/a&gt;C++-std::move总结&lt;/h1&gt;&lt;h2 id=&quot;一-移动语义&quot;&gt;&lt;a href=&quot;#一</summary>
      
    
    
    
    <category term="C++学习" scheme="https://roranrui.cn/categories/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++-Lambda表达式</title>
    <link href="https://roranrui.cn/posts/7d872b64/"/>
    <id>https://roranrui.cn/posts/7d872b64/</id>
    <published>2022-05-08T05:51:44.000Z</published>
    <updated>2022-05-08T06:45:36.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-Lambda表达式"><a href="#C-Lambda表达式" class="headerlink" title="C++ Lambda表达式"></a>C++ Lambda表达式</h1><blockquote><p>   Lambda表达式是现代C++在C ++ 11和更高版本中的一个新的语法糖 ，在C++11、C++14、C++17和C++20中Lambda表达的内容还在不断更新。 lambda表达式（也称为lambda函数）是在调用或作为函数参数传递的位置处定义匿名函数对象的便捷方法。通常，lambda用于封装传递给算法或异步方法的几行代码 。本文主要介绍Lambda的工作原理以及使用方法。</p></blockquote><h2 id="一-Lambda表达式定义"><a href="#一-Lambda表达式定义" class="headerlink" title="一. Lambda表达式定义"></a>一. Lambda表达式定义</h2><p> ISO C ++标准官网展示了一个简单的lambda 表示式实例:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">void</span> <span class="token function">abssort</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span><span class="token function">sort</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">+</span> n<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// Lambda expression begins</span>        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;</span> std<span class="token operator">::</span><span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// end of lambda expression</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三个参数传递的是排序规则, 直接将排序函数的实现写在应该传递函数的位置，省去了定义排序函数的过程，对于这种不需要复用，且短小的函数，直接传递函数体可以增加代码的可读性。</p><h3 id="语法定义"><a href="#语法定义" class="headerlink" title="语法定义"></a>语法定义</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/f86a9e30f7474aff10be27e4b51c6f64.png"></p><ol><li><strong>捕获列表</strong>。在C ++规范中也称为Lambda导入器， 捕获列表总是出现在Lambda函数的开始处。实际上，[]是Lambda引出符。编译器根据该引出符判断接下来的代码是否是Lambda函数，捕获列表能够捕捉上下文中的变量以供Lambda函数使用。</li><li>参数列表。与普通函数的参数列表一致。如果不需要参数传递，则可以连同括号“()”一起省略。</li><li><strong>可变规格</strong><em>。mutable修饰符， 默认情况下Lambda函数总是一个const函数，mutable可以取消其常量性。在使用该修饰符时，参数列表不可省略（即使参数为空）。</em></li><li><strong>异常说明</strong>。用于Lamdba表达式内部函数抛出异常。</li><li><strong>返回类型</strong>。 追踪返回类型形式声明函数的返回类型。我们可以在不需要返回值的时候也可以连同符号”-&gt;”一起省略。此外，在返回类型明确的情况下，也可以省略该部分，让编译器对返回类型进行推导。</li><li><strong>lambda函数体</strong>。内容与普通函数一样，不过除了可以使用参数之外，还可以使用所有捕获的变量。</li></ol><h4 id="捕获列表"><a href="#捕获列表" class="headerlink" title="捕获列表"></a>捕获列表</h4><ul><li>[]表示不捕获任何变量</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">auto</span> function <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello World!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>[var]表示值传递方式捕获变量var</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">auto</span> function <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">{</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>[=]表示值传递方式捕获所有父作用域的变量（包括this）</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">auto</span> function <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">{</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"index: "</span><span class="token operator">&lt;&lt;</span> index <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span>                 <span class="token operator">&lt;&lt;</span> <span class="token string">"num: "</span><span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>[&amp;var]表示引用传递捕捉变量var</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">auto</span> function <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>num<span class="token punctuation">]</span><span class="token punctuation">{</span>        num <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"num: "</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>[&amp;]表示引用传递方式捕捉所有父作用域的变量（包括this）</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">auto</span> function <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">{</span>        num <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        index <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"index: "</span><span class="token operator">&lt;&lt;</span> index <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span>             <span class="token operator">&lt;&lt;</span> <span class="token string">"num: "</span><span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>[this]表示值传递方式捕捉当前的this指针</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">Lambda</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">auto</span> function <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">{</span>             <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Lambda demo<span class="token punctuation">;</span>    demo<span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了单独使用外, 也可一起组合使用, 如:</p><ul><li><p>[=,&amp;a,&amp;b]表示以引用传递的方式捕捉变量a和b，以值传递方式捕捉其它所有变量。</p></li><li><p>[&amp;,a,this]表示以值传递的方式捕捉变量a和this，引用传递方式捕捉其它所有变量。</p></li></ul><blockquote><p>  不过值得注意的是，捕捉列表不允许变量重复传递。下面一些例子就是典型的重复，会导致编译时期的错误。例如：</p><ul><li>[=,a]这里已经以值传递方式捕捉了所有变量，但是重复捕捉a了，会报错的;</li><li>[&amp;,&amp;this]这里&amp;已经以引用传递方式捕捉了所有变量，再捕捉this也是一种重复。</li></ul></blockquote><h4 id="参数列表"><a href="#参数列表" class="headerlink" title="参数列表"></a>参数列表</h4><blockquote><p>  除了捕获列表之外，lambda还可以接受输入参数。参数列表是可选的，并且在大多数方面类似于函数的参数列表。</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">auto</span> function <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> first<span class="token punctuation">,</span> <span class="token keyword">int</span> second<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> first <span class="token operator">+</span> second<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">function</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="异常说明"><a href="#异常说明" class="headerlink" title="异常说明"></a>异常说明</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// C4297 expected </span><span class="token punctuation">{</span>      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="返回类型"><a href="#返回类型" class="headerlink" title="返回类型"></a>返回类型</h4><p>同函数, 若无return语句, 则编译器返回推导类型为void</p><h4 id="函数体"><a href="#函数体" class="headerlink" title="函数体"></a>函数体</h4><p>Lambda表达式的lambda主体（标准语法中的<em>复合语句</em>）可以包含普通方法或函数的主体可以包含的任何内容。</p><h2 id="二-Lambda工作原理"><a href="#二-Lambda工作原理" class="headerlink" title="二. Lambda工作原理"></a>二. Lambda工作原理</h2><blockquote><p>  编译器会把一个lambda表达式生成一个匿名类的匿名对象，并在类中重载函数调用运算符,实现了一个operator()方法。</p><p>  <strong>仿函数与Lamdba表达式的作用是一致的</strong></p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">auto</span> print <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello World!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>等价于</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">print_class</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello World！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用构造的类创建对象，print此时就是一个函数对象</span><span class="token keyword">auto</span> print <span class="token operator">=</span> <span class="token function">print_class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三-一些简单案例"><a href="#三-一些简单案例" class="headerlink" title="三. 一些简单案例"></a>三. 一些简单案例</h3><p><strong>遍历算法</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">myPrint2</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// 顺序插入数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// 逆序输出数据</span>    <span class="token comment" spellcheck="true">/// 第一种</span><span class="token comment" spellcheck="true">//    for (auto it = v.size() - 1; it > 0; it++)</span><span class="token comment" spellcheck="true">//    {</span><span class="token comment" spellcheck="true">//        cout &lt;&lt; it &lt;&lt; endl;</span><span class="token comment" spellcheck="true">//    }</span>    <span class="token comment" spellcheck="true">/// 第二种</span><span class="token comment" spellcheck="true">//    for_each(v.begin(), v.end(), myPrint);</span>    <span class="token comment" spellcheck="true">/// 第三种</span><span class="token comment" spellcheck="true">//    for_each(v.begin(), v.end(), myPrint2());</span>    <span class="token comment" spellcheck="true">///第四种</span><span class="token comment" spellcheck="true">//    for_each(v.begin(), v.end(), [](int x){cout &lt;&lt; x &lt;&lt; endl;});</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>线程创建</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// vector 容器存储线程</span>    vector<span class="token operator">&lt;</span>thread<span class="token operator">></span> workers<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        workers<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">thread</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"thread function\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"main thread\n"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过 for_each 循环每一个线程</span>    <span class="token comment" spellcheck="true">// 第三个参数赋值一个task任务</span>    <span class="token comment" spellcheck="true">// 符号'[]'会告诉编译器我们正在用一个匿名函数</span>    <span class="token comment" spellcheck="true">// lambda函数将它的参数作为线程的引用t</span>    <span class="token comment" spellcheck="true">// 然后一个一个的join</span>    <span class="token function">for_each</span><span class="token punctuation">(</span>workers<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> workers<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>thread <span class="token operator">&amp;</span>t<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-Lambda表达式&quot;&gt;&lt;a href=&quot;#C-Lambda表达式&quot; class=&quot;headerlink&quot; title=&quot;C++ Lambda表达式&quot;&gt;&lt;/a&gt;C++ Lambda表达式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;   Lambda表达式是现代C+</summary>
      
    
    
    
    <category term="C++学习" scheme="https://roranrui.cn/categories/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>第十五天_搜索与回溯算法(中等)</title>
    <link href="https://roranrui.cn/posts/7ad381b5/"/>
    <id>https://roranrui.cn/posts/7ad381b5/</id>
    <published>2022-05-08T03:59:01.000Z</published>
    <updated>2022-05-08T05:17:44.263Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十五天-搜索与回溯算法-中等"><a href="#第十五天-搜索与回溯算法-中等" class="headerlink" title="第十五天_搜索与回溯算法(中等)"></a>第十五天_搜索与回溯算法(中等)</h1><blockquote><p>  刷题日程指引: <a href="https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/px2ds5/">行百里者半九十。坚持一个月刷完，一起加油！</a></p></blockquote><h2 id="一-知识学习"><a href="#一-知识学习" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><p>二叉搜索树（BST，Binary Search Tree），也称<a href="https://so.csdn.net/so/search?q=%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91&amp;spm=1001.2101.3001.7020">二叉排序树</a>或二叉查找树。</p><blockquote><p>  二叉搜索树：一棵二叉树，可以为空；如果不为空，满足以下性质： </p><ol><li>非空<strong>左子树</strong>的所有键值<strong>小于</strong>其根结点的键值。</li><li>非空<strong>右子树</strong>的所有键值<strong>大于</strong>其根结点的键值。</li><li>左、右子树都是二叉搜索树。</li></ol></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/20200904165827405.png"></p><p>上图值为10的结点的右子树为7，比10小，不满足条件2，所以这棵树不是二叉搜索树。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/20200904165842348.png"></p><p>上图各个结点都满足条件，所以这棵树是二叉搜索树。</p><h2 id="二-题目练习"><a href="#二-题目练习" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-二叉树中和为某一值的路径"><a href="#1-二叉树中和为某一值的路径" class="headerlink" title="1. 二叉树中和为某一值的路径"></a>1. 二叉树中和为某一值的路径</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220508120213318.png"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220508120222440.png"></p><p><strong>解题思路:</strong></p><p>本题是典型的二叉树方案搜索问题，使用回溯法解决，其包含 <strong>先序遍历 + 路径记录</strong> 两部分。</p><p><strong>先序遍历</strong>： 按照 “根、左、右” 的顺序，遍历树的所有节点。<br><strong>路径记录</strong>： 在先序遍历中，记录从根节点到当前节点的路径。当路径满足 ① 根节点到叶节点形成的路径 且 ② 各节点值的和等于目标值 sum 时，将此路径加入结果列表。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220508120806381.png" alt="image-20220508120806381"></p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) {} *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">pathSum</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">recur</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// 减法匹配</span>        target <span class="token operator">-</span><span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// 遍历到底, 添加路径</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> root<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> root<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220508121836942.png"></p><h3 id="2-二叉搜索树与双向链表"><a href="#2-二叉搜索树与双向链表" class="headerlink" title="2. 二叉搜索树与双向链表"></a>2. 二叉搜索树与双向链表</h3><p><img src="C:/Users/13993/AppData/Roaming/Typora/typora-user-images/image-20220508122807095.png"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220508122856579.png"></p><p>解题思路：<br>本文解法基于性质：二叉搜索树的<a href="https://roranrui.cn/posts/1c3cffbc/"><strong>中序遍历</strong></a>为 递增序列 。<br>将 二叉搜索树 转换成一个 “排序的循环双向链表” ，其中包含三个要素：</p><ol><li><strong>排序链表</strong>： 节点应从小到大排序，因此应使用 中序遍历 “从小到大”访问树的节点。</li><li><strong>双向链表</strong>： 在构建相邻节点的引用关系时，设前驱节点 pre 和当前节点 cur ，不仅应构建 pre.right = cur ，也应构建 cur.left = pre 。</li><li><strong>循环链表</strong>： 设链表头节点 head 和尾节点 tail ，则应构建 head.left = tail 和 tail.right = head 。</li></ol><p><strong>中序遍历</strong> 为对二叉树作 “左、根、右” 顺序遍历，递归实现如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 打印中序遍历</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 左</span>    cout <span class="token operator">&lt;&lt;</span> root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 根</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 右</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1599401091-PKIjds-Picture1.png"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220508123649382.png"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220508124012133.png"></p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*// Definition for a Node.class Node {public:    int val;    Node* left;    Node* right;    Node() {}    Node(int _val) {        val = _val;        left = NULL;        right = NULL;    }    Node(int _val, Node* _left, Node* _right) {        val = _val;        left = _left;        right = _right;    }};*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    Node<span class="token operator">*</span> <span class="token function">treeToDoublyList</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// 形成双向链表</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// 形成循环链表</span>        head<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> pre<span class="token punctuation">;</span>        pre<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    Node <span class="token operator">*</span>pre<span class="token punctuation">,</span> <span class="token operator">*</span>head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// 递归中序遍历 </span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>cur<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> pre<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token keyword">else</span> head <span class="token operator">=</span> cur<span class="token punctuation">;</span>        cur<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> pre<span class="token punctuation">;</span>        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220508130427936.png"></p><h3 id="3-二叉搜索树的第-k-大节点"><a href="#3-二叉搜索树的第-k-大节点" class="headerlink" title="3. 二叉搜索树的第 k 大节点"></a>3. 二叉搜索树的第 k 大节点</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220508130515215.png"></p><p><strong>解题思路：</strong><br>本文解法基于性质：二叉搜索树的中序遍历为递增序列。根据此性质，易得二叉搜索树的 <strong>中序遍历倒序</strong> 为 递减序列 。<br>因此，求 “二叉搜索树第 k 大的节点” 可转化为求 “此树的<strong>中序遍历倒序</strong>的第 k 个节点”。</p><p><strong>中序遍历倒序</strong>:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为求第 k 个节点，需要实现以下三项工作：</p><ul><li>递归遍历时计数，统计当前节点的序号；</li><li>递归到第 k 个节点时，应记录结果 res；</li><li>记录结果后，后续的遍历即失去意义，应提前终止（即返回）；</li></ul><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">kthLargest</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>k <span class="token operator">=</span> k<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> res<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// 中序遍历得到倒序序列</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> res <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220508131717851.png"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第十五天-搜索与回溯算法-中等&quot;&gt;&lt;a href=&quot;#第十五天-搜索与回溯算法-中等&quot; class=&quot;headerlink&quot; title=&quot;第十五天_搜索与回溯算法(中等)&quot;&gt;&lt;/a&gt;第十五天_搜索与回溯算法(中等)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;  刷</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://roranrui.cn/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
    <category term="算法" scheme="https://roranrui.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下配置OpenCV</title>
    <link href="https://roranrui.cn/posts/9223e133/"/>
    <id>https://roranrui.cn/posts/9223e133/</id>
    <published>2022-05-07T13:34:56.000Z</published>
    <updated>2022-05-07T15:07:04.213Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu下配置OpenCV的环境"><a href="#Ubuntu下配置OpenCV的环境" class="headerlink" title="Ubuntu下配置OpenCV的环境"></a>Ubuntu下配置OpenCV的环境</h1><blockquote><p>  个人先看看这篇文章: <a href="https://roranrui.cn/posts/f18a3b77/">OpenCV在CLion下的环境配置 | 若然无亦的Blog (roranrui.cn)</a></p></blockquote><h2 id="一-前置准备"><a href="#一-前置准备" class="headerlink" title="一. 前置准备"></a>一. 前置准备</h2><ul><li><p>下载OpenCV源码: <a href="https://opencv.org/releases/">https://opencv.org/releases/</a></p></li><li><p>下载OpenCV_Contrib拓展库: <a href="https://github.com/opencv/opencv_contrib">https://github.com/opencv/opencv_contrib</a></p><ul><li><blockquote><p>如果官网下载失败, 可以尝试从这里下载:</p><p><a href="https://pan.baidu.com/s/1OOPVQVbZEPuBqU0NHCDQaA">https://pan.baidu.com/s/1OOPVQVbZEPuBqU0NHCDQaA</a></p><p>提取码: rrwy</p></blockquote></li></ul></li><li><p>下载QT:  <a href="https://www.qt.io/download">https://www.qt.io/download</a></p></li><li><p>安装cmake, gcc, g++:</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> cmake<span class="token function">sudo</span> apt <span class="token function">install</span> gcc<span class="token function">sudo</span> apt <span class="token function">install</span> g++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>安装依赖环境:</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span>  build-essential <span class="token function">sudo</span> apt <span class="token function">install</span> cmake <span class="token function">git</span> libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev   <span class="token function">sudo</span> apt <span class="token function">install</span> python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​第三行中，可能会出现 【无法定位软件包libjasper-dev 的错误提示】</p><p>​依次输入以下命令:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> add-apt-repository <span class="token string">"deb http://security.ubuntu.com/ubuntu xenial-security main"</span><span class="token function">sudo</span> apt update<span class="token function">sudo</span> apt upgrade<span class="token function">sudo</span> apt <span class="token function">install</span> libjasper1 libjasper-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将下载到的OpenCV文件解压, 同级目录下新建一个<code>build</code>文件夹</p><blockquote><p>这里我将带版本号的文件夹的版本号去掉了 即opencv-4.5.4 -&gt; opencv</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507215022064.png" alt="image-20220507215022064"></p><hr><h2 id="二-编译"><a href="#二-编译" class="headerlink" title="二. 编译"></a>二. 编译</h2><p><strong>在bulid路径下执行:</strong></p><p><strong>cmake编译参数:</strong></p><pre class="line-numbers language-bash"><code class="language-bash">cmake <span class="token punctuation">..</span>/opencv -DCMAKE_BUILD_TYPE<span class="token operator">=</span>Release \-DOPENCV_GENERATE_PKGCONFIG<span class="token operator">=</span>ON \-DOPENCV_EXTRA_MODULES_PATH<span class="token operator">=</span>/home/roranrui/mylibs/opencv/opencv_contrib/modules -DBUILD_DOCS<span class="token operator">=</span>ON -DBUILD_EXAMPLES<span class="token operator">=</span>ON \-DOPENCV_GENERATE_PKGCONFIG<span class="token operator">=</span>ON \-DWITH_GTK_2_X<span class="token operator">=</span>ON \-DWITH_OPENGL<span class="token operator">=</span>ON<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>-DOPENCV_EXTRA_MODULES_PATH=</p><p>这里换成自己的路径</p><h3 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题:"></a>出现问题:</h3><p><strong>卡住</strong>(大概率发生)</p><p>如果没有连接外网，执行过程会卡住，是因为文件下载不下来，等他卡完（一会儿就会跳过结束）这时候，去build文件夹，打开CMakeDownloadLog.txt文件，这里面记录了下载失败的文件，搜索关键词cmake_download，我这里有13个</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507220344961.png" alt="一般是这几个"></p><blockquote><p>  可以在这里下载这些缺失的文件: <a href="https://pan.baidu.com/s/1MTw7nEjrTZBlHoQ4x1KAlg">https://pan.baidu.com/s/1MTw7nEjrTZBlHoQ4x1KAlg</a>提取码: rrwy</p></blockquote><p>使用方法：ippicv_2020_lnx_intel64_20191018_general.tgz这个文件放在<code>/home/roranrui/mylibs/opencv/opencv/3rdparty/ippicv/</code>文件夹下，并打开该文件夹下的<strong>ippicv.cmake</strong>文件，修改如下:</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507220659915.png" alt="image-20220507220659915"></p><p>face_landmark_model.dat这个文件放在<code>/home/roranrui/mylibs/opencv/opencv_contrib/modules/face/</code>文件夹，并修改该文件夹下的<strong>CMakeLists.txt</strong>文件如下：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507220833500.png" alt="image-20220507220833500"></p><p>其余的文件均放在opencv_contrib/modules/xfeatures2d/src/文件夹下</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507220344961.png" alt="这几个"></p><p>build文件夹下继续执行构建命令 -j 后面是线程数</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">make</span> -j4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译完成后:</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/20201027182832744.png"></p><p>再执行:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">make</span> <span class="token function">install</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就ok</p><hr><h2 id="三-配置路径"><a href="#三-配置路径" class="headerlink" title="三. 配置路径"></a>三. 配置路径</h2><h3 id="如何确定自己的共享链接库位置以及版本？"><a href="#如何确定自己的共享链接库位置以及版本？" class="headerlink" title="如何确定自己的共享链接库位置以及版本？"></a><strong>如何确定自己的共享链接库位置以及版本？</strong></h3><p><strong>ubutnu终端中输入：</strong></p><pre class="line-numbers language-bash"><code class="language-bash">ldconfig -p <span class="token operator">|</span><span class="token function">grep</span> opencv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507221600067.png" alt="image-20220507221600067"></p><p>默认情况下编译opencv4等其他版本如果没有修改CMAKE_PREFIX_PATH中的路径。则都会存在/usr/local/lib目录下。</p><p>于是lib库目录就为：<code>LIBS += /usr/local/lib/libopencv*</code></p><p><code>usr即（Unix system resources</code>）下。<br>终端执行：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /etc/ld.so.conf.d/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> opencv.conf <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 将/usr/local/lib ，/usr/lib编辑写入。ESC 后wq保存退出即可。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507221751575.png" alt="image-20220507221751575"></p><h3 id="如何确定ubuntu下想用的OpenCV版本Inlcude路径？"><a href="#如何确定ubuntu下想用的OpenCV版本Inlcude路径？" class="headerlink" title="如何确定ubuntu下想用的OpenCV版本Inlcude路径？"></a><strong>如何确定ubuntu下想用的OpenCV版本Inlcude路径？</strong></h3><blockquote><p>在比较新的opencv版本中一般只包括一个头文件#include&lt;opencv2/opencv.hpp&gt;就能实现大多数功能。这是因为在新的版本中一些core等模块的头文件都给统一进去了。</p></blockquote><p>终端打开: </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/ld.so.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加:</p><pre class="line-numbers language-bash"><code class="language-bash">include /usr/local/includeinclude /usr/local/include/opencv4include /usr/local/include/opencv4/opencv2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编辑后保存。</p><p>将自己编译的opencv4头文件路径添加进去。</p><p>更新并保存配置：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> ldconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意：如果找不到/usr/local路径，就要去看一下路径在不在环境变量内：没有的话添加如下图内容即可。</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/bash.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/20191206105729813.png" alt="img"></p><p>验证, 终端输入</p><pre class="line-numbers language-bash"><code class="language-bash">pkg-config --modversion opencv4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现版本号即成功:</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507222159389.png" alt="image-20220507222159389"></p><hr><h2 id="四-配置IDE"><a href="#四-配置IDE" class="headerlink" title="四. 配置IDE"></a>四. 配置IDE</h2><h3 id="QT"><a href="#QT" class="headerlink" title="QT"></a>QT</h3><p>1.打开QT Creator，新建一个项目名为test，选择Qt Consle Applacation后面一直确定默认就行了，注意一下项目路径。</p><p>2 .pro文件：添加下面内容：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">INCLUDEPATH+</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/include \            /usr/local/include/opencv4 \            /usr/local/include/opencv4/opencv2</span><span class="token attr-name">LIBS</span> <span class="token attr-value">+= /usr/local/lib/libopencv*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>稍微说明一下上面的路径：</p><p>INCLUDEPATH 为自己为Ubuntu电脑所编译的opencv的头文件目录（也可称为include目录）</p><p>LIBS 为Ubuntu电脑内opencv的共享链接库（.so.4.1即版本号），在windows中被称为动态链接库（即.dll文件也是带有版本号的）。</p><p>Ubuntu中opencv的共享链接库为（我编译的是4.1版本因此为）：</p><p>libopencv_xphoto.so.4.1</p><p>libopencv_xfeatures2d.so.4.1等等（许多图像处理可用到的库我就不一一列举）</p><p>因此可以在QT中LIBS += /usr/local/lib/libopencv* 设置*通配符即可，而不用一一都给写上（PS：如果不嫌麻烦也可都写上，效果一样）</p></blockquote><p>main.cpp 中测试</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QCoreApplication></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;opencv2/opencv.hpp></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> cv<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Mat src<span class="token punctuation">;</span>    src<span class="token operator">=</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">"/home/roranrui/图片/roranrui.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">namedWindow</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果:</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507222454837.png" alt="image-20220507222454837"></p><hr><h3 id="CLion"><a href="#CLion" class="headerlink" title="CLion"></a>CLion</h3><p>CMakeLists.txt 文件添加:</p><pre class="line-numbers language-cmake"><code class="language-cmake">find_package(OpenCV REQUIRED)message(STATUS "OpenCV library status:")message(STATUS "version: ${OpenCV_VERSION}")message(STATUS "libraries: ${OpenCV_LIBS}")message(STATUS "    include path: ${OpenCV_INCLUDE_DIRS}")add_executable(My_Learning main.cpp)target_link_libraries(My_Learning ${OpenCV_LIBS})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中, target_link_libraries()处需要与你的可执行程序同名</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507224548996.png" alt="编译成功提示"></p><p><strong>测试程序</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/opencv.hpp></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> cv<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Mat img <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">"/home/roranrui/图片/roranrui.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello, World!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507222454837.png" alt="image-20220507222454837"></p><p>成功</p><hr><h2 id="五-其他问题"><a href="#五-其他问题" class="headerlink" title="五. 其他问题"></a>五. 其他问题</h2><p>提示出现: <strong>Failed to load module canberra-gtk-module</strong></p><p>解决: </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libcanberra-gtk-module<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ubuntu下配置OpenCV的环境&quot;&gt;&lt;a href=&quot;#Ubuntu下配置OpenCV的环境&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu下配置OpenCV的环境&quot;&gt;&lt;/a&gt;Ubuntu下配置OpenCV的环境&lt;/h1&gt;&lt;blockquo</summary>
      
    
    
    
    <category term="环境配置" scheme="https://roranrui.cn/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="环境配置" scheme="https://roranrui.cn/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Scrcpy-实现手机电脑多屏幕协同</title>
    <link href="https://roranrui.cn/posts/607cae0/"/>
    <id>https://roranrui.cn/posts/607cae0/</id>
    <published>2022-05-07T06:57:14.000Z</published>
    <updated>2022-05-07T09:12:00.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scrcpy-实现手机电脑多屏幕协同"><a href="#Scrcpy-实现手机电脑多屏幕协同" class="headerlink" title="Scrcpy-实现手机电脑多屏幕协同"></a>Scrcpy-实现手机电脑多屏幕协同</h1><blockquote><p>  多屏协同，是原一碰传功能的升级版本，一碰传重点在传输，而升级后的多屏协同，它不仅仅是平板/电脑和手机之间文件互传，更是利用平板/电脑的运算能力和专业系统能力，实现平板/电脑和手机的无缝协同，键盘、鼠标成为手机的外设，在一个大屏设备上完成两个设备的任务，回微信、回邮件等，同时也利用平板/电脑更专业的应用生态</p></blockquote><h2 id="一-什么是Scrcpy"><a href="#一-什么是Scrcpy" class="headerlink" title="一. 什么是Scrcpy"></a>一. 什么是Scrcpy</h2><p>​简单地来说，scrcpy就是通过adb调试的方式来将手机屏幕投到电脑上，并可以通过电脑控制您的Android设备。它可以通过USB连接，也可以通过Wifi连接（类似于隔空投屏），而且不需要任何root权限，不需要在手机里安装任何程序。scrcpy同时适用于GNU / Linux，Windows和macOS。</p><p><strong>特性：</strong></p><ul><li>亮度（原生，仅显示设备屏幕）</li><li>性能（30~60fps）</li><li>质量（1920×1080或以上）</li><li>低延迟（35~70ms）</li><li>启动时间短（显示第一张图像约1秒）</li><li>非侵入性（设备上没有安装任何东西）</li></ul><h3 id="使用scrcpy的要求"><a href="#使用scrcpy的要求" class="headerlink" title="使用scrcpy的要求"></a>使用scrcpy的要求</h3><ol><li>Android设备至少需要API 21（Android 5.0以上版本）;</li><li>确保在您的设备上启用了adb调试</li><li>在某些设备上，您还需要启用其他选项以使用键盘和鼠标控制它。</li></ol><blockquote><p>  adb的全称为Android Debug Bridge，就是起到调试桥的作用。通过adb我们可以在<a href="https://baike.baidu.com/item/Eclipse">Eclipse</a>中方便通过DDMS来调试Android程序，说白了就是<a href="https://baike.baidu.com/item/debug">debug</a>工具。—百度百科</p></blockquote><h4 id="如何开启adb调试"><a href="#如何开启adb调试" class="headerlink" title="如何开启adb调试"></a>如何开启adb调试</h4><p><strong>以笔者的手机为例(红米K40 MIUI版本13.0.2)</strong></p><h5 id="①进入开发者模式"><a href="#①进入开发者模式" class="headerlink" title="①进入开发者模式"></a>①进入开发者模式</h5><p>依次进入: 设置-&gt;我的设备-&gt;全部参数   点击MIUI版本多次, 就可以开启开发者模式</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507150849001.png" alt="image-20220507150849001"></p><h5 id="②开启usb调试"><a href="#②开启usb调试" class="headerlink" title="②开启usb调试"></a>②开启usb调试</h5><p>依次进入: 设置-&gt;更多设置-&gt;开发者选项 开启<strong>USB调试</strong>, <strong>USB调试(安全设置)</strong></p><blockquote><p>  开发者选项中含有其他可能会影响系统运行的选项, 请勿随意开启任何功能</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507151311210.png" alt="image-20220507151311210"></p><h3 id="下载与配置Scrcpy"><a href="#下载与配置Scrcpy" class="headerlink" title="下载与配置Scrcpy"></a>下载与配置Scrcpy</h3><p>Github地址：<a href="https://github.com/Genymobile/scrcpy">Genymobile/scrcpy: Display and control your Android device</a></p><p>进入release发行</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507151447381.png" alt="image-20220507151447381"></p><p>根据自己的需求下载对应版本的文件即可</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507151534779.png" alt="image-20220507151534779"></p><p>解压的目录:</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507151637282.png" alt="image-20220507151637282"></p><p>接下来需要将该目录加入系统环境变量</p><p>在WINDOWS10下, 依次进入: 设置-&gt;系统-&gt;关于</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507151813267.png" alt="image-20220507151813267"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507151826437.png" alt="选择环境变量"></p><p>在系统变量处点击编辑 将解压目录的地址添加进去 就可以在cmd中直接操作了!</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507151954837.png" alt="image-20220507151954837"></p><hr><p><code>win + R</code>打开cmd输入<code>adb version</code>验证是否配置成功</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507171159024.png" alt="image-20220507171159024"></p><h2 id="二-实现多屏协同"><a href="#二-实现多屏协同" class="headerlink" title="二. 实现多屏协同"></a>二. 实现多屏协同</h2><h3 id="方案一-使用USB进行连接"><a href="#方案一-使用USB进行连接" class="headerlink" title="方案一: 使用USB进行连接"></a>方案一: 使用USB进行连接</h3><ol><li>手机通过USB连接到PC上，首次连接会弹出是否信任该电脑，点击始终信任即可。</li><li>命令行运行<code>adb usb</code>查看是否连接成功</li></ol><pre class="line-numbers language-bash"><code class="language-bash">adb usb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507152533354.png" alt="image-20220507152533354"></p><p>同时手机会显示已连接到usb调试</p><p>第一次连接:</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507152728600.png" alt="image-20220507152728600"></p><p>此时连接成功后, 直接运行<code>scrcpy</code>即可</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507152845362.png" alt="image-20220507152845362"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507152838116.png" alt="image-20220507152838116"></p><h3 id="方案二-使用无线连接"><a href="#方案二-使用无线连接" class="headerlink" title="方案二: 使用无线连接"></a>方案二: 使用无线连接</h3><blockquote><p>  此连接方式更加方便快捷，若宽带速率高，使用效果更佳，使用方法也非常简单。</p><p>  为保证传输速率和质量, 建议使用手机连接电脑端热点</p></blockquote><ol><li>确保PC和手机在同一Wifi中</li><li><strong>手机先通过USB与PC相连</strong></li><li>在PC上运行 adb tcpip 服务端口，如端口为5555</li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507153208942.png" alt="image-20220507153208942"></p><ol start="4"><li><p>拔下你的设备，断开USB连接</p></li><li><p>在PC上运行 adb connect 手机IP:服务端口(手机IP可通过手机的<code>状态信息</code>, 或wifi网络详情查看)，或者登录路由器查看，一般以192.168开头）</p></li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507153315694.png" alt="image-20220507153315694"></p><ol start="6"><li>运行<code>scrcpy</code> 即可实现无线同屏</li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>投屏运行成功后, cmd窗口不可关闭, 因为此时该窗口相当于一个<code>进程</code>, 如果关闭, 投屏也将关闭</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507154117089.png" alt="image-20220507154117089"></p><hr><h2 id="三-其他操作"><a href="#三-其他操作" class="headerlink" title="三. 其他操作"></a>三. 其他操作</h2><h3 id="比特率修改"><a href="#比特率修改" class="headerlink" title="比特率修改"></a>比特率修改</h3><p>无线投屏, 可能传输速率会导致性能变慢, 默认的scrcpy比特率是8Mbps，这对于Wi-Fi连接来说可能太多了。根据使用情况，降低比特率和分辨率可能是一个很好的折中方案。</p><pre class="line-numbers language-bash"><code class="language-bash">scrcpy --bit-rate 2M <span class="token comment" spellcheck="true"># 或者简写</span>scrcpy -b2M -m800<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="降低分辨率"><a href="#降低分辨率" class="headerlink" title="降低分辨率"></a>降低分辨率</h3><p>有时候，可以通过降低镜像的分辨率来提高性能。</p><p>要同时限制宽度和高度到某个值 (例如 1024)：</p><pre class="line-numbers language-cpp"><code class="language-cpp">scrcpy <span class="token operator">--</span>max<span class="token operator">-</span>size <span class="token number">1024</span>scrcpy <span class="token operator">-</span>m <span class="token number">1024</span>  # 简写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="限制帧率"><a href="#限制帧率" class="headerlink" title="限制帧率"></a>限制帧率</h3><p>要限制采集的帧率：</p><pre class="line-numbers language-cpp"><code class="language-cpp">scrcpy <span class="token operator">--</span>max<span class="token operator">-</span>fps <span class="token number">15</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="启动时关闭设备屏幕"><a href="#启动时关闭设备屏幕" class="headerlink" title="启动时关闭设备屏幕"></a>启动时关闭设备屏幕</h3><p>使用命令行选项在启动时镜像时可以关闭设备屏幕，这一点也挺实用：</p><pre class="line-numbers language-bash"><code class="language-bash">scrcpy --turn-screen-offscrcpy -S<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>窗口的标题默认为设备型号。可以通过如下命令修改：</p><pre class="line-numbers language-bash"><code class="language-bash">scrcpy --window-title <span class="token string">'My device'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="无边框"><a href="#无边框" class="headerlink" title="无边框"></a>无边框</h3><p>禁用窗口边框：</p><pre class="line-numbers language-bash"><code class="language-bash">scrcpy --window-borderless<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><p>可以通过以下命令旋转窗口：</p><pre class="line-numbers language-bash"><code class="language-bash">scrcpy --rotation 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可选的值有：</p><ul><li><code>0</code>: 无旋转</li><li><code>1</code>: 逆时针旋转 90°</li><li><code>2</code>: 旋转 180°</li><li><code>3</code>: 顺时针旋转 90°</li></ul><p>也可以使用 Ctrl+← <em>(左箭头)</em> 和 Ctrl+→ <em>(右箭头)</em> 随时更改。</p><h3 id="查看设备信息"><a href="#查看设备信息" class="headerlink" title="查看设备信息"></a>查看设备信息</h3><pre class="line-numbers language-bash"><code class="language-bash">adb devices<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td>切换全屏模式</td><td>Ctrl+f</td></tr><tr><td>向左旋转显示屏</td><td>Ctrl+← <em>（左）</em></td></tr><tr><td>向右旋转显示屏</td><td>Ctrl+→ <em>（右）</em></td></tr><tr><td>将窗口大小调整为 1：1（像素完美）</td><td>Ctrl+g</td></tr><tr><td>调整窗口大小以删除黑色边框</td><td>Ctrl+w|<em>双击¹</em></td></tr><tr><td>点击<code>HOME</code></td><td>Ctrl+h|<em>中键单击</em></td></tr><tr><td>点击<code>BACK</code></td><td>Ctrl+b|<em>右键单击²</em></td></tr><tr><td>点击<code>APP_SWITCH</code></td><td>Ctrl+s|<em>第四次点击³</em></td></tr><tr><td>点击（解锁屏幕）⁴<code>MENU</code></td><td>Ctrl+m</td></tr></tbody></table><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Scrcpy-实现手机电脑多屏幕协同&quot;&gt;&lt;a href=&quot;#Scrcpy-实现手机电脑多屏幕协同&quot; class=&quot;headerlink&quot; title=&quot;Scrcpy-实现手机电脑多屏幕协同&quot;&gt;&lt;/a&gt;Scrcpy-实现手机电脑多屏幕协同&lt;/h1&gt;&lt;blockquo</summary>
      
    
    
    
    <category term="软件插件分享" scheme="https://roranrui.cn/categories/%E8%BD%AF%E4%BB%B6%E6%8F%92%E4%BB%B6%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="经验分享" scheme="https://roranrui.cn/tags/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>第十四天_搜索与回溯(中等)</title>
    <link href="https://roranrui.cn/posts/4c30a2e3/"/>
    <id>https://roranrui.cn/posts/4c30a2e3/</id>
    <published>2022-05-07T04:56:40.000Z</published>
    <updated>2022-05-07T09:25:51.388Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十四天-搜索与回溯-中等"><a href="#第十四天-搜索与回溯-中等" class="headerlink" title="第十四天_搜索与回溯(中等)"></a>第十四天_搜索与回溯(中等)</h1><blockquote><p>  刷题日程指引: <a href="https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/px2ds5/">行百里者半九十。坚持一个月刷完，一起加油！</a></p></blockquote><h2 id="一-知识学习"><a href="#一-知识学习" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h3 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a><strong>剪枝</strong></h3><p>一：剪枝策略的寻找的方法</p><p>微观方法：从问题本身出发，发现剪枝条件</p><p>宏观方法：从整体出发，发现剪枝条件。</p><p>注意提高效率，这是关键，最重要的。</p><blockquote><p>   总之，剪枝策略，属于算法优化范畴；通常应用在DFS 和 BFS 搜索算法中；剪枝策略就是寻找过滤条件，提前减少不必要的搜索路径。</p></blockquote><p>二：剪枝算法(算法优化)</p><ol><li><p>简介</p><p> 在搜索算法中优化中，剪枝，就是通过某种判断，避免一些不必要的遍历过程，形象的说，就是剪去了搜索树中的某些“枝条”，故称剪枝。应用剪枝优化的核心问题是设计剪枝判断方法，即确定哪些枝条应当舍弃，哪些枝条应当保留的方法。</p></li><li><p>剪枝优化三原则: 正确、准确、高效.原则</p><p>搜索算法,绝大部分需要用到剪枝.然而,不是所有的枝条都可以剪掉,这就需要通过设计出合理的判断方法,以决定某一分支的取舍. 在设计判断方法的时候,需要遵循一定的原则.</p><ul><li><p>剪枝的原则</p><ul><li><pre><code>正确性</code></pre></li></ul><p>正如上文所述,枝条不是爱剪就能剪的. 如果随便剪枝,把带有最优解的那一分支也剪掉了的话,剪枝也就失去了意义. 所以,剪枝的前提是一定要保证不丢失正确的结果.</p><ul><li><p>准确性</p><p>在保证了正确性的基础上,我们应该根据具体问题具体分析,采用合适的判断手段,使不包含最优解的枝条尽可能多的被剪去,以达到程序“最优化”的目的. 可以说,剪枝的准确性,是衡量一个优化算法好坏的标准.</p></li><li><p>高效性</p><p>设计优化程序的根本目的,是要减少搜索的次数,使程序运行的时间减少. 但为了使搜索次数尽可能的减少,我们又必须花工夫设计出一个准确性较高的优化算法,而当算法的准确性升高,其判断的次数必定增多,从而又导致耗时的增多,这便引出了矛盾. 因此,如何在优化与效率之间寻找一个平衡点,使得程序的时间复杂度尽可能降低,同样是非常重要的. 倘若一个剪枝的判断效果非常好,但是它却需要耗费大量的时间来判断、比较,结果整个程序运行起来也跟没有优化过的没什么区别,这样就太得不偿失了.</p></li></ul></li></ul></li><li><p>分类</p><p> 剪枝算法按照其判断思路可大致分成两类:可行性剪枝及最优性剪枝.</p><ul><li><p>可行性剪枝 —— 该方法判断继续搜索能否得出答案，如果不能直接回溯。</p></li><li><p>最优性剪枝——又称为上下界剪枝，是一种重要的搜索剪枝策略。它记录当前得到的最优值，如果当前结点已经无法产生比当前最优解更优的解时，可以提前回溯。</p></li></ul></li></ol><hr><h2 id="二-题目练习"><a href="#二-题目练习" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-矩阵中的路径"><a href="#1-矩阵中的路径" class="headerlink" title="1. 矩阵中的路径"></a>1. 矩阵中的路径</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507130945157.png" alt="img "></p><p><strong>解题思路：</strong><br>本问题是典型的矩阵搜索问题，可使用 <strong>深度优先搜索（DFS）</strong>+ <strong>剪枝</strong> 解决。</p><p>深度优先搜索： 可以理解为暴力法遍历矩阵中所有字符串可能性。DFS 通过递归，先朝一个方向搜到底，再回溯至上个节点，沿另一个方向搜索，以此类推。<br>剪枝： 在搜索中，遇到 这条路不可能和目标字符串匹配成功 的情况（例如：此矩阵元素和目标字符不同、此元素已被访问），则应立即返回，称之为 可行性剪枝 。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1604944042-glmqJO-Picture0.png" alt="Picture0.png"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507131414911.png" alt="img"></p><p><strong>实现:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">exist</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">,</span> string word<span class="token punctuation">)</span> <span class="token punctuation">{</span>        rows <span class="token operator">=</span> board<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cols <span class="token operator">=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cols<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">,</span> string word<span class="token punctuation">,</span> <span class="token keyword">int</span> i <span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/// 越界处理</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> rows <span class="token operator">||</span> j <span class="token operator">>=</span> cols <span class="token operator">||</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> word<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// index == 0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> word<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// 将匹配的标记为空字符 防止重复访问</span>        board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// 在相邻区域寻找匹配的 </span>        <span class="token keyword">bool</span> res <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span>         <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> word<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507134821863.png" alt="img"></p><hr><h3 id="2-机器人的运动范围"><a href="#2-机器人的运动范围" class="headerlink" title="2. 机器人的运动范围"></a>2. 机器人的运动范围</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507140210236.png" alt="image-20220507140210236"></p><p><strong>解题思路:</strong></p><h4 id="数位之和计算"><a href="#数位之和计算" class="headerlink" title="数位之和计算"></a>数位之和计算</h4><p><strong>封装函数:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">sums</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        s <span class="token operator">+</span><span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507141046291.png" alt="image-20220507141046291"></p><h4 id="可达解分析"><a href="#可达解分析" class="headerlink" title="可达解分析"></a>可达解分析</h4><blockquote><p>  根据数位和增量公式得知，数位和每逢 进位 突变一次。根据此特点，矩阵中 满足数位和的解 构成的几何形状形如多个 等腰直角三角形 ，每个三角形的直角顶点位于 0, 10, 20, …等数位和突变的矩阵索引处 。</p><p>  三角形内的解虽然都满足数位和要求，但由于机器人每步只能走一个单元格，而三角形间不一定是连通的，因此机器人不一定能到达，称之为 不可达解 ；同理，可到达的解称为 可达解 （本题求此解） 。</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1603026306-OdpwLi-Picture1.png" alt="1"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1603026306-daxIuh-Picture4.png" alt="2"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507141819402.png" alt="image-20220507141819402"></p><p>1.深度优先遍历 DFS<br>深度优先搜索： 可以理解为暴力法模拟机器人在矩阵中的所有路径。DFS 通过递归，先朝一个方向搜到底，再回溯至上个节点，沿另一个方向搜索，以此类推。<br>剪枝： 在搜索中，遇到数位和超出目标值、此元素已访问，则应立即返回，称之为 可行性剪枝 。</p><blockquote><p>  <img src="C:/Users/13993/AppData/Roaming/Typora/typora-user-images/image-20220507142324877.png" alt="image-20220507142324877"></p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507142120913.png" alt="image-20220507142120913"></p><p><strong>实现:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">movingCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">>></span> <span class="token function">visited</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> visited<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j <span class="token punctuation">,</span> <span class="token keyword">int</span> si<span class="token punctuation">,</span> <span class="token keyword">int</span> sj<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">>></span> <span class="token operator">&amp;</span>visited<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/// 越界处理 </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> m <span class="token operator">||</span> j <span class="token operator">>=</span> n <span class="token operator">||</span> k <span class="token operator">&lt;</span> si <span class="token operator">+</span> sj <span class="token operator">||</span> visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// visited[i][j]代表当前元素已访问过</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// 向右下方搜索</span>        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> si <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> si <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">,</span> sj<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">+</span>         <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> si<span class="token punctuation">,</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> sj <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> sj <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">,</span> visited<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507143549919.png" alt="image-20220507143549919"></p><p>2.广度优先遍历 BFS</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507143613569.png" alt="image-20220507143613569"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507143620435.png" alt="image-20220507143620435"></p><p><strong>实现:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">movingCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">>></span> <span class="token function">visited</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> que<span class="token punctuation">;</span>        que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/// 弹出队首元素作为搜索单元格</span>            vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> tmp <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> j <span class="token operator">=</span> tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> si <span class="token operator">=</span> tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sj <span class="token operator">=</span> tmp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/// 越界处理 </span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> m <span class="token operator">||</span> j <span class="token operator">>=</span> n <span class="token operator">||</span> k <span class="token operator">&lt;</span> si <span class="token operator">+</span> sj <span class="token operator">||</span> visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            res<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/// 向右下方搜索</span>            que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> si <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> si <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">,</span> sj<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> si<span class="token punctuation">,</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> sj <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> sj <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507144808324.png" alt="image-20220507144808324"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第十四天-搜索与回溯-中等&quot;&gt;&lt;a href=&quot;#第十四天-搜索与回溯-中等&quot; class=&quot;headerlink&quot; title=&quot;第十四天_搜索与回溯(中等)&quot;&gt;&lt;/a&gt;第十四天_搜索与回溯(中等)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;  刷题日程指引: &lt;</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://roranrui.cn/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
    <category term="算法" scheme="https://roranrui.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>C++多线程进阶三</title>
    <link href="https://roranrui.cn/posts/64bc088f/"/>
    <id>https://roranrui.cn/posts/64bc088f/</id>
    <published>2022-05-06T11:12:07.000Z</published>
    <updated>2022-05-08T09:13:50.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程进阶-三"><a href="#多线程进阶-三" class="headerlink" title="多线程进阶(三)"></a>多线程进阶(三)</h1><blockquote><p>  本篇内容比较抽象, 了解即可</p></blockquote><h2 id="一-WINDOWS临界区"><a href="#一-WINDOWS临界区" class="headerlink" title="一. WINDOWS临界区"></a>一. WINDOWS临界区</h2><blockquote><p>  临界区又称关键代码段，指的是一小段代码在代码执行前，它需要独占一些资源。</p></blockquote><p><strong>初始化</strong></p><p>程序中通常将多线程同时访问的某个资源作为临界区，需要定义一个CRITICAL_SECTION类型的变量，然后调用InitializeCriticalSection函数对变量进行初始化；</p><p><strong>函数原型</strong>：<code>VOID InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection );</code><br>参数说明：lpCriticalSection：一个CRITICAL_SECTION结构指针，表示用于初始化的临界区；<br>InitializeCriticalSection函数在内部设置了CRITICAL_SECTION结构的某些成员变量，所以它不会失败。</p><p><strong>定义临界区</strong><br>为了将某一段代码定义为临界区，需要调用EnterCriticalSection函数；<br><strong>函数原型</strong>：<code>VOID WINAPI EnterCriticalSection(__inout LPCRITICAL_SECTION lpCriticalSection);</code></p><p>该函数的作用是判断是否有线程访问临界区资源：</p><p>如果没有，就改变CRITICAL_SECTION结构的成员变量的值，赋予当前线程访问权，函数立即返回；<br>如果有线程正在访问资源，则进入等待状态，直到没有线程访问。</p><p><strong>释放资源</strong><br>函数原型：<code>void WINAPI LeaveCriticalSection( _Inout_LPCRITICAL_SECTION lpCriticalSection);</code></p><p><strong>释放CRITICAL_SECTION结构指针</strong><br>函数原型：<code>void WINAPI DeleteCriticalSection(_Inout_ LPCRITICAL_SECTION lpCriticalSection)t</code></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> __WINDOWSJQ_</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">// 把收到的消息传入队列</span>    <span class="token keyword">void</span> <span class="token function">inMsgRecvQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"收到消息，并放入队列 "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span>  __WINDOWSJQ_</span>            <span class="token function">EnterCriticalSection</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_winsec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进入临界区</span>            <span class="token comment" spellcheck="true">//EnterCriticalSection(&amp;my_winsec);//可以再次进入临界区,程序不会出错</span>            msgRecvQueue<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LeaveCriticalSection</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_winsec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//离开临界区</span>            <span class="token comment" spellcheck="true">//LeaveCriticalSection(&amp;my_winsec);//如果进入两次，必须离开两次不会报错</span><span class="token macro property">#<span class="token directive keyword">elif</span></span>            my_mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            msgRecvQueue<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            my_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">//  __WINDOWSJQ_</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"消息入队结束"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 从队列中取出消息</span>    <span class="token keyword">void</span> <span class="token function">outMsgRecvQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span>  __WINDOWSJQ_</span>            <span class="token function">EnterCriticalSection</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_winsec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进入临界区</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>msgRecvQueue<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 队列不为空</span>                <span class="token keyword">int</span> num <span class="token operator">=</span> msgRecvQueue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"从消息队列中取出 "</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                msgRecvQueue<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 消息队列为空</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"消息队列为空 "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">LeaveCriticalSection</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_winsec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//离开临界区</span><span class="token macro property">#<span class="token directive keyword">elif</span></span>            my_mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>msgRecvQueue<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 队列不为空</span>                <span class="token keyword">int</span> num <span class="token operator">=</span> msgRecvQueue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"从消息队列中取出 "</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                msgRecvQueue<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                my_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 消息队列为空</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"消息队列为空 "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                my_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">//  __WINDOWSJQ_</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"消息出队结束"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __WINDOWSJQ_</span>        <span class="token function">InitializeCriticalSection</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_winsec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用临界区之前要初始化</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// __WINDOWSJQ_</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> msgRecvQueue<span class="token punctuation">;</span>    mutex my_mutex<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __WINDOWSJQ_</span>    CRITICAL_SECTION my_winsec<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//windows中的临界区，非常类似C++11中的mutex</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// __WINDOWSJQ_</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    A myobj<span class="token punctuation">;</span>    thread<span class="token function">myInMsgObj</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>A<span class="token operator">::</span>outMsgRecvQueue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myobj<span class="token punctuation">)</span><span class="token punctuation">;</span>    thread<span class="token function">myOutMsgObj</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>A<span class="token operator">::</span>inMsgRecvQueue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myobj<span class="token punctuation">)</span><span class="token punctuation">;</span>    myInMsgObj<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    myOutMsgObj<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  Windows临界区，同一个线程是可以重复进入的，但是进入的次数与离开的次数必须相等。<br>  C++互斥量则不允许同一个线程重复加锁。</p><p>  windows临界区是在windows编程中的内容，了解一下即可，效果几乎可以等同于c++11的mutex</p><p>  #include &lt;windows.h&gt;<br>  windows中的临界区同mutex一样，可以保护一个代码段。</p><p>  但windows的临界区可以进入多次，离开多次，但是进入的次数与离开的次数必须相等，不会引起程序报异常出错。</p></blockquote><hr><h2 id="二-自动析构"><a href="#二-自动析构" class="headerlink" title="二. 自动析构"></a>二. 自动析构</h2><blockquote><p>  C++：lock_guard防止忘了释放信号量，自动释放<br>  windows：可以写个类自动释放临界区：</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CWinLock</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">CWinLock</span><span class="token punctuation">(</span>CRITICAL_SECTION <span class="token operator">*</span>pCritmp<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        my_winsec <span class="token operator">=</span>pCritmp<span class="token punctuation">;</span>        <span class="token function">EnterCriticalSection</span><span class="token punctuation">(</span>my_winsec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">CWinLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">LeaveCriticalSection</span><span class="token punctuation">(</span>my_winsec<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    CRITICAL_SECTION <span class="token operator">*</span>my_winsec<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="三-其他mutex互斥量"><a href="#三-其他mutex互斥量" class="headerlink" title="三. 其他mutex互斥量"></a>三. 其他mutex互斥量</h2><h3 id="1-std-recursive-mutex"><a href="#1-std-recursive-mutex" class="headerlink" title="1.  std::recursive_mutex"></a>1.  std::recursive_mutex</h3><ul><li>std::mutex 独占式互斥量</li><li>std::recursive_mutex：递归独占互斥量, 允许在同一个线程中同一个互斥量多次被 lock() ，（但是递归加锁的次数是有限制的，太多可能会报异常），效率要比mutex低。</li></ul><p>如果真的用了 recursive_mutex 要考虑代码是否有优化空间，如果能调用一次 lock()就不要调用多次。</p><h3 id="2-std-timed-mutex"><a href="#2-std-timed-mutex" class="headerlink" title="2. std::timed_mutex"></a>2. std::timed_mutex</h3><p>std::timed_mutex：是待超时的独占互斥量</p><ul><li><strong>try_lock_for()：</strong></li></ul><p>等待一段时间，如果拿到了锁，或者超时了未拿到锁，就继续执行（有选择执行）如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">std<span class="token operator">::</span>chrono<span class="token operator">::</span>milliseconds <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>my_mymutex<span class="token punctuation">.</span><span class="token function">try_lock_for</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//......拿到锁返回ture</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    std<span class="token operator">::</span>chrono<span class="token operator">::</span>milliseconds <span class="token function">sleeptime</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>this_thread<span class="token operator">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>sleeptime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>try_lock_until()：</strong></li></ul><p>是一个未来的时间点，在这个未来的时间没到的时间内，如果拿到了锁就往下走；如果时间到了，没拿到锁程序流程也往下走。</p><pre class="line-numbers language-cpp"><code class="language-cpp">std<span class="token operator">::</span>chrono<span class="token operator">::</span>milliseconds <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>my_mymutex<span class="token punctuation">.</span><span class="token function">try_lock_until</span><span class="token punctuation">(</span>chrono<span class="token operator">::</span>steady_clock<span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//......拿到锁返回ture</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    std<span class="token operator">::</span>chrono<span class="token operator">::</span>milliseconds <span class="token function">sleeptime</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>this_thread<span class="token operator">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>sleeptime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>   两者的区别就是一个参数是时间段，一个参数是时间点</p></blockquote><p><strong>其他:</strong></p><p>std::recursive_timed_mutex：是待超时的递归独占互斥量</p><hr><h2 id="四-线程池概念"><a href="#四-线程池概念" class="headerlink" title="四. 线程池概念"></a>四. 线程池概念</h2><blockquote><p>  场景设想：服务器程序， 每来一个客户端，就创建一个新线程为这个客户提供服务。</p></blockquote><p>问题：</p><p>1、2万个玩家，不可能给每个玩家创建一个新线程，此程序写法在这种场景下不通。</p><p>2、程序稳定性问题：编写代码中，“时不时地<strong>突然</strong>”创建一个线程，这种写法，一般情况下不会出错，但是不稳定的；</p><p>线程池：把一堆线程弄到一起，统一管理。这种统一管理调度，循环利用的方式，就叫做线程池。</p><p>实现方式：程序启动时，一次性创建好一定数量的线程。这种方式让人更放心，觉得程序代码更稳定。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220506201905184.png" alt="WIN10下的线程池"></p><p><strong>线程创建数量：</strong></p><ol><li><p>线程创建的数量极限的问题</p><p>一般来讲，2000个线程基本就是极限；再创建就会崩溃。</p></li><li><p>线程创建数量建议</p><ol><li>采用某些计数开发程序提供的建议，遵照建议和指示来确保程序高效执行。</li><li>创建多线程完成业务；考虑可能被阻塞的线程数量，创建多余最大被阻塞线程数量的线程，如100个线程被阻塞再充值业务，开110个线程就是很合适的</li><li>线程创建数量尽量不要超过500个，尽量控制在200个之内；</li></ol></li></ol><h2 id="五-一些补充"><a href="#五-一些补充" class="headerlink" title="五. 一些补充"></a>五. 一些补充</h2><h3 id="1-虚假唤醒"><a href="#1-虚假唤醒" class="headerlink" title="1. 虚假唤醒"></a>1. 虚假唤醒</h3><p>notify_one或者notify_all唤醒wait()后，实际有些线程可能不满足唤醒的条件，就会造成虚假唤醒，可以在wait中再次进行判断解决虚假唤醒。</p><p><strong>解决：</strong></p><p>wait中要有第二个参数（lambda），并且这个lambda中要正确判断所处理的公共数据是否存在。</p><pre class="line-numbers language-cpp"><code class="language-cpp">my_cond<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>ulock1<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>msgRecvQueue<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-atomic操作"><a href="#2-atomic操作" class="headerlink" title="2. atomic操作"></a>2. atomic操作</h3><p>如:</p><pre class="line-numbers language-cpp"><code class="language-cpp">std<span class="token operator">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">atm</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> atm <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里只有读取atm是原子操作，但是整个这一行代码 <code>cout &lt;&lt; atm &lt;&lt; endl</code>; 并不是原子操作，导致最终显示在屏幕上的值是一个“曾经值”。</p><p>读取内容:</p><pre class="line-numbers language-cpp"><code class="language-cpp">std<span class="token operator">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">atm</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> atm_2 <span class="token operator">=</span> atm<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>应使用: <code>atomic&lt;int&gt; atm2(atm.load());</code>  以原子方式读atomic对象的值。</p><p>写入内容:</p><pre class="line-numbers language-cpp"><code class="language-cpp">atm2<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>  原子操作实质上是：不允许在进行原子对象操作时进行CPU的上下文切换</p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;多线程进阶-三&quot;&gt;&lt;a href=&quot;#多线程进阶-三&quot; class=&quot;headerlink&quot; title=&quot;多线程进阶(三)&quot;&gt;&lt;/a&gt;多线程进阶(三)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;  本篇内容比较抽象, 了解即可&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="多线程" scheme="https://roranrui.cn/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
    <category term="多线程编程" scheme="https://roranrui.cn/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>第十三天_双指针(简单)</title>
    <link href="https://roranrui.cn/posts/a2d105e0/"/>
    <id>https://roranrui.cn/posts/a2d105e0/</id>
    <published>2022-05-06T04:50:45.000Z</published>
    <updated>2022-05-06T16:03:45.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十三天-双指针-简单"><a href="#第十三天-双指针-简单" class="headerlink" title="第十三天_双指针(简单)"></a>第十三天_双指针(简单)</h1><blockquote><p>  刷题日程指引: <a href="https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/px2ds5/">行百里者半九十。坚持一个月刷完，一起加油！</a></p></blockquote><h2 id="一-知识学习"><a href="#一-知识学习" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h3 id="位运算详解"><a href="#位运算详解" class="headerlink" title="位运算详解"></a>位运算详解</h3><blockquote><p>  计算机中的数在内存中都是以<strong>二进制</strong>形式进行存储的 ，而位运算就是直接对整数在内存中的二进制位进行操作，因此其执行效率非常高，在程序中尽量使用位运算进行操作，这会大大提高程序的性能。</p></blockquote><table><thead><tr><th>符号</th><th>描述</th><th><strong>运算规则</strong></th></tr></thead><tbody><tr><td>&amp;</td><td>与</td><td>两个位都为1时，结果才为1。</td></tr><tr><td>|</td><td>或</td><td>两个位都为0时，结果才为0。</td></tr><tr><td>^</td><td>异或</td><td>两个位相同为0，相异为1。</td></tr><tr><td>~</td><td>取反</td><td>0变1，1变0。</td></tr><tr><td>&lt;&lt;</td><td>左移</td><td>各二进位全部左移若干位，高位丢弃，低位补0。</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td>各二进位全部右移若干位，对无符号数，高位补0，有符号数，右移补1 11。</td></tr></tbody></table><blockquote><p>  对于运算符优先级, 个人认为没有必要记, 按自己的需求添加括号保证顺序即可</p></blockquote><h4 id="负数的位运算"><a href="#负数的位运算" class="headerlink" title="负数的位运算"></a>负数的位运算</h4><p>首先，我们要知道，在计算机中，运算是使用的二进制补码，而正数的补码是它本身，负数的补码则是符号位不变，其余按位取反，最后再+ 1 +1+1得到的， 例如：</p><ul><li><p>15 ,原码:00001111 补码:00001111</p></li><li><p>− 15 ,原码:10001111  补码:11110001</p></li></ul><p>​那么对于负数的位运算而言，它们的操作都是建立在补码上的，得到的运算结果是补码，最后将补码结果转化成一个普通的十进制数结果。但需要注意的是，符号位是需要参与运算的，而在左移右移操作中，负数右移补1 ，左移右边补0 。例如对于− 15 ，其补码为11110001 , 右移一位( − 15 &gt; &gt; 1 ) 得到的是11111000 ，即− 8 ，其他的同理。</p><p><strong>关于负数位运算的运用:</strong></p><ul><li>快速判断是否为− 1</li></ul><p>​在链式前向星中，我们初始化head数组为- 1,最后判断是否遍历完u的所有边时，即判断是否为- -1, 我们直接用~即可。原因就在于- 1的补码是11111111,按位取反就变为00000000，这实际上就是0。</p><ul><li><strong>取最低位的1 ，lowbit函数</strong></li></ul><p>也就是:x&amp;(- x), 这在树状数组中起着巨大作用，我们来证明一下，这里取x= 15,对于15&amp;(-15), 我们知道,在补码上进行运算得到的00000001要注意元运算的符号位我们需要进行运算。</p><h3 id="位运算的一些应用"><a href="#位运算的一些应用" class="headerlink" title="位运算的一些应用"></a>位运算的一些应用</h3><ol><li><strong>位运算实现乘除法</strong></li></ol><pre class="line-numbers language-cpp"><code class="language-cpp">a <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">==</span> a <span class="token operator">*</span> <span class="token number">2</span>a <span class="token operator">>></span> <span class="token number">1</span> <span class="token operator">==</span> a <span class="token operator">/</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li><strong>位运算交换两整数</strong></li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    a <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">^</span><span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>位运算判断奇偶数</strong></li></ol><blockquote><p>  我们知道,在二进制中,最低位决定了是奇数还是偶数,所以我们可以提取出最低位的值</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp">a <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true">// 判断a是不是偶数</span>a <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true">// 判断a是不是奇数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li><strong>位运算改变正负性和求绝对值</strong></li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">~</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="二-题目练习"><a href="#二-题目练习" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-调整数组顺序使奇数位于偶数前面"><a href="#1-调整数组顺序使奇数位于偶数前面" class="headerlink" title="1. 调整数组顺序使奇数位于偶数前面"></a>1. 调整数组顺序使奇数位于偶数前面</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220506125755717.png" alt="image-20220506125755717"></p><p><strong>解题思路：</strong><br>考虑定义双指针 i , j 分列数组左右两端，循环执行：</p><ol><li>指针 i 从左向右寻找偶数；</li><li>指针 j 从右向左寻找奇数；</li><li>将 偶数 nums[i] 和 奇数 nums[j] 交换。</li></ol><p><strong>可始终保证：</strong> 指针 i 左边都是奇数，指针 j 右边都是偶数 。</p><p><strong>实现:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">exchange</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> l<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> r<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220506130314711.png" alt="image-20220506130314711"></p><hr><h3 id="2-和为-s-的两个数字"><a href="#2-和为-s-的两个数字" class="headerlink" title="2. 和为 s 的两个数字"></a>2. 和为 s 的两个数字</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220506132804781.png" alt="image-20220506132804781"></p><p><strong>解题思路：</strong></p><ul><li>利用 <strong>HashMap</strong> 可以通过遍历数组找到数字组合，时间和空间复杂度均为 O(N)；</li><li>注意本题的 nums 是 排序数组 ，因此可使用 <strong>双指针法</strong> 将空间复杂度降低至 O(1) 。</li></ul><p><strong>算法流程：</strong><br>初始化： 双指针 i, j 分别指向数组 nums 的左右两端 （俗称对撞双指针）。<br>循环搜索： 当双指针相遇时跳出；<br>计算和 s = nums[i] + nums[j]；<br>若 s &gt; target ，则指针 j 向左移动，即执行 j = j - 1；<br>若 s &lt; target ，则指针 i 向右移动，即执行 i = i + 1；<br>若 s = target ，立即返回数组 [nums[i],nums[j]] ；</p><p><strong>实现:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">twoSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">!=</span> r<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> l<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">></span> target<span class="token punctuation">)</span> r<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token punctuation">{</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220506133726971.png" alt="image-20220506133726971"></p><hr><h3 id="3-翻转单词顺序"><a href="#3-翻转单词顺序" class="headerlink" title="3. 翻转单词顺序"></a>3. 翻转单词顺序</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220506133951807.png" alt="image-20220506133951807"></p><p><strong>解题思路</strong>:</p><ul><li>倒序遍历字符串 s ，记录单词左右索引边界 i , j ；</li><li>每确定一个单词的边界，则将其添加至单词列表 res ；</li><li>最终，将单词列表拼接为字符串，并返回即可。</li></ul><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">reverseWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// 去除首尾空格</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> l<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> r<span class="token operator">--</span><span class="token punctuation">;</span>        stack<span class="token operator">&lt;</span>string<span class="token operator">></span> dp<span class="token punctuation">;</span>        string tmp<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">' '</span> <span class="token operator">&amp;&amp;</span> tmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                dp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>                 tmp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span> tmp <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>            l<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        dp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        string res<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>dp<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res <span class="token operator">+</span><span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dp<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220506135746451.png" alt="image-20220506135746451"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第十三天-双指针-简单&quot;&gt;&lt;a href=&quot;#第十三天-双指针-简单&quot; class=&quot;headerlink&quot; title=&quot;第十三天_双指针(简单)&quot;&gt;&lt;/a&gt;第十三天_双指针(简单)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;  刷题日程指引: &lt;a href=&quot;</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://roranrui.cn/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
    <category term="算法" scheme="https://roranrui.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
