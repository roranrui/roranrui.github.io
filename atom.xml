<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>若然无亦的Blog</title>
  
  <subtitle>长日终有时, 长梦终有逝</subtitle>
  <link href="https://roranrui.github.io/atom.xml" rel="self"/>
  
  <link href="https://roranrui.github.io/"/>
  <updated>2022-04-19T15:09:05.381Z</updated>
  <id>https://roranrui.github.io/</id>
  
  <author>
    <name>若然无亦</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++_Basis</title>
    <link href="https://roranrui.github.io/2022/04/19/opencv-clion-huan-jing-pei-zhi/"/>
    <id>https://roranrui.github.io/2022/04/19/opencv-clion-huan-jing-pei-zhi/</id>
    <published>2022-04-19T15:03:41.000Z</published>
    <updated>2022-04-19T15:09:05.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenCv环境配置"><a href="#OpenCv环境配置" class="headerlink" title="OpenCv环境配置"></a>OpenCv环境配置</h1><h2 id="1-配置前的准备"><a href="#1-配置前的准备" class="headerlink" title="1. 配置前的准备"></a>1. 配置前的准备</h2><ul><li><a href="https://opencv.org/releases/">OpenCv源码</a></li></ul><p><img src="https://s2.loli.net/2021/12/20/VnxUYgGlpaTySNA.png" alt="image-20211220191844237"></p><ul><li><p><a href="https://github.com/opencv/opencv_contrib">OpenCV拓展库</a></p></li><li><p><a href="https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/">MinGW编译器(posix)</a></p></li><li><p><a href="https://cmake.org/download/">CMake</a></p></li></ul><p><img src="https://s2.loli.net/2021/12/20/AnvfKMpHGIo5SuN.png" alt="image-20211220191750473"></p><ul><li><a href="https://git-scm.com/download/win">git</a></li></ul><p><img src="https://s2.loli.net/2021/12/20/JTsiWQ9FcINyXAh.png" alt="image-20211220192028646"></p><hr><h2 id="2-执行CMake"><a href="#2-执行CMake" class="headerlink" title="2. 执行CMake"></a>2. 执行CMake</h2><p>​将OpenCv源码解压完后, 将拓展库==opencv_contrib==文件夹放到同目录下, 并创建一个==migw_build==的文件夹, 如下图所示</p><p><img src="https://s2.loli.net/2021/12/20/OHo2qvb1ydRauV6.png" alt="image-20211220192228022"></p><p>完成后, 打开CMake-gui软件, 准备cmake.<br>先配置好源文件路径和编译输出文件夹的路径，分别如下：</p><p><img src="https://s2.loli.net/2021/12/20/JKYeqo9SCNnyIh4.png" alt="image-20211220192748002"></p><p>然后，点击下面的config按钮，就会让你选择编译器，选择==Specify native compilers==, 填入编译器指定路径:</p><p><img src="https://s2.loli.net/2021/12/20/qyD4EGkpR9oVNZJ.png" alt="image-20211220192905442"></p><p>点击finish之后，就开始cmake的config了，config完后，结果如下：</p><p><img src="https://s2.loli.net/2021/12/20/FmzToHKYbkxsSGv.png" alt="image-20211220192924762"></p><p>出现Configuring done之后，需要再次点击一下config，让这片红色消失：<img src="https://s2.loli.net/2021/12/20/xUiFsvW7kwQIhHD.png" alt="image-20211220193023639"></p><p>再次Configuring done之后，就点击generate，开始生成makefile文件:</p><p><img src="https://s2.loli.net/2021/12/20/YrF2diyxIn4LhSX.png" alt="image-20211220193004838"></p><p>在Configuring done的基础上看到了Generating done，说明generate完成了</p><p>添加扩展包的路径的方法如下，再cmake_gui的窗口中找到OPENCV_EXTRA_MODULES_PATH这一项，可以看到是空白的，我们将OpenCV_contrib的modules文件夹路径添加进来，如下所示：</p><p><img src="https://s2.loli.net/2021/12/20/dHBiEvahRU7erAJ.png" alt="image-20211220193229291"></p><p>然后再次点击configure,跟之前一样，也会出现红色，然后再次点击configure,红色消失，说明config完成，<br>然后就点击generate,出现generating done 就说明Opencv3.2的扩展包也cmake完了，扩展包cmake的图片就不贴出来了，反正跟上面三幅图是一样的。</p><p>当扩展包的cmake也出现Generating done之后，我们就可以开始执行cmake生产的makefile文件了，即开始编译链接的工作</p><hr><h2 id="3-编译makefile文件"><a href="#3-编译makefile文件" class="headerlink" title="3. 编译makefile文件"></a>3. 编译makefile文件</h2><p>在cmake的目标文件夹中，单击右键，选择Git Bash Here，前提是你要已经安装了git<br>然后就打开了git bash的命令行窗口, 输入指令mingw32-make -j8(以8个线程进行)，开始执行编译链接工作，如下所示：</p><p><img src="https://s2.loli.net/2021/12/20/aLZnviNMxEc2DVf.png" alt="img"></p><p>然后需要苦苦等待，看着编译进度从0%开始一点一点往上加，如果出现100%不报错，那么就成功了，如下所示：</p><p><img src="https://s2.loli.net/2021/12/20/9B6HZbSIjpXxTqf.png" alt="image-20211220193425249"></p><p>如果出现错误, 很正常想办法解决就彳亍, 结尾会总结我出现的错误以及解决方法</p><hr><h2 id="4-配置环境变量"><a href="#4-配置环境变量" class="headerlink" title="4. 配置环境变量"></a>4. 配置环境变量</h2><p>配置相关路径到<strong>用户环境变量</strong>:</p><p><img src="https://s2.loli.net/2021/12/20/8BVG9cXesjQNf2R.png" alt="image-20211220193658690"></p><hr><h2 id="5-CMakeLists-txt的配置"><a href="#5-CMakeLists-txt的配置" class="headerlink" title="5. CMakeLists.txt的配置"></a>5. CMakeLists.txt的配置</h2><p><img src="https://s2.loli.net/2021/12/20/wWJEsc5NTmY8dKC.png" alt="image-20211220193814066"></p><hr><h2 id="6-测试"><a href="#6-测试" class="headerlink" title="6. 测试"></a>6. 测试</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Mat img = <span class="built_in">imread</span>(<span class="string">"E:\\Programming\\C++\\OpenCv\\A_Soul.jpg"</span>, (<span class="number">1920</span>, <span class="number">1080</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">"A_Soul"</span>, img);</span><br><span class="line">    <span class="built_in">waitKey</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>输出结果如下:</p><p><img src="https://s2.loli.net/2021/12/20/F6l4NiEyCULQIxW.png" alt="image-20211220194020709"></p><p>结束!</p><hr><h2 id="附录-遇到的问题-本人遇到的"><a href="#附录-遇到的问题-本人遇到的" class="headerlink" title="附录: 遇到的问题(本人遇到的)"></a>附录: 遇到的问题(本人遇到的)</h2><h3 id="1-MinGW编译OpenCV到vs-version-rc-obj处出错-我愿称之为究极折磨"><a href="#1-MinGW编译OpenCV到vs-version-rc-obj处出错-我愿称之为究极折磨" class="headerlink" title="1. MinGW编译OpenCV到vs_version.rc.obj处出错, 我愿称之为究极折磨"></a>1. <strong>MinGW编译OpenCV到vs_version.rc.obj处出错</strong>, <strong>我愿称之为究极折磨</strong></h3><p><img src="https://s2.loli.net/2021/12/20/lvyBfxcD8pPOzdH.png" alt="image-20211220194307607"></p><p>各种编译过程中总是出现各种模块的==vs_version.rc.obj==这个文件缺失的问题, 而且还非常规律(气死!)</p><p>解决: 自行生成==vs_version.rc.obj==文件</p><p><a href="%E6%8A%98%E7%A3%A8!!!.txt">折磨</a></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F:\ProgramFlies\C++\tdm64-gcc\bin\windres.exe E:\Programming\opencv\mingw_build\modules\xxxx\vs_version.rc -O coff E:\Programming\opencv\mingw_build\modules\xxxx\CMakeFiles\opencv_xxxx.dir\vs_version.rc.obj</span><br></pre></td></tr></tbody></table></figure><p>第一个路径是编译器==windres.exe==的路径, 第二个路径是对应模块的路径</p><p>只需要把出错的模块名字替换==xxxx==, 复制到cmd中执行, 就能生成对应的文件</p><hr><h3 id="2-mingw编译OpenCV-error-‘mutex’-in-namespace-‘std’-does-not-name-a-type"><a href="#2-mingw编译OpenCV-error-‘mutex’-in-namespace-‘std’-does-not-name-a-type" class="headerlink" title="2. mingw编译OpenCV error: ‘mutex’ in namespace ‘std’ does not name a type"></a>2. mingw编译OpenCV error: ‘mutex’ in namespace ‘std’ does not name a type</h3><p>​<strong>解决: 在mingw构建工具链的“线程模型:win32”中不支持互斥。必须选择任何具有“线程模型:posix”的工具链。</strong><br><strong>选择 -posix的免安装包。作为编译器</strong></p><hr><h3 id="3-opencv报错Process-finished-with-exit-code-1073741515-0xC0000135"><a href="#3-opencv报错Process-finished-with-exit-code-1073741515-0xC0000135" class="headerlink" title="3. opencv报错Process finished with exit code -1073741515 (0xC0000135)"></a>3. opencv报错Process finished with exit code -1073741515 (0xC0000135)</h3><p>解决: 在配置中添加环境变量</p><p><img src="https://s2.loli.net/2021/12/20/Jjkfg9iN2dC6eWY.png" alt="image-20211220195434564"></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;OpenCv环境配置&quot;&gt;&lt;a href=&quot;#OpenCv环境配置&quot; class=&quot;headerlink&quot; title=&quot;OpenCv环境配置&quot;&gt;&lt;/a&gt;OpenCv环境配置&lt;/h1&gt;&lt;h2 id=&quot;1-配置前的准备&quot;&gt;&lt;a href=&quot;#1-配置前的准备&quot; cla</summary>
      
    
    
    
    
    <category term="C++ Programming 环境配置" scheme="https://roranrui.github.io/tags/C-Programming-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://roranrui.github.io/2022/04/18/hello-world/"/>
    <id>https://roranrui.github.io/2022/04/18/hello-world/</id>
    <published>2022-04-18T14:13:23.828Z</published>
    <updated>2022-04-18T14:13:23.828Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
