<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>若然无亦的Blog</title>
  
  <subtitle>长日终有时, 长梦终有逝</subtitle>
  <link href="https://roranrui.cn/atom.xml" rel="self"/>
  
  <link href="https://roranrui.cn/"/>
  <updated>2022-04-26T15:14:18.235Z</updated>
  <id>https://roranrui.cn/</id>
  
  <author>
    <name>若然无亦</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTML学习笔记</title>
    <link href="https://roranrui.cn/2022/04/26/html-xue-xi-bi-ji/"/>
    <id>https://roranrui.cn/2022/04/26/html-xue-xi-bi-ji/</id>
    <published>2022-04-26T14:22:03.000Z</published>
    <updated>2022-04-26T15:14:18.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML学习笔记"><a href="#HTML学习笔记" class="headerlink" title="HTML学习笔记"></a>HTML学习笔记</h1><blockquote><p>  文章转载至: [<a href="https://docs.mphy.top/">MurphyChen’s Notes</a>]仅供学习交流使用</p><p>  如有侵权, 请立即联系我删除!</p></blockquote><h1 id="（一）HTML-标签（上）"><a href="#（一）HTML-标签（上）" class="headerlink" title="（一）HTML 标签（上）"></a>（一）HTML 标签（上）</h1><h2 id="1-HTML-语法规范"><a href="#1-HTML-语法规范" class="headerlink" title="1. HTML 语法规范"></a>1. HTML 语法规范</h2><h3 id="1-1-基本语法规范"><a href="#1-1-基本语法规范" class="headerlink" title="1.1 基本语法规范"></a>1.1 基本语法规范</h3><ol><li>HTML 标签通常是成对出现的，例如<code>&lt;html&gt;</code>和<code>&lt;html/&gt;</code>，称为双标签。第一个是开始标签，第二个是结束标签。</li><li>有些特殊标签必须是单个标签（极少情况），例如<code>&lt;br/&gt;</code>，我们称之为单标签。</li></ol><h3 id="1-2-标签关系"><a href="#1-2-标签关系" class="headerlink" title="1.2 标签关系"></a>1.2 标签关系</h3><p>标签关系可以分为两类：包含关系和并列关系</p><h2 id="2-HTML-基本结构标签"><a href="#2-HTML-基本结构标签" class="headerlink" title="2. HTML 基本结构标签"></a>2. HTML 基本结构标签</h2><p>每个网页都会有一个基本的结构标签，页面内容都是在这些基本标签上书写。 HTML 页面也叫 HTML 文档。</p><h2 id="3-开发工具"><a href="#3-开发工具" class="headerlink" title="3. 开发工具"></a>3. 开发工具</h2><h3 id="3-1-文档类型声明标签"><a href="#3-1-文档类型声明标签" class="headerlink" title="3.1 文档类型声明标签"></a>3.1 文档类型声明标签</h3><p><code>!&lt;DOCTYPE&gt;</code> 文档类型声明，告诉浏览器使用何种 HTML 版本来显示网页。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>Copy to clipboardErrorCopied<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>这句话的意思是：当前页面采用的是 HTML5 版本来显示网页。</strong> <strong>注意：</strong></p><ol><li><code>&lt;!DOCTYPE&gt;</code> 声明位于文档最前面的位置，处于<code>&lt;html&gt;</code>标签之前。</li><li><code>&lt;!DOCTYPE&gt;</code> 不是一个 HTML 标签，他就是文档类型声明标签。</li></ol><h3 id="3-2-lang-语言种类"><a href="#3-2-lang-语言种类" class="headerlink" title="3.2 lang 语言种类"></a>3.2 lang 语言种类</h3><p>用来显示当前文档显示的语言。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>Copy to clipboardErrorCopied<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li><code>en</code> 定义语言为英文。</li><li><code>zh-CN</code> 定义语言为中文。</li></ol><p>这个属性对浏览器和搜索引擎（谷歌/百度）还是有作用的。</p><h3 id="3-3-charset-字符集"><a href="#3-3-charset-字符集" class="headerlink" title="3.3 charset 字符集"></a>3.3 charset 字符集</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>Copy to clipboardErrorCopied<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>字符集（character set）是多个字符的集合，以便计算机能够识别和存储各种文字。</p><p>在<code>&lt;head&gt;</code>标签内，可以通过<code>&lt;meta&gt;</code>标签的<code>charset</code> 属性来设置文档使用何种字符编码。</p><p><code>charset</code>常用的值有：GBK、UTF-8，其中UTF-8被称为万国码，基本包含了全世界所有国家需要用到的字符。</p><h2 id="4-HTML-常用标签"><a href="#4-HTML-常用标签" class="headerlink" title="4. HTML 常用标签"></a>4. HTML 常用标签</h2><h3 id="4-1-标签语义"><a href="#4-1-标签语义" class="headerlink" title="4.1 标签语义"></a>4.1 标签语义</h3><p>标签语义就是标签的含义。</p><p>根据标签的语义，再合适的地方给一个最合理的标签，可以让页面结构更清晰。</p><h3 id="4-2-标题标签-h1-h6（重要）"><a href="#4-2-标题标签-h1-h6（重要）" class="headerlink" title="4.2 标题标签 h1-h6（重要）"></a>4.2 标题标签 h1-h6（重要）</h3><p>为了使网页具有语义化，经常使用标题标签，HTML 提供 6 个等级的网页标题标签即 <code>&lt;h1&gt;-&lt;h6&gt;</code>。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>标题标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>标题一共六级选,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>文字加粗一行显。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>由大到小依次减，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>从重到轻随之变。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>语法规范书写后，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span>具体效果刷新见。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span>Copy to clipboardErrorCopied<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单词为 head 简写，从 h1-h6 依据重要性递减。</p><h3 id="4-3-段落和换行标签（重要）"><a href="#4-3-段落和换行标签（重要）" class="headerlink" title="4.3 段落和换行标签（重要）"></a>4.3 段落和换行标签（重要）</h3><p><code>p</code> 指<strong>paragraph</strong>，意为段落。把文字有条理的显示出来就需要将文字分段显示。在 html 中，<code>&lt;p&gt;</code> 标签用于定义段落，将整个网页分成若干个段落。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是一个段落标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>Copy to clipboardErrorCopied<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>标签语义: 把 HTML 文档分割为若干段落。</p><p><strong>特点：</strong></p><ol><li>文本在一个段落中会根据浏览器窗口的大小自动换行。</li><li>段落和段落之间保有空隙。</li></ol><hr><p><code>&lt;br/&gt;</code> 是 break 缩写，意为打断、换行。</p><p>标签语义： 强制换行</p><p><strong>特点：</strong></p><ol><li><code>&lt;br/&gt;</code> 是个单标签。</li><li><code>&lt;br/&gt;</code> 标签只是简单地开始新的一行，跟段落不一样，段落之间会插入一些垂直的间距。</li></ol><p>课堂案例</p><p>体育新闻显示页面——基本标签的使用</p><h3 id="4-4-文本格式化标签"><a href="#4-4-文本格式化标签" class="headerlink" title="4.4 文本格式化标签"></a>4.4 文本格式化标签</h3><p>在网页中，有时候需要为文字设置<strong>粗体</strong>、<em>斜体</em>或下划线等效果，需要使用 HTML 中的文本格式化标签，使文字以特殊方式显示。</p><p>标签语义： 突出重要性，比普通文字重要。</p><table><thead><tr><th>语义</th><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>加粗</td><td><code>&lt;strong&gt;&lt;/strong&gt;</code>或<code>&lt;b&gt;&lt;/b&gt;</code></td><td>更推荐<code>&lt;strong&gt;</code>，语义更强烈</td></tr><tr><td>斜体</td><td><code>&lt;em&gt;&lt;/em&gt;</code>或<code>&lt;i&gt;&lt;/i&gt;</code></td><td>更推荐使用<code>&lt;em&gt;</code>，语义更强烈</td></tr><tr><td>删除线</td><td><code>&lt;del&gt;&lt;/del&gt;</code>或<code>&lt;s&gt;&lt;s/&gt;</code></td><td>更推荐使用<code>&lt;del&gt;</code>，语义更强烈</td></tr><tr><td>下划线</td><td><code>&lt;ins&gt;&lt;/ins&gt;</code>或<code>&lt;u&gt;&lt;/u&gt;</code></td><td>更推荐使用<code>&lt;ins&gt;</code>，语义更强烈</td></tr></tbody></table><h3 id="4-5-div-和-span-标签"><a href="#4-5-div-和-span-标签" class="headerlink" title="4.5 div 和 span 标签"></a>4.5 div 和 span 标签</h3><div>&nbsp;和&nbsp;<span>&nbsp;是没有语义的，它们是一个盒子，用来装内容的。<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>这是头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>今日价格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>Copy to clipboardErrorCopied<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>div 是 division 的缩写，表示分割、分区。span 意思是跨度、跨距。</p><p><strong>特点：</strong></p><ol><li>div 标签用来布局，但是现在一行只能放一个 div，大盒子。</li><li>span 标签用来布局，一行可以多个 span，小盒子。</li></ol><h3 id="4-6-图像标签和路径（重点）"><a href="#4-6-图像标签和路径（重点）" class="headerlink" title="4.6 图像标签和路径（重点）"></a>4.6 图像标签和路径（重点）</h3><h4 id="4-6-1-图像标签"><a href="#4-6-1-图像标签" class="headerlink" title="4.6.1 图像标签"></a>4.6.1 图像标签</h4><p>在 HTML 标签中，<code>&lt;img /&gt;</code> 标签用于定义 HTML 标签页面中的图像。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图像url<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>Copy to clipboardErrorCopied<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>单词 image 的缩写，意为图像。</p><p>src 是标签的 必须属性，用于指定图像文件的路径和文件名。</p><p><strong>属性：</strong> 属于这个图像标签的特性。</p><p><strong>图像标签的其他属性</strong></p><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><code>src</code></td><td>图片路径</td><td>必须属性</td></tr><tr><td><code>alt</code></td><td>文本</td><td>替换文本，当图片不显示时显示文字</td></tr><tr><td><code>title</code></td><td>文本</td><td>提示文本。鼠标放到图像上显示文字</td></tr><tr><td><code>width</code></td><td>像素</td><td>图像宽度</td></tr><tr><td><code>height</code></td><td>像素</td><td>图像高度</td></tr><tr><td><code>border</code></td><td>像素</td><td>图像边框粗细</td></tr></tbody></table><h4 id="4-6-2-路径"><a href="#4-6-2-路径" class="headerlink" title="4.6.2 路径"></a>4.6.2 路径</h4><ul><li>相对路径</li><li>绝对路径</li></ul><h5 id="1-相对路径"><a href="#1-相对路径" class="headerlink" title="1. 相对路径"></a>1. 相对路径</h5><p>相对路径： 以引用文件位置为参考基础，而建立出来的目录路径。是相对于 HTML 页面的位置。</p><table><thead><tr><th>分类</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>同级路径</td><td></td><td>同一级</td></tr><tr><td>下一级路径</td><td><code>/</code></td><td>位于 HTML 文件上一级</td></tr><tr><td>上一级路径</td><td><code>../</code></td><td>位于 HTML 文件下一级</td></tr></tbody></table><h5 id="2-绝对路径"><a href="#2-绝对路径" class="headerlink" title="2. 绝对路径"></a>2. 绝对路径</h5><p>绝对路径： 是指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径或者完整的网络地址。</p><h3 id="4-7-超链接标签"><a href="#4-7-超链接标签" class="headerlink" title="4.7 超链接标签"></a>4.7 超链接标签</h3><p>在 HTML 标签中，<code>&lt;a/&gt;</code> 标签用于从一个页面链接到另一个页面。</p><h4 id="4-7-1-链接的语法格式"><a href="#4-7-1-链接的语法格式" class="headerlink" title="4.7.1 链接的语法格式"></a>4.7.1 链接的语法格式</h4><p>a 是单词 anchor 的简写，是锚的意思。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>跳转目标<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>目标窗口的弹出方式<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文本或图像<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>Copy to clipboardErrorCopied<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>属性</strong></p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td><code>href</code></td><td>指定链接地址 url，为必须属性。</td></tr><tr><td><code>target</code></td><td>指定页面打开方式，<code>_self</code>为默认值，<code>_blank</code>为在新窗口中打开</td></tr></tbody></table><h4 id="4-7-2-超链接分类"><a href="#4-7-2-超链接分类" class="headerlink" title="4.7.2 超链接分类"></a>4.7.2 超链接分类</h4><ol><li><p>外部链接</p></li><li><p>内部链接：网站内部页面之间的相互链接。</p></li><li><p>空链接: <code>#</code></p></li><li><p>下载链接：地址链接的是文件.exe、压缩包.zip 等。</p></li><li><p>网页元素链接：在网页中的各种网页元素。如文本、图像、表格、音频、视频等。</p></li><li><p>锚点链接：</p><p>点击链接，可以快速定位到页面中的某个位置。</p><ul><li>在链接文本的<code>href</code>属性中，设置属性为 #名字的形式</li><li>找到目标位置标签，里面添加一个 id 属性 = 名字</li></ul></li></ol><p>Tip</p><p>阻止 <code>a</code> 链接跳转，课可给 <code>href</code> 属性设置 <code>javascript:void(0);</code> 或者 <code>javascript:;</code>。</p><h2 id="5-HTML-中的注释和特殊字符号"><a href="#5-HTML-中的注释和特殊字符号" class="headerlink" title="5. HTML 中的注释和特殊字符号"></a>5. HTML 中的注释和特殊字符号</h2><ol><li>注释: <code>&lt;!--注释--&gt;</code> VSCode 中快捷键：Ctrk + /</li><li>字符实体</li></ol><table><thead><tr><th>字符</th><th>显示</th></tr></thead><tbody><tr><td><code> </code></td><td>空格</td></tr><tr><td><code>&lt;</code></td><td>＜</td></tr><tr><td><code>&gt;</code></td><td>＞</td></tr><tr><td><code>©</code></td><td>©</td></tr></tbody></table><hr><h1 id="（二）HTML-标签（下）"><a href="#（二）HTML-标签（下）" class="headerlink" title="（二）HTML 标签（下）"></a>（二）HTML 标签（下）</h1><h2 id="1-表格标签"><a href="#1-表格标签" class="headerlink" title="1. 表格标签"></a>1. 表格标签</h2><h3 id="1-1-表格的主要作用"><a href="#1-1-表格的主要作用" class="headerlink" title="1.1 表格的主要作用"></a>1.1 表格的主要作用</h3><p>表格主要用于显示、展示数据，因为可以让数据显示非常规整，可读性好。 表格不是来布局的，而是来展示数据的。</p><h3 id="1-2-表格基本语法"><a href="#1-2-表格基本语法" class="headerlink" title="1.2 表格基本语法"></a>1.2 表格基本语法</h3><ol><li><code>&lt;table&gt;&lt;/table&gt;</code> 用于定义表格的标签。</li><li><code>&lt;tr&gt;&lt;/tr&gt;</code> 标签用于定义表格中的行，必须嵌套在 <code>&lt;table&gt;&lt;/table&gt;</code>中。</li><li><code>&lt;td&gt;&lt;/td&gt;</code> 用于定义表格中的单元格，必须嵌套在 <code>&lt;tr&gt;&lt;/tr&gt;</code> 中。</li><li>字母 td 指表格数据（table data），即单元格的内容。</li></ol><h3 id="1-3-表头单元格标签-th"><a href="#1-3-表头单元格标签-th" class="headerlink" title="1.3 表头单元格标签 th"></a>1.3 表头单元格标签 th</h3><p>一般单元格位于表格的第一行或第一列，表格单元格里面的文本内容 <strong>加粗显示</strong>。 <code>&lt;th&gt;</code> 标签表示 HTML 表格的表头部分（table head 的缩写） 表头单元格(<code>&lt;th&gt;</code>)也是单元格，常用于表格第一行，突出重要性，表头单元格里面的文字会加粗居中显示。</p><h3 id="1-4-表格属性"><a href="#1-4-表格属性" class="headerlink" title="1.4 表格属性"></a>1.4 表格属性</h3><p>只作了解，后期通过 CSS 来设置。 这些属性都要写到 <code>&lt;table&gt;&lt;/table&gt;</code> 标签中</p><table><thead><tr><th>属性名</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><code>align</code></td><td>left、center、right</td><td>表格元素对齐方式</td></tr><tr><td><code>border</code></td><td>1 或””</td><td>规定是否有边框，默认为<code>""</code>，表示没有边框</td></tr><tr><td><code>cellpadding</code></td><td>像素值</td><td>规定单元边沿与其内容之间空白，默认 1px</td></tr><tr><td><code>cellspacing</code></td><td>像素值</td><td>规定单元格之间的空白，默认为 2px</td></tr><tr><td><code>width</code></td><td>像素值或百分比</td><td>规定表格宽度</td></tr><tr><td><code>hight</code></td><td>像素</td><td>表格高度</td></tr></tbody></table><h3 id="1-5-表格结构标签"><a href="#1-5-表格结构标签" class="headerlink" title="1.5 表格结构标签"></a>1.5 表格结构标签</h3><p>场景：表格可能很长，将表格分割为表格头部和表格主题两大部分。</p><p>加强语义化：<code>&lt;thead&gt;</code> 表示头部区域，<code>&lt;tbody&gt;</code> 表示主体区域，更好区分表格结构。</p><p>注意：</p><ol><li><code>&lt;thead&gt;&lt;/thead&gt;</code>：定义表格头部，且内部必须有<code>&lt;tr&gt;</code>标签。</li><li><code>&lt;tbody&gt;&lt;/tbody&gt;</code>：定义表格主体，存放数据。</li><li>以上标签都放在 <code>&lt;table&gt;&lt;/table&gt;</code> 里面。</li></ol><h3 id="1-6-合并单元格"><a href="#1-6-合并单元格" class="headerlink" title="1.6 合并单元格"></a>1.6 合并单元格</h3><p><strong>合并单元格方式：</strong></p><ul><li>跨行合并：rowspan=”合并单元格个数”</li><li>跨列合并：colspan=”合并单元格个数”</li></ul><p>合并三部曲：</p><ol><li>确定跨行 or 跨列。</li><li>找到目标单元格：跨行取最上面为目标单元格，跨列取最左边为目标单元格。<code>&lt;td colspan="2"&gt;&lt;/td&gt;</code></li><li>删除多余单元格。</li></ol><h2 id="2-列表标签"><a href="#2-列表标签" class="headerlink" title="2. 列表标签"></a>2. 列表标签</h2><p>表格展示数据，列表则用来布局。 列表特点是整齐、整洁、有序，作为布局更方便自由。 根据使用场景不同，列表分为三大类：</p><ul><li>无序列表</li><li>有序列表</li><li>自定义列表。</li></ul><h3 id="2-1-无序列表（重要）"><a href="#2-1-无序列表（重要）" class="headerlink" title="2.1 无序列表（重要）"></a>2.1 无序列表（重要）</h3><p><code>&lt;ul&gt;</code> 标签标识 HTML 页面项目中的无序列表，一般以项目符号呈现列表项。</p><p>语法格式:</p><pre class="line-numbers language-HTML"><code class="language-HTML"><ul>    <li>列表项1</li>    <li>列表项2</li>    <li>列表项3</li></ul>Copy to clipboardErrorCopied<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:</p><ol><li>各个列表项之间无需，并列关系。</li><li><code>&lt;ul&gt;&lt;/ul&gt;</code>中只能包含<code>&lt;li&gt;&lt;/li&gt;</code>，写入其他标签或文字是不允许的。</li><li>无序列表带有自己的属性，可用 CSS 修改样式属性。</li></ol><h3 id="2-2-有序列表（理解）"><a href="#2-2-有序列表（理解）" class="headerlink" title="2.2 有序列表（理解）"></a>2.2 有序列表（理解）</h3><p>使用 <code>&lt;ol&gt;</code> 标签来定义有序列表，<code>&lt;li&gt;</code> 来定义列表项。</p><pre class="line-numbers language-HTML"><code class="language-HTML"><ol>    <li>列表项1</li>    <li>列表项2</li>    <li>列表项3</li></ol>Copy to clipboardErrorCopied<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与无需列表类似，有自己的样式属性，通过 CSS 设置。</p><h3 id="2-3-自定义列表（重点）"><a href="#2-3-自定义列表（重点）" class="headerlink" title="2.3 自定义列表（重点）"></a>2.3 自定义列表（重点）</h3><p><code>&lt;dl&gt;</code> 定义描述列表，与 <code>&lt;dt&gt;</code> 和 <code>&lt;dd&gt;</code> 标签配合使用。</p><p>基本语法：</p><pre class="line-numbers language-HTML"><code class="language-HTML"><dl>    <dt>名词1</dt>    <dd>名词1解释1</dd>    <dd>名词1解释2</dd></dl>Copy to clipboardErrorCopied<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><ol><li>dl 里面只能包含 dt 和 dd。</li></ol><h2 id="3-表头标签"><a href="#3-表头标签" class="headerlink" title="3. 表头标签"></a>3. 表头标签</h2><h3 id="3-1-为什么需要表头"><a href="#3-1-为什么需要表头" class="headerlink" title="3.1 为什么需要表头"></a>3.1 为什么需要表头</h3><p>收集用户信息。 和用户进行交互，收集用户资料。</p><h3 id="3-2-表头组成"><a href="#3-2-表头组成" class="headerlink" title="3.2 表头组成"></a>3.2 表头组成</h3><ul><li>表单域</li><li>表单控件（元素）</li><li>提示信息</li></ul><h3 id="3-3-表单域"><a href="#3-3-表单域" class="headerlink" title="3.3 表单域"></a>3.3 表单域</h3><p>表单域是一个包含表单元素的区域。 使用 <code>&lt;form&gt;</code> 标签用于定义表单域，手机和传递用户信息。 form 标签会将它范围内的表单元素信息提交给服务器。</p><p>目前而言，暂时不需要用表单域提交数据，只需要写上 <code>form</code> 标签即可。</p><p><strong>语法格式</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url地址<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交方式<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>表单域名称<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  各种表单元素控件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>Copy to clipboardErrorCopied<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>常用属性：</strong></p><table><thead><tr><th>属性</th><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>action</td><td>url 地址</td><td>指定接受并处理表单数据的服务器的 url 地址</td></tr><tr><td>method</td><td>get/post</td><td>设置表单数据的提交方式</td></tr><tr><td>name</td><td>名称</td><td>用于指定表单名称，区分同一个页面中的多个表单域</td></tr></tbody></table><p>注意：</p><ol><li>写表单元素之前需要有表单域将其包含。</li><li>表单域是 <code>form</code> 标签。</li></ol><h3 id="3-4-表单控件（表单元素）"><a href="#3-4-表单控件（表单元素）" class="headerlink" title="3.4 表单控件（表单元素）"></a>3.4 表单控件（表单元素）</h3><p>在表单域中定义各种表单元素，允许用户在表单中输入或选择的内容控件。</p><h4 id="3-4-1-表单元素"><a href="#3-4-1-表单元素" class="headerlink" title="3.4.1 表单元素"></a>3.4.1 表单元素</h4><p><code>&lt;input&gt;</code> 标签用于收集用户信息。</p><p><code>input</code> 标签包含 <code>type</code> 属性，决定了输入字段的不同形式：文本字段、复选框、掩码后的文本控件、单选按钮、按钮等。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>属性值<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>Copy to clipboardErrorCopied<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>input</code> 标签为单标签</li><li><code>type</code> 属性设置不同属性值来指定不同控件类型</li></ul><p>type 常用属性值</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>button</td><td>定义可点击按钮</td></tr><tr><td>checkox</td><td>复选框</td></tr><tr><td>file</td><td>定义输入字段和“浏览”按钮，供文件上传</td></tr><tr><td>hidden</td><td>定义隐藏的输入字段</td></tr><tr><td>image</td><td>定义图像形式的提交按钮</td></tr><tr><td>password</td><td>定义密码字段。字符被掩码。</td></tr><tr><td>radio</td><td>定义单选按钮</td></tr><tr><td>reset</td><td>定义重置按钮，清除表单所有数据。</td></tr><tr><td>submit</td><td>定义提交按钮。重置按钮会清除表单所有数据。</td></tr><tr><td>text</td><td>定义输入字段。用户可输入文本，默认宽度为 20 个字符。</td></tr></tbody></table><p>input 的其他属性</p><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>自定义</td><td>定义 input 元素名称</td></tr><tr><td>value</td><td>自定义</td><td>规定 input 元素的值</td></tr><tr><td>checked</td><td>checked</td><td>规定此 input 元素首次加载时应当被选中</td></tr><tr><td>maxlength</td><td>正整数</td><td>规定输入字段字符的最大长度</td></tr></tbody></table><p>注意</p><ol><li>对于 <code>radio</code> 单选框，必须使 <code>input</code> 的 <code>name</code> 具有相同的属性值，才能实现多选一。 同理，复选框也要有相同的<code>name</code>值。</li><li>单选框和复选框可以设置 <code>checked</code> 属性，页面打开默认选择按钮。</li><li>设置 <code>type</code> 的值为 <code>submit</code>，点击按钮后可以把表单域 form 里面的表单元素里面的值提交给后台。</li><li>设置 <code>type="button"</code>，普通按钮，后期结合 js 使用</li></ol><h3 id="3-4-2-label-标签"><a href="#3-4-2-label-标签" class="headerlink" title="3.4.2 label 标签"></a>3.4.2 label 标签</h3><p><code>&lt;label&gt;</code> 标签为 input 元素定义标注。 <code>&lt;label&gt;</code> 标签用于绑定一个表单源深路，当点击 label 标签内的文本时，浏览器自动将焦点转到或者选择对应的表单元素上，提升用户体验。 <strong>语法：</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>Copy to clipboardErrorCopied<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>核心：</strong> <code>&lt;lable&gt;</code>标签的 for 属性与相关元素的 id 属性相同。</p><h3 id="3-4-3-select-下拉表单元素"><a href="#3-4-3-select-下拉表单元素" class="headerlink" title="3.4.3 select 下拉表单元素"></a>3.4.3 select 下拉表单元素</h3><p><code>select</code> 标签设置多个选项让用户选择，节约页面空间。 <strong>语法</strong></p><pre class="line-numbers language-HTML"><code class="language-HTML"><select>    <option>选项1</option>    <option>选项2</option>    <option>选项3</option></select>Copy to clipboardErrorCopied<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><ol><li>select 中至少包含一对 option。</li><li>在 option 中定义属性<code>selected=selected</code>，当前项即为默认选项。</li></ol><h3 id="3-4-4-textarea-文本域表单元素"><a href="#3-4-4-textarea-文本域表单元素" class="headerlink" title="3.4.4 textarea 文本域表单元素"></a>3.4.4 textarea 文本域表单元素</h3><p>场景：输入内容较多时。</p><p><strong>语法：</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    文本内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>Copy to clipboardErrorCopied<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Tip</p><p>&gt; <code>cols="每行字符数"，rows="显示的行数"</code></p></span></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTML学习笔记&quot;&gt;&lt;a href=&quot;#HTML学习笔记&quot; class=&quot;headerlink&quot; title=&quot;HTML学习笔记&quot;&gt;&lt;/a&gt;HTML学习笔记&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;  文章转载至: [&lt;a href=&quot;https://docs.m</summary>
      
    
    
    
    <category term="前端学习" scheme="https://roranrui.cn/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="html" scheme="https://roranrui.cn/tags/html/"/>
    
    <category term="前端" scheme="https://roranrui.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>设计模式概谈</title>
    <link href="https://roranrui.cn/2022/04/26/she-ji-mo-shi-gai-tan/"/>
    <id>https://roranrui.cn/2022/04/26/she-ji-mo-shi-gai-tan/</id>
    <published>2022-04-26T14:15:32.000Z</published>
    <updated>2022-04-26T14:16:35.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式概谈"><a href="#设计模式概谈" class="headerlink" title="设计模式概谈"></a>设计模式概谈</h1><h2 id="1-设计模式"><a href="#1-设计模式" class="headerlink" title="1.设计模式"></a>1.设计模式</h2><ul><li>程序灵活，维护起来可能方便，用设计模式理念写出来的代码很晦涩，但是别人接管、阅读代码都会很痛苦</li><li>老外应付特别大的项目时，把项目的开发经验、模块划分经验，总结整理成设计模式</li><li>中国零几年设计模式刚开始火时，总喜欢拿一个设计模式往上套，导致一个小小的项目总要加几个设计模式，本末倒置</li><li>设计模式有其独特的优点，要活学活用，不要深陷其中，生搬硬套</li></ul><hr><h2 id="2-单例设计模式："><a href="#2-单例设计模式：" class="headerlink" title="2.单例设计模式："></a>2.单例设计模式：</h2><p>整个项目中，有某个或者某些特殊的类，只能创建一个属于该类的对象。</p><blockquote><p>  单例类：只能生成一个对象。</p></blockquote><hr><h2 id="3-单例设计模式共享数据分析、解决"><a href="#3-单例设计模式共享数据分析、解决" class="headerlink" title="3.单例设计模式共享数据分析、解决"></a>3.单例设计模式共享数据分析、解决</h2><p>面临问题：需要在自己创建的线程中来创建单例类的对象，这种线程可能不止一个。我们可能面临<code>GetInstance()</code>这种成员函数需要互斥。</p><blockquote><p>  如果觉得在单例模式<code>new</code>了一个对象，而没有自己delete掉，这样不合理。可以增加一个类中类<code>Recycle</code>，<code>new</code>一个单例类时创建一个静态的<code>Recycle</code>对象，这样在程序结束时会调用<code>Recycle</code>的析构函数，释放掉<code>new</code>出来的单例对象。</p></blockquote><p><strong>单例类</strong>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyCAS</span>  <span class="token comment" spellcheck="true">// 单例类</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token function">MyCAS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 私有化构造函数</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> MyCAS <span class="token operator">*</span>my_intstance<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> MyCAS <span class="token operator">*</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>my_intstance <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            my_intstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyCAS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">static</span> Recycle recycle<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> my_intstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"for Test."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Recycle</span>    <span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token operator">~</span><span class="token function">Recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>MyCAS<span class="token operator">::</span>my_intstance <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">delete</span> MyCAS<span class="token operator">::</span>my_intstance<span class="token punctuation">;</span>                MyCAS<span class="token operator">::</span>my_intstance <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    ~MyCAS()  // 不能在类中直接调用, 因为不会析构(没有创建实体类)</span><span class="token comment" spellcheck="true">//    {</span><span class="token comment" spellcheck="true">//        if (my_intstance != nullptr)</span><span class="token comment" spellcheck="true">//        {</span><span class="token comment" spellcheck="true">//            delete my_intstance;</span><span class="token comment" spellcheck="true">//            my_intstance = nullptr;</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//    }</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 初始化静态成员变量</span>MyCAS <span class="token operator">*</span>MyCAS<span class="token operator">::</span>my_intstance <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 单例类</span>    MyCAS <span class="token operator">*</span>p_m <span class="token operator">=</span> MyCAS<span class="token operator">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建一个对象, 返回该类的对象指针</span><span class="token comment" spellcheck="true">//    MyCAS *p_b = MyCAS::getInstance();  // 返回的仍是同一个</span>    p_m<span class="token operator">-</span><span class="token operator">></span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MyCAS<span class="token operator">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决线程重复调用<code>getInstance()</code>问题:</p><blockquote><p>  可以在加锁前判断m_instance是否为空，否则每次调用<code>MyCAS::getInstance()</code>都要加锁，十分影响效率。</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp">        <span class="token comment" spellcheck="true">// 提高效率</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>my_intstance <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 双重锁定</span>        <span class="token punctuation">{</span>            unique_lock<span class="token operator">&lt;</span>mutex<span class="token operator">></span> <span class="token function">myMtx</span><span class="token punctuation">(</span>recursive_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>my_intstance <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                my_intstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyCAS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">static</span> Recycle recycle<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> my_intstance<span class="token punctuation">;</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="4-call-once"><a href="#4-call-once" class="headerlink" title="4. call_once()"></a>4. call_once()</h2><blockquote><p>  函数模板，该函数的第一个参数为标记，第二个参数是一个函数名（如a()）。<br>  <strong>功能：能够保证函数a()只被调用一次。具备互斥量的能力，而且比互斥量消耗的资源更少，更高效。</strong><br>  <code>call_once()</code>需要与一个标记结合使用，这个标记为<code>std::once_flag</code>；其实<code>once_flag</code>是一个结构，<code>call_once()</code>就是通过标记来决定函数是否执行，调用成功后，就把标记设置为一种已调用状态。</p><p>  多个线程同时执行时，一个线程会等待另一个线程先执行。</p></blockquote><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">static</span> once_flag m_flag<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 系统定义的标记</span><span class="token keyword">class</span> <span class="token class-name">MyCAS</span>  <span class="token comment" spellcheck="true">// 单例类</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        my_intstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyCAS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> Recycle recycle<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"creatInstance()只执行了一次"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token function">MyCAS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 私有化构造函数</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> MyCAS <span class="token operator">*</span>my_intstance<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> MyCAS <span class="token operator">*</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">call_once</span><span class="token punctuation">(</span>m_flag<span class="token punctuation">,</span> createInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"call_once执行完毕"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> my_intstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"for Test."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Recycle</span>    <span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token operator">~</span><span class="token function">Recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>MyCAS<span class="token operator">::</span>my_intstance <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">delete</span> MyCAS<span class="token operator">::</span>my_intstance<span class="token punctuation">;</span>                MyCAS<span class="token operator">::</span>my_intstance <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 初始化静态成员变量</span>MyCAS <span class="token operator">*</span>MyCAS<span class="token operator">::</span>my_intstance <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">myThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"线程 "</span> <span class="token operator">&lt;&lt;</span> this_thread<span class="token operator">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" 开始执行"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    MyCAS <span class="token operator">*</span>p_A<span class="token operator">=</span> MyCAS<span class="token operator">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p_A<span class="token operator">-</span><span class="token operator">></span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    thread <span class="token function">ts1</span><span class="token punctuation">(</span>myThread<span class="token punctuation">)</span><span class="token punctuation">;</span>    thread <span class="token function">ts2</span><span class="token punctuation">(</span>myThread<span class="token punctuation">)</span><span class="token punctuation">;</span>    ts1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ts2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式概谈&quot;&gt;&lt;a href=&quot;#设计模式概谈&quot; class=&quot;headerlink&quot; title=&quot;设计模式概谈&quot;&gt;&lt;/a&gt;设计模式概谈&lt;/h1&gt;&lt;h2 id=&quot;1-设计模式&quot;&gt;&lt;a href=&quot;#1-设计模式&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="语言学习" scheme="https://roranrui.cn/categories/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
    <category term="设计模式" scheme="https://roranrui.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Shell入门</title>
    <link href="https://roranrui.cn/2022/04/26/shell-ru-men/"/>
    <id>https://roranrui.cn/2022/04/26/shell-ru-men/</id>
    <published>2022-04-26T12:35:20.000Z</published>
    <updated>2022-04-26T12:36:30.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shell基础"><a href="#Shell基础" class="headerlink" title="Shell基础"></a>Shell基础</h1><h1 id="一、关于shell"><a href="#一、关于shell" class="headerlink" title="一、关于shell"></a>一、关于shell</h1><h2 id="1、什么是shell"><a href="#1、什么是shell" class="headerlink" title="1、什么是shell"></a>1、什么是shell</h2><p><strong>什么是shell？</strong></p><p>Shell（外壳） 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。<strong>Shell</strong> <strong>既是一种命令语言</strong>，<strong>又是一种程序设计语言</strong>。</p><p>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。</p><p><strong>什么是脚本？</strong></p><p>脚本简单地说就是一条条的文字命令，这些文字命令是可以看到的（如可以用记事本打开查看、编辑）。</p><p>常见的脚本： <strong>JavaScript（JS，前端）</strong>，VBScript， <strong>ASP，JSP，PHP（后端）</strong>，SQL（数据库操作语言），Perl，<strong>Shell</strong>，python，Ruby，JavaFX，Lua等。</p><p><strong>为什么要学习和使用shell？</strong></p><p>Shell属于内置的脚本</p><p>程序开发的效率非常高，依赖于功能强大的命令可以迅速地完成开发任务（批处理）</p><p>语法简单，代码写起来比较轻松，简单易学</p><p><strong>常见的shell种类？</strong></p><p>在linux中有很多类型的shell，不同的shell具备不同的功能，shell还决定了脚本中函数的语法，Linux中默认的shell是**/bin/bash（重点）**，流行的shell有ash、bash、ksh、csh、zsh等，不同的shell都有自己的特点以及用途。</p><p>csh</p><p>C shell 使用的是“类C”语法,csh是具有C语言风格的一种shell，其内部命令有52个，较为庞大。目前使用的并不多，已经被/bin/tcsh所取代。</p><p>ksh</p><p>Korn shell 的语法与 Bourne shell 相同，同时具备了 C shell 的易用特点。许多安装脚本都使用 ksh ，ksh有42条内部命令，与bash相比有一定的限制性。</p><p>tcsh</p><p>tcsh是csh的增强版，与 C shell 完全兼容。</p><p>sh </p><p>是一个快捷方式，已经被/bin/bash所取代。</p><p>nologin</p><p>指用户不能登录</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image1.png" alt="img"></p><p>zsh</p><p>目前Linux里最庞大的一种shell：zsh。它有84个内部命令，使用起来也比较复杂。一般情况下，不会使用该shell。</p><p><strong>bash</strong></p><p><strong>大多数Linux系统默认使用的shell</strong>，bash shell 是 Bourne shell 的一个免费版本，它是最早的 Unix shell，bash还有一个特点，可以通过help命令来查看帮助。包含的功能几乎可以涵盖shell所具有的功能，所以一般的shell脚本都会指定它为执行路径。</p><h2 id="2、shell入门"><a href="#2、shell入门" class="headerlink" title="2、shell入门"></a>2、shell入门</h2><p>编写规范：</p><p>代码规范：</p><p>​    #!/bin/bash            [指定告知系统当前这个脚本要使用的shell解释器]</p><p>​    Shell相关指令</p><p>文件命名规范：</p><p>​    文件名.sh              .sh是linux下bash shell 的默认后缀</p><p>使用流程：</p><p>①创建.sh文件          touch/vim</p><p>②编写shell代码</p><p>③执行shell脚本        脚本必须得有执行权限</p><p>案例1：创建test.sh，实现第一个shell脚本程序，输出hello world.</p><p>输出命令：#echo 123</p><p>注意：输出的内容如果包含字母和符号（不包含变量），则需要用引号包括起来。如果是纯数字可以包也可以不包。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image2.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image4.jpg" alt="img"></p><p>注意，这里在运行时一定要写成 ./test.sh，而不是 test.sh，运行其它二进制的程序也一样，直接写 test.sh，Linux 系统会去 PATH（环境变量） 里寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 test.sh 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找。</p><p>案例2：使用root用户帐号创建并执行test2.sh，实现创建一个shelltest用户，并在其家目录中新建文件try.html。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image5.png" alt="img"></p><p>脚本执行的另外一个方式：/bin/bash 脚本的路径（了解）</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image6.png" alt="img"></p><p>Shell脚本分为简单的写法（简单命令的堆积）和复杂写法（程序的设计）</p><h1 id="二、shell进阶（重点）"><a href="#二、shell进阶（重点）" class="headerlink" title="二、shell进阶（重点）"></a>二、shell进阶（重点）</h1><h2 id="1、变量（重点）"><a href="#1、变量（重点）" class="headerlink" title="1、变量（重点）"></a>1、变量（重点）</h2><h3 id="1-1、变量的含义"><a href="#1-1、变量的含义" class="headerlink" title="1.1、变量的含义"></a>1.1、变量的含义</h3><p>a. 什么是量</p><p>量就是数据.</p><p>b. 什么是变量</p><p>数据可以发生改变就是变量.</p><p><strong>在一个脚本周期内,其值可以发生改变的量就是变量.</strong></p><p>c. 什么叫做一个脚本周期</p><p>一个脚本周期我们可以简单的理解为当前的shell文件</p><p>变量是shell中不可或缺的一部分，也是<strong>最基础、最重要</strong>的组成部分。</p><h3 id="1-2、变量的定义与使用（重点）"><a href="#1-2、变量的定义与使用（重点）" class="headerlink" title="1.2、变量的定义与使用（重点）"></a>1.2、变量的定义与使用（重点）</h3><p>变量，先定义后使用。</p><p><strong>定义形如：class_name=”yunwe “</strong></p><p><strong>使用形如：echo $class_name</strong></p><p>变量就是由2部分组成,一个是变量名（左边），另外一部分是变量的值（右边）</p><p>变量名和变量值是什么关系??</p><p>变量名和变量值是<strong>使用和被使用</strong>关系; 我们的变量名来使用变量值;</p><p>在使用变量的时候一定需要在变量名前面添加一个$符号，该要求在其他语言中也存在的（例如php）。</p><p>变量名的规范</p><p>注意，变量名后面的等号左右不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：</p><p>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</p><p>中间不能有空格，可以使用下划线“_”。</p><p>不能使用标点符号。</p><p>不能使用bash里的关键字（可用help命令查看保留关键字）。</p><pre><code>问题：以下哪个shell变量名是合法的？A. var       B.?var       C. user*name       D.echo</code></pre><p>案例1：使用变量改写入门脚本中的第1个shell脚本。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image7.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image8.png" alt="img"></p><p><strong>关于单双引号的问题：</strong></p><p><strong>双引号能够识别变量，双引号能够实现转义（类似于“*”）</strong></p><p><strong>单引号是不能识别变量，只会原样输出，单引号是不能转义的</strong></p><p>案例2：定义一个变量，输出当前时间，要求格式为“年-月-日 时:分:秒”。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image9.png" alt="img"></p><p><strong>注意：反引号（esc键下方的那个键），当在脚本中需要执行一些指令并且将执行的结果赋给变量的时候需要使用“反引号”。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image10.png" alt="img"></p><h3 id="1-3、只读变量（了解）"><a href="#1-3、只读变量（了解）" class="headerlink" title="1.3、只读变量（了解）"></a>1.3、只读变量（了解）</h3><p>语法：readonly 变量名</p><p>案例：定义变量a并且其值为10，随后设置其为只读变量，再去尝试重新赋值</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image11.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image12.png" alt="img"></p><h3 id="1-4、接收用户输入（重点）"><a href="#1-4、接收用户输入（重点）" class="headerlink" title="1.4、接收用户输入（重点）"></a>1.4、接收用户输入（重点）</h3><p><strong>语法：read -p</strong> <strong>提示信息</strong>  <strong>变量名</strong></p><p>案例：编写一个脚本test6.sh，要求执行之后提示用户输入文件的名称（路径），然后自动为用户创建该文件</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image14.jpg" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image16.jpg" alt="img"></p><h3 id="1-5、删除变量（了解）"><a href="#1-5、删除变量（了解）" class="headerlink" title="1.5、删除变量（了解）"></a>1.5、删除变量（了解）</h3><p>语法：unset 变量名</p><p>案例：定义变量b=20，再输出b的值，随后删除b，最后再输出下b</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image17.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image18.png" alt="img"></p><h2 id="2、条件判断语句"><a href="#2、条件判断语句" class="headerlink" title="2、条件判断语句"></a>2、条件判断语句</h2><p>老婆给当程序员的老公打电话：<strong>下班顺路买一斤包子带回来，如果看到卖西瓜的，买一个</strong>。当晚，程序员老公手捧一个包子进了家门…老婆怒道：你怎么就买了一个包子？！老公答曰：因为看到了卖西瓜的。</p><p>把程序员老婆的话当作一段需求分析一下吧。买一斤包子是一个确定无疑的需求项，无论后面是什么情况什么条件，前面这一斤包子是肯定要买的。看到卖西瓜的是一个条件判断，后面“买一个”是一个模糊不清的需求项，买一个什么呢？需求里没说啊。客户把这个当作开发人员默认了解的内容了。可是作为一个成熟合格的程序员，该老婆的丈夫应该马上跟进确认需求“买一个什么？”，要不然程序可怎么写呢？所以笑话里该程序员是不合格的，起码是不积极不负责的。在没有明确需求的情况下，他只能按照自己的理解来完成工作了。那比较可能的结果就有如下几种：</p><p>1 看到卖西瓜的，买一个西瓜</p><p>​    <strong>如果</strong> <strong>看到卖西瓜的</strong></p><p>​         <strong>那么</strong></p><p>​         <strong>买一个西瓜</strong></p><p>​    <strong>否则</strong></p><p>​        <strong>买一斤包子</strong></p><p>2 看到卖西瓜的，买一个包子</p><p>​    <strong>如果</strong> <strong>看到卖西瓜的</strong></p><p>​         <strong>那么</strong></p><p>​         <strong>买一个包子</strong></p><p>3 看到卖西瓜的，买一个卖西瓜的</p><p>4 看到卖西瓜的，买一个老婆一直想买的东西</p><p>5 看到卖西瓜的，随便买一个东西</p><p><strong>上述1和2下面的条件汉字描述称之为“伪代码”，也是属于条件表达式的语法。</strong></p><p>语法1（一个条件）：</p><p><strong>if condition</strong></p><p><strong>then</strong></p><p>  <strong>command1</strong> </p><p>  <strong>command2</strong></p><p>  <strong>…</strong></p><p><strong>fi</strong></p><p>单行写法（一般在命令行中执行的时候）：if [ condition ]; then command; fi</p><p>语法2（两个条件）：</p><p><strong>if condition</strong></p><p><strong>then</strong></p><p>  <strong>command1</strong> </p><p>  <strong>command2</strong></p><p>  <strong>…</strong></p><p><strong>else</strong></p><p>  <strong>command</strong></p><p><strong>fi</strong></p><p>语法3（多个条件）：</p><p><strong>if condition1</strong></p><p><strong>then</strong></p><p>  <strong>command1</strong></p><p><strong>elif condition2</strong> </p><p><strong>then</strong></p><p>  <strong>command2</strong></p><p><strong>else</strong></p><p>  <strong>commandN</strong></p><p><strong>fi</strong></p><h2 id="3、运算符"><a href="#3、运算符" class="headerlink" title="3、运算符"></a>3、运算符</h2><p>在shell中，运算符和其他编程脚本语言一样，常见的有算数运算符、关系运算符、</p><p>逻辑运算符、字符串运算符、<strong>文件测试运算符</strong>等</p><h3 id="3-1、算数运算符"><a href="#3-1、算数运算符" class="headerlink" title="3.1、算数运算符"></a>3.1、算数运算符</h3><p>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>说明</strong></th><th><strong>举例</strong></th></tr></thead><tbody><tr><td>+</td><td>加法</td><td><code>expr  $a + $b</code> 结果为 30。</td></tr><tr><td>-</td><td>减法</td><td><code>expr  $a - $b</code> 结果为 -10。</td></tr><tr><td>*</td><td>乘法</td><td><code>expr  $a \* $b</code> 结果为  200。</td></tr><tr><td>/</td><td>除法</td><td><code>expr  $b / $a</code> 结果为 2。</td></tr><tr><td>%</td><td>取余</td><td><code>expr  $b % $a</code> 结果为 0。</td></tr><tr><td>=</td><td>赋值</td><td>a=$b 将把变量 b 的值赋给 a。</td></tr><tr><td>==</td><td>相等。用于比较两个数字，相同则返回 true（真）。</td><td>[ $a  == $b ] 返回 false（假）。</td></tr><tr><td>!=</td><td>不相等。用于比较两个数字，不相同则返回 true。</td><td>[ $a  != $b ] 返回 true。</td></tr></tbody></table><p><strong>注意：</strong>条件表达式要放在方括号之间，并且要有空格，例如: <strong>[$a==$b]</strong> 是错误的，必须写成 **[ $a == $b ]**。</p><p>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。</p><p>expr 是一款表达式计算工具，使用它能完成表达式的求值操作。</p><p>例如，两个数相加(注意使用的是反引号 ` 而不是单引号 ‘)：</p><p>#!/bin/bash</p><p>val=<code>expr 2 + 2</code></p><p>echo “两数之和为 : $val”</p><p>两点注意：</p><p>表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。</p><p>完整的表达式要被 <code> </code> 包含，注意这个字符不是常用的单引号，在 Esc 键下边。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image19.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image20.png" alt="img"></p><h3 id="3-2、关系运算符"><a href="#3-2、关系运算符" class="headerlink" title="3.2、关系运算符"></a>3.2、关系运算符</h3><p><strong>关系运算符只支持数字，不支持字符串，除非字符串的值是数字</strong>。</p><p>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>说明</strong></th><th><strong>举例</strong></th></tr></thead><tbody><tr><td>-eq</td><td>检测<strong>两个数是否相等</strong>，相等返回 true。</td><td>[ $a  -eq $b ] 返回 false。</td></tr><tr><td>-ne</td><td>检测<strong>两个数是否相等</strong>，不相等返回 true。</td><td>[ $a  -ne $b ] 返回 true。</td></tr><tr><td>-gt</td><td>检测左边的数<strong>是否大于</strong>右边的，如果是，则返回 true。</td><td>[ $a  -gt $b ] 返回 false。</td></tr><tr><td>-lt</td><td>检测左边的数<strong>是否小于</strong>右边的，如果是，则返回 true。</td><td>[ $a  -lt $b ] 返回 true。</td></tr><tr><td>-ge</td><td>检测左边的数<strong>是否大于等于</strong>右边的，如果是，则返回 true。</td><td>[ $a  -ge $b ] 返回 false。</td></tr><tr><td>-le</td><td>检测左边的数<strong>是否小于等于</strong>右边的，如果是，则返回 true。</td><td>[ $a  -le $b ] 返回 true。</td></tr></tbody></table><p>-eq：equal</p><p>-ne：not equal</p><p>-gt：great than</p><p>-lt：less than</p><p>-ge：great than or equal</p><p>-le：less than or equal</p><p>案例：使用a=10，b=20来实现本案例</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image21.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image22.png" alt="img"></p><p><strong>课堂作业：</strong></p><p>写一个脚本，判断当前输入的用户是否存在。如果存在则提示“用户存在”否则提示“用户不存在”。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image24.jpg" alt="img"></p><h3 id="3-3、逻辑运算符"><a href="#3-3、逻辑运算符" class="headerlink" title="3.3、逻辑运算符"></a>3.3、逻辑运算符</h3><p>下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>说明</strong></th><th><strong>举例</strong></th></tr></thead><tbody><tr><td>!</td><td>非运算，表达式为 true 则返回 false，否则返回 true。</td><td>[ !  false ] 返回 true。</td></tr><tr><td>-o</td><td>或（或者）运算，<strong>有一个表达式为</strong> <strong>true</strong> <strong>则返回</strong> <strong>true</strong>。</td><td>[ $a  -lt 20 -o $b -gt 100 ] 返回 true。</td></tr><tr><td>-a</td><td>与（并且）运算，<strong>两个表达式都为</strong> <strong>true</strong> 才返回 true。</td><td>[ $a  -lt 20 -a $b -gt 100 ] 返回 false。</td></tr></tbody></table><p><strong>或运算：一个为真即为真，全部为假才是假</strong></p><p><strong>与运算：一个为假即为假，全部为真才是真</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image25.png" alt="img"></p><h3 id="3-4、字符串运算符"><a href="#3-4、字符串运算符" class="headerlink" title="3.4、字符串运算符"></a>3.4、字符串运算符</h3><p>下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>说明</strong></th><th><strong>举例</strong></th></tr></thead><tbody><tr><td>=</td><td>检测两个字符串是否相等，相等返回 true。</td><td>[ $a =  $b ] 返回 false。</td></tr><tr><td>!=</td><td>检测两个字符串是否相等，不相等返回 true。</td><td>[ $a  != $b ] 返回 true。</td></tr><tr><td>-z</td><td>检测字符串长度是否为0，为0返回 true。</td><td>[ -z  $a ] 返回 false。</td></tr><tr><td>-n</td><td>检测字符串长度是否为0，不为0返回 true。</td><td>[ -n  $a ] 返回 true。</td></tr><tr><td>str</td><td>检测字符串是否为空，不为空返回 true。</td><td>[ $a ]  返回 true。</td></tr></tbody></table><p>案例：将上述的语法验证下</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image26.png" alt="img"></p><h3 id="3-5、文件测试运算符（重点）"><a href="#3-5、文件测试运算符（重点）" class="headerlink" title="3.5、文件测试运算符（重点）"></a>3.5、文件测试运算符（重点）</h3><p>文件测试运算符用于检测 Unix/Linux 文件的各种属性。</p><p>属性检测描述如下：</p><table><thead><tr><th><strong>操作符</strong></th><th><strong>说明</strong></th><th><strong>举例</strong></th></tr></thead><tbody><tr><td>-b  file</td><td>检测文件是否是块设备文件，如果是，则返回 true。</td><td>[ -b  $file ] 返回 false。</td></tr><tr><td>-c  file</td><td>检测文件是否是字符设备文件，如果是，则返回 true。</td><td>[ -c  $file ] 返回 false。</td></tr><tr><td>-d  file</td><td><strong>检测文件是否是目录，如果是，则返回</strong> <strong>true。</strong></td><td>[ -d  $file ] 返回 false。</td></tr><tr><td>-f  file</td><td><strong>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回</strong> <strong>true。</strong></td><td>[ -f  $file ] 返回 true。</td></tr><tr><td>-g  file</td><td>检测文件是否设置了 SGID 位，如果是，则返回 true。</td><td>[ -g  $file ] 返回 false。</td></tr><tr><td>-k  file</td><td>检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td><td>[ -k  $file ] 返回 false。</td></tr><tr><td>-p  file</td><td>检测文件是否是有名管道，如果是，则返回 true。</td><td>[ -p  $file ] 返回 false。</td></tr><tr><td>-u  file</td><td>检测文件是否设置了 SUID 位，如果是，则返回 true。</td><td>[ -u  $file ] 返回 false。</td></tr><tr><td>-r  file</td><td><strong>检测文件是否可读，如果是，则返回</strong> <strong>true。</strong></td><td>[ -r  $file ] 返回 true。</td></tr><tr><td>-w  file</td><td><strong>检测文件是否可写，如果是，则返回</strong> <strong>true。</strong></td><td>[ -w  $file ] 返回 true。</td></tr><tr><td>-x  file</td><td><strong>检测文件是否可执行，如果是，则返回</strong> <strong>true。</strong></td><td>[ -x  $file ] 返回 true。</td></tr><tr><td>-s  file</td><td><strong>检测文件是否为空（文件大小是否大于0），不为空返回</strong> <strong>true</strong>。</td><td>[ -s  $file ] 返回 true。</td></tr><tr><td>-e  file</td><td><strong>检测文件（包括目录）是否存在，如果是，则返回</strong> <strong>true。</strong></td><td>[ -e  $file ] 返回 true。</td></tr></tbody></table><p>案例：测试上述标绿色的效果</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image27.png" alt="img"></p><p>注意：权限几个判断，如果只有一个部分符合，则认为是有权限的。</p><h2 id="4、shell脚本附带选项（重点）"><a href="#4、shell脚本附带选项（重点）" class="headerlink" title="4、shell脚本附带选项（重点）"></a>4、shell脚本附带选项（重点）</h2><p>问题描述：在linux shell中如何处理tail -10 access.log这样的命令行选项？</p><p>步骤：</p><p>​    调用tail指令</p><p>​    <strong>系统把后续选项传递给tail</strong></p><p>​    Tail先去打开指定的文件</p><p>​    取出最后10行</p><p>问题：自己写的shell是否也可以像内置命令一样传递一些选项呢？</p><p>答：可以的，传递方式与上述的描述是一样的，关键是怎么接收。例如：</p><p>传递：</p><p>#./test.sh a b c</p><p>接收：</p><p>在脚本中可以用“$1”来表示a，“$2”来表示b，以此类推。</p><p><strong>接收可以用“$”加上选项对应的序号即可。</strong></p><p>测试：编写test14.sh，传递a，b，c，输出其值</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image28.png" alt="img"></p><p>其实$1、$2是变量。</p><p>练习：创建自定义<strong>指令“user”</strong>，可以直接执行，要求该指令具备以下语法和功能：</p><p>​    a. #user -add 用户名           【添加用户】</p><p>​    b. #user -del 用户名            【删除用户及其家目录】</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image29.png" alt="img"></p><p>同时题目中要求是指令，所以可以再去添加个别名：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/blip_image30.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Shell基础&quot;&gt;&lt;a href=&quot;#Shell基础&quot; class=&quot;headerlink&quot; title=&quot;Shell基础&quot;&gt;&lt;/a&gt;Shell基础&lt;/h1&gt;&lt;h1 id=&quot;一、关于shell&quot;&gt;&lt;a href=&quot;#一、关于shell&quot; class=&quot;header</summary>
      
    
    
    
    <category term="Shell脚本" scheme="https://roranrui.cn/categories/Shell%E8%84%9A%E6%9C%AC/"/>
    
    
    <category term="Linux" scheme="https://roranrui.cn/tags/Linux/"/>
    
    <category term="shell" scheme="https://roranrui.cn/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>七.Linux网络基础</title>
    <link href="https://roranrui.cn/2022/04/26/qi-linux-wang-luo-ji-chu/"/>
    <id>https://roranrui.cn/2022/04/26/qi-linux-wang-luo-ji-chu/</id>
    <published>2022-04-26T12:34:05.000Z</published>
    <updated>2022-04-26T12:34:31.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux的网络基础"><a href="#Linux的网络基础" class="headerlink" title="Linux的网络基础"></a>Linux的网络基础</h1><h1 id="一、网络相关概述"><a href="#一、网络相关概述" class="headerlink" title="一、网络相关概述"></a>一、网络相关概述</h1><h2 id="1、网络发展"><a href="#1、网络发展" class="headerlink" title="1、网络发展"></a>1、网络发展</h2><p><strong>信息传递</strong></p><p>n 远古时期，人们就通过简单的语言、壁画等方式交换信息</p><p>n 千百年来，人们一直在用语言、图符、钟鼓、烟火、竹简、纸书等传递信息</p><p>n 古代人的烽火狼烟、飞鸽传信、驿马邮递</p><p>n 现代社会中，交通警的指挥手语、航海中的旗语等</p><p>n 这些信息传递的基本方式都是依靠人的视觉与听觉</p><p><strong>电的产生</strong></p><p>n 1831年，法拉第制出了世界上最早的第一台发电机</p><p>n 1866年，德国人西门子（Siemens）制成世界上第一台大功率发电机</p><p>n 1837年，美国人塞缪乐·莫乐斯成功地研制出世界上第一台电磁式电报机</p><p>n 1844年5月24日，莫乐斯在国会大厦联邦最高法院会议厅进行了“用莫尔斯电码”发出了人类历史上的第一份电报，从而实现了长途电报通信</p><p><strong>网络诞生</strong></p><p>n 1957年，前苏联发射了第一颗人造卫星，震惊了美国</p><p>n 1958年美国成立了国防部<strong>高级研究计划署</strong>（ARPA，Advanced Research Projects Agency），应对冷战形势，ARPA是一个管理机构，没有实验室和科学家</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/cclip_image2.png" alt="http://upload.wikimedia.org/wikipedia/commons/thumb/0/00/Arpanet_1974.svg/800px-Arpanet_1974.svg.png"></p><p>n 1969年，ARPANET（阿帕网）开始联机，<strong>因此1969年被称为Internet元年</strong></p><p><strong>网络分类（记忆）</strong></p><p>n <strong>局域网</strong>（Local Area Network，<strong>LAN</strong>）是指范围在几百米到十几公里内办公楼群或校园内的计算机相互连接所构成的计算机网络。</p><p>n 城域网（Metropolitan Area Network，MAN）所采用的技术基本上与局域网相类似，只是规模上要大一些。城域网既可以覆盖相距不远的几栋办公楼，也可以覆盖一个城。</p><p>n <strong>广域网</strong>（Wide Area Network，<strong>WAN</strong>）通常跨接很大的物理范围，如一个国家。</p><p>除了上述的划分，<strong>网络还可以按照所有者分</strong>为公网、私网是两种Internet的接入方式。公网接入方式：上网的计算机得到的IP地址是Internet上的非保留地址，公网的计算机和Internet上的其他计算机可随意互相访问。私网则反之。</p><h2 id="2、ip地址（重点记忆）"><a href="#2、ip地址（重点记忆）" class="headerlink" title="2、ip地址（重点记忆）"></a>2、ip地址（重点记忆）</h2><p>IP是英文Internet Protocol的缩写，意思是“网络之间互连的协议”，也就是为计算机网络相互连接进行通信而设计的<strong>协议</strong>。</p><p><strong>IP地址类型分为：公有地址、私有地址。</strong></p><p>公有地址</p><p>公有地址（Public address）由Inter NIC（Internet Network Information Center因特网信息中心）负责。这些IP地址分配给注册并向Inter NIC提出申请的组织机构。通过它直接访问因特网。</p><p><strong>私有地址（重点）</strong></p><p>私有地址（Private address）属于<strong>非注册地址</strong>，专门为组织机构内部使用。以下列出留用的内部私有地址：</p><p>A类 10.0.0.0–10.255.255.255</p><p>B类 172.16.0.0–172.31.255.255</p><p><strong>C类 192.168.0.0–192.168.255.255</strong></p><p><strong>IP地址按类型可以分为三类：</strong></p><table><thead><tr><th>类别</th><th>最大网络数</th><th>IP地址范围</th><th>最大主机数</th><th>私有IP地址范围</th></tr></thead><tbody><tr><td>A</td><td>126（2^7-2)</td><td>1.0.0.0-127.255.255.255</td><td>16777214</td><td>10.0.0.0-10.255.255.255</td></tr><tr><td>B</td><td>16384(2^14)</td><td>128.0.0.0-191.255.255.255</td><td>65534</td><td>172.16.0.0-172.31.255.255</td></tr><tr><td>C</td><td>2097152(2^21)</td><td>192.0.0.0-223.255.255.255</td><td>254</td><td>192.168.0.0-192.168.255.255</td></tr></tbody></table><p>网络运维相关技能：ip分类、<strong>子网划分</strong>、划分vlan、ACL、综合布线、各种Serve的搭建。</p><p>127.0.0.1         本机ip</p><h2 id="3、网卡"><a href="#3、网卡" class="headerlink" title="3、网卡"></a>3、网卡</h2><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image004.jpg" alt="img"></p><p>网卡是一个网络组件，属于硬件范畴，主要负责计算机之间数据的<strong>封装和解封</strong>。</p><p>MAC地址：网卡的物理地址，网卡设备的编号，<strong>默认</strong>情况是全球唯一的（16进制）。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/cclip_image5.png" alt="img"></p><p><strong>与IP地址的区别：</strong></p><p>n 长度不同。IP地址为32位，MAC地址为48位。</p><p>n 分配依据不同。</p><p>n <strong>网络寻址方式不同</strong>。OSI参考模型，ip地址是基于第三层工作（网络层），mac地址是第二层（数据链路层）</p><h2 id="4、网线"><a href="#4、网线" class="headerlink" title="4、网线"></a>4、网线</h2><p>网线是连接局域网必不可少的。在局域网中常见的网线主要有双绞线（RJ45接口）、铜轴电缆、光缆三种。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/cclip_image7.jpg" alt="img"><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/cclip_image9.jpg" alt="img"><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/cclip_image11.jpg" alt="img"></p><p>​         双绞线                       铜轴电缆                  光纤</p><h2 id="5、交换机"><a href="#5、交换机" class="headerlink" title="5、交换机"></a>5、交换机</h2><p>交换机（Switch）意为“开关”，是一种用于电（光）信号转发的网络设备，交换机它可以为接入交换机的任意两个网络节点提供<strong>独享</strong>的电信号通路。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/cclip_image13.jpg" alt="img"></p><p>目前，交换机品牌比较有名的是：华为、华三（h3c）、思科、锐捷。</p><h2 id="6、路由器"><a href="#6、路由器" class="headerlink" title="6、路由器"></a>6、路由器</h2><p>路由器（Router）又称网关设备（Gateway）是用于<strong>连接多个逻辑上分开、相对独立的网络</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/cclip_image15.jpg" alt="img">       <img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/cclip_image17.jpg" alt="img"></p><h2 id="7、拓扑结构图（扩展）"><a href="#7、拓扑结构图（扩展）" class="headerlink" title="7、拓扑结构图（扩展）"></a>7、拓扑结构图（扩展）</h2><p>所谓“拓扑”就是把实体抽象成与其大小、形状无关的“点”，而把连接实体的线路抽象成“线”，进而以图的形式来表示这些点与线之间关系的方法，<strong>其目的在于研究这些点、线之间的相连关系</strong>。表示点和线之间关系的图被称为拓扑结构图。</p><p>常见的几种拓扑结构图：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image019.jpg" alt="img">  <img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/cclip_image21.jpg" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/cclip_image23.jpg" alt="img">          <img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/cclip_image25.jpg" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/cclip_image27.jpg" alt="img">         <img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/cclip_image29.jpg" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/cclip_image31.jpg" alt="img"></p><h1 id="二、网络相关命令"><a href="#二、网络相关命令" class="headerlink" title="二、网络相关命令"></a>二、网络相关命令</h1><h2 id="1、ping"><a href="#1、ping" class="headerlink" title="1、ping"></a>1、ping</h2><p><strong>作用：检测当前主机与目标主机之间的连通性</strong>（不是100%准确，有的服务器是禁ping）</p><p>语法：#ping 主机地址（ip地址、主机名、域名等）</p><p>例如：测试和baidu.com之间的连通性。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/cclip_image33.jpg" alt="img"></p><p>该命令可以跨平台，windows下也可以使用，语法一致。（区别在于Linux下默认一直发送，windows下默认发送4个数据包）</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/cclip_image35.jpg" alt="img"></p><h2 id="2、netstat"><a href="#2、netstat" class="headerlink" title="2、netstat"></a>2、netstat</h2><p><strong>作用：表示查看网络的连接信息</strong></p><p>语法：#netstat -tnlp      （-t：tcp协议，-n：将字母转化成数字，-l：列出状态为监听，-p：显示进程相关信息）</p><p>​     #netstat -an       （-a：表示全部，-n：将字母转化为数字）</p><p>TCP/IP协议需要使用这个命令。</p><h2 id="3、traceroute"><a href="#3、traceroute" class="headerlink" title="3、traceroute"></a>3、traceroute</h2><p><strong>作用：查找当前主机与目标主机之间所有的网关</strong>（路由器，会给沿途各个路由器发送icmp数据包，路由器可能会不给响应）。</p><p>该命令不是内置命令，需要安装，但是目前的已经安装好了（之前选了开发工具）。</p><p>语法：#traceroute 主机地址</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/cclip_image37.jpg" alt="img"></p><p>类似于查看快递的跟踪路由：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/cclip_image39.jpg" alt="img"></p><p>扩展：在windows下也有类似的命令：tracert 主机地址</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/cclip_image41.jpg" alt="img"></p><p>在线工具网址：<a href="http://tool.chinaz.com/">http://tool.chinaz.com</a></p><h2 id="4、arp"><a href="#4、arp" class="headerlink" title="4、arp"></a>4、arp</h2><p>地址解析协议，即ARP（Address Resolution Protocol），是<strong>根据IP地址获取（MAC）物理地址的协议</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image043.png" alt="img"></p><p><strong>当一个主机发送数据时，首先查看本机MAC地址缓存中有没有目标主机的MAC地址，</strong> <strong>如果有就使用缓存中的结果；如果没有，ARP协议就会发出一个广播包，该广播包要求查询目标主机IP地址对应的MAC地址，拥有该IP地址的主机会发出回应，回应中包括了目标主机的MAC地址，这样发送方就得到了目标主机的MAC地址。如果目标主机不在本地子网中，则ARP解析到的MAC地址是默认网关的MAC地址</strong>。</p><p>常用语法：#arp -a     查看本地缓存mac表</p><p>​          #arp -d 主机地址            删除指定的缓存记录</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/cclip_image45.jpg" alt="img"></p><p>该命令在windows下同样适用。</p><h2 id="5、tcpdump-了解"><a href="#5、tcpdump-了解" class="headerlink" title="5、tcpdump(了解)"></a>5、tcpdump(了解)</h2><p>作用：抓包，抓取数据表</p><p>常用语法：</p><p>​    #tcpdump 协议 port 端口</p><p>​    #tcpdump 协议 port 端口 host 地址</p><p>​    #tcpdump -i 网卡设备名</p><p>查看22端口（ssh）的数据包：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/cclip_image47.jpg" alt="img"></p><p>00:09:17.xxxx         监听数据的时分秒</p><p>IP：使用的协议类型</p><p>192.168.21.1          数据包的一个方向（来自）</p><p>&gt;                    数据的流向</p><p>192.168.21.136        数据包的另外一个方向（到达）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux的网络基础&quot;&gt;&lt;a href=&quot;#Linux的网络基础&quot; class=&quot;headerlink&quot; title=&quot;Linux的网络基础&quot;&gt;&lt;/a&gt;Linux的网络基础&lt;/h1&gt;&lt;h1 id=&quot;一、网络相关概述&quot;&gt;&lt;a href=&quot;#一、网络相关概述&quot; cla</summary>
      
    
    
    
    <category term="操作系统学习" scheme="https://roranrui.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Linux" scheme="https://roranrui.cn/tags/Linux/"/>
    
    <category term="操作系统" scheme="https://roranrui.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>六.Linux权限管理操作</title>
    <link href="https://roranrui.cn/2022/04/26/liu.linux-quan-xian-guan-li-cao-zuo/"/>
    <id>https://roranrui.cn/2022/04/26/liu.linux-quan-xian-guan-li-cao-zuo/</id>
    <published>2022-04-26T07:37:28.000Z</published>
    <updated>2022-04-26T07:38:06.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux的权限管理操作"><a href="#Linux的权限管理操作" class="headerlink" title="Linux的权限管理操作"></a>Linux的权限管理操作</h1><p><strong>Linux的权限操作与用户、用户组是兄弟操作。</strong></p><h1 id="一、权限概述"><a href="#一、权限概述" class="headerlink" title="一、权限概述"></a>一、权限概述</h1><p>总述：Linux系统一般将文件可存/取访问的身份分为3个类别：owner、group、others，且3种身份各有read、write、execute等权限。</p><h2 id="1、权限介绍"><a href="#1、权限介绍" class="headerlink" title="1、权限介绍"></a>1、权限介绍</h2><p>什么是权限？</p><p>在多用户（可以不同时）计算机系统的管理中，权限是指某个特定的用户具有特定的系统资源使用权力，像是文件夹、特定系统指令的使用或存储量的限制。</p><p>在Linux中分别有读、写、执行权限：</p><p>读权限：</p><p>​    对于文件夹来说，读权限影响用户是否能够列出目录结构</p><p>​    对于文件来说，读权限影响用户是否可以查看文件内容</p><p>写权限：</p><p>​    对文件夹来说，写权限影响用户是否可以在文件夹下“创建/删除/复制到/移动到”文档</p><p>​    对于文件来说，写权限影响用户是否可以编辑文件内容</p><p>执行权限：</p><p>​    一般都是对于文件来说，特别脚本文件。</p><h2 id="2、身份介绍"><a href="#2、身份介绍" class="headerlink" title="2、身份介绍"></a>2、身份介绍</h2><h3 id="Owner身份（文件所有者，默认为文档的创建者）"><a href="#Owner身份（文件所有者，默认为文档的创建者）" class="headerlink" title="Owner身份（文件所有者，默认为文档的创建者）"></a>Owner身份（文件所有者，默认为文档的创建者）</h3><p>由于Linux是多用户、多任务的操作系统，因此可能常常有多人同时在某台主机上工作，但每个人均可在主机上设置文件的权限，让其成为个人的“私密文件”，即个人所有者。因为设置了适当的文件权限，除本人（文件所有者）之外的用户无法查看文件内容。</p><p>例如某个MM给你发了一封Email情书，你将情书转为文件之后存档在自己的主文件夹中。为了不让别人看到情书的内容，你就能利用所有者的身份去设置文件的适当权限，这样，即使你的情敌想偷看你的情书内容也是做不到的。</p><h3 id="Group身份（与文件所有者同组的用户）"><a href="#Group身份（与文件所有者同组的用户）" class="headerlink" title="Group身份（与文件所有者同组的用户）"></a>Group身份（与文件所有者同组的用户）</h3><p>与文件所有者同组最有用的功能就体现在<strong>多个团队在同一台主机上开发资源的时候</strong>。例如主机上有A、B两个团体，A中有a1,a2,a3三个成员，B中有b1,b2两个成员，这两个团体要共同完成一份报告F。由于设置了适当的权限，A、B团体中的成员都能互相修改对方的数据，但是团体C的成员则不能修改F的内容，甚至连查看的权限都没有。同时，团体的成员也能设置自己的私密文件，让团队的其它成员也读取不了文件数据。<strong>在Linux中，每个账户支持多个用户组。如用户a1、b1即可属于A用户组，也能属于B用户组【主组和附加组】</strong>。</p><h3 id="Others身份（其他人，相对于所有者）"><a href="#Others身份（其他人，相对于所有者）" class="headerlink" title="Others身份（其他人，相对于所有者）"></a>Others身份（其他人，相对于所有者）</h3><p>这个是个相对概念。打个比方，大明、二明、小明一家三兄弟住在一间房，房产证上的登记者是大明（owner所有者），那么，大明一家就是一个用户组，这个组有大明、二明、小明三个成员；另外有个人叫张三，和他们三没有关系，那么这个张三就是其他人了。</p><p>同时，大明、二明、小明有各自的房间，三者虽然能自由进出各自的房间，但是小明不能让大明看到自己的情书、日记等，这就是文件所有者（用户）的意义。</p><h3 id="Root用户（超级用户）"><a href="#Root用户（超级用户）" class="headerlink" title="Root用户（超级用户）"></a>Root用户（超级用户）</h3><p>在Linux中，还有一个神一样存在的用户，这就是root用户，因为在所有用户中它拥有最大的权限 ，所以管理着普通用户。</p><h2 id="3、Linux的权限介绍"><a href="#3、Linux的权限介绍" class="headerlink" title="3、Linux的权限介绍"></a>3、Linux的权限介绍</h2><p>要设置权限，就需要知道文件的一些基本属性和权限的分配规则。在Linux中，ls命令常用来查看文件的属性，用于显示文件的文件名和相关属性。</p><p>#ls -l 路径      【ls -l 等价于 ll】</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/mlip_image2.jpg" alt="img"></p><p>标红的部分就是Linux的文档权限属性信息。</p><p><strong>Linux中存在用户、用户组和其他人概念</strong>，各自有不同的权限，对于一个文档来说，其权限具体分配如下：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/mlip_image3.png" alt="img"></p><p>十位字符表示含义：</p><p>第1位：表示文档类型，取值常见的有“d表示文件夹”、“-表示文件”、“l表示软连接”、“s表示套接字”等等；</p><p>第2-4位：表示文档所有者的权限情况，第2位表示读权限的情况，取值有r、-；第3位表示写权限的情况，w表示可写，-表示不可写，第4位表示执行权限的情况，取值有x、-。</p><p>第5-7位：表示与所有者同在一个组的用户的权限情况，第5位表示读权限的情况，取值有r、-；第6位表示写权限的情况，w表示可写，-表示不可写，第7位表示执行权限的情况，取值有x、-。</p><p>第8-10位：表示除了上面的前2部分的用户之外的其他用户的权限情况，第8位表示读权限的情况，取值有r、-；第9位表示写权限的情况，w表示可写，-表示不可写，第10位表示执行权限的情况，取值有x、-。</p><p>权限分配中,均是rwx的三个参数组合，<strong>且位置顺序不会变化</strong>。没有对应权限就用 – 代替。</p><p><strong>例如：以下一个文档权限是怎么样的？</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/mlip_image5.jpg" alt="img"></p><p>a. 其是文件夹类型</p><p>b. 所有者：拥有全部权限（读写执行）</p><p>c. 同组用户：可读、可执行</p><p>d. 其他用户：可读、可执行</p><h1 id="二、权限设置"><a href="#二、权限设置" class="headerlink" title="二、权限设置"></a>二、权限设置</h1><p><strong>语法：#chmod</strong> <strong>选项</strong> <strong>权限模式</strong> <strong>文档</strong></p><p>注意事项：</p><p>​    常用选项：</p><p>​             -R：递归设置权限 （当文档类型为文件夹的时候）</p><p>​    权限模式：就是该文档需要设置的权限信息</p><p>​    文档：可以是文件，也可以是文件夹，可以是相对路径也可以是绝对路径。</p><p><strong>注意点：如果想要给文档设置权限，操作者要么是root用户，要么就是文档的所有者。</strong></p><h2 id="1、字母形式"><a href="#1、字母形式" class="headerlink" title="1、字母形式"></a>1、字母形式</h2><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/mlip_image7.jpg" alt="img"></p><p>给谁设置：</p><p>​    u：表示所有者身份owner（user）</p><p>​    g：表示给所有者同组用户设置（group）</p><p>​    o：表示others，给其他用户设置权限</p><p>​    a：表示all，给所有人（包含ugo部分）设置权限</p><p>​         <strong>如果在设置权限的时候不指定给谁设置，则默认给所有用户设置</strong></p><p>权限字符：</p><p>​    r：读</p><p>​    w：写</p><p>​    x：表示执行</p><p>​    -：表示没有权限</p><p>权限分配方式：</p><p>​    +：表示给具体的用户新增权限（相对当前）</p><p>​    -：表示删除用户的权限（相对当前）</p><p>​    =：表示将权限设置成具体的值（注重结果）【赋值】</p><p><strong>例如：需要给anaconda-ks.cfg文件（-rw——-.）设置权限，要求所有者拥有全部的权限，同组用户拥有读和执行权限，其他用户只读权限。</strong></p><p>答案：</p><p>①#chmod u+x,g+rx,o+r anaconda-ks.cfg</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/mlip_image9.jpg" alt="img"></p><p>​    ②#chmod u=rwx,g=rx,o=r anaconda-ks.cfg</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/mlip_image11.jpg" alt="img"></p><p><strong>提示：当文档拥有执行权限（任意部分），则其颜色在终端中是绿色。</strong></p><p>#chmod ug=rwx 形式，如果有两部分权限一样则可以合在一起写的</p><p><strong>例如：如果anaconda-ks.cfg文件什么权限都没有，可以使用root用户设置所有人都有执行权限，则可以写成</strong></p><p>​    ①#chmod +x anaconda-ks.cfg</p><p>​    ②#chmod a=x anaconda-ks.cfg</p><p>​    ③#chmod a+x anaconda-ks.cfg</p><h2 id="2、数字形式"><a href="#2、数字形式" class="headerlink" title="2、数字形式"></a>2、数字形式</h2><p>经常会在一些技术性的网页上看到类似于**#chmod 777 a.txt**  这样的一个权限，这种形式称之为数字形式权限（777）。</p><p><strong>读：r     4</strong></p><p><strong>写：w        2</strong></p><p><strong>执行：x      1</strong></p><p>没有任何权限：0</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/mlip_image13.jpg" alt="img"></p><p>例如：需要给anaconda-ks.cfg设置权限，权限要求所有者拥有全部权限，同组用户拥有读执行权限，其他用户只读。</p><p><strong>全部权限（u）：读+写+执行=4+2+1=7</strong></p><p><strong>读和执行（g）：读+执行=4+1=5</strong></p><p><strong>读权限（o）：读=4</strong></p><p>由上得知权限为：754</p><p>#chmod 754 anaconda-ks.cfg</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/mlip_image15.jpg" alt="img"></p><p><strong>面试题：用超级管理员设置文档的权限命令是#chmod -R 731 aaa，请问这个命令有没有什么不合理的地方？</strong></p><p>拥有者：7=4+2+1=读+写+执行</p><p>同组用户：3=2+1=写+执行</p><p>其他用户：1=1=执行</p><p>注意：<strong>在写权限的时候千万不要设置类似于上面的这种“奇葩权限”</strong>。如果一个权限数字中但凡出现2与3的数字，则该权限有不合理的情况。</p><h2 id="3、注意事项"><a href="#3、注意事项" class="headerlink" title="3、注意事项"></a>3、注意事项</h2><p>使用root用户创建一个文件夹（/oo），权限默认，权限如下：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image016.png" alt="img"></p><p>需要在oo目录下创建文件（oo/xx.txt），需要给777权限：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/mlip_image18.jpg" alt="img"></p><p>切换到test用户（不是文档所有者，也不是同组用户，属于other部分）：</p><p>问题1：test用户是否可以打开oo/xx.txt文件？【能打开】</p><p>问题2：test用户是否可以编辑oo/xx.txt文件？【可以】</p><p>问题3：test用户是否可以删除oo/xx.txt文件？【不可以，同样还不允许创建文件/文件夹、移动文件、重命名文件】</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/mlip_image20.jpg" alt="img"></p><p><strong>在Linux中，如果要删除一个文件，不是看文件有没有对应的权限，而是看文件所在的目录是否有写权限，如果有才可以删除</strong>。</p><h1 id="三、属主与属组设置"><a href="#三、属主与属组设置" class="headerlink" title="三、属主与属组设置"></a>三、属主与属组设置</h1><p>属主：所属的用户（文件的主人）</p><p>属组：所属的用户组</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image022.jpg" alt="img"></p><p>前面的那个root就是属主</p><p>后面的那个root就是属组</p><p>这两项信息在文档创建的时候会使用创建者的信息（用户名、用户所属的主组名称）。</p><p>如果有时候去删除某个用户，则该用户对应的文档的属主和属组信息就需要去修改。</p><h2 id="1、chown（重点）"><a href="#1、chown（重点）" class="headerlink" title="1、chown（重点）"></a>1、chown（重点）</h2><p><strong>作用：更改文档的所属用户</strong></p><p>语法：#chown -R username 文档路径</p><p>案例：将刚才root用户创建的oo目录，所有者更改为test</p><p>#chown test oo/</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/mlip_image24.jpg" alt="img"></p><h2 id="2、chgrp（了解）"><a href="#2、chgrp（了解）" class="headerlink" title="2、chgrp（了解）"></a>2、chgrp（了解）</h2><p><strong>作用：更改文档的所属用户组</strong></p><p>语法：#chgrp -R groupname 文档的路径</p><p>案例：将刚才root用户创建的oo目录，所有者更改为test，并且将所属用户组也改为test</p><p>#chgrp test oo/</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/mlip_image26.jpg" alt="img"></p><p><strong>思考，如何通过一个命令实现既可以更改所属的用户，也可以修改所属的用户组呢？</strong></p><p>答：可以实现的，通过chown命令</p><p>​    语法：#chown -R username:groupname  文档路径</p><p>案例：要求只使用chown指令，将oo目录的所属用户和用户组改回成root，并且包含其子目录</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/mlip_image28.jpg" alt="img"></p><h1 id="四、扩展（1）"><a href="#四、扩展（1）" class="headerlink" title="四、扩展（1）"></a>四、扩展（1）</h1><p>问题：reboot、shutdown、init、halt、user管理，在普通用户身份上都是操作不了，但是有些特殊的情况下又需要有执行权限。又不可能让root用户把自己的密码告诉普通用户，这个问题该怎么解决？</p><p><strong>该问题是可以被解决的，可以使用sudo（switch user do）命令来进行权限设置。Sudo可以让管理员（root）事先定义某些特殊命令谁可以执行</strong>。</p><p>默认sudo中是没有除root之外用户的规则，要想使用则先<strong>配置</strong>sudo。</p><p><strong>Sudo配置文件：/etc/sudoers</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/mlip_image29.png" alt="img"></p><p>a. 配置sudo文件请使用“#visudo”，打开之后其使用方法和vim一致</p><p>b. 配置普通用户的权限</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image030.png" alt="img"></p><p>Root表示用户名，如果是用户组，则可以写成“%组名”</p><p>ALL：表示允许登录的主机（地址白名单）</p><p>(ALL)：表示以谁的身份执行，ALL表示root身份</p><p>ALL：表示当前用户可以执行的命令，多个命令可以使用“,”分割</p><p><strong>案例：本身test用户不能添加用户，要求使用sudo配置，将其设置为可以添加用户，并且可以修改密码（但是不能修改root用户密码）。</strong></p><p>注意：在写sudo规则的时候不建议写直接形式的命令，而是写命令的完整路径。</p><p>路径可以使用which命令来查看</p><p>语法：#which 指令名称</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/mlip_image31.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/mlip_image32.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image034.jpg" alt="img"></p><p>在添加好对应的规则之后就可以切换用户，切换到普通用户test，再去执行：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/mlip_image35.png" alt="img"></p><p>此时要想使用刚才的规则，则以以下命令进行：</p><p><strong>#sudo</strong> <strong>需要执行的指令</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/mlip_image36.png" alt="img"></p><p><strong>在输入sudo指令之后需要输入当前的用户密码进行确认的操作（不是root用户密码），输入之后在接下来5分钟内再次执行sudo指令不需要密码</strong>。</p><p>特别注意：此处按照案例要求，不能让test用户修改root密码，因此规则还需要调整，不然其可以修改root密码的：</p><p><strong>禁止修改root密码的配置（先允许全部，再拒绝root密码设置）：</strong> /usr/bin/passwd [A-Za-z]*, <strong>!/usr/bin/passwd root</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/mlip_image38.jpg" alt="img"></p><p>补充：在普通用户下怎么查看自己具有哪些特殊权限呢？</p><p><strong>#sudo -l</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image040.jpg" alt="img"></p><p>最后：sudo不是任何Linux分支都有的命令，常见centos与ubuntu都存在sudo命令。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux的权限管理操作&quot;&gt;&lt;a href=&quot;#Linux的权限管理操作&quot; class=&quot;headerlink&quot; title=&quot;Linux的权限管理操作&quot;&gt;&lt;/a&gt;Linux的权限管理操作&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Linux的权限操作与用户、用户组是兄弟操作</summary>
      
    
    
    
    <category term="操作系统学习" scheme="https://roranrui.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Linux" scheme="https://roranrui.cn/tags/Linux/"/>
    
    <category term="操作系统" scheme="https://roranrui.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>五.Linux自有服务（二）</title>
    <link href="https://roranrui.cn/2022/04/26/wu.linux-zi-you-fu-wu-er/"/>
    <id>https://roranrui.cn/2022/04/26/wu.linux-zi-you-fu-wu-er/</id>
    <published>2022-04-26T07:29:55.000Z</published>
    <updated>2022-04-26T07:36:35.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux自有服务（2）"><a href="#Linux自有服务（2）" class="headerlink" title="Linux自有服务（2）"></a>Linux自有服务（2）</h1><p>自有服务，即不需要用户独立去安装的软件的服务，而是当系统安装好之后就可以直接使用的服务（内置）。</p><h1 id="一、设置主机名"><a href="#一、设置主机名" class="headerlink" title="一、设置主机名"></a>一、设置主机名</h1><p>回顾：</p><p>#hostname</p><p>#hostname -f      FQDN（全限定域名）</p><p>①临时设置主机名（立竿见影），需要切换用户使之生效</p><p>#hostname 设置的主机名</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image1.png" alt="img"></p><p>②永久设置主机名（需要重启）</p><p>先找到一个文件</p><p>/etc/sysconfig/network      【主机名的配置文件】</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image2.png" alt="img"></p><p>修改其中的HOSTNAME为自己需要设置的永久主机名</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image3.png" alt="img"></p><p><strong>③修改linux服务器的hosts文件，将yunwei指向本地（设置FQDN）</strong></p><p>Hosts文件的位置：/etc/hosts</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image5.jpg" alt="img"></p><p>问题：不设置FQDN会怎么样？</p><p>​    ①很多开源服务器软件（例如Apache）则无法启动，或出现报错；</p><p>​    ②方便记忆，看到主机名对其作用有一个初步判断；</p><p>​    ③如果不设置则会影响本地的域名的解析（本地访问）；</p><h1 id="二、chkconfig"><a href="#二、chkconfig" class="headerlink" title="二、chkconfig"></a>二、chkconfig</h1><p>作用：相当于windows下“安全卫士”、“电脑管家”之类的安全辅助工具<strong>提供“开机启动项”的一个管理服务</strong>。</p><p>在linux下不是所有的软件安装完成之后都有开机启动服务，有的可能需要自己去添加。除此之外还可以查看和删除。</p><p>①开机启动<strong>服务查询</strong></p><p>#chkconfig –list</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image7.jpg" alt="img"></p><p>其中0-6表示各个启动级别</p><p>例如：以httpd为例，其3级别为关闭（off），则表示其在3启动形式下默认开机不启动</p><p>5对应的也是关闭，则表示其在桌面环境下也是开机不启动。</p><p>再例如：kdump服务，在2，3，4，5的级别下默认开机启动的，其他级别下默认开机不启动</p><p>②删除服务</p><p>#chkconfig –del 服务名</p><p>例如删除httpd服务</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image9.jpg" alt="img"></p><p>③添加开机启动服务</p><p>#chkconfig –add 服务名            【必须要保证服务正常运行，才可以添加】</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image11.jpg" alt="img"></p><p><strong>④设置服务在某个级别下开机启动/不启动【重点命令】</strong></p><p><strong>#chkconfig –level</strong> <strong>连在一起的启动级别</strong> <strong>服务名on/off</strong></p><p>案例：设置httpd服务在3，5级别下默认开机启动</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image13.jpg" alt="img"></p><p>案例：设置httpd服务在5的级别下默认开机不启动</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image15.jpg" alt="img"></p><h1 id="三、ntp服务"><a href="#三、ntp服务" class="headerlink" title="三、ntp服务"></a>三、ntp服务</h1><p>作用：ntp主要是用于<strong>对计算机的时间同步管理</strong>操作。</p><p>时间是对服务器来说是很重要的，一般很多网站都需要读取服务器时间来记录相关信息，如果时间不准，则可能造成很大的影响。</p><p>例如：当前虚拟机里的linux时间就是不准确的</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image16.png" alt="img"></p><p>同时服务器时间方式有2个：<strong>一次性同步（手动同步）、通过服务自动同步</strong>。</p><p>上游的概念：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image18.jpg" alt="img"></p><p>①一次性同步时间（简单）</p><p><strong>#ntpdate</strong> <strong>时间服务器的域名或ip地址</strong></p><p>Ip地址查看可以访问：<a href="http://www.ntp.org.cn/pool.php">http://www.ntp.org.cn/pool.php</a></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image20.jpg" alt="img"></p><p>②设置时间同步服务</p><p>服务名：ntpd</p><p>启动ntpd服务</p><p>​    #service ntpd start   或者  /etc/init.d/ntpd start</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image22.jpg" alt="img"></p><p>设置ntpd服务开机启动：</p><p># chkconfig –list|grep ntpd</p><p># chkconfig –level 35 ntpd on</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image24.jpg" alt="img"></p><h1 id="四、防火墙服务"><a href="#四、防火墙服务" class="headerlink" title="四、防火墙服务"></a>四、防火墙服务</h1><p>防火墙：<strong>防范一些网络攻击</strong>。有<strong>软件防火墙</strong>、硬件防火墙之分。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image25.png" alt="img"></p><p>防火墙选择让请求通过，从而保证网络安全性。</p><p><strong>在当前的centos6.5中防火墙有一个名称：iptables</strong> 【7.x中默认使用的是firewalld】</p><p>①查看iptables是否开机启动</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image27.jpg" alt="img"></p><p>②iptables服务启动/重启/关闭</p><p>#service iptables start/restart/stop</p><p>/etc/init.d/iptables start /restart/stop</p><p><strong>③查看iptables的状态（规则）</strong></p><p>]# service iptables status</p><p>如果iptables没有启动，则提示服务没启动，如果已经启动，则显示防火墙的相关的规则信息</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image29.jpg" alt="img"></p><p>④查看规则的命令</p><p>#iptables -L -n</p><p>含义：</p><p>​    -L：表示列出规则</p><p>​    -n：表示将单词表达形式改成数字形式显示</p><p>⑤简单设置防火墙规则</p><p>例如，需要允许80端口通过防火墙，则规则可以用以下的命令来设置</p><p><strong>#iptables -I INPUT -p tcp –dport 80 -j ACCEPT  #允许访问80端口</strong></p><p>Iptables：主命令</p><p>-I：表示将规则放到最前面</p><p>-A：add，添加规则（最后）</p><p>INPUT：进站请求【出站output】</p><p>-p：protocol，指定协议（icmp/tcp/udp）</p><p>–dport：指定端口号</p><p>-j：指定行为结果，允许（accept）/禁止（reject）/丢弃（drop）</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image31.jpg" alt="img"></p><p>添加完成之后需要保存操作：</p><p><strong>/etc/init.d/iptables save</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image33.jpg" alt="img"></p><p>测试80端口访问：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image34.png" alt="img"></p><h1 id="五、rpm管理（重点）"><a href="#五、rpm管理（重点）" class="headerlink" title="五、rpm管理（重点）"></a>五、rpm管理（重点）</h1><p>作用：rpm的作用类似于windows上的电脑管家中“软件管理”、安全卫士里面“软件管家”等产品，主要作用是对linux服务器上的软件包进行对应管理操作，<strong>管理分为：查询、卸载、安装</strong>。</p><p>①查询某个软件的安装情况</p><p><strong>#rpm -qa|grep</strong> <strong>关键词</strong></p><p>选项：</p><p>​    -q：查询，query</p><p>​    -a：全部，all</p><p>案例：查询linux上是否安装firefox</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image35.png" alt="img"></p><p>案例：查询是否安装qq</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image36.png" alt="img"></p><p>②卸载某个软件</p><p>#rpm -e 软件的名称</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image38.jpg" alt="img"></p><p>火狐卸载的时候是没有依赖关系的，所以可以直接卸载。</p><p>但是在卸载Apache的时候提示无法卸载：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image40.jpg" alt="img"></p><p>当存在依赖关系的时候又不想去解决这个问题的时候可以：</p><p>#rpm -e 软件包名 –nodeps</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image41.png" alt="img"></p><p>③软件的安装</p><p>要想装软件，和windows下一样，先得找到安装包。</p><p>​    软件包的获得方式：</p><p>​         a. 去官网去下载；</p><p>​         b. 不介意老版本的话，可以从光盘（或者镜像文件）中读取；</p><p>此处以光盘文件为例：</p><p><strong>查看块状设备的信息：</strong></p><p>#lsblk  （list block devices）       查看块状设备的信息  </p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image43.jpg" alt="img"></p><p>Name：名称</p><p>Size：设备大小</p><p>Type：类型</p><p>MountPoint：挂载点（类似windows下盘符）</p><p><strong>扩展：光盘的挂载和解挂</strong></p><p>a. 解挂操作</p><p>​    命令：umount</p><p>​    <strong>语法：#umount</strong> <strong>当前设备的挂载点（路径）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image45.jpg" alt="img"></p><p>此时，相当于U盘在windows上已经被弹出了，但是没有拔下电脑USB接口。</p><p>b. 挂载光盘</p><p>​    命令：mount</p><p>​    <strong>语法：#mount</strong> <strong>设备原始地址</strong> <strong>要挂载的位置路径</strong></p><p>设备原始地址：地址统一都在/dev下，然后根据大小确定具体name值，拼凑在一起组成原始地址，例如当前：“/dev/sr0”</p><p>要挂载的位置路径：挂载目录一般都在mnt下，也可以在mnt下建目录，此处以“/mnt/dvd”为例</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image47.jpg" alt="img"></p><p><strong>安装软件的命令：</strong></p><p><strong>#rpm -ivh</strong> <strong>软件包完整名称</strong></p><p>选项：</p><p>​    -i：install，安装</p><p>​    -v：显示进度条</p><p>​    -h：表示以“#”形式显示进度条</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image49.jpg" alt="img"></p><h1 id="六、cron-x2F-crontab计划任务（重点）"><a href="#六、cron-x2F-crontab计划任务（重点）" class="headerlink" title="六、cron/crontab计划任务（重点）"></a>六、cron/crontab计划任务（重点）</h1><p>作用：操作系统不可能24小时都有人在操作，有些时候想在指定的时间点去执行任务（例如：每天夜里2点去重新启动Apache），此时不可能真有人每天夜里2点去执行命令，此时可以交给计划任务程序去执行操作。</p><p>语法：#crontab 选项</p><p>​    常用选项：</p><p>​         <strong>-l：list，列出指定用户的计划任务列表</strong></p><p>​         <strong>-e：edit，编辑指定用户的计划任务列表</strong></p><p>​         -u：user，指定的用户名，如果不指定，则表示当前用户</p><p>​         -r：remove，删除指定用户的计划任务列表</p><p>①列出</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image50.png" alt="img"></p><p><strong>②编辑计划任务（重点）</strong></p><p>计划任务的规则语法格式，以行为单位，一行则为一个计划：</p><p>分 时 日 月 周 需要执行的命令</p><p>例如：如果想要每天的0点0分执行reboot指令，则可以写成</p><p>0 0 * * * reboot</p><p><strong>取值范围：</strong></p><p>分：0~59</p><p>时：0~23</p><p>日：1~31</p><p>月：1~12</p><p>周：0~7，0和7表示星期天</p><p><strong>四个符号：</strong></p><p>*：表示取值范围中的每一个数字</p><p>-：做连续区间表达式的，要想表示1~7，则可以写成：1-7</p><p>/：表示每多少个，例如：想每10分钟一次，则可以在分的位置写：*/10</p><p>,：表示多个取值，比如想在1点，2点6点执行，则可以在时的位置写：1,2,6</p><p>问题1：每月1、10、22日的4:45重启network服务</p><p>45 4 1,10,22 * * service network restart</p><p>问题2：每周六、周日的1:10重启network服务</p><p>10 1 * * 6,0  service network restart</p><p>问题3：每天18:00至23:00之间每隔30分钟重启network服务</p><p>*/30 18-23 * * *  service network restart</p><p>问题4：每隔两天的上午8点到11点的第3和第15分钟执行一次重启</p><p>3,15 8-11 */2 * *  reboot</p><p>案例：真实测试案例，每1分钟往root家目录中的RT.txt中输入当前的时间信息，为了看到效果使用追加输出</p><p>计划任务：*/1 *  *  *  * ls ~&gt;&gt; /root/RT.txt</p><p><strong>Crontab权限问题：本身是任何用户都可以创建自己的计划任务</strong>。</p><p>但是超级管理员可以通过配置来设置某些用户不允许设置计划任务 ：</p><p>配置文件位于（黑名单）：</p><p>​    /etc/cron.deny             里面写用户名，一行一个</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image51.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image53.jpg" alt="img"></p><p>还有一个配置文件：（白名单）</p><p>​    /etc/cron.allow        （本身不存在，自己创建）</p><p><strong>注意：白名单优先级高于黑名单，如果一个用户同时存在两个名单文件中，则会被默认允许创建计划任务。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux自有服务（2）&quot;&gt;&lt;a href=&quot;#Linux自有服务（2）&quot; class=&quot;headerlink&quot; title=&quot;Linux自有服务（2）&quot;&gt;&lt;/a&gt;Linux自有服务（2）&lt;/h1&gt;&lt;p&gt;自有服务，即不需要用户独立去安装的软件的服务，而是当系统安装</summary>
      
    
    
    
    <category term="操作系统学习" scheme="https://roranrui.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Linux" scheme="https://roranrui.cn/tags/Linux/"/>
    
    <category term="操作系统" scheme="https://roranrui.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>四.Linux自有服务（一）</title>
    <link href="https://roranrui.cn/2022/04/26/si.linux-zi-you-fu-wu-yi/"/>
    <id>https://roranrui.cn/2022/04/26/si.linux-zi-you-fu-wu-yi/</id>
    <published>2022-04-26T07:29:49.000Z</published>
    <updated>2022-04-26T07:36:30.840Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux自有服务（1）"><a href="#Linux自有服务（1）" class="headerlink" title="Linux自有服务（1）"></a>Linux自有服务（1）</h1><p>自有服务，即不需要用户独立去安装的软件的服务，而是当系统安装好之后就可以直接使用的服务（内置）。</p><h1 id="一、运行模式"><a href="#一、运行模式" class="headerlink" title="一、运行模式"></a>一、运行模式</h1><p>运行模式也可以称之为<strong>运行级别</strong>。</p><p>在linux中存在一个进程：init （initialize，初始化），进程id是1。</p><p>查看进程：#ps -ef|grep init</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image1.png" alt="img"></p><p>该进程存在一个对应的配置文件：inittab（<strong>系统运行级别配置文件</strong>，位置/etc/inittab）</p><p>文件的主要内容：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image3.jpg" alt="img"></p><p>根据上述的描述，可以得知，Centos6.5中存在7中运行级别/模式。</p><p>0 — 表示关机级别（不要将默认的运行级别设置成这个值）</p><p>1 — 单用户模式</p><p>2 — 多用户模式，不带NFS（Network File Syetem）</p><p>3 — 多用户模式，完全的多用户模式（不带桌面的，纯命令行模式）</p><p>4 — 没有被使用的模式（被保留模式）</p><p>5 — X11，完整的图形化界面模式</p><p>6 — 表示重启级别（不要将默认的运行级别设置成这个值）</p><p>与该级别相关的几个命令：</p><p>#init 0       表示关机</p><p>#init 3       表示切换到不带桌面的模式</p><p>#init 5       切换到图形界面</p><p>#init 6       重启电脑</p><p>注意：init指令需要超级管理员的权限，普通用户无法执行。</p><p><strong>这些命令其实都是调用的init进程，将数字（运行级别）传递给进程，进程去读配置文件执行对应的操作。</strong></p><p>①切换到纯命令行模式下（<strong>临时切换，重启之后又恢复</strong>）</p><p>#init 3</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image4.png" alt="img"></p><p>切换之后需要输入用户名和密码，在<strong>输入密码的时候没有“*”提示输入，只要自己确认输入的密码没有错误，按下回车即可</strong>。</p><p>②回到桌面模式</p><p>#init 5</p><p><strong>③设置模式永久为命令行模式</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image5.png" alt="img"></p><p>将/etc/inittab文件中的initdefault值设置成3，然后重启操作系统。</p><h1 id="二、用户与用户组管理（重点）"><a href="#二、用户与用户组管理（重点）" class="headerlink" title="二、用户与用户组管理（重点）"></a>二、用户与用户组管理（重点）</h1><p>Linux系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p><p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p><p>每个用户账号都拥有一个惟一的用户名和各自的密码。</p><p>用户在登录时键入正确的用户名和密码后，就能够进入系统和自己的主目录。</p><p>要想实现用户账号的管理，要完成的工作主要有如下几个方面：</p><p>用户账号的添加、删除、修改以及用户密码的管理。</p><p>用户组的管理。</p><p><strong>注意三个文件：</strong></p><p>/etc/passwd               存储用户的关键信息</p><p>/etc/group                存储用户组的关键信息</p><p>/etc/shadow               存储用户的密码信息</p><h2 id="1、用户管理"><a href="#1、用户管理" class="headerlink" title="1、用户管理"></a>1、用户管理</h2><p>①添加用户</p><p>常用语法：#useradd 选项 用户名</p><p>常用选项：</p><p>​    -g：表示指定用户的用户主组，选项的值可以是用户组的id，也可以是组名</p><p>​    -G：表示指定用户的用户附加组，选项的值可以是用户组的id，也可以是组名</p><p>​    -u：uid，用户的id（用户的标识符），<strong>系统默认会从500之后按顺序分配uid</strong>，如果不想使用系统分配的，可以通过该选项自定义【类似于腾讯QQ的自选靓号情况】</p><p>​    -c comment：添加注释</p><p>案例：创建用户zhangsan，不带任何选项</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image6.png" alt="img"></p><p>验证是否成功：</p><p>​    a. 验证/etc/passwd的最后一行，查看是否有zhangsan的信息；</p><p>​    b. 验证是否存在家目录（在Centos下创建好用户之后随之产生一个同名家目录）；</p><p>扩展：认识passwd文件</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image8.jpg" alt="img"></p><p>用户名:密码:用户ID:用户组ID:注释:家目录:解释器shell</p><p>用户名：创建新用户名称，后期登录的时候需要输入；</p><p>密码：此密码位置一般情况都是“x”，表示密码的占位；</p><p>用户ID：用户的识别符；</p><p>用户组ID：该用户所属的主组ID；</p><p>注释：解释该用户是做什么用的；</p><p>家目录：用户登录进入系统之后默认的位置；</p><p>解释器shell：等待用户进入系统之后，用户输入指令之后，该解释器会收集用户输入的指令，传递给内核处理；</p><p><strong>注意：在不添加选项的时候，执行useradd之后会执行一系列的操作</strong></p><p>​    <strong>a.</strong> <strong>创建同名的家目录；</strong></p><p>​    <strong>b.</strong> <strong>创建同名的用户组；</strong></p><p>案例：添加选项，创建用户lisi，让lisi属于501主组，附加组500，自选靓号666。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image9.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image10.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image11.png" alt="img"></p><p><strong>注意：查看用户的主组可以查看passwd文件，查看附加组可以查看group文件。</strong></p><p>②修改用户</p><p>常用语法：#usermod 选项 用户名</p><p>Usermod：user modify，用户修改</p><p>常用选项：</p><p>​    -g：表示指定用户的用户主组，选项的值可以是用户组的id，也可以是组名</p><p>​    -G：表示指定用户的用户附加组，选项的值可以是用户组的id，也可以是组名</p><p>​    -u：uid，用户的id（用户的标识符），<strong>系统默认会从500之后按顺序分配uid</strong>，如果不想使用系统分配的，可以通过该选项自定义【类似于腾讯QQ的自选靓号情况】</p><p>​    -l：修改用户名</p><p>案例：修改zhangsan用户主组为500，附加组改为501</p><p>#usermod -g 500 -G 501 zhangsan</p><p>案例：修改zhangsan用户用户名，改为wangerma</p><p><strong>#usermod -l</strong> <strong>新的用户名</strong> <strong>旧的用户名</strong></p><p>#usermod -l wangerma zhangsan</p><p>③设置密码</p><p>Linux不允许没有密码的用户登录到系统，因此前面创建的用户目前都处于锁定状态，需要设置密码之后才能登录计算机。</p><p><strong>常用语法：#passwd</strong> <strong>用户名</strong></p><p>案例：设置wangerma用户的密码</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image12.png" alt="img"></p><p>在设置密码的时候也是没有任何输入提示的，放心输入，确保两次输入的密码一致，按下回车即可。</p><p>也可以使用弱密码，但是不建议，否则会看到以下的提示：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image14.jpg" alt="img"></p><p>设置密码之后shadow文件中的体现：能够看出lisi用户没有密码的。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image16.jpg" alt="img"></p><p>在设置用户密码之后可以登录帐号，例如此处需要登录wangerma</p><p>切换用户命令：#su [用户名]   （switch user）</p><p>如果用户名不指定则表示切换到root用户。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image17.png" alt="img"></p><p>切换用户需要注意的事项：</p><p>​    a. 从root往普通用户切换不需要密码，但是反之则需要root密码；</p><p>​    b. 切换用户之后前后的工作路径是不变的；</p><p>​    c. 普通用户没有办法访问root用户家目录，但是反之则可以；</p><p>④删除用户</p><p>常用语法：#userdel 选项 用户名</p><p>Userdel：user delete（用户删除）</p><p>常用选项：</p><p>​    -r：表示删除用户的同时，删除其家目录；</p><p>案例：删除wangerma用户</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image18.png" alt="img"></p><p><strong>注意：已经登录的wangerma用户删除的时候提示删除失败，但是没有登录的lisi用户可以正常删除</strong>。</p><p>解决办法：简单粗暴，kill对应用户的全部进程</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image20.jpg" alt="img"></p><p>提示：所有跟用户操作的命令（除passwd外）只有root超级管理员有权限执行。</p><h2 id="2、用户组管理"><a href="#2、用户组管理" class="headerlink" title="2、用户组管理"></a>2、用户组管理</h2><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，<strong>这个用户组在创建用户时同时创建</strong>。</p><p>用户组的管理涉及用户组的<strong>添加、删除和修改</strong>。组的增加、删除和修改实际上就是对/etc/group文件的更新。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image21.png" alt="img"></p><p>文件结构：</p><p><strong>用户组名:密码:用户组ID:组内用户名</strong></p><p>密码：X表示占位符，虽然用户组可以设置密码，但是绝大部分的情况下不设置密码；</p><p>组内用户名：表示附加组是该组的用户名称；</p><p>①用户组添加</p><p>常用语法：#groupadd 选项 用户组名</p><p>常用选项：</p><p>​    -g：类似用户添加里的“-u”，-g表示选择自己设置一个自定义的用户组ID数字，如果自己不指定，则默认从500之后递增；</p><p>案例：使用groupadd指令创建一个新的用户组，命名为Administrators</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image22.png" alt="img"></p><p>②用户组编辑</p><p>常用语法：#groupmod 选项 用户组名</p><p>常用选项：</p><p>​    -g：类似用户修改里的“-u”，-g表示选择自己设置一个自定义的用户组ID数字</p><p>​    -n：类似于用户修改“-l”，表示设置新的用户组的名称</p><p>案例：修改Administrators用户组，将组ID从502改成520，将名称改为admins</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image24.jpg" alt="img"></p><p>③用户组删除</p><p>常用语法：#groupdel 用户组名</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image25.png" alt="img"></p><p>注意：当如果需要删除一个组，但是<strong>这个组是某个用户的主组时</strong>，则不允许删除；如果确实需要删除，则先从组内移出所有用户。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image27.jpg" alt="img"></p><h1 id="三、网络设置"><a href="#三、网络设置" class="headerlink" title="三、网络设置"></a>三、网络设置</h1><p>首先知道网卡配置文件位置：/etc/sysconfig/network-scripts</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image29.jpg" alt="img"></p><p>在目录中网卡的配置文件命名格式：ifcfg-网卡名称</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image31.jpg" alt="img"></p><p>ONBOOT：是否开机启动</p><p>BOOTPROTO：ip地址分配方式，DHCP表示动态主机分配协议</p><p>HWADDR：硬件地址，MAC地址</p><p>如果后续需要重启网卡怎么去操作呢？</p><p><strong>#service network restart</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image33.jpg" alt="img"></p><p>在有的分支版本中可能没有service命令来快速操作服务，但是有一个共性的目录：/etc/init.d</p><p>这个目录中放着很对服务的快捷方式。</p><p>此处重启网卡命令还可以使用：</p><p><strong>#/etc/init.d/network restart</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image35.jpg" alt="img"></p><p><strong>扩展1：</strong>如果修改网卡的配置文件，但是配置文件的目录层次很深，此时可以在浅的目录中创建一个快捷方式（软连接），方便以后去查找</p><p><strong>#ln -s</strong> <strong>原始文件的路径</strong> <strong>快捷方式的路径</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image37.jpg" alt="img"></p><p>通过ls -l可以列出如下的效果：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image39.jpg" alt="img"></p><p>其中，文件类型位置的“l”表示其类型为link（连接类型），后面的“-&gt;”指向的是原始文件路径。</p><p><strong>扩展2：如何去重启单个网卡？</strong></p><p>停止某个网卡：#ifdown 网卡名</p><p>开启某个网卡：#ifup 网卡名</p><p>例如：需要停止-启动（重启）eth0网卡，则可以输入</p><p>#ifdown eth0</p><p>#ifup eth0</p><p><strong>提示：在实际工作的时候不要随意禁网卡。</strong></p><h1 id="四、ssh服务（重点）"><a href="#四、ssh服务（重点）" class="headerlink" title="四、ssh服务（重点）"></a>四、ssh服务（重点）</h1><p>ssh（secure shell，安全外壳协议），该协议有2个常用的作用：<strong>远程连接协议</strong>、远程文件传输协议。</p><p>协议使用<strong>端口</strong>号：默认是22</p><p>可以是被修改的，如果需要修改，则需要修改ssh服务的配置文件：</p><p>#/etc/ssh/ssh_config</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image40.png" alt="img"></p><p>端口号可以修改，但是得注意2个事项：</p><p>​    a. 注意范围，端口范围是从0-65535；</p><p>​    b. 不能使用别的服务已经占用的端口；</p><p><strong>服务启动/停止/重启</strong></p><p>#service sshd start/stop/restart</p><p>#/etc/init.d/sshd start/stop/restart</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image42.jpg" alt="img"></p><h2 id="1、远程终端"><a href="#1、远程终端" class="headerlink" title="1、远程终端"></a>1、远程终端</h2><p>终端工具主要帮助运维人员连接远程的服务器，常见终端工具有：Xshell、secureCRT、Putty等。以putty为例：</p><p>①获取服务器ip地址，可以通过ifconfig命令进行查看，然后顺手测试ip的连接相通性</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image43.png" alt="img"></p><p>②打开putty，输入相关的信息</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image44.png" alt="img"></p><p>③在弹出key确认的时候点击“是”，以后不会再提示</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image45.png" alt="img"></p><p>④输入登录信息</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image47.jpg" alt="img"></p><h2 id="2、SSH服务文件传输"><a href="#2、SSH服务文件传输" class="headerlink" title="2、SSH服务文件传输"></a>2、SSH服务文件传输</h2><p>可视化的界面传输工具：Filezilla</p><p>安装好之后可以查看到桌面图标：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image48.png" alt="img"></p><p>①选择“文件”- “站点管理器（Ctrl + S）”</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image50.jpg" alt="img"></p><p>②点击“文件”菜单下方的“▽”选择需要连接的服务器，连接好之后的效果</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image52.jpg" alt="img"></p><p>③从本地windows上传文件到linux中方式</p><p>支持直接拖拽文件，也可以右键本地需要上传的文件，然后点选“上传”即可</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image54.jpg" alt="img"></p><p>④下载linux文件到本地</p><p>支持服务器文件直接拖拽到本地，也可以在右侧窗口选择需要下载的文件，右键，点选“下载”。</p><p><strong>扩展3：通过命令行工具来传输文件/文件夹</strong></p><p>工具：PSCP.exe（必须通过cmd命令行打开），为了使用方便可以将其放到环境变量目录中</p><p>如果不清楚哪些路径是环境变量路径，只需要将其放到C:/Windows目录下即可。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image55.png" alt="img"></p><p>用法：</p><p>​    <strong>a. pscp</strong> <strong>选项</strong> <strong>用户名@linux主机地址:资源路径 windows本地的地址</strong> <strong>（下载到win）</strong></p><p>​    <strong>b. pscp</strong> <strong>选项</strong> <strong>资源路径</strong> <strong>用户名@linux主机地址:远程路径</strong>  <strong>（上传到linux）</strong></p><p>​    c. pscp 选项 -ls 用户名@linux主机地址 （列出远程路径下结构）</p><p>①下载到本地windows</p><p>要求将远程linux服务器下的/etc整个目录下载到本地E:\tmp下</p><p>#pscp -r <a href="mailto:root@192.168.21.128:/etc">root@192.168.21.128:/etc</a> E:\tmp</p><p>在CMD中输入之后输入密码</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image56.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image57.png" alt="img"></p><p>②上传文件到linux</p><p>将“E:\coursedocs\运维学科\北京运维01期\01-基础班\20180329_Linux自有服务”所有的内容传输到linux下root用户的家目录</p><p>#pscp -r “E:\coursedocs\运维学科\北京运维01期\01-基础班\20180329_Linux自有服务” <a href="mailto:root@192.168.21.128:/root">root@192.168.21.128:/root</a></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image59.jpg" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux自有服务（1）&quot;&gt;&lt;a href=&quot;#Linux自有服务（1）&quot; class=&quot;headerlink&quot; title=&quot;Linux自有服务（1）&quot;&gt;&lt;/a&gt;Linux自有服务（1）&lt;/h1&gt;&lt;p&gt;自有服务，即不需要用户独立去安装的软件的服务，而是当系统安装</summary>
      
    
    
    
    <category term="操作系统学习" scheme="https://roranrui.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Linux" scheme="https://roranrui.cn/tags/Linux/"/>
    
    <category term="操作系统" scheme="https://roranrui.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>三.Linux高级指令</title>
    <link href="https://roranrui.cn/2022/04/26/san.linux-gao-ji-zhi-ling/"/>
    <id>https://roranrui.cn/2022/04/26/san.linux-gao-ji-zhi-ling/</id>
    <published>2022-04-26T07:29:43.000Z</published>
    <updated>2022-04-26T07:36:24.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux的基本指令（2）"><a href="#Linux的基本指令（2）" class="headerlink" title="Linux的基本指令（2）"></a>Linux的基本指令（2）</h1><h1 id="一、高级指令"><a href="#一、高级指令" class="headerlink" title="一、高级指令"></a>一、高级指令</h1><h2 id="1、hostname指令"><a href="#1、hostname指令" class="headerlink" title="1、hostname指令"></a>1、hostname指令</h2><p>作用：操作服务器的<strong>主机名</strong>（<strong>读取</strong>、设置）</p><p>语法1：#hostname            含义：表示输出完整的主机名</p><p><strong>语法2：#hostname -f</strong>             <strong>含义：表示输出当前主机名中的FQDN</strong>（全限定<strong>域名</strong>）</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/QQ%E5%9B%BE%E7%89%8732131220220426153236.png" alt="img"></p><h2 id="2、id指令"><a href="#2、id指令" class="headerlink" title="2、id指令"></a>2、id指令</h2><p><strong>作用：查看一个用户的一些基本信息（包含用户id，用户组id，附加组id…），该指令如果不指定用户则默认当前用户。</strong></p><p>语法1：#id       默认显示当前执行该命令的用户的基本信息</p><p>语法2：#id 用户名       显示指定用户的基本信息</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/QQ%E5%9B%BE%E7%89%8720321312220426153317.png" alt="img"></p><p>验证上述信息是否正确？</p><p><strong>验证用户信息：通过文件/etc/passwd</strong></p><p><strong>验证用户组信息：通过文件/etc/group</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image004.png" alt="img"></p><h2 id="3、whoami指令"><a href="#3、whoami指令" class="headerlink" title="3、whoami指令"></a>3、whoami指令</h2><p><strong>作用：“我是谁？”显示当前登录的用户名，一般用于shell脚本，用于获取当前操作的用户名方便记录日志。</strong></p><p>语法：#whoami</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image05.png" alt="img"></p><h2 id="4、ps-ef指令（重点）"><a href="#4、ps-ef指令（重点）" class="headerlink" title="4、ps -ef指令（重点）"></a>4、ps -ef指令（重点）</h2><p>指令：ps </p><p>作用：主要是查看服务器的进程信息</p><p>选项含义：</p><p>​    -e：等价于“-A”，表示列出全部的进程</p><p>​    -f：显示全部的列（显示全字段）</p><p>执行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image007.jpg" alt="img"></p><p>列的含义：</p><p>UID：该进程执行的用户id；</p><p>PID：进程id；</p><p>PPID：该进程的父级进程id，如果一个程序的父级进程找不到，该程序的进程称之为僵尸进程（parent process ID）；</p><p>C：Cpu的占用率，其形式是百分数；</p><p>STIME：进行的启动时间；</p><p>TTY：终端设备，发起该进程的设备识别符号，如果显示“?”则表示该进程并不是由终端设备发起；</p><p>TIME：进程的执行时间；</p><p>CMD：该进程的名称或者对应的路径；</p><p>案例：（100%使用的命令）在ps的结果中过滤出想要查看的进程状态</p><p><strong>#ps -ef|grep “进程名称”</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/lip_image9.jpg" alt="img"></p><p>再例如查看火狐浏览器的进程：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/lip_image11.jpg" alt="img"></p><h2 id="5、top指令（重点）"><a href="#5、top指令（重点）" class="headerlink" title="5、top指令（重点）"></a>5、top指令（重点）</h2><p><strong>作用：查看服务器的进程占的资源（100%使用）</strong></p><p>语法：</p><p>​    进入命令：#top           （动态显示）</p><p>​    退出命令：按下q键</p><p>输出的结果：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image013.jpg" alt="img"></p><p>表头含义：</p><p>PID：进程id；</p><p>USER：该进程对应的用户；</p><p>PR：优先级；</p><p>VIRT：虚拟内存；</p><p>RES：常驻内存；</p><p>SHR：共享内存；</p><p>​    计算一个进程实际使用的内存 = 常驻内存（RES）- 共享内存（SHR）</p><p>S：表示进程的状态status（sleeping，其中S表示睡眠，R表示运行）；</p><p>%CPU：表示CPU的占用百分比；</p><p>%MEM：表示内存的占用百分比；</p><p>TIME+：执行的时间；</p><p>COMMAND：进程的名称或者路径；</p><p><strong>在运行top的时候，可以按下方便的快捷键：</strong></p><p>M：表示将结果按照内存（MEM）从高到低进行降序排列；</p><p>P：表示将结果按照CPU使用率从高到低进行降序排列；</p><p>1：当服务器拥有多个cpu的时候可以使用“1”快捷键来切换是否展示显示各个cpu的详细信息；</p><h2 id="6、du-sh指令"><a href="#6、du-sh指令" class="headerlink" title="6、du -sh指令"></a>6、du -sh指令</h2><p>作用：查看目录的真实大小</p><p><strong>语法：#du -sh</strong> <strong>目录路径</strong></p><p>选项含义：</p><p>​    -s：summaries，只显示汇总的大小</p><p>​    -h：表示以高可读性的形式进行显示</p><p>案例：统计“/root/yunweihenniux”目录的实际大小</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/lip_image14.png" alt="img"></p><p>案例：统计“/etc”目录实际大小</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/lip_image15.png" alt="img"></p><h2 id="7、find指令"><a href="#7、find指令" class="headerlink" title="7、find指令"></a>7、find指令</h2><p>作用：用于查找文件（其参数有55个之多）</p><p>语法：#<strong>find</strong> <strong>路径范围</strong> <strong>选项</strong> <strong>选项的值</strong></p><p>选项：</p><p>​    -name：按照文档名称进行搜索（支持模糊搜索）</p><p>​    -type：按照文档的类型进行搜索</p><p>​         <strong>文档类型：“-”表示文件（在使用find的时候需要用f来替换），“d”表示文件夹</strong></p><p>案例：使用find来搜索httpd.conf</p><p>#find / -name httpd.conf</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/lip_image16.png" alt="img"></p><p>案例：搜索etc目录下所有的conf后缀文件</p><p>#find /etc -name *.conf</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/lip_image17.png" alt="img"></p><p>案例：使用find来搜索/etc/sane.d/目录下所有的<strong>文件</strong></p><p>#find /etc/sane.d/ -type f</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image018.png" alt="img"></p><p>案例：使用find来搜索/etc/目录下所有的<strong>文件夹</strong></p><p>#find /etc -type d</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/lip_image19.png" alt="img"></p><h2 id="8、service指令（重点）"><a href="#8、service指令（重点）" class="headerlink" title="8、service指令（重点）"></a>8、service指令（重点）</h2><p>作用：用于控制一些软件的服务启动/停止/重启</p><p><strong>语法：#service</strong> <strong>服务名 start/stop/restart</strong></p><p>例如：需要启动本机安装的Apache（网站服务器软件），其服务名httpd</p><p>#service httpd start</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/lip_image21.jpg" alt="img"></p><p>通过ps命令来检查httpd服务是否启动：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image023.jpg" alt="img"></p><h2 id="9、kill指令（重点）"><a href="#9、kill指令（重点）" class="headerlink" title="9、kill指令（重点）"></a>9、kill指令（重点）</h2><p><strong>作用：表示杀死进程</strong>      （当遇到僵尸进程或者出于某些原因需要关闭进程的时候）</p><p>语法：**#kill** <strong>进程PID</strong>      （语法需要配合ps一起使用）</p><p>案例：需要kill掉Apache的进程</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/lip_image25.jpg" alt="img"></p><p>与kill命令作用相似但是比kill更加好用的杀死进程的命令：killall</p><p>语法：**#killall** <strong>进程名称</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/lip_image26.png" alt="img"></p><h2 id="10、ifconfig指令（重点）"><a href="#10、ifconfig指令（重点）" class="headerlink" title="10、ifconfig指令（重点）"></a>10、ifconfig指令（重点）</h2><p><strong>作用：用于操作网卡相关的指令。</strong></p><p>简单语法：#ifconfig        （获取网卡信息）</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image028.jpg" alt="img"></p><p>Eth0表示Linux中的一个网卡，eth0是其名称。Lo（<strong>loop，本地回还网卡，其ip地址一般都是127.0.0.1</strong>）也是一个网卡名称。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/lip_image30.jpg" alt="img"></p><p><strong>注意：inet addr就是网卡的ip地址</strong>。</p><h2 id="11、reboot指令"><a href="#11、reboot指令" class="headerlink" title="11、reboot指令"></a>11、reboot指令</h2><p>作用：重新启动计算机         </p><p><strong>语法1：#reboot</strong>      <strong>重启</strong></p><p>语法2：#reboot  -w  模拟重启，但是不重启（只写关机与开机的日志信息）</p><h2 id="12、shutdown指令"><a href="#12、shutdown指令" class="headerlink" title="12、shutdown指令"></a>12、shutdown指令</h2><p>作用：关机           （慎用）</p><p><strong>语法1：#shutdown -h now “关机提示”</strong> <strong>或者  #shutdown -h 15:25 “关机提示”</strong></p><p>案例：设置Linux系统关机时间在12:00</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image032.jpg" alt="img"></p><p><strong>如果想要取消关机计划的话，则可以按照以下方式去尝试：</strong></p><p><strong>①针对于centos7.x之前的版本：ctrl+c</strong></p><p><strong>②针对于centos7.x（包含）之后的版本：#shutdown  -c</strong></p><p>除了shutdown关机以外，还有以下几个关机命令：</p><p>#init 0</p><p>#halt</p><p>#poweroff</p><h2 id="13、uptime指令"><a href="#13、uptime指令" class="headerlink" title="13、uptime指令"></a>13、uptime指令</h2><p>作用：输出计算机的持续在线时间（<strong>计算机从开机到现在运行的时间</strong>）</p><p><strong>语法：#uptime</strong></p><p><img src="C:/Users/13993/AppData/Local/Temp/msohtmlclip1/01/lip_image34.jpg" alt="img"></p><h2 id="14、uname指令"><a href="#14、uname指令" class="headerlink" title="14、uname指令"></a>14、uname指令</h2><p>作用：获取计算机操作系统相关信息</p><p>语法1：#uname           获取操作系统的类型</p><p><strong>语法2：#uname -a       all，表示获取全部的系统信息（类型、全部主机名、内核版本、发布时间、开源计划）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image036.jpg" alt="img"></p><h2 id="15、netstat-tnlp指令"><a href="#15、netstat-tnlp指令" class="headerlink" title="15、netstat -tnlp指令"></a>15、netstat -tnlp指令</h2><p>作用：查看网络连接状态</p><p>语法：#netstat -tnlp</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/lip_image38.jpg" alt="img"></p><p>选项说明：</p><p>​    -t：表示只列出tcp协议的连接；</p><p>​    -n：表示将地址从字母组合转化成ip地址，将协议转化成端口号来显示；</p><p>​    -l：表示过滤出“state（状态）”列中其值为LISTEN（监听）的连接；</p><p>​    -p：表示显示发起连接的进程pid和进程名称；</p><h2 id="16、man指令"><a href="#16、man指令" class="headerlink" title="16、man指令"></a>16、man指令</h2><p>作用：manual，手册（包含了Linux中全部命令手册，英文）</p><p>语法：#man 命令         （退出按下q键）</p><p>案例：通过man命令查询cp指令的用法</p><p>#man cp</p><h1 id="二、练习题"><a href="#二、练习题" class="headerlink" title="二、练习题"></a>二、练习题</h1><p>1、如何通过命令行重启linux操作系统？  #reboot</p><p>2、<strong>如何在命令行中快速删除光标前/后的内容？</strong>  <strong>前：ctrl + u</strong>  <strong>后：ctrl + k</strong></p><p>3、如何删除/tmp下所有A开头的文件？    #rm -f /tmp/A* </p><p>4、系统重要文件需要备份，如何把/etc/passwd备份到/tmp目录下？</p><p>   #cp /etc/passwd /tmp/</p><p>5、如何查看系统最后创建的3个用户？</p><p>   #tail -3 /etc/passwd</p><p>6、什么命令可以统计当前系统中一共有多少账户？</p><p>   #wc -l /etc/passwd    #cat /etc/passwd|wc -l</p><p>7、如何创建/tmp/test.conf文件？</p><p>   #touch /tmp/test.conf</p><p>8、如何通过vim编辑打开/tmp/test.conf?</p><p>   #vim /tmp/test.conf</p><p>9、如何查看/etc/passwd的头3行和尾3行？</p><p>   #head -3 /etc/passwd</p><p>   #tail -3 /etc/passwd</p><p>10、如何<strong>一次性</strong>创建目录/text/1/2/3/4？</p><p>   #mkdir -p /text/1/2/3/4</p><p>11、如何最快的返回到当前账户的家目录？</p><p>   #cd ~         #cd</p><p>12、如何查看/etc所占的磁盘空间？</p><p>   #du -sh /etc</p><p>13、如何删除/tmp下所有的文件？</p><p>   #rm -rf /tmp/*</p><p>14、尝试启动Apache的服务，并且检查是否启动成功。</p><p>   #service httpd start</p><p>   #ps -ef|grep httpd</p><p>15、使用已学命令杀死Apache的进程。</p><p>   #killall httpd</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux的基本指令（2）&quot;&gt;&lt;a href=&quot;#Linux的基本指令（2）&quot; class=&quot;headerlink&quot; title=&quot;Linux的基本指令（2）&quot;&gt;&lt;/a&gt;Linux的基本指令（2）&lt;/h1&gt;&lt;h1 id=&quot;一、高级指令&quot;&gt;&lt;a href=&quot;#一、高</summary>
      
    
    
    
    <category term="操作系统学习" scheme="https://roranrui.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Linux" scheme="https://roranrui.cn/tags/Linux/"/>
    
    <category term="操作系统" scheme="https://roranrui.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>二.Linux的基本指令</title>
    <link href="https://roranrui.cn/2022/04/26/er.linux-de-ji-ben-zhi-ling/"/>
    <id>https://roranrui.cn/2022/04/26/er.linux-de-ji-ben-zhi-ling/</id>
    <published>2022-04-26T07:29:35.000Z</published>
    <updated>2022-04-26T12:12:59.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux的基本指令"><a href="#Linux的基本指令" class="headerlink" title="Linux的基本指令"></a>Linux的基本指令</h1><h1 id="一、指令与选项"><a href="#一、指令与选项" class="headerlink" title="一、指令与选项"></a>一、指令与选项</h1><p>什么是Linux的指令？</p><p>指在Linux终端（命令行）中输入的内容就称之为指令。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image001.png" alt="img"></p><p>一个完整的指令的标准格式：Linux通用的格式</p><p>#<strong>指令主体（空格） [选项]（空格） [操作对象]</strong></p><p>一个指令可以包含多个选项</p><p>操作对象也可以是多个</p><p>例如：需要让张三同学帮忙去楼下小卖铺买一瓶农夫山泉水和清风餐巾纸，在这个指令中“买东西”是指令的主体，买的水和餐巾纸是操作的对象，农夫山泉、清风是操作的选项。</p><h1 id="二、基础指令（重点）"><a href="#二、基础指令（重点）" class="headerlink" title="二、基础指令（重点）"></a>二、基础指令（重点）</h1><h2 id="1、ls指令"><a href="#1、ls指令" class="headerlink" title="1、ls指令"></a>1、ls指令</h2><p>含义：ls （list）</p><p><strong>用法1：#ls</strong></p><p>含义：列出当前工作目录下的所有文件/文件夹的名称</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image003.jpg" alt="img"></p><p><strong>用法2：#ls 路径</strong></p><p>含义：列出指定路径下的所有文件/文件夹的名称</p><p>关于路径（重要）：</p><p>路径可以分为两种：相对路径、绝对路径。</p><p>相对路径：相对首先得有一个参照物（一般就是当前的工作路径）；</p><p>​    相对路径的写法：在相对路径中通常会用到2个符号“./”【表示当前目录下】、“../”【上一级目录下】。</p><p>绝对路径：绝对路径不需要参照物，直接从根“/”开始寻找对应路径；</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image0004.png" alt="img"></p><p><strong>用法3：#ls 选项 路径</strong></p><p>含义：在列出指定路径下的文件/文件夹的名称，并以指定的格式进行显示。</p><p>常见的语法：</p><p>​    #ls -l 路径</p><p>​    #ls -la 路径</p><p>选项解释：</p><p>​    <strong>-l：表示list，表示以详细列表的形式进行展示</strong></p><p>​    <strong>-a：表示显示所有的文件/文件夹（包含了隐藏文件/文件夹）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image005.png" alt="img"></p><p>上述列表中的第一列字符表示文档的类型，<strong>其中“-”表示改行对应的文档类型为文件，“d”表示文档类型为文件夹</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image0006.png" alt="img"></p><p><strong>在Linux中隐藏文档一般都是以“.”开头。</strong></p><p><strong>用法4：#ls -lh路径</strong></p><p>含义：列出指定路径下的所有文件/文件夹的名称，以列表的形式并且在显示文档大小的时候以<strong>可读性较高的形式显示</strong></p><p>参数含义：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image007.png" alt="img"></p><h2 id="2、pwd指令"><a href="#2、pwd指令" class="headerlink" title="2、pwd指令"></a>2、pwd指令</h2><p><strong>用法：#pwd      （print working directory，打印当前工作目录）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image008.png" alt="img"></p><h2 id="3、cd指令"><a href="#3、cd指令" class="headerlink" title="3、cd指令"></a>3、cd指令</h2><p>命令：#cd        （change directory，改变目录）</p><p>作用：用于切换当前的工作目录的</p><p><strong>语法：#cd 路径</strong></p><p>案例：当前在“/”下，需要使用绝对路径切换到/usr/local。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image009.jpg" alt="img"></p><p>案例：当前在/usr/local下，需要使用相对路径切换目录到home目录下的Linux123用户家目录中去。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image010.png" alt="img"></p><p>补充：</p><p>在Linux中有一个特殊的符号“~”，表示当前用户的家目录。</p><p>切换的方式：#cd ~</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image011.png" alt="img"></p><h2 id="4、mkdir指令"><a href="#4、mkdir指令" class="headerlink" title="4、mkdir指令"></a>4、mkdir指令</h2><p>指令：mkdir  （make directory，创建目录）</p><p>语法1：**#mkdir** <strong>路径</strong> <strong>【路径，可以是文件夹名称也可以是包含名称的一个完整路径】</strong></p><p>案例：在当前路径下创建出目录“yunweihenniux”</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image012.png" alt="img"></p><p>注意：ls列出的结果颜色说明，<strong>其中蓝色的名称表示文件夹</strong>，黑色的表示文件，<strong>绿色的其权限为拥有所有权限</strong>。</p><p>案例：在指定路径下创建出一个文件夹“yunweihenniux”</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image013.png" alt="img"></p><p>语法2：**#mkdir -p** <strong>路径</strong></p><p>含义：<strong>当一次性创建多层不存在的目录的时候</strong>，添加-p参数，否则会报错</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image015.jpg" alt="img"></p><p>语法3：**#mkdir** <strong>路径1</strong> <strong>路径2</strong> <strong>路径3 ….</strong>  【表示一次性创建多个目录】</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image017.png" alt="img"></p><h2 id="5、touch指令"><a href="#5、touch指令" class="headerlink" title="5、touch指令"></a>5、touch指令</h2><p>指令：touch  </p><p>作用：创建文件</p><p>语法：**#touch 文件路径**   【路径可以是直接的文件名也可以是路径】</p><p>案例：使用touch来在当前路径下创建一个文件，命名为Linux.txt</p><p><img src="C:/Users/13993/AppData/Local/Temp/msohtmlclip1/01/clip_image019.jpg" alt="img"></p><p>案例：使用touch来同时创建多个文件</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image021.jpg" alt="img"></p><p>案例：使用touch来在“Linux123”用户的家目录中创建文件，Linux.txt</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image022.png" alt="img"></p><h2 id="6、cp指令"><a href="#6、cp指令" class="headerlink" title="6、cp指令"></a>6、cp指令</h2><p>指令：cp     （copy，复制）</p><p>作用：复制文件/文件夹到指定的位置</p><p>语法：**#cp** <strong>被复制的文档路径</strong> <strong>文档被复制到的路径</strong></p><p>案例：使用cp命令来复制一个文件</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image023.png" alt="img"></p><p><strong>注意：Linux在复制过程中是可以重新对新位置的文件进行重命名的，但是如果不是必须的需要，则建议保持前后名称一致。</strong></p><p>案例：使用cp命令来复制一个文件夹</p><p><strong>注意：当使用cp命令进行文件夹复制操作的时候需要添加选项“-r”【-r表示递归复制】，否则目录将被忽略</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image025.jpg" alt="img"></p><h2 id="7、mv指令"><a href="#7、mv指令" class="headerlink" title="7、mv指令"></a>7、mv指令</h2><p>指令：mv  （move，移动，剪切）</p><p>作用：移动文档到新的位置</p><p>语法：**#mv** <strong>需要移动的文档路径</strong> <strong>需要保存的位置路径</strong></p><p>确认：移动之后原始的文件还在不在原来的位置？原始文件是不在原始位置的</p><p>案例：使用mv命令移动一个文件</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image026.png" alt="img"></p><p>案例：使用mv命令移动一个文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image027.png" alt="img"></p><p>补充：在Linux中重命名的命令也是mv，语法和移动语法一样。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image0028.jpg" alt="img"></p><h2 id="8、rm指令"><a href="#8、rm指令" class="headerlink" title="8、rm指令"></a>8、rm指令</h2><p>指令：rm （remove，移除、删除）</p><p>作用：移除/删除文档</p><p>语法：#rm 选项 需要移除的文档路径</p><p>选项：</p><p>​    -f：force，强制删除，不提示是否删除</p><p>​    -r：表示递归</p><p>案例：删除一个文件</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image029.png" alt="img"></p><p>在删除的时候如果不带选项，会提示是否删除，如果需要确认则输入“y/yes”，否则输入“n/no”按下回车。</p><p><strong>注意：如果在删除的时候不想频繁的确认，则可以在指令中添加选项“-f”，表示force（强制）。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image031.png" alt="img"></p><p>案例：删除一个文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image032.png" alt="img"></p><p><strong>注意：删除一个目录的时候需要做递归删除，并且一般也不需要进行删除确认询问，所以移除目录的时候一般需要使用-rf选项。</strong></p><p>案例：删除多个文档</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image033.png" alt="img"></p><p>案例：要删除一个目录下有公共特性的文档，例如都以Linux开头</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image035.jpg" alt="img"></p><p>其中** *称之为通配符，意思表示任意的字符，Linux*，则表示只要文件以Linux开头，后续字符则不管**。</p><h2 id="9、vim指令"><a href="#9、vim指令" class="headerlink" title="9、vim指令"></a>9、vim指令</h2><p>指令：vim  （vim是一款文本编辑器）</p><p>语法：**#vim** <strong>文件的路径</strong></p><p>作用：打开一个文件（可以不存在，也可以存在）</p><p>案例：使用vim来打开文件</p><p>退出打开的文件：在没有按下其他命令的时候，按下shift+英文冒号，输入q，按下回车即可</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image0036.jpg" alt="img"></p><h2 id="10、输出重定向"><a href="#10、输出重定向" class="headerlink" title="10、输出重定向"></a>10、输出重定向</h2><p><strong>一般命令的输出都会显示在终端中，有些时候需要将一些命令的执行结果想要保存到文件中进行后续的分析/统计，则这时候需要使用到的输出重定向技术。</strong></p><p>&gt;：覆盖输出，会覆盖掉原先的文件内容</p><p>&gt;&gt;：追加输出，不会覆盖原始文件内容，会在原始内容末尾继续添加</p><p><strong>语法：#正常执行的指令 &gt; / &gt;&gt;</strong> <strong>文件的路径</strong></p><p>注意：文件可以不存在，不存在则新建</p><p>案例：使用覆盖重定向，保存ls -la 的执行结果，保存到当前目录下的ls.txt</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image0037.png" alt="img"></p><p>案例：使用追加重定向，保存ls -la的执行结果到ls.txt中</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image038.png" alt="img"></p><h2 id="11、cat指令"><a href="#11、cat指令" class="headerlink" title="11、cat指令"></a>11、cat指令</h2><p><strong>作用1：cat有直接打开一个文件的功能。</strong></p><p><strong>语法1：#cat</strong> <strong>文件的路径</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image039.png" alt="img"></p><p><strong>作用2：cat还可以对文件进行合并</strong></p><p><strong>语法2：#cat</strong> <strong>待合并的文件路径1</strong> <strong>待合并的文件路径2 ….</strong> <strong>文件路径n &gt;</strong> <strong>合并之后的文件路径</strong></p><p>例如，合并3个文件，并存到一个文件中【配合输出重定向使用】</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image041.jpg" alt="img"></p><h1 id="三、进阶指令（重点）"><a href="#三、进阶指令（重点）" class="headerlink" title="三、进阶指令（重点）"></a>三、进阶指令（重点）</h1><h2 id="1、df指令"><a href="#1、df指令" class="headerlink" title="1、df指令"></a>1、df指令</h2><p>作用：查看磁盘的空间</p><p><strong>语法：#df -h      -h表示以可读性较高的形式展示大小</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/20220426150013.png" alt="img"></p><h2 id="2、free指令"><a href="#2、free指令" class="headerlink" title="2、free指令"></a>2、free指令</h2><p>作用：查看内存使用情况</p><p><strong>语法：#free -m  -m表示以mb为单位查看</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image045.jpg" alt="img"></p><p>剩余的真实可以用的内存为1665mb。</p><p>Swap：用于临时内存，当系统真实内存不够用的时候可以临时使用磁盘空间来充当内存。</p><h2 id="3、head指令"><a href="#3、head指令" class="headerlink" title="3、head指令"></a>3、head指令</h2><p>作用：查看一个文件的前n行，如果不指定n，则默认显示前10行。</p><p><strong>语法：#head -n</strong> <strong>文件路径</strong>  <strong>【n表示数字】</strong></p><p><img src="C:/Users/13993/AppData/Local/Temp/msohtmlclip1/01/clip_image047.jpg" alt="img"></p><h2 id="4、tail指令"><a href="#4、tail指令" class="headerlink" title="4、tail指令"></a>4、tail指令</h2><p>作用1：查看一个文件的未n行，如果n不指定默认显示后10行</p><p><strong>语法：#tail -n</strong> <strong>文件的路径   n同样表示数字</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/QQ%E5%9B%BE%E7%89%8720220426150122.png" alt="img"></p><p>作用2：可以通过tail指令来查看一个文件的动态变化内容【<strong>变化的内容不能是用户手动增加的</strong>】</p><p><strong>语法：#tail -f</strong> <strong>文件路径</strong></p><p><strong>该命令一般用于查看系统的日志比较多。</strong></p><h2 id="5、less指令"><a href="#5、less指令" class="headerlink" title="5、less指令"></a>5、less指令</h2><p>作用：查看文件，以较少的内容进行输出，按下辅助功能键（数字+回车、<strong>空格键</strong>+上下方向键）查看更多</p><p><strong>语法：#less</strong> <strong>需要查看的文件路径</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image050.jpg" alt="img"></p><p>在退出的只需要按下q键即可。</p><h2 id="6、wc指令"><a href="#6、wc指令" class="headerlink" title="6、wc指令"></a>6、wc指令</h2><p>作用：统计文件内容信息（包含行数、单词数、字节数）</p><p>语法：**#wc -lwc** <strong>需要统计的文件路径</strong></p><p>​    <strong>-l：表示lines，行数</strong></p><p>​    -w：表示words，单词数  依照空格来判断单词数量</p><p>​    -c：表示bytes，字节数</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/QQ%E5%9B%BE%E7%89%8720220426150201.png" alt="img"></p><h2 id="7、date指令（重点）"><a href="#7、date指令（重点）" class="headerlink" title="7、date指令（重点）"></a>7、date指令（重点）</h2><p>作用：表示操作时间日期（<strong>读取</strong>、设置）</p><p>语法1：#date             输出的形式：2018年 3月 24日 星期六 15:54:28</p><p>语法2：**#date  +%F**   <strong>（等价于#date  “+%Y-%m-%d”</strong> <strong>）</strong>   输出形式：2018-03-24</p><p>语法3：#date “+%F %T”  引号表示让“年月日与时分秒”成为一个不可分割的整体</p><p>​    <strong>等价操作#date “+%Y-%m-%d %H:%M:%S”</strong></p><p>输出的形式：2018-03-24 16:01:00</p><p>语法4：获取之前或者之后的某个时间（备份）</p><p>#date -d  “**-**1 <strong>day</strong>” “+%Y-%m-%d %H:%M:%S”</p><p>符号的可选值：+（之后） 或者 - （之前）</p><p>单位的可选值：day（天）、month（月份）、year（年）</p><p>%F：表示完整的年月日</p><p>%T：表示完整的时分秒</p><p>%Y：表示四位年份</p><p>%m：表示两位月份（带前导0）</p><p>%d：表示日期（带前导0）</p><p>%H：表示小时（带前导0）</p><p>%M：表示分钟（带前导0）</p><p>%S：表示秒数（带前导0）</p><h2 id="8、cal指令"><a href="#8、cal指令" class="headerlink" title="8、cal指令"></a>8、cal指令</h2><p><strong>作用：用来操作日历的</strong></p><p><strong>语法1：#cal 等价于 #cal -1</strong>    直接输出当前月份的日历</p><p><strong>语法2：#cal -3</strong>          表示输出上一个月+本月+下个月的日历</p><p><strong>语法3：#cal -y</strong> <strong>年份</strong>         表示输出某一个年份的日历</p><h2 id="9、clear-x2F-ctrl-L指令"><a href="#9、clear-x2F-ctrl-L指令" class="headerlink" title="9、clear/ctrl + L指令"></a>9、clear/ctrl + L指令</h2><p>作用：清除终端中已经存在的命令和结果（信息）。</p><p><strong>语法：clear</strong>      <strong>或者快捷键：ctrl + L</strong></p><p>需要注意的是，该命令并不是真的清除了之前的信息，而是把之前的信息的隐藏到了最上面，通过滚动条继续查看以前的信息。</p><h2 id="10、管道（重要）"><a href="#10、管道（重要）" class="headerlink" title="10、管道（重要）"></a>10、管道（重要）</h2><p><strong>管道符：|</strong></p><p>作用：管道一般可以用于“<strong>过滤</strong>”，“特殊”，“扩展处理”。</p><p>语法：管道不能单独使用，必须需要配合前面所讲的一些指令来一起使用，其作用<strong>主要是辅助作用</strong>。</p><p><strong>①过滤案例（100%使用</strong>）：需要通过管道查询出根目录下包含“y”字母的文档名称。</p><p>#ls / | grep y</p><p>针对上面这个命令说明：</p><p>①以管道作为分界线，前面的命令有个输出，后面需要先输入，然后再过滤，最后再输出，通俗的讲就是管道前面的输出就是后面指令的输入；</p><p>②grep指令：主要用于过滤</p><p>②特殊用法案例：通过管道的操作方法来实现less的等价效果（了解）</p><p>之前通过less查看一个文件，可以#less 路径</p><p>现在通过管道还可以这么：#cat 路径|less</p><p>③扩展处理：请使用学过的命令，来统计某个目录下的文档的总个数？</p><p><strong>答：#ls / | wc -l</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux的基本指令&quot;&gt;&lt;a href=&quot;#Linux的基本指令&quot; class=&quot;headerlink&quot; title=&quot;Linux的基本指令&quot;&gt;&lt;/a&gt;Linux的基本指令&lt;/h1&gt;&lt;h1 id=&quot;一、指令与选项&quot;&gt;&lt;a href=&quot;#一、指令与选项&quot; class</summary>
      
    
    
    
    <category term="操作系统学习" scheme="https://roranrui.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Linux" scheme="https://roranrui.cn/tags/Linux/"/>
    
    <category term="操作系统" scheme="https://roranrui.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>一.Linux介绍</title>
    <link href="https://roranrui.cn/2022/04/26/yi.linux-jie-shao/"/>
    <id>https://roranrui.cn/2022/04/26/yi.linux-jie-shao/</id>
    <published>2022-04-26T07:29:30.000Z</published>
    <updated>2022-04-26T07:36:10.953Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Linux发展史"><a href="#一、Linux发展史" class="headerlink" title="一、Linux发展史"></a>一、Linux发展史</h1><h2 id="1、Linux前身-Unix"><a href="#1、Linux前身-Unix" class="headerlink" title="1、Linux前身-Unix"></a>1、Linux前身-Unix</h2><p>1968年 Multics项目</p><p><strong>MIT</strong>、<strong>Bell</strong>实验室、<strong>美国通用电气有限公司</strong>走到了一起，致力于开发Multics项目。到后期由于开发进度不是很好，MIT和Bell实验室相继离开这个项目的开发，最终导致项目搁浅。</p><p><strong>1970年（Unix元年，时间戳）</strong> Unix诞生</p><p>当时在开发Multics项目的时候，实验室中有一个开发成员开发了一款游戏（travel space：遨游太空），因为两个实验室相继离开项目开发，导致这名开发人员没法玩游戏，后来他提议组织人员重新在Multics项目之上重新的开发，也就出现了1970年的Unix。当时Unix操作系统是使用的<strong>汇编语言（机器语言）</strong>开发的。</p><p>1973年 用<strong>C</strong>语言**重写Unix</p><p>因为汇编语言有一个最大的局限性：对于计算机硬件过于依赖。导致移植性不好，所以后期在1973年使用了C语言对其进行重新开发。</p><p>1975年 Bell实验室允许大学使用Unix。</p><p>1975年，bell实验室允许大学使用Unix操作系统用于教学作用，而不允许用于商业用途。</p><h2 id="2、Linux诞生"><a href="#2、Linux诞生" class="headerlink" title="2、Linux诞生"></a>2、Linux诞生</h2><p>人物 Linus</p><p>Linux的开发作者，Linux之父，李纳斯·托瓦兹。Linux诞生时是荷兰在校大学生。</p><p>Linux的开发作者，Linux之父，李纳斯·托瓦兹。Linux诞生时是荷兰在校大学生。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/e21312321%20.png" alt="img"></p><p>1991年 0.0.1版本</p><p>​李纳斯当时学校使用的就是Unix操作系统，然后其对系统的底层代码进行了修改，放到了学校为学生开放的网站上，原先他把文件命名写成了Linus’s Unix，后期网络管理发现之后觉得这个名字不好，自己手动的将名字改成Linux。随后其他同学下载之后发现这个版本还是挺好用的，随后都把自己代码贡献给李纳斯。</p><p>1992年 0.0.2版本</p><p>1994年 1.0版本</p><p>2003年 2.6版本</p><p><strong>上述所提及的版本号并不是分支版本，而是指Linux的内核版本。</strong></p><h2 id="3、开源文化"><a href="#3、开源文化" class="headerlink" title="3、开源文化"></a>3、开源文化</h2><p>Linux是<strong>开源</strong>的操作系统。所谓开源就是指开放源代码。</p><p>人 物 Stallman 斯特曼，开源文化的倡导人。</p><p><strong>1983<strong><strong>年 GNU</strong></strong>计划</strong></p><p>1985年 FSF基金会</p><p>1990年 Emacs、<strong>GCC</strong>（c语言的编译器）、程序库 </p><p>1991年   Stallman去找Linus，商谈让Linux加入其开源计划（GNU计划）</p><p>1992年 GNU/Linux</p><h2 id="4、Linux系统特点"><a href="#4、Linux系统特点" class="headerlink" title="4、Linux系统特点"></a>4、Linux系统特点</h2><p>开放性（开源）、多用户、多任务、良好的用户界面、优异的性能与稳定性</p><p>多用户多任务：</p><p>单用户：一个用户，在登录计算机（操作系统），只能允许<strong>同时</strong>登录一个用户；</p><p>单任务：一个任务，允许用户<strong>同时</strong>进行的操作任务数量；</p><p>多用户：多个用户，在登录计算机（操作系统），允许<strong>同时</strong>登录多个用户进行操作；</p><p>多任务：多个任务，允许用户<strong>同时</strong>进行多个操作任务；</p><p><strong>Windows属于：单用户、多任务。</strong></p><p><strong>Linux属于：多用户、多任务。</strong></p><h2 id="5、Linux分支"><a href="#5、Linux分支" class="headerlink" title="5、Linux分支"></a>5、Linux分支</h2><p>分支：Linux分支有很多，现在比较有名的<strong>ubuntu</strong>、debian、<strong>centos</strong>（Community Enterprise Operating System）、redhat、suse等等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、Linux发展史&quot;&gt;&lt;a href=&quot;#一、Linux发展史&quot; class=&quot;headerlink&quot; title=&quot;一、Linux发展史&quot;&gt;&lt;/a&gt;一、Linux发展史&lt;/h1&gt;&lt;h2 id=&quot;1、Linux前身-Unix&quot;&gt;&lt;a href=&quot;#1、Linux</summary>
      
    
    
    
    <category term="操作系统学习" scheme="https://roranrui.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Linux" scheme="https://roranrui.cn/tags/Linux/"/>
    
    <category term="操作系统" scheme="https://roranrui.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>第三天_字符串（简单)</title>
    <link href="https://roranrui.cn/2022/04/26/shua-ti-bi-ji-san/"/>
    <id>https://roranrui.cn/2022/04/26/shua-ti-bi-ji-san/</id>
    <published>2022-04-26T04:27:52.000Z</published>
    <updated>2022-04-26T04:49:32.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三天-字符串（简单"><a href="#第三天-字符串（简单" class="headerlink" title="第三天_字符串（简单)"></a>第三天_字符串（简单)</h1><h2 id="一-知识学习"><a href="#一-知识学习" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><blockquote><p>  字符串就是由字符组成的数组</p></blockquote><blockquote><p>  <strong>本质：</strong></p><ul><li>string是C++风格的字符串，而string本质上是一个类</li></ul><p>  <strong>string和char * 区别：</strong></p><ul><li>char * 是一个指针</li><li>string是一个类，类内部封装了char<em>，管理这个字符串，是一个char</em>型的容器。</li></ul></blockquote><hr><h2 id="二-题目练习"><a href="#二-题目练习" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-替换空格"><a href="#1-替换空格" class="headerlink" title="1. 替换空格"></a>1. 替换空格</h3><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426123725224.png" alt="image-20220426123725224"></p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">replaceSpace</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        string res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                res <span class="token operator">+</span><span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                res <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"%20"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426123828786.png" alt="image-20220426123828786"></p><hr><h3 id="2-左旋转字符串"><a href="#2-左旋转字符串" class="headerlink" title="2. 左旋转字符串"></a>2. 左旋转字符串</h3><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426123856996.png" alt="image-20220426123856996"></p><p><strong>解题思路:</strong></p><p>读取字符串到指定位数, 然后存储, 删除从0到指定位数的字符, 再将存储的字符串加到原字符串末尾.</p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        string temp<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            temp <span class="token operator">+</span><span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        s <span class="token operator">+</span><span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426124351559.png" alt="image-20220426124351559"></p><p><strong>执行用时为 0 ms 的范例:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  reverse(first, end)函数，包含在#include&lt;**algorithm**&gt;里，<a href="https://so.csdn.net/so/search?q=%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4&amp;spm=1001.2101.3001.7020">命名空间</a>std, 可以反转顺序</p></blockquote><p>使用三次<code>reverse()函数</code>, </p><ul><li><p>第一次反转从开始到指定位数的字符, 如: in: <code>abcde, 2</code></p><p>out :<strong>bacde</strong>;</p></li><li><p>第二次反转指定位数后面的字符, out: <strong>baedc</strong></p></li><li><p>第三次再反转整个字符串, 从而达到目的</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第三天-字符串（简单&quot;&gt;&lt;a href=&quot;#第三天-字符串（简单&quot; class=&quot;headerlink&quot; title=&quot;第三天_字符串（简单)&quot;&gt;&lt;/a&gt;第三天_字符串（简单)&lt;/h1&gt;&lt;h2 id=&quot;一-知识学习&quot;&gt;&lt;a href=&quot;#一-知识学习&quot; class</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://roranrui.cn/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
    <category term="Programming" scheme="https://roranrui.cn/tags/Programming/"/>
    
    <category term="算法" scheme="https://roranrui.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>WINDOWS美化教程</title>
    <link href="https://roranrui.cn/2022/04/26/windows-mei-hua-jiao-cheng/"/>
    <id>https://roranrui.cn/2022/04/26/windows-mei-hua-jiao-cheng/</id>
    <published>2022-04-26T01:21:30.000Z</published>
    <updated>2022-04-26T05:21:54.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于WINDOWS10的系统美化分享"><a href="#基于WINDOWS10的系统美化分享" class="headerlink" title="基于WINDOWS10的系统美化分享"></a>基于WINDOWS10的系统美化分享</h1><h2 id="一-我的桌面展示"><a href="#一-我的桌面展示" class="headerlink" title="一. 我的桌面展示"></a>一. 我的桌面展示</h2><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426125705590.png" alt="桌面"></p><blockquote><p>  个人认为桌面就是要干净整洁, 能不放东西就不放</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426130132949.png" alt="资源管理器"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426130253328.png" alt="开始菜单"></p><h2 id="二-美化软件推荐"><a href="#二-美化软件推荐" class="headerlink" title="二. 美化软件推荐"></a>二. 美化软件推荐</h2><h3 id="Wallpaper-Engine-位于steam平台"><a href="#Wallpaper-Engine-位于steam平台" class="headerlink" title="Wallpaper Engine: 位于steam平台"></a><code>Wallpaper Engine</code>: 位于steam平台</h3><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426130422362.png" alt="image-20220426130422362"></p><p>庞大的创意工坊, 丰富的动态壁纸, 可以极大提示你的桌面观感</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426130510251.png" alt="image-20220426130510251"></p><hr><h3 id="Rainmeter"><a href="#Rainmeter" class="headerlink" title="Rainmeter"></a>Rainmeter</h3><blockquote><p>  雨滴皮肤（Rainmeter皮肤），是一些有特定功能的Windows桌面小工具。一些复杂的皮肤则看起来像是小型应用程序，风格相近的皮肤则可以组成一个套装或者主题。任何一个雨滴皮肤在不同电脑上工作都是不完全相同的，这取决于使用者对它的调整和修饰。</p></blockquote><p><a href="https://zhutix.com/tag/rainmeter/page/2">雨滴软件下载, 皮肤下载</a></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426130709344.png" alt="image-20220426130709344"></p><h3 id="RocketDock"><a href="#RocketDock" class="headerlink" title="RocketDock"></a>RocketDock</h3><blockquote><p>  官方介绍: Our super-cool dock for Windows. It’s a bit outdated, but people still love it.</p></blockquote><p><a href="https://punklabs.com/">官网地址</a></p><p>类似于<code>Mac OS</code>的dock栏, 对于桌面整洁很有效</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426131023496.png" alt="image-20220426131023496"></p><hr><h3 id="StartlsBack"><a href="#StartlsBack" class="headerlink" title="StartlsBack"></a>StartlsBack</h3><blockquote><p>  可以自定义开始菜单, 任务栏透明, 开始按钮</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426131128255.png" alt="image-20220426131128255"></p><hr><h2 id="三-系统个性化美化"><a href="#三-系统个性化美化" class="headerlink" title="三. 系统个性化美化"></a>三. 系统个性化美化</h2><h3 id="鼠标指针"><a href="#鼠标指针" class="headerlink" title="鼠标指针"></a>鼠标指针</h3><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426131645462.png" alt="image-20220426131645462"></p><blockquote><p>  比原版好看太多还简洁</p></blockquote><p><a href="https://zhutix.com/ico/material-design-cursor-v2/">下载地址</a></p><hr><h3 id="主题修改"><a href="#主题修改" class="headerlink" title="主题修改"></a>主题修改</h3><p><a href="https://zhutix.com/tag/win10-zhuti/">资源网站推荐_致美化</a></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426131959489.png" alt="image-20220426131959489"></p><blockquote><p>  教程此网站已经很详细了</p></blockquote><hr><p>至此, 个人认为美化教程已经足够了, 下期带来<code>win10</code>好用的工具分享</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基于WINDOWS10的系统美化分享&quot;&gt;&lt;a href=&quot;#基于WINDOWS10的系统美化分享&quot; class=&quot;headerlink&quot; title=&quot;基于WINDOWS10的系统美化分享&quot;&gt;&lt;/a&gt;基于WINDOWS10的系统美化分享&lt;/h1&gt;&lt;h2 id=&quot;一</summary>
      
    
    
    
    <category term="美化教程" scheme="https://roranrui.cn/categories/%E7%BE%8E%E5%8C%96%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="桌面美化" scheme="https://roranrui.cn/tags/%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96/"/>
    
    <category term="经验分享" scheme="https://roranrui.cn/tags/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>第二天_链表(简单)</title>
    <link href="https://roranrui.cn/2022/04/25/shua-ti-bi-ji-er/"/>
    <id>https://roranrui.cn/2022/04/25/shua-ti-bi-ji-er/</id>
    <published>2022-04-25T00:18:53.000Z</published>
    <updated>2022-04-25T08:25:48.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二天-链表-简单"><a href="#第二天-链表-简单" class="headerlink" title="第二天_链表(简单)"></a>第二天_链表(简单)</h1><blockquote><p>  刷题日程指引: <a href="https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/px2ds5/">行百里者半九十。坚持一个月刷完，一起加油！</a></p></blockquote><h2 id="一-知识学习"><a href="#一-知识学习" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><blockquote><p>  链表以节点为单位，每个元素都是一个独立对象，在内存空间的存储是非连续的。链表的节点对象具有两个成员变量：「值 <code>val</code>」，「后继节点引用 <code>next</code>」 。</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> ListNode <span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 节点值</span>    ListNode <span class="token operator">*</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 后继节点引用</span>    <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">val</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图所示，建立此链表需要实例化每个节点，并构建各节点的引用指向。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 实例化节点</span>ListNode <span class="token operator">*</span>n1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 节点 head</span>ListNode <span class="token operator">*</span>n2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ListNode <span class="token operator">*</span>n3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 构建引用指向</span>n1<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> n2<span class="token punctuation">;</span>n2<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> n3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/1599578767-zgLjYw-Picture3.png" alt="Picture3.png"></p><hr><h2 id="二-题目练习"><a href="#二-题目练习" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-从尾到头打印链表"><a href="#1-从尾到头打印链表" class="headerlink" title="1. 从尾到头打印链表"></a>1. 从尾到头打印链表</h3><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220425082308455.png" alt="image-20220425082308455" style="zoom:150%;"><p>**解题思路: **</p><blockquote><p>  题目要求逆序输出, 满足栈的先进后出特性, 可以用栈来模拟输出</p></blockquote><p>实现</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">reversePrint</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>           stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> output<span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            output<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>output<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            output<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220425093925129.png" alt="image-20220425093925129"></p><blockquote><p>  本题用栈模拟已是优解</p></blockquote><hr><h3 id="2-反转链表"><a href="#2-反转链表" class="headerlink" title="2. 反转链表"></a>2. 反转链表</h3><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220425085321953.png" alt="image-20220425085321953" style="zoom:150%;"><p><strong>解题思路:</strong></p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/20200510214622321.gif" alt="在这里插入图片描述" style="zoom:150%;"><p>用一个 <code>pre</code> 指针和一个 <code>cur</code> 指针，顾名思义，<code>curr</code> 从头开始，指向每个当前的结点，<code>pre</code> 就是 <code>cur</code> 的前一个结点。所谓反转，就是要让每个结点指向其前一个结点。每次移动，我们用 <code>cur</code> 记录当下的<code>node</code>，用 <code>pre</code> 记录前一个<code>node</code>，然后让 <code>cur.next = pre</code></p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode<span class="token operator">*</span> curr <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> pre <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>curr <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ListNode<span class="token operator">*</span> temp <span class="token operator">=</span>  curr<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 记录下一位</span>            <span class="token comment" spellcheck="true">// 反转</span>            curr<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 后移</span>            pre <span class="token operator">=</span> curr<span class="token punctuation">;</span>            curr <span class="token operator">=</span> temp<span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220425093805387.png" alt="image-20220425093805387"></p><p>还有最普通的栈方式:</p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/20200510214932541.gif" alt="栈实现" style="zoom:150%;"><pre class="line-numbers language-cpp"><code class="language-cpp"> <span class="token keyword">public</span> ListNode <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>       Stack<span class="token operator">&lt;</span>ListNode<span class="token operator">></span> stack <span class="token operator">=</span>  <span class="token keyword">new</span> Stack<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ListNode temp <span class="token operator">=</span> node<span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ListNode head <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ListNode temp1 <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ListNode temp2 <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp1<span class="token punctuation">.</span>next <span class="token operator">=</span> temp2<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>temp2 <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp2<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  思想其实就是利用栈先进后出的原理，把这些node逆序排起来，然后一个一个拿出来，连起来，</p></blockquote><hr><h3 id="3-复杂链表的复制"><a href="#3-复杂链表的复制" class="headerlink" title="3. 复杂链表的复制"></a>3. 复杂链表的复制</h3><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220425091240411.png" alt="image-20220425091240411"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220425091252478.png" alt="image-20220425091252478"></p><p><strong>解题思路:</strong></p><blockquote><p>  第一步：创建新链表时，将原链表的每一个节点复制，并连接在原节点的后面，相当于在原链表的每一个节点后面插入一个val值相等的新节点。</p><p>  以例一为例：</p>  <img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/20210321153137291.png" alt="第一次复制过的链表" style="zoom:150%;"><p>  第二步：通过原链表的<code>random</code>找到新链表的<code>random</code>。新复制的节点的<code>random</code>由原节点的<code>random</code>决定，如果原节点的<code>random == NULL</code>，则新节点的<code>random == NULL</code>，否则，由于新节点还在原链表中，所以新节点的<code>random =</code> 原节点的<code>random-&gt;next</code>。</p><p>  第三步：把新节点从原链表中分离出，返回新链表。</p></blockquote><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*// Definition for a Node.class Node {public:    int val;    Node* next;    Node* random;        Node(int _val) {        val = _val;        next = NULL;        random = NULL;    }};*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    Node<span class="token operator">*</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node<span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 拷贝原链表每一个节点并将新节点链到原节点后面</span>        <span class="token punctuation">{</span>            Node <span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            newNode<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            cur<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            cur <span class="token operator">=</span> newNode<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 通过原节点为新节点的random域赋值</span>        <span class="token punctuation">{</span>            Node <span class="token operator">*</span> newcur <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>random <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                newcur<span class="token operator">-</span><span class="token operator">></span>random <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                newcur<span class="token operator">-</span><span class="token operator">></span>random <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>random<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cur <span class="token operator">=</span> newcur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        Node<span class="token operator">*</span> newList <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 将新链表从原链表中分离出来</span>        <span class="token punctuation">{</span>            Node <span class="token operator">*</span> newcur <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            cur<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> newcur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                newcur<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                newcur<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> newList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220425093943577.png" alt="image-20220425093943577"></p><p>执行用时为 8 ms 的范例:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*// Definition for a Node.class Node {public:    int val;    Node* next;    Node* random;        Node(int _val) {        val = _val;        next = NULL;        random = NULL;    }};*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    Node<span class="token operator">*</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span> node <span class="token operator">=</span> head<span class="token punctuation">;</span> node <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> node <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">*</span> nodeNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            nodeNew<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            node<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> nodeNew<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span> node <span class="token operator">=</span> head<span class="token punctuation">;</span> node <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> node <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">*</span> nodeNew <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            nodeNew<span class="token operator">-</span><span class="token operator">></span>random <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>random <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">?</span> node<span class="token operator">-</span><span class="token operator">></span>random<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">:</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node<span class="token operator">*</span> headNew <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span> node <span class="token operator">=</span> head<span class="token punctuation">;</span> node <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> node <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">*</span> nodeNew <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            node<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            nodeNew<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token punctuation">(</span>nodeNew<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">?</span> nodeNew<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">:</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> headNew<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  使用for循环 + 三目运算符, 思想基本一样</p></blockquote><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第二天-链表-简单&quot;&gt;&lt;a href=&quot;#第二天-链表-简单&quot; class=&quot;headerlink&quot; title=&quot;第二天_链表(简单)&quot;&gt;&lt;/a&gt;第二天_链表(简单)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;  刷题日程指引: &lt;a href=&quot;https://</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://roranrui.cn/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
    <category term="Programming" scheme="https://roranrui.cn/tags/Programming/"/>
    
    <category term="算法" scheme="https://roranrui.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>第一天_栈与队列（简单）</title>
    <link href="https://roranrui.cn/2022/04/24/shua-ti-bi-ji-yi/"/>
    <id>https://roranrui.cn/2022/04/24/shua-ti-bi-ji-yi/</id>
    <published>2022-04-24T12:42:11.000Z</published>
    <updated>2022-04-25T01:10:05.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一天-栈与队列（简单）"><a href="#第一天-栈与队列（简单）" class="headerlink" title="第一天_栈与队列（简单）"></a>第一天_栈与队列（简单）</h1><blockquote><p>  刷题日程指引: <a href="https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/px2ds5/">行百里者半九十。坚持一个月刷完，一起加油！</a></p></blockquote><h2 id="一-知识学习"><a href="#一-知识学习" class="headerlink" title="一.知识学习"></a>一.知识学习</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><blockquote><p>  栈是一种具有 「先入后出」 特点的抽象数据结构，可使用数组或链表实现。</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp">stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stk<span class="token punctuation">;</span>stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 元素 1 入栈</span>stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 元素 2 入栈</span>stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 出栈 -> 元素 2</span>stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 出栈 -> 元素 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图所示，通过常用操作「入栈 <code>push()</code>」,「出栈 <code>pop()</code>」，展示了栈的先入后出特性。</p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/1599578767-ZifMEX-Picture4.png" alt="Picture4.png" style="zoom:150%;"><hr><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><blockquote><p>  队列是一种具有 「先入先出」 特点的抽象数据结构，可使用链表实现。</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp">queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> que<span class="token punctuation">;</span>que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 元素 1 入队</span>que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 元素 2 入队</span>que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 出队 -> 元素 1</span>que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 出队 -> 元素 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/1599588416-Majmwh-Picture5.png" alt="Picture5.png" style="zoom:150%;"><hr><h2 id="二-题目练习"><a href="#二-题目练习" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-用两个栈实现队列"><a href="#1-用两个栈实现队列" class="headerlink" title="1. 用两个栈实现队列"></a>1. 用两个栈实现队列</h3><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220424211735242.png" alt="image-20220424211735242"></p><p><strong>解决方案：</strong></p><ul><li>栈的特点是先进后出，队列的特点是先进先出，这里我们可以使用两个栈（栈A和栈B）模拟队列，具体如下：</li><li>初始时，栈A和栈B都为空，当需要压入元素时，全部压入栈A；当想要元素出栈时，将栈A中的元素依次出栈并压入栈B；例如：我们将元素a，b，c依次压入栈A，要出栈时，将栈A元素出栈并压入栈B，则栈B中的元素为c,b,a；这时再进行出栈，元素为a，符合队列先进先出的特点；<img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/20200819084611888.png" alt="用两个栈实现队列" style="zoom:150%;"></li></ul><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CQueue</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> A<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> B<span class="token punctuation">;</span>    <span class="token function">CQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">appendTail</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        A<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">deleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>A<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 将栈A中的值逆序保存到B</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            A<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            B<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        B<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>B<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 又将B中的值逆序送回A(这样一来就满足先进先出)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            B<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            A<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Your CQueue object will be instantiated and called as such: * CQueue* obj = new CQueue(); * obj->appendTail(value); * int param_2 = obj->deleteHead(); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220424213830541.png" alt="image-20220424213830541"></p><p>执行用时为 252 ms 的范例:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CQueue</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st1<span class="token punctuation">,</span> st2<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">CQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">appendTail</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        st1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">deleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>st1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> st2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>st2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>st1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                st2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>st1<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                st1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> st2<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  只用了一次循环, 耗时少了近180毫秒</p></blockquote><hr><h3 id="2-包含-min-函数的栈"><a href="#2-包含-min-函数的栈" class="headerlink" title="2. 包含 min 函数的栈"></a>2. 包含 min 函数的栈</h3><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220424214313949.png" alt="image-20220424214313949" style="zoom:150%;"><p><strong>解题思路</strong>:</p><blockquote><p>  使用两个stack，一个为数据栈，另一个为辅助栈。数据栈用于存储所有数据，辅助栈用于存储最小值。</p><p>  普通栈的 push() 和 pop() 函数的复杂度为 O(1) ；而获取栈最小值 min() 函数需要遍历整个栈，复杂度为 O(N) 。</p><p>  本题难点： 将 min() 函数复杂度降为 O(1)O(1) ，可通过建立辅助栈实现；</p></blockquote><ul><li>数据栈 A ： 栈 A 用于存储所有元素，保证入栈 push() 函数、出栈 pop() 函数、获取栈顶 top() 函数的正常逻辑。</li><li>辅助栈 B ： 栈 B中存储栈 A 中所有 非严格降序 的元素，则栈 A 中的最小元素始终对应栈 B 的栈顶元素，即 min() 函数只需返回栈 B 的栈顶元素即可。</li><li>因此，只需设法维护好 栈 B 的元素，使其保持非严格降序，即可实现 min() 函数的 O(1)复杂度。</li></ul><ol><li><p>push()–入栈的时候：首先将数值x压入数据栈A中，若辅助栈B为空或者辅助栈B的栈顶元素大于等于数值x时，则将数值x压入辅助栈中。</p></li><li><p>pop()—出栈的时候：当数据栈A和辅助栈的栈顶元素相同的时候，辅助栈的栈顶元素出栈。否则，数据栈的栈顶元素出栈。</p></li><li><p>top()函数–获得栈顶元素的时候：直接返回数据栈A的栈顶元素。</p></li><li><p>min()函数—栈最小元素：直接返回辅助栈B的栈顶元素。</p></li></ol><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> main<span class="token punctuation">,</span> help<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/** initialize your data structure here. */</span>    <span class="token function">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>help<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> help<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> x<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            help<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        main<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> help<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            help<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        main<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> main<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> help<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Your MinStack object will be instantiated and called as such: * MinStack* obj = new MinStack(); * obj->push(x); * obj->pop(); * int param_3 = obj->top(); * int param_4 = obj->min(); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220424220317281.png" alt="image-20220424220317281"></p><p>执行用时为 12 ms 的范例:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/** initialize your data structure here. */</span>    <span class="token function">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        m_min<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>            <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        m_data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> m_min<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            m_min<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            m_min<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>m_min<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               m_min<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_data<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>  m_data<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> m_min<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> m_data<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> m_min<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Your MinStack object will be instantiated and called as such: * MinStack* obj = new MinStack(); * obj->push(x); * obj->pop(); * int param_3 = obj->top(); * int param_4 = obj->min(); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  pop()时, 没有比较, 而是将两个栈的top()元素一起出栈了</p></blockquote><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一天-栈与队列（简单）&quot;&gt;&lt;a href=&quot;#第一天-栈与队列（简单）&quot; class=&quot;headerlink&quot; title=&quot;第一天_栈与队列（简单）&quot;&gt;&lt;/a&gt;第一天_栈与队列（简单）&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;  刷题日程指引: &lt;a href</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://roranrui.cn/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
    <category term="Programming" scheme="https://roranrui.cn/tags/Programming/"/>
    
    <category term="算法" scheme="https://roranrui.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>51单片机学习（二）</title>
    <link href="https://roranrui.cn/2022/04/23/51-dan-pian-ji-xue-xi-er/"/>
    <id>https://roranrui.cn/2022/04/23/51-dan-pian-ji-xue-xi-er/</id>
    <published>2022-04-23T12:55:22.000Z</published>
    <updated>2022-04-23T13:32:42.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="51单片机学习笔记-二"><a href="#51单片机学习笔记-二" class="headerlink" title="51单片机学习笔记(二)"></a>51单片机学习笔记(二)</h1><h2 id="一-数码管"><a href="#一-数码管" class="headerlink" title="一.  数码管"></a>一.  数码管</h2><h3 id="1-数码管介绍"><a href="#1-数码管介绍" class="headerlink" title="1. 数码管介绍"></a>1. 数码管介绍</h3><blockquote><p>led数码管（LED Segment Displays）由多个发光二极管封装在一起组成“8”字型的器件，引线已在内部连接完成，只需引出它们的各个笔划，公共电极。数码管实际上是由七个发光管组成8字形构成的，加上小数点就是8个。这些段分别由字母a,b,c,d,e,f,g,dp来表示。<br>LED数码管根据LED的不同接法可以分为2类：共阴和共阳。</p></blockquote><p><strong>封装</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/20171224212348497" alt="数码管"></p><p>控制哪个数码管亮:  </p><blockquote><p>按CBA排列, 对<code>P2_4</code> <code>P2_3</code> <code>P2_2</code>分别给不同的电平, 可转换成10进制控制右边<code>Y0~Y7</code>的LED引脚</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220423205957947.png" alt="138译码器"></p><p>按图中顺序给读取所给8位控制哪部分亮的二进制数, 转换成16进制即可</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220423210555254.png" alt="数码管"></p><h3 id="2-静态显示数码管"><a href="#2-静态显示数码管" class="headerlink" title="2. 静态显示数码管"></a>2. 静态显示数码管</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> NixieTable<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">,</span> <span class="token number">0X66</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0X6F</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Location<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>Location<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">8</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    P0 <span class="token operator">=</span> NixieTable<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-动态显示数码管"><a href="#3-动态显示数码管" class="headerlink" title="3. 动态显示数码管"></a>3. 动态显示数码管</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> NixieTable<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">,</span> <span class="token number">0X66</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0X6F</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Location<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>Location<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">8</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    P0 <span class="token operator">=</span> NixieTable<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 消影操作</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    P0 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-LCD1602"><a href="#二-LCD1602" class="headerlink" title="二. LCD1602"></a>二. LCD1602</h2><h2 id="三-矩阵键盘"><a href="#三-矩阵键盘" class="headerlink" title="三. 矩阵键盘"></a>三. 矩阵键盘</h2><h3 id="1-矩阵键盘介绍"><a href="#1-矩阵键盘介绍" class="headerlink" title="1. 矩阵键盘介绍"></a>1. 矩阵键盘介绍</h3><blockquote><p>矩阵键盘：在键盘中按键数量较多时，为了减少I/O口的占用，（通常）将按键排列成矩阵排列<br>的形式。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/5de4b608f50c477a81bd60c3c0ef65df.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/ab2bd830dc8f4cbb94be04a481f632de.png" alt="img"></p><p>16个按键用了8个I/O口</p><blockquote><p>【注：矩阵越多，I/O口占用的减少越明显。<br> 如：1080P有1920<em>1080 =2073600个像素，若让彩色显示器“完整”显示，需2073600</em>3=6220800个LED-单色灯（注：1个RGB-LED灯需3个发光源[红、绿、蓝]，这三原色组成一个像素）<br>故 每一个单独引线需6220800个I/O口，用矩阵方式，则需（1920+1080)*3=9000个LED-单色灯的I/O口。】</p></blockquote><ol><li><p>读出矩阵键盘任何位置按键的状态的方式：采用逐行或逐列的“扫描”。</p></li><li><p>扫描的概念（注：需占用单片机CPU的时间）：<br>①数码管扫描（输出扫描）<br>原理：显示第1位→显示第2位→显示第3位→……，然后快速循环这个过程，最终实现所有数码管“看似”同时显示的效果</p></li></ol><blockquote><p>【弊端：在同一时刻不能控制多位数码管显示】</p></blockquote><p>②矩阵键盘扫描（输入扫描）<br>原理：读取第1行(列)→读取第2行(列) →读取第3行(列) → ……，然后快速循环这个过程，最终实现所有按键同时检测的效果</p><ol start="3"><li>51单片机扫描原理线性化说明【注：此为粗糙式说明】：<br> ①I/O的工作模式是：准双向口配置（“弱上拉，强下拉”）。</li></ol><blockquote><p>【注：还有开漏输出、推挽输出、高阻输入模式】</p></blockquote><p>​当IO输出为高电平时，其驱动能力很弱，外部负载很容易将其拉至低电平。这样的设计有利于保护电路（“拉低比拉高更安全”）<br>（简化后电路原理： <img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/966d86fcc03642e0a8a9fd0fd5aaa25a.png" alt="img"><br>​RES阻值较多大于Res2。<br>​当1、2相通，若此时PX.Y接GND（即输入低电平），数据读取点即使受高电平（VCC）信号，但强度弱，被输入低电平（GND）拉低。 因此，对的单片机而言，管脚输出高电平而接入管脚输出低电平相通不会短路损坏。）<br>​②扫描原理：单片机能输出电平，<br>​首先控制某段电平，按键按下后，另一段电平被拉低，然后读取另一段电平，这样就知道哪个按键被按下。<br>​③扫描思路：<br>​❶思路1（“扩散型”→控制某一行（或列）“0”，其它为“1”)：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/3c4712ca9a7b4046bddd61ee0434dd80.png" alt="img"></p><p>​❷思路2（“广撒网”→控制行为“1”，控制列为“0” + 控制列为“1”，控制行为“0”）：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/5c19f8a0c95a4d3898cfe5bb1dd2b47f.png" alt="img"></p><ol start="4"><li>单片机的矩阵按键扫描模型化说明（“十字交叉即选中”）：</li></ol><p>  扩散型”思路：</p><p>  ①按行扫描（对比独立按键）：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/e87c5853bd634b25aa622553c36dca7d.png" alt="以第一行为例"></p><p>先视行为共端，控制某一行的共端处为低电平“0”，则这一行被选中， 当某一按键按下时，此按键的列端被拉低，读为“0”，这样，就知道了某一行的某个按键被按下。</p><blockquote><p>【注：每次只能给一行“0”。否则，无法判断是否被按下</p></blockquote><p>举例：S7按下的按行扫描</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/b6184668da984bbeb07bd7b7181e7707.png" alt="img"></p><p>②按列扫描：先视列为共端，控制某一列的共端处为低电平“0”，则这一列被选中，当某一按键按下时，此按键的行端被拉低，读为“0”，这样，就知道了某一行的某个按键被按下。</p><blockquote><p>【注：每次只能给一列“0”。】</p></blockquote><p>举例：S6按下的扫描</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/f94b5eafe51e4ef6958bd4dfe8aff1e7.png" alt="img"></p><h3 id="2-矩阵键盘控制LCD1602"><a href="#2-矩阵键盘控制LCD1602" class="headerlink" title="2. 矩阵键盘控制LCD1602"></a>2. 矩阵键盘控制LCD1602</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"LCD1602.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"MatrixKey.h"</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> KeyNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"MatrixKey:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        KeyNum <span class="token operator">=</span> <span class="token function">MatrixKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>KeyNum<span class="token punctuation">)</span>        <span class="token punctuation">{</span>                        <span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> KeyNum<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-矩阵键盘密码锁"><a href="#3-矩阵键盘密码锁" class="headerlink" title="3. 矩阵键盘密码锁"></a>3. 矩阵键盘密码锁</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"LCD1602.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"MatrixKey.h"</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> KeyNum<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> passWord<span class="token punctuation">,</span> count<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"PassWord:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        KeyNum <span class="token operator">=</span> <span class="token function">MatrixKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>KeyNum<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>KeyNum <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 输入密码的区域</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 限制输入密码的次数</span>                <span class="token punctuation">{</span>                    passWord <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                    passWord <span class="token operator">+</span><span class="token operator">=</span> KeyNum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                                <span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> passWord<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>KeyNum <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// s11 按下 confirm操作</span>            <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>passWord <span class="token operator">==</span> <span class="token number">1348</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// correct password</span>                <span class="token punctuation">{</span>                                        <span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">"OK "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    passWord <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> passWord<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    <span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">"ERR"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    passWord <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> passWord<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>KeyNum <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                passWord <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"PassWord:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> passWord<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>KeyNum <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                passWord <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"LCD_ShowString: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1399398004</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="附录-模块化编程"><a href="#附录-模块化编程" class="headerlink" title="附录: 模块化编程"></a>附录: 模块化编程</h2><p>封装: </p><p><code>Nixie.c</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token comment" spellcheck="true">//包含Delay头文件</span><span class="token comment" spellcheck="true">//数码管段码表</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> NixieTable<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x5B</span><span class="token punctuation">,</span><span class="token number">0x4F</span><span class="token punctuation">,</span><span class="token number">0x66</span><span class="token punctuation">,</span><span class="token number">0x6D</span><span class="token punctuation">,</span><span class="token number">0x7D</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x6F</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数码管显示子函数</span><span class="token keyword">void</span> <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Location<span class="token punctuation">,</span>Number<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>Location<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//位码输出</span>    <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>P2_4<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>P2_3<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>P2_2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>P2_4<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>P2_3<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>P2_2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>P2_4<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>P2_3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P2_2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>P2_4<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>P2_3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P2_2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>P2_4<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P2_3<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>P2_2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>P2_4<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P2_3<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>P2_2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span>P2_4<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P2_3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P2_2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">8</span><span class="token punctuation">:</span>P2_4<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P2_3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P2_2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    P0<span class="token operator">=</span>NixieTable<span class="token punctuation">[</span>Number<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//段码输出</span>    <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示一段时间</span>    P0<span class="token operator">=</span><span class="token number">0x00</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//段码清0，消影</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Nixie.h</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __NIXIE_H__</span><span class="token macro property">#<span class="token directive keyword">define</span> __NIXIE_H__</span><span class="token keyword">void</span> <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Location<span class="token punctuation">,</span>Number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>MatrixKey.c</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">MatrixKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> KeyNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 逐列扫描</span>        <span class="token comment" spellcheck="true">// first col</span>    P1 <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// P1全部置为高电平</span>    P1_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_7 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_7 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_6 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_6 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_5 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_5 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_4 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_4 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// second col</span>    P1 <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// P1全部置为高电平</span>    P1_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_7 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_7 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_6 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_6 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_5 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_5 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_4 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_4 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// third col</span>    P1 <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// P1全部置为高电平</span>    P1_1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_7 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_7 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_6 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_6 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_5 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_5 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_4 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_4 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// fourth col</span>    P1 <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// P1全部置为高电平</span>    P1_0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_7 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_7 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_6 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_6 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_5 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_5 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_4 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_4 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> KeyNumber<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>MatrixKey.h</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span> __MATRIXKEY_H__</span><span class="token macro property">#<span class="token directive keyword">define</span> __MATRIXKEY_H__</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">MatrixKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>LCD1602.c</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token comment" spellcheck="true">//引脚配置：</span>sbit LCD_RS<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">6</span><span class="token punctuation">;</span>sbit LCD_RW<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">5</span><span class="token punctuation">;</span>sbit LCD_EN<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> LCD_DataPort P0</span><span class="token comment" spellcheck="true">//函数定义：</span><span class="token comment" spellcheck="true">/**  * @brief  LCD1602延时函数，12MHz调用可延时1ms  * @param  无  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">LCD_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    j <span class="token operator">=</span> <span class="token number">239</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  LCD1602写命令  * @param  Command 要写入的命令  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">LCD_WriteCommand</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Command<span class="token punctuation">)</span><span class="token punctuation">{</span>    LCD_RS<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    LCD_RW<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    LCD_DataPort<span class="token operator">=</span>Command<span class="token punctuation">;</span>    LCD_EN<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">LCD_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LCD_EN<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">LCD_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  LCD1602写数据  * @param  Data 要写入的数据  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Data<span class="token punctuation">)</span><span class="token punctuation">{</span>    LCD_RS<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    LCD_RW<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    LCD_DataPort<span class="token operator">=</span>Data<span class="token punctuation">;</span>    LCD_EN<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">LCD_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LCD_EN<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">LCD_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  LCD1602设置光标位置  * @param  Line 行位置，范围：1~2  * @param  Column 列位置，范围：1~16  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">LCD_SetCursor</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Line<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">LCD_WriteCommand</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">|</span><span class="token punctuation">(</span>Column<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Line<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">LCD_WriteCommand</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">|</span><span class="token punctuation">(</span>Column<span class="token number">-1</span><span class="token operator">+</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  LCD1602初始化函数  * @param  无  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">LCD_WriteCommand</span><span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//八位数据接口，两行显示，5*7点阵</span>    <span class="token function">LCD_WriteCommand</span><span class="token punctuation">(</span><span class="token number">0x0c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示开，光标关，闪烁关</span>    <span class="token function">LCD_WriteCommand</span><span class="token punctuation">(</span><span class="token number">0x06</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据读写操作后，光标自动加一，画面不动</span>    <span class="token function">LCD_WriteCommand</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//光标复位，清屏</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  在LCD1602指定位置上显示一个字符  * @param  Line 行位置，范围：1~2  * @param  Column 列位置，范围：1~16  * @param  Char 要显示的字符  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">LCD_ShowChar</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">,</span><span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">LCD_SetCursor</span><span class="token punctuation">(</span>Line<span class="token punctuation">,</span>Column<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  在LCD1602指定位置开始显示所给字符串  * @param  Line 起始行位置，范围：1~2  * @param  Column 起始列位置，范围：1~16  * @param  String 要显示的字符串  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>    <span class="token function">LCD_SetCursor</span><span class="token punctuation">(</span>Line<span class="token punctuation">,</span>Column<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>String<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  返回值=X的Y次方  */</span><span class="token keyword">int</span> <span class="token function">LCD_Pow</span><span class="token punctuation">(</span><span class="token keyword">int</span> X<span class="token punctuation">,</span><span class="token keyword">int</span> Y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> Result<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Y<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Result<span class="token operator">*</span><span class="token operator">=</span>X<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  在LCD1602指定位置开始显示所给数字  * @param  Line 起始行位置，范围：1~2  * @param  Column 起始列位置，范围：1~16  * @param  Number 要显示的数字，范围：0~65535  * @param  Length 要显示数字的长度，范围：1~5  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>    <span class="token function">LCD_SetCursor</span><span class="token punctuation">(</span>Line<span class="token punctuation">,</span>Column<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>Length<span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token function">LCD_Pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  在LCD1602指定位置开始以有符号十进制显示所给数字  * @param  Line 起始行位置，范围：1~2  * @param  Column 起始列位置，范围：1~16  * @param  Number 要显示的数字，范围：-32768~32767  * @param  Length 要显示数字的长度，范围：1~5  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">LCD_ShowSignedNum</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">,</span><span class="token keyword">int</span> Number<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Number1<span class="token punctuation">;</span>    <span class="token function">LCD_SetCursor</span><span class="token punctuation">(</span>Line<span class="token punctuation">,</span>Column<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Number<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Number1<span class="token operator">=</span>Number<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Number1<span class="token operator">=</span><span class="token operator">-</span>Number<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>Length<span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>Number1<span class="token operator">/</span><span class="token function">LCD_Pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  在LCD1602指定位置开始以十六进制显示所给数字  * @param  Line 起始行位置，范围：1~2  * @param  Column 起始列位置，范围：1~16  * @param  Number 要显示的数字，范围：0~0xFFFF  * @param  Length 要显示数字的长度，范围：1~4  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">LCD_ShowHexNum</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span>SingleNumber<span class="token punctuation">;</span>    <span class="token function">LCD_SetCursor</span><span class="token punctuation">(</span>Line<span class="token punctuation">,</span>Column<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>Length<span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        SingleNumber<span class="token operator">=</span>Number<span class="token operator">/</span><span class="token function">LCD_Pow</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">16</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>SingleNumber<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>SingleNumber<span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>SingleNumber<span class="token number">-10</span><span class="token operator">+</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  在LCD1602指定位置开始以二进制显示所给数字  * @param  Line 起始行位置，范围：1~2  * @param  Column 起始列位置，范围：1~16  * @param  Number 要显示的数字，范围：0~1111 1111 1111 1111  * @param  Length 要显示数字的长度，范围：1~16  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">LCD_ShowBinNum</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>    <span class="token function">LCD_SetCursor</span><span class="token punctuation">(</span>Line<span class="token punctuation">,</span>Column<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>Length<span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token function">LCD_Pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>LCD1602.h</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __LCD1602_H__</span><span class="token macro property">#<span class="token directive keyword">define</span> __LCD1602_H__</span><span class="token comment" spellcheck="true">//用户调用函数：</span><span class="token keyword">void</span> <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_ShowChar</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">,</span><span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_ShowSignedNum</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">,</span><span class="token keyword">int</span> Number<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_ShowHexNum</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_ShowBinNum</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文章: </p><p><a href="https://blog.csdn.net/faithandvirtue/category_11404877.html">https://blog.csdn.net/faithandvirtue/category_11404877.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;51单片机学习笔记-二&quot;&gt;&lt;a href=&quot;#51单片机学习笔记-二&quot; class=&quot;headerlink&quot; title=&quot;51单片机学习笔记(二)&quot;&gt;&lt;/a&gt;51单片机学习笔记(二)&lt;/h1&gt;&lt;h2 id=&quot;一-数码管&quot;&gt;&lt;a href=&quot;#一-数码管&quot; cla</summary>
      
    
    
    
    <category term="嵌入式开发" scheme="https://roranrui.cn/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="51单片机" scheme="https://roranrui.cn/tags/51%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    <category term="Hardware" scheme="https://roranrui.cn/tags/Hardware/"/>
    
  </entry>
  
  <entry>
    <title>51单片机学习（一）</title>
    <link href="https://roranrui.cn/2022/04/23/51-dan-pian-ji-xue-xi-yi/"/>
    <id>https://roranrui.cn/2022/04/23/51-dan-pian-ji-xue-xi-yi/</id>
    <published>2022-04-23T09:10:49.000Z</published>
    <updated>2022-04-23T12:59:01.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="51单片机学习笔记-一"><a href="#51单片机学习笔记-一" class="headerlink" title="51单片机学习笔记(一)"></a>51单片机学习笔记(一)</h1><h2 id="一．STC89C52单片机的基本结构"><a href="#一．STC89C52单片机的基本结构" class="headerlink" title="一．STC89C52单片机的基本结构"></a>一．STC89C52单片机的基本结构</h2><blockquote><p><strong>什么是单片机</strong></p><ul><li><p>单片机（Microcontrollers）是一种集成电路芯片，是采用超大规模集成电路技术把具有数据处理能力的中央处理器CPU、随机存储器RAM、只读存储器ROM、多种I/O口和中断系统、定时器/计数器等功能（可能还包括显示驱动电路、脉宽调制电路、模拟多路转换器、A/D转换器等电路）集成到一块硅片上构成的一个小而完善的微型计算机系统，在工业控制领域广泛应用。从上世纪80年代，由当时的4位、8位单片机，发展到现在的300M的高速单片机。</p></li><li><p>不是完成某一个逻辑功能的芯片,而是把一个计算机系统集成到一个芯片上。相当于一个微型的计算机，和计算机相比，单片机只缺少了I/O设备。概括的讲：一块芯片就成了一台计算机。</p></li></ul></blockquote><ol><li><p>CPU 运算器和控制器 单片机的核心构成部分之一</p></li><li><p>内部数据存储器 存放可读的数据，如程序中的定义。</p></li><li><p>程序存储器 8KB，（0000H~1FFFH）存放程序，原始数据。</p></li><li><p>定时/计算器 3个定时器/计算器，即可设置成计数方式用于外部事件计数，也可以设置成定时模式，用于对单片机的计时控制。</p></li><li><p>并行端口</p><p>4个8位I/O口(P1,P2,P3,P4)。每个8位I/O口，既可作为输入信号端，也可作为输出信号端。可同时对8位同步读写，也可以单独操作。</p></li><li><p>串行端口</p><p>有一个全双工的串行接口，实现单片机与其他设备之间的串行数据传输，可作为全双工异步通信收发器使用，也可作为同步移位器使用。</p></li><li><p>中断系统</p><p>拥有6个中断源，包含两个外中断，3个定时器，和一个串行口中断。</p></li><li><p>时钟电路</p><p>   内部拥有时钟电路，但需要外接石英晶体和微调电容，即晶振电路，产生时钟脉冲序列。</p></li></ol><h2 id="二-使用单片机之前的准备"><a href="#二-使用单片机之前的准备" class="headerlink" title="二. 使用单片机之前的准备"></a>二. 使用单片机之前的准备</h2><h3 id="1-软件"><a href="#1-软件" class="headerlink" title="1. 软件"></a>1. 软件</h3><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220423171937001.png" alt="image-20220423171937001"></p><p><strong>KEIL5(写程序)</strong> 与 <strong>STC-ISP(烧录)</strong>, 以及相应单片机的<strong>usb驱动</strong>(接电脑用)</p><p>具体使用互联网可查</p><hr><h3 id="2-建立keil工程文件"><a href="#2-建立keil工程文件" class="headerlink" title="2. 建立keil工程文件"></a>2. 建立keil工程文件</h3><blockquote><p>1.创建工程文件夹<br>2.创建工程文件<br>3.选择正确的单片机型号<br>4.创建新的C语言文件<br>5.保存并添加C语言文件<br>6.开始编写程序</p></blockquote><hr><h3 id="3-熟悉进制"><a href="#3-熟悉进制" class="headerlink" title="3. 熟悉进制"></a>3. 熟悉进制</h3><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8C%96.png" alt="进制转化"></p><h2 id="三-LED模块"><a href="#三-LED模块" class="headerlink" title="三. LED模块"></a>三. LED模块</h2><h3 id="1-LED介绍"><a href="#1-LED介绍" class="headerlink" title="1. LED介绍"></a>1. <strong>LED介绍</strong></h3><p><strong>Light Emitting Diode</strong><br>LED,即发光二极管，是一种半导体固体发光器件。<br><strong>插件</strong><br><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/20171224210340650" alt="这里写图片描述"><br><strong>贴片</strong><br><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/20171224210406444" alt="这里写图片描述"> </p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/20171224210452525" alt="LED原理图"></p><p><strong>LED原理图</strong>:</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220423172504922.png" alt="LED模块"></p><hr><h3 id="2-点亮第一个LED"><a href="#2-点亮第一个LED" class="headerlink" title="2. 点亮第一个LED"></a>2. 点亮第一个LED</h3><p><strong>P2_0 ~ P2_78个引脚控制8个LED</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    P2 <span class="token operator">=</span> <span class="token number">0xFE</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-LED闪烁"><a href="#3-LED闪烁" class="headerlink" title="3. LED闪烁"></a>3. LED闪烁</h3><p>生成延时函数控制LED闪烁</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220423173005049.png" alt="生成延时函数"></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;INTRINS.H></span></span><span class="token keyword">void</span> <span class="token function">Delay500ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//@12.000MHz</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token function">_nop_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_nop_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>    j <span class="token operator">=</span> <span class="token number">205</span><span class="token punctuation">;</span>    k <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        <span class="token keyword">do</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        P2 <span class="token operator">=</span> <span class="token number">0xFE</span><span class="token punctuation">;</span>        <span class="token function">Delay500ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        P2 <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>        <span class="token function">Delay500ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="4-LED流水灯"><a href="#4-LED流水灯" class="headerlink" title="4. LED流水灯"></a>4. LED流水灯</h3><h4 id="4-1-简单实现流水灯"><a href="#4-1-简单实现流水灯" class="headerlink" title="4.1 简单实现流水灯"></a>4.1 简单实现流水灯</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;INTRINS.H></span></span><span class="token keyword">void</span> <span class="token function">Delay100ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//@12.000MHz</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token function">_nop_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_nop_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    j <span class="token operator">=</span> <span class="token number">144</span><span class="token punctuation">;</span>    k <span class="token operator">=</span> <span class="token number">71</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        <span class="token keyword">do</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        P2 <span class="token operator">=</span> <span class="token number">0xFE</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1111 1110</span>        <span class="token function">Delay100ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        P2 <span class="token operator">=</span> <span class="token number">0xFD</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1111 1101</span>        <span class="token function">Delay100ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        P2 <span class="token operator">=</span> <span class="token number">0xFB</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1111 1011</span>        <span class="token function">Delay100ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        P2 <span class="token operator">=</span> <span class="token number">0xF7</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1111 0111</span>        <span class="token function">Delay100ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        P2 <span class="token operator">=</span> <span class="token number">0xEF</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1110 1111</span>        <span class="token function">Delay100ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        P2 <span class="token operator">=</span> <span class="token number">0xDF</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1101 1111</span>        <span class="token function">Delay100ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        P2 <span class="token operator">=</span> <span class="token number">0xBF</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1011 1111</span>        <span class="token function">Delay100ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        P2 <span class="token operator">=</span> <span class="token number">0x7F</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 0111 1111</span>        <span class="token function">Delay100ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-用按键和定时器控制实现"><a href="#4-2-用按键和定时器控制实现" class="headerlink" title="4.2 用按键和定时器控制实现"></a>4.2 用按键和定时器控制实现</h4><p>关于定时器及相关代码后面会介绍</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Timer0.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Key.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;INTRINS.H></span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> KeyNum<span class="token punctuation">,</span> LEDMode<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    P2 <span class="token operator">=</span> <span class="token number">0xFE</span><span class="token punctuation">;</span>    <span class="token function">Timer0Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        KeyNum <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>KeyNum<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>KeyNum <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                LEDMode<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>LEDMode <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span>LEDMode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Timer0_Routine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">1</span>  <span class="token comment" spellcheck="true">// 中断 先执行这部分在执行主程序</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> T0Count<span class="token punctuation">;</span>    TL0 <span class="token operator">=</span> <span class="token number">0x18</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Initial timer value</span>    TH0 <span class="token operator">=</span> <span class="token number">0xFC</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Initial timer value</span>    T0Count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T0Count <span class="token operator">>=</span> <span class="token number">500</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 1s 执行一次</span>    <span class="token punctuation">{</span>        T0Count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>LEDMode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            P2 <span class="token operator">=</span> <span class="token function">_crol_</span><span class="token punctuation">(</span>P2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>LEDMode <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            P2 <span class="token operator">=</span> <span class="token function">_cror_</span><span class="token punctuation">(</span>P2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四-独立按键模块"><a href="#四-独立按键模块" class="headerlink" title="四. 独立按键模块"></a>四. 独立按键模块</h2><h3 id="1-独立按键介绍"><a href="#1-独立按键介绍" class="headerlink" title="1. 独立按键介绍"></a>1. 独立按键介绍</h3><p><strong>轻触开关</strong>是一种电子开关，使用时,轻轻按开关按钮就可使开关接通，当松开手时,开关断开。我们使用的开关如下图：</p><p><strong>封装</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/20171224212709471" alt="独立按键"></p><p><strong>原理图</strong></p><p>由P3引脚控制</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220423173944446.png" alt="独立按键模块"></p><hr><h3 id="2-独立按键控制LED亮灭"><a href="#2-独立按键控制LED亮灭" class="headerlink" title="2. 独立按键控制LED亮灭"></a>2. 独立按键控制LED亮灭</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//P2 = 0xFE;   // operate all register</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P3_1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            P2_0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            P2_0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-独立按键控制LED状态"><a href="#3-独立按键控制LED状态" class="headerlink" title="3. 独立按键控制LED状态"></a>3. 独立按键控制LED状态</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//@12.000MHz</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>    <span class="token punctuation">{</span>            i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        j <span class="token operator">=</span> <span class="token number">239</span><span class="token punctuation">;</span>        <span class="token keyword">do</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            time<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P3_1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// one turn for pressing button detection</span>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>P3_1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// while detect </span>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        P2_0 <span class="token operator">=</span> <span class="token operator">~</span>P2_0<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-独立按键控制LED显示二进制"><a href="#4-独立按键控制LED显示二进制" class="headerlink" title="4. 独立按键控制LED显示二进制"></a>4. 独立按键控制LED显示二进制</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>time<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">239</span><span class="token punctuation">;</span>        <span class="token keyword">do</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        time<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> LED_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// control light</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>P3_1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>P3_1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LED_num<span class="token operator">++</span><span class="token punctuation">;</span>            P2 <span class="token operator">=</span> <span class="token operator">~</span>LED_num<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-独立按键控制LED移位"><a href="#5-独立按键控制LED移位" class="headerlink" title="5. 独立按键控制LED移位"></a>5. 独立按键控制LED移位</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> LED_Num<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// control light</span><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>time<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">239</span><span class="token punctuation">;</span>        <span class="token keyword">do</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    P2 <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">0x01</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>P3_1<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果K1按键按下</span>        <span class="token punctuation">{</span>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>P3_1<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        LED_Num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//LEDNum自增</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>LED_Num <span class="token operator">>=</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//限制LEDNum自增范围</span>                LED_Num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2 <span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">0x01</span> <span class="token operator">&lt;&lt;</span> LED_Num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//LED的第LEDNum位点亮</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>P3_0 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果K2按键按下</span>        <span class="token punctuation">{</span>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>P3_0<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>LED_Num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                LED_Num <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                LED_Num<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//LEDNum自减</span>            P2<span class="token operator">=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">0x01</span> <span class="token operator">&lt;&lt;</span> LED_Num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//LED的第LEDNum位点亮</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="附录-模块化编程"><a href="#附录-模块化编程" class="headerlink" title="附录: 模块化编程"></a>附录: 模块化编程</h2><blockquote><p>封装Delay函数</p></blockquote><p><code>Delay.c</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> xms<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>xms<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        j <span class="token operator">=</span> <span class="token number">239</span><span class="token punctuation">;</span>        <span class="token keyword">do</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Delay.h</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __DELAY_H__</span><span class="token macro property">#<span class="token directive keyword">define</span> __DELAY_H__</span><span class="token keyword">void</span> <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> xms<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p>参考文章: </p><p><a href="https://blog.csdn.net/zhanganliu/category_7816577.html">https://blog.csdn.net/zhanganliu/category_7816577.html</a> </p><p><a href="https://blog.csdn.net/hu_9716/category_7243036.html">https://blog.csdn.net/hu_9716/category_7243036.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;51单片机学习笔记-一&quot;&gt;&lt;a href=&quot;#51单片机学习笔记-一&quot; class=&quot;headerlink&quot; title=&quot;51单片机学习笔记(一)&quot;&gt;&lt;/a&gt;51单片机学习笔记(一)&lt;/h1&gt;&lt;h2 id=&quot;一．STC89C52单片机的基本结构&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="嵌入式开发" scheme="https://roranrui.cn/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="51单片机" scheme="https://roranrui.cn/tags/51%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    <category term="Hardware" scheme="https://roranrui.cn/tags/Hardware/"/>
    
  </entry>
  
  <entry>
    <title>Numpy使用手册</title>
    <link href="https://roranrui.cn/2022/04/22/numpy-shi-yong-shou-ce/"/>
    <id>https://roranrui.cn/2022/04/22/numpy-shi-yong-shou-ce/</id>
    <published>2022-04-22T15:48:16.000Z</published>
    <updated>2022-04-22T15:49:12.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Numpy使用手册"><a href="#Numpy使用手册" class="headerlink" title="Numpy使用手册"></a>Numpy使用手册</h1><h2 id="1-一维数组"><a href="#1-一维数组" class="headerlink" title="1. 一维数组"></a>1. 一维数组</h2><p>NumPy Ndarray 对象<br>NumPy 最重要的一个特点是其 N 维数组对象 ndarray，它是一系列同类型数据的集合，以 0 下标为开始进行集合中元素的索引。</p><p>ndarray 对象是用于存放同类型元素的多维数组。</p><p>ndarray 中的每个元素在内存中都有相同存储大小的区域。</p><p>ndarray 内部由以下内容组成：</p><p>一个指向数据（内存或内存映射文件中的一块数据）的指针。</p><p>数据类型或 dtype，描述在数组中的固定大小值的格子。</p><p>一个表示数组形状（shape）的元组，表示各维度大小的元组。</p><p>一个跨度元组（stride），其中的整数指的是为了前进到当前维度下一个元素需要”跨过”的字节数。</p><p>ndarray 的内部结构:</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/pREJuYgw19sKbjn.png" alt="img"></p><p>跨度可以是负数，这样会使数组在内存中后向移动，切片中 obj[::-1] 或 obj[:,::-1] 就是如此。</p><p>创建一个 ndarray 只需调用 NumPy 的 array 函数即可</p><hr><h4 id="1-1-创建一维数组"><a href="#1-1-创建一维数组" class="headerlink" title="1.1 创建一维数组"></a>1.1 创建一维数组</h4><p>API: <code>np.array(obj)</code>, obj 的类型只可以是列表或者元组</p><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">print</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结果为:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h4 id="1-2-数组的数据类型"><a href="#1-2-数组的数据类型" class="headerlink" title="1.2 数组的数据类型"></a>1.2 数组的数据类型</h4><table><thead><tr><th>bool_</th><th>布尔型数据类型（True 或者 False）</th></tr></thead><tbody><tr><td>int_</td><td>默认的整数类型（类似于 C 语言中的 long，int32 或 int64）</td></tr><tr><td>intc</td><td>与 C 的 int 类型一样，一般是 int32 或 int 64</td></tr><tr><td>intp</td><td>用于索引的整数类型（类似于 C 的 ssize_t，一般情况下仍然是 int32 或 int64）</td></tr><tr><td>int8</td><td>字节（-128 to 127）</td></tr><tr><td>int16</td><td>整数（-32768 to 32767）</td></tr><tr><td>int32</td><td>整数（-2147483648 to 2147483647）</td></tr><tr><td>int64</td><td>整数（-9223372036854775808 to 9223372036854775807）</td></tr><tr><td>uint8</td><td>无符号整数（0 to 255）</td></tr><tr><td>uint16</td><td>无符号整数（0 to 65535）</td></tr><tr><td>uint32</td><td>无符号整数（0 to 4294967295）</td></tr><tr><td>uint64</td><td>无符号整数（0 to 18446744073709551615）</td></tr><tr><td>float_</td><td>float64 类型的简写</td></tr><tr><td>float16</td><td>半精度浮点数，包括：1 个符号位，5 个指数位，10 个尾数位</td></tr><tr><td>float32</td><td>单精度浮点数，包括：1 个符号位，8 个指数位，23 个尾数位</td></tr><tr><td>float64</td><td>双精度浮点数，包括：1 个符号位，11 个指数位，52 个尾数位</td></tr><tr><td>complex_</td><td>complex128 类型的简写，即 128 位复数</td></tr><tr><td>complex64</td><td>复数，表示双 32 位浮点数（实数部分和虚数部分）</td></tr><tr><td>complex128</td><td>复数，表示双 64 位浮点数（实数部分和虚数部分）</td></tr></tbody></table><p>指定数据类型 –<code>dtype</code></p><ul><li><code>dtype = np.int32</code>  – 直接指定名称</li><li><code>dtype = 'i4'</code>  – 使用字符串代号(<strong>int8, int16, int32, int64</strong> 四种数据类型可以使用字符串 <strong>‘i1’, ‘i2’,’i4’,’i8’</strong> 代替)</li></ul><hr><h4 id="1-3-一维数组的函数"><a href="#1-3-一维数组的函数" class="headerlink" title="1.3 一维数组的函数"></a>1.3 一维数组的函数</h4><p>API:</p><ol><li><p><code>np.arrange(start, stop, step, dtype)</code>创建数组</p><ul><li><strong>start:</strong> 开始值, 默认为0, <strong>包含</strong>开始值</li><li><strong>stop:</strong> 结束值, <strong>不包含</strong>结束值</li><li><strong>step:</strong> 步长, 默认1, 可为负</li></ul></li><li><p><code>np.linspase(start, stop, num, endpoint, restep, dtype)</code> 创建<strong>等差</strong>数组</p><ul><li><strong>num:</strong> 设置生成的元素个数</li><li><strong>endpoint:</strong> 是否包含结束值, 默认True</li><li><strong>restop:</strong> 是否返回步长(公差), 默认False(如果为True, 返回的是二维数组, 包括数组和步长)</li></ul></li><li><p><code>np.logspace(start, stop, num, endpoint, base, dtype)</code> 创建<strong>等比</strong>数组</p><ul><li><strong>start:</strong> 开始值 = base ** start</li><li><strong>stop:</strong> 结束值 = base ** stop</li><li><strong>base:</strong> 底数, 默认为0</li></ul></li></ol><p>实例: </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 初始值0 ,结束值不为10, 步长1</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 初始值1, 结束值不为10, 步长2</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stop<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 数据类型</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 等差数组</span>d <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stop<span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> retstep<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'i4'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 等比数组</span>e <span class="token operator">=</span> np<span class="token punctuation">.</span>logspace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2-二维数组"><a href="#2-二维数组" class="headerlink" title="2. 二维数组"></a>2. 二维数组</h2><p><strong>数组的轴</strong></p><p>二维数组有两个轴, 轴索引分别为0和1</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/JwoVU1W7cjsGDYv.png" alt="image-20211123224715748"></p><p>**数组转置: **利用数组对象T, 将轴索引交换</p><hr><h4 id="2-1-二维数组的函数"><a href="#2-1-二维数组的函数" class="headerlink" title="2.1 二维数组的函数"></a>2.1 二维数组的函数</h4><p>API:</p><ol><li><p><code>np.ones(shape, dtype=None)</code>创建全为<strong>一</strong>的数组</p><ul><li><strong>shape:</strong> 数组形状(可为列表, 元组) [2, 3]二行三列</li></ul></li><li><p><code>np.zeros(shape, dtype=None)</code>创建全为<strong>零</strong>的数组</p></li><li><p><code>np.full(shape, fill_value, dtype=None)</code>根据指定形状和类型生成数组, 并用指定数据填充</p><ul><li><strong>fill_value:</strong> 指定填充的数据</li></ul></li><li><p><code>np.identity(n, dtype=None)</code>创建单位矩阵(对角线元素为1, 其他元素为0的矩阵)</p><ul><li><strong>n:</strong> 数组形状</li></ul></li></ol><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 6x5 1</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 3x2 0</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 3x3 5</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fill_value<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>complex64<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 单位矩阵5x5</span>d <span class="token operator">=</span> np<span class="token punctuation">.</span>identity<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="3-数组访问"><a href="#3-数组访问" class="headerlink" title="3. 数组访问"></a>3. 数组访问</h2><h3 id="3-1-索引访问"><a href="#3-1-索引访问" class="headerlink" title="3.1 索引访问"></a>3.1 索引访问</h3><p>即通过对应下标访问元素</p><ul><li>一维: <code>ndarrary[index]</code>;</li><li>二维: <code>ndarray[0轴索引][1轴索引]</code>;</li></ul><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 一维</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 二维</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>d <span class="token operator">=</span> c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-2-切片访问"><a href="#3-2-切片访问" class="headerlink" title="3.2 切片访问"></a>3.2 切片访问</h3><p>一维:</p><ul><li><code>ndarray[start:end]</code></li><li><code>ndarray[start:end:step]</code><ul><li><strong>step</strong>: 步长, 默认1</li><li>包含起始值<strong>不包含结束值</strong></li></ul></li></ul><p>二维:</p><ul><li><code>ndarray[所在0轴切片, 所在1轴切片]</code><ul><li>切片的元素类型与原数据相同</li><li>两个切片是二维数组</li><li>一个切片一个标量是一维数组</li></ul></li></ul><p>实例:</p><pre><code></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 一维数组索引</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 步长为2</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>d <span class="token operator">=</span> c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 二维数组</span>e <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>f <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 切片中有一个是标量</span>h <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>i <span class="token operator">=</span> h<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-3-布尔索引"><a href="#3-3-布尔索引" class="headerlink" title="3.3 布尔索引"></a>3.3 布尔索引</h3><ul><li>布尔索引必须与要索引的数组<strong>形状相同</strong>, 否则会引发IndexError错误</li><li>布尔索引返回的新数组是原数组的副本, 拥有独立的内存空间(切片索引为浅层复制)</li><li>为Ture 保留, 为False 剔除</li><li><strong>布尔索引输出的值一定是一个一维数组</strong></li></ul><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"> <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 一维布尔索引</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 二维布尔索引</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>d <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-4-花式索引"><a href="#3-4-花式索引" class="headerlink" title="3.4 花式索引"></a>3.4 花式索引</h3><p>索引方法:</p><ul><li>索引为整数列表</li><li>索引为一维整数数组</li><li>索引为二维整数数组</li><li>索引返回的新数组是原数组的副本, 拥有独立的内存空间</li><li>二维数组上<strong>每一个轴</strong>的索引数组形状相同</li></ul><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 一维数组的花式索引(二维索引)</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 一维数组的花式索引(一维索引)</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>d <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 一维数组的花式索引(整数列表)</span>e <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 二维数组的花式索引(整数列表)</span>a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>n <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 二维数组的花式索引(一维索引)</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>m <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>n <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 二维数组花式索引(二维数组)</span>a3 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b3 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b4 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">[</span>b3<span class="token punctuation">,</span> b4<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="4-数组处理"><a href="#4-数组处理" class="headerlink" title="4. 数组处理"></a>4. 数组处理</h2><h3 id="4-1-连接数组"><a href="#4-1-连接数组" class="headerlink" title="4.1 连接数组"></a>4.1 连接数组</h3><p>API:</p><ol><li><p><code>np.concatenate((a1, a2, ...), axis)</code> 沿指定的轴连接多个数组</p><ul><li><strong>(a1, a2, …):</strong> 要连接的数组</li><li><strong>axis:</strong> 轴, 默认为0轴</li></ul></li><li><p><code>np.vstack((a1, a2, ...))</code> 沿垂直堆叠多个数组, 相当于concatenate() axis=0</p><ul><li><strong>1轴元素个数要相同</strong></li></ul></li><li><p><code>np.hstack((a1, a2, ...))</code> 沿水平堆叠多个数组, 相当于concatenate() axis=1</p><ul><li><strong>0轴元素个数要相同</strong></li></ul></li></ol><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 沿指定的轴连接多个数组</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 沿垂直堆叠多个数组</span>a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>c1 <span class="token operator">=</span> np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> b1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 沿水平堆叠多个数组</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>c2 <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>a2<span class="token punctuation">,</span> b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="4-2-分割数组"><a href="#4-2-分割数组" class="headerlink" title="4.2 分割数组"></a>4.2 分割数组</h3><p>API:</p><ol><li><p><code>np.split(arr, indices_or_scetions, axis)</code>沿指定的轴分割成多个数组</p><ul><li><strong>arr:</strong> 要分割的数组</li><li><strong>indices_or_scetions:</strong> 如果是<strong>整数</strong>就平均分割, 如果是<strong>数组</strong>, 则为沿指定的轴的切片操作</li><li><strong>axis:</strong> 默认0轴</li></ul></li><li><p><code>np.vsplit(arr, indices_or_scetions)</code>沿着垂直方向分割数组, 相当于split() axis=0</p></li><li><p><code>np.hsplit(arr, indices_or_scetions)</code>沿着水平方向分割数组, 相当于split() axis=1</p></li></ol><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 沿指定的轴分割成多个数组(整数)</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>split<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 沿指定的轴分割成多个数组(数组)</span>a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>sections <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b1 <span class="token operator">=</span> np<span class="token punctuation">.</span>split<span class="token punctuation">(</span>a1<span class="token punctuation">,</span> sections<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 沿着垂直方向分割数组</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b2 <span class="token operator">=</span> np<span class="token punctuation">.</span>vsplit<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 沿着水平方向分割数组</span>a3 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>sections1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b3 <span class="token operator">=</span> np<span class="token punctuation">.</span>hsplit<span class="token punctuation">(</span>a3<span class="token punctuation">,</span> sections1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="4-3-数组的算数运算"><a href="#4-3-数组的算数运算" class="headerlink" title="4.3 数组的算数运算"></a>4.3 数组的算数运算</h3><p>数组的运算用<strong>标准运算符</strong>即可</p><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 一维</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">**</span> b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 一维</span>a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1 <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 二维</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> b2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 二维</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a2 <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="4-3-数组广播"><a href="#4-3-数组广播" class="headerlink" title="4.3 数组广播"></a>4.3 数组广播</h3><p>​当数组与标量或者不同形状的数组进行算术运算时, 就会发生数组广播</p><p>下面的图片展示了数组 b 如何通过广播来与数组 a 兼容。</p><p><img src="https://i.loli.net/2021/11/27/2PgsYGzu1DE8yVS.gif" alt="img"></p><p><strong>广播的规则:</strong></p><ul><li>先比较形状, 再比较维度, 最后比较对应轴长度</li><li>若两数组的纬度不相等, 会在较低维度数组的形状左侧填充1, 直到维度相等</li><li>两数组维度相等: 如果对应轴长度相等, 则兼容, 可以发生数组广播, 若其中一个轴长度为1, 长度为1的轴会拓展</li></ul><p><strong>简单理解：</strong>对两个数组，分别比较他们的每一个维度（若其中一个数组没有当前维度则忽略），满足：</p><ul><li>数组拥有相同形状。</li><li>当前维度的值相等。</li><li>当前维度的值有一个是1。</li></ul><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 数组与标量</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [2, 2, 2]</span><span class="token comment" spellcheck="true"># %% 数组与数组 一</span>a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ([1, 2], [1, 2])</span>b1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> b1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 数组与数组 二</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (1, 2)  ([[1, 2], [1, 2]])</span>b2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (2, 1)  ([[3, 3], [3, 3]])</span><span class="token keyword">print</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> b2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 数组与数组 三</span>a3 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ([[1, 2], [1, 2]])  (2, 2)</span>b3 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (2, 3)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">,</span> b3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 无法计算, 不满足广播原则</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="5-其他数组函数"><a href="#5-其他数组函数" class="headerlink" title="5. 其他数组函数"></a>5. 其他数组函数</h2><h3 id="5-1-随机数函数"><a href="#5-1-随机数函数" class="headerlink" title="5.1 随机数函数"></a>5.1 随机数函数</h3><p>API:</p><ol><li><p><code>np.random.rand(a0, a1, ...)</code> 返回[0.0, 1.0)的随机浮点数</p></li><li><p><code>np.random.randint(low, high, size, dtype)</code> 返回[low, high)的随机整数</p><ul><li><strong>size:</strong> 数组形状</li></ul></li><li><p><code>np.random.normal(loc, scale, size)</code> 返回正态分布随机数</p><ul><li><strong>loc:</strong> 平均值</li><li><strong>scale:</strong> 标准差</li></ul></li><li><p><code>np.random.randn(a0, a1, ...)</code> 返回标准正态分布随机数(loc=0, scale=1)</p><p>实例:</p><pre><code>import numpy as np# %% 浮点数a = np.random.rand(3, 4)print(a)# %% 整数b = np.random.randint(4, 7, size=(8, 8))print(b)# %% 正态分布一c = np.random.normal(5, 3, (3, 4))print(c)# %% 正态分布二d = np.random.randn(3, 4)print(d)</code></pre></li></ol><hr><h3 id="5-2-排序函数"><a href="#5-2-排序函数" class="headerlink" title="5.2 排序函数"></a>5.2 排序函数</h3><p>API: </p><ol><li><code>np.sort(arr, axis=-1, kind='quicksort', order=None)</code> 按轴对数组进行排序<ul><li>**arr: **要排序的数组</li><li><strong>axis:</strong> 轴索引, 默认-1</li><li><strong>kind:</strong> 排序类型(quicksort, mergesort, heapsort)</li><li><strong>order:</strong> 排序字段</li></ul></li><li><code>np.asort(arr, axis=-1, kind='quicksort', order=None)</code> 对数组按轴进行排序索引, 即对索引排序</li></ol><p>输出的是排好序的数在原数组中的位置</p><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 一维</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 二维</span>a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>b1 <span class="token operator">=</span> np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>a1<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 轴索引排序</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>d <span class="token operator">=</span> np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="5-3-聚合函数"><a href="#5-3-聚合函数" class="headerlink" title="5.3 聚合函数"></a>5.3 聚合函数</h3><h4 id="5-3-1-求和"><a href="#5-3-1-求和" class="headerlink" title="5.3.1 求和"></a>5.3.1 求和</h4><p>API:</p><ol><li><p><code>np.sum(arr, axis=None)</code></p></li><li><p><code>np.nansum(arr, axis=None)</code> 忽略NaN</p></li><li><p>使用数组对象的sum()方法:</p><p>``np.ndarray.sum(axis=None)`</p></li></ol><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 求和</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>nansum<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="5-3-2-求最大值"><a href="#5-3-2-求最大值" class="headerlink" title="5.3.2 求最大值"></a>5.3.2 求最大值</h4><p>API:</p><ol><li><p><code>np.amax(arr, axis=None)</code></p></li><li><p><code>np.namax(arr, axis=None)</code> 忽略NaN</p></li><li><p>使用数组对象的max()方法:</p><p><code>np.ndarray.max(axis=None)</code></p></li></ol><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 求最大值</span>a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>amax<span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>amax<span class="token punctuation">(</span>a1<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>max<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>nanmax<span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="5-3-3-求最小值"><a href="#5-3-3-求最小值" class="headerlink" title="5.3.3 求最小值"></a>5.3.3 求最小值</h4><p>API:</p><ol><li><p><code>np.amin(arr, axis=None)</code></p></li><li><p><code>np.namin(arr, axis=None)</code></p></li><li><p>使用数组对象的min()方法:</p><p><code>np.ndarray.min(axis=None)</code></p></li></ol><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 求最小值</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>amin<span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>amin<span class="token punctuation">(</span>a2<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">.</span>min<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>nanmin<span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="5-3-4-求平均值"><a href="#5-3-4-求平均值" class="headerlink" title="5.3.4 求平均值"></a>5.3.4 求平均值</h4><p>API:</p><ol><li><p><code>np.mean(arr, axis=None)</code></p></li><li><p><code>np.nmean(arr, axis=None)</code> 忽略NaN</p></li><li><p>使用数组对象的mean()方法:</p><p><code>np.ndarray.mean(axis=None)</code></p></li><li><p><code>np.average(a, axis=None, weights=None)</code></p><ul><li><strong>weights:</strong> 权重</li></ul></li></ol><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 求平均值</span>a3 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>a3<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>nanmean<span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 求加权平均值</span>a4 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>a4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>average<span class="token punctuation">(</span>a4<span class="token punctuation">,</span> weights<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                              <span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 精度不够</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="6-数组的保存与读取"><a href="#6-数组的保存与读取" class="headerlink" title="6. 数组的保存与读取"></a>6. 数组的保存与读取</h2><h3 id="6-1-数组的保存"><a href="#6-1-数组的保存" class="headerlink" title="6.1 数组的保存"></a>6.1 数组的保存</h3><p>API:</p><ol><li><code>np.save(file, arr, allow_pickle=True, fix_imports=True)</code> 可以将一个数组保存至”.npy”的二进制文件中<ul><li><strong>file:</strong> 文件路径</li><li><strong>arr:</strong> 数组</li><li><strong>allow_pickle:</strong> 是否允许用pickle保存数组对象</li><li><strong>fix_imports:</strong> 是否允许在Python2中读取Python3的数据</li></ul></li><li><code>np.savez(file)</code> 可以将多个数组保存至”.npz”的<strong>未压缩</strong>二进制文件中<ul><li><strong>多个数组相当于保存在字典中, 要给每个数组指定键</strong></li></ul></li><li><code>np.savez_compressed(file)</code> 可以将多个数组保存至”.npz”的<strong>压缩</strong>二进制文件中</li></ol><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 一个数组</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'./array_save01'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 多个数组</span>a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>savez<span class="token punctuation">(</span><span class="token string">'./array_savez01'</span><span class="token punctuation">,</span> arr_a1<span class="token operator">=</span>a1<span class="token punctuation">,</span> arr_b<span class="token operator">=</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 多个数组压缩</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>savez_compressed<span class="token punctuation">(</span><span class="token string">'./array_savez02'</span><span class="token punctuation">,</span> arr_a1<span class="token operator">=</span>a2<span class="token punctuation">,</span> arr_b<span class="token operator">=</span>b1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="6-2-数组的读取"><a href="#6-2-数组的读取" class="headerlink" title="6.2 数组的读取"></a>6.2 数组的读取</h3><p>API:</p><ul><li><code>np.load(file, mmap_mode, allow_pickle, fix_imports)</code> 读取 .npy 和 .npz 文件中的数组<ul><li><strong>mmap_mode:</strong> 表示内存的映射模式, 即在读取较大的np数组时的模式, 默认None</li></ul></li></ul><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %%</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'array_save01.npy'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %%</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'array_savez01.npz'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 返回一个字典</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token string">'arr_a1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token string">'arr_b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% </span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'array_savez02.npz'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token string">'arr_a1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token string">'arr_b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Numpy使用手册&quot;&gt;&lt;a href=&quot;#Numpy使用手册&quot; class=&quot;headerlink&quot; title=&quot;Numpy使用手册&quot;&gt;&lt;/a&gt;Numpy使用手册&lt;/h1&gt;&lt;h2 id=&quot;1-一维数组&quot;&gt;&lt;a href=&quot;#1-一维数组&quot; class=&quot;head</summary>
      
    
    
    
    <category term="语言学习" scheme="https://roranrui.cn/categories/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Programming" scheme="https://roranrui.cn/tags/Programming/"/>
    
    <category term="Python" scheme="https://roranrui.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>vi/vim的使用</title>
    <link href="https://roranrui.cn/2022/04/22/vi-vim-de-shi-yong/"/>
    <id>https://roranrui.cn/2022/04/22/vi-vim-de-shi-yong/</id>
    <published>2022-04-22T15:28:42.000Z</published>
    <updated>2022-04-26T12:51:54.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编辑器之神——vim编辑器"><a href="#编辑器之神——vim编辑器" class="headerlink" title="编辑器之神——vim编辑器"></a>编辑器之神——vim编辑器</h1><h1 id="一、vi介绍"><a href="#一、vi介绍" class="headerlink" title="一、vi介绍"></a>一、vi介绍</h1><blockquote><p>  Vi编辑器是所有Unix及Linux系统下标准的编辑器，类似于windows系统下的notepad（记事本）编辑器，由于在Unix及Linux系统的任何版本，Vi编辑器是完全相同的，因此可以在其他任何介绍vi的地方都能进一步了解它，Vi也是Linux中最基本的文本编辑器，学会它后，我们将在Linux的世界里畅行无阻，<strong>尤其是在终端中</strong>。</p></blockquote><blockquote><p>  关于vim：</p><p>  vi和vim都是Linux中的编辑器，不同的是，<strong>vim比较高级</strong>，可以视为vi的升级版本。vi使用于文本编辑，但是vim更适用于coding（写代码的）。</p></blockquote><p><strong>Vim重点是光标的移动，模式切换，删除，查找，替换，复制，粘贴，撤销命令的使用</strong>。</p><h1 id="二、vim三种模式（重点）"><a href="#二、vim三种模式（重点）" class="headerlink" title="二、vim三种模式（重点）"></a>二、vim三种模式（重点）</h1><p>Vim中存在三种模式（大众的认知）：<strong>命令模式、编辑模式（输入模式）、末行模式（尾行模式）</strong>。</p><p>命令模式：在该模式下是不能对文件直接编辑，可以输入快捷键进行一些操作（删除行，复制行，移动光标，粘贴等等）【打开文件之后默认进入的模式】；</p><p>编辑模式：在该模式下可以对文件的内容进行编辑；</p><p>末行模式：可以在末行输入命令来对文件进行操作（搜索、替换、保存、退出、撤销、高亮等等）；</p><p>Vim的打开文件的方式（4种，要求掌握的就前三种）：</p><p>#vim 文件路径                     作用：打开指定的文件</p><p>#vim +数字  文件的路径          作用：打开指定的文件，并且将光标移动到指定行</p><p>#vim +/关键词  文件的路径       作用：打开指定的文件，并且高亮显示关键词</p><p>#vim 文件路径1 文件路径2 文件路径3  作用：同时打开多个文件</p><p><strong>重点：先复制出一个/etc/passwd文件，复制当前家目录下（千万不要在etc下直接修改！！！）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/klip_image2.jpg" alt="img"></p><p>后续一切vim命令都是基于/root/passwd文件进行操作。</p><p><strong>退出方式：输入:q按下回车即可</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/klip_image3.png" alt="img"></p><h1 id="三、命令模式"><a href="#三、命令模式" class="headerlink" title="三、命令模式"></a>三、命令模式</h1><p>注意：该模式是打开文件的第一个看到的模式（打开文件即可进入）</p><h2 id="1、光标移动"><a href="#1、光标移动" class="headerlink" title="1、光标移动"></a>1、光标移动</h2><p>①光标移动到行首</p><p>按键：shift + 6 或 ^（T字母上面的6，不要按小键盘的6）</p><p>②光标移动到行尾</p><p>按键：shift + 4 或 $（R字母的左上角的4，不是小键盘的4）</p><p>③光标移动到首行</p><p>按键：gg</p><p>④光标移动到末行</p><p>按键：G</p><p>⑤翻屏</p><p>向上翻屏：按键ctrl + b  （before）    或       PgUp</p><p>向下翻屏：按键ctrl + f   （after）      或       PgDn</p><h2 id="2、复制操作"><a href="#2、复制操作" class="headerlink" title="2、复制操作"></a>2、复制操作</h2><p>①复制光标所在行</p><p>按键：yy</p><p>粘贴：在想要粘贴的地方按下p键</p><p><strong>②以光标所在行为准（包含当前行），向下复制指定的行数</strong></p><p>按键：数字yy</p><p>③<strong>可视化</strong>复制</p><p>按键：ctrl + v（可视块）或V（可视行）或v（可视），然后按下↑↓←→方向键来选中需要复制的区块，按下y键进行复制，最后按下p键粘贴</p><h2 id="3、剪切-x2F-删除"><a href="#3、剪切-x2F-删除" class="headerlink" title="3、剪切/删除"></a>3、剪切/删除</h2><p><strong>①剪切/删除光标所在行</strong></p><p>按键：dd             （删除之后下一行上移）</p><p>注意：dd严格意义上说是剪切命令，但是如果剪切了不粘贴就是删除的效果。</p><p><strong>②剪切/删除光标所在行为准（包含当前行），向下删除/剪切指定的行</strong></p><p>按键：数字dd        （删除之后下一行上移）</p><p>③剪切/删除光标所在的当前行之后的内容，但是删除之后下一行不上移</p><p>按键：D              （删除之后当前行会变成空白行）</p><p>④可视化删除</p><p>按键：ctrl + v（可视块）或V（可视行）或v（可视），上下左右移动，按下D表示删除选中行，d表示删选中块</p><h2 id="4、撤销-x2F-恢复"><a href="#4、撤销-x2F-恢复" class="headerlink" title="4、撤销/恢复"></a>4、撤销/恢复</h2><p>撤销：输入:u （不属于命令模式） 或者  u            （undo）</p><p>恢复：ctrl + r         恢复（取消）之前的撤销操作</p><h2 id="5、扩展1：光标的快速移动"><a href="#5、扩展1：光标的快速移动" class="headerlink" title="5、扩展1：光标的快速移动"></a>5、扩展1：光标的快速移动</h2><p><strong>①快速将光标移动到指定的行</strong></p><p>按键：数字G  </p><p><strong>②以当前光标为准向上/向下移动n行</strong></p><p>按键：数字↑，数字↓</p><p>③以当前光标为准向左/向右移动n字符</p><p>按键：数字←，数字→</p><p>④末行模式下的快速移动方式：移动到指定的行</p><p>按键：输入英文“:”，其后输入行数数字，按下回车</p><h1 id="四、模式间的切换（重点）"><a href="#四、模式间的切换（重点）" class="headerlink" title="四、模式间的切换（重点）"></a>四、模式间的切换（重点）</h1><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image005.jpg" alt="img"></p><h1 id="五、末行模式"><a href="#五、末行模式" class="headerlink" title="五、末行模式"></a>五、末行模式</h1><p>进入方式：由命令模式进入，按下“:”或者“/（表示查找）”即可进入</p><p>退出方式：</p><p>​         a. 按下esc</p><p>​         b. 连按2次esc键</p><p>​         c. 删除末行全部输入字符</p><p>①保存操作（write）</p><p>输入：“:w”              保存文件</p><p>输入：“:w 路径”        另存为</p><p>②退出（quit）</p><p>输入：“:q”              退出文件</p><p>③保存并退出</p><p>输入：“:wq”             保存并且退出</p><p>④强制 （!）</p><p>输入：“:q!”              表示强制退出，刚才做的修改操作不做保存</p><p>⑤调用外部命令（了解）</p><p>输入：“:!外部命令”</p><p>例如：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image006.png" alt="img"></p><p>当外部命令执行结束之后按下任意键回到vim编辑器打开的内容</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/klip_image7.png" alt="img"></p><p>⑥搜索/查找</p><p>输入：“/关键词”</p><p>例如：我想在passwd文件中搜索“sbin”关键词</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/klip_image8.png" alt="img"></p><p><strong>在搜索结果中切换上/下一个结果：N/n</strong>      <strong>（next）</strong></p><p>如果需要取消高亮，则需要输入：“:nohl”【no highlight】</p><p>⑦替换</p><p>:s/搜索的关键词/新的内容              替换光标所在行的第一处符合条件的内容</p><p>:s/搜索的关键词/新的内容/g            替换光标所在行的全部符合条件的内容</p><p>:%s/搜索的关键词/新的内容             替换整个文档中每行第一个符合条件的内容</p><p>:%s/搜索的关键词/新的内容/g           替换整个文档的符合条件的内容</p><p>%表示整个文件</p><p>g表示全局（global）</p><p>⑧显示行号（临时）</p><p>输入：“***:set nu***”[number]</p><p>如果想取消显示，则输入：“:set nonu”</p><p>⑨扩展2：使用vim同时打开多个文件，在末行模式下进行切换文件</p><p><strong>查看当前已经打开的文件名称：“:files”</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image009.png" alt="img"></p><p>在%a的位置有2种显示可能</p><p>%a：a=active，表示当前正在打开的文件；</p><p>#：表示上一个打开的文件</p><p>切换文件的方式：</p><p><strong>a.</strong> <strong>如果需要指定切换文件的名称，则可以输入：“:open</strong> <strong>已经打开的文件名”</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/klip_image10.png" alt="img"></p><p><strong>b.</strong> <strong>可以通过其他命令来切换上一个文件/下一个文件</strong></p><p>输入：“:bn”切换到下一个文件（back next）</p><p>输入：“:bp”切换到上一个文件（back prev）</p><h1 id="六、编辑模式"><a href="#六、编辑模式" class="headerlink" title="六、编辑模式"></a>六、编辑模式</h1><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/klip_image11.png" alt="img"></p><p>重点看前2个进入方式：i（insert）、a（after）。</p><p>退出方式：按下esc键</p><h1 id="七、实用功能"><a href="#七、实用功能" class="headerlink" title="七、实用功能"></a>七、实用功能</h1><h2 id="1、代码着色"><a href="#1、代码着色" class="headerlink" title="1、代码着色"></a>1、代码着色</h2><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/klip_image12.png" alt="img"></p><p>案例：首先创建简单的c语言程序</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/klip_image13.png" alt="img"></p><p>如何控制着色显示与否？</p><p>显示：“:syntax on”            syn</p><p>tax：语法</p><p>关闭显示：“:syntax off”</p><h2 id="2、vim中计算器的使用"><a href="#2、vim中计算器的使用" class="headerlink" title="2、vim中计算器的使用"></a>2、vim中计算器的使用</h2><p>当在编辑文件的时候突然需要使用计算器去计算一些公式，则此时需要用计算器，但是需要退出，vim自身集成了一个简易的计算器。</p><p>a. 进入编辑模式</p><p>b. 按下按键“ctrl + R”，然后输入“=”，此时光标会变到最后一行</p><p>c. 输入需要计算的内容，按下回车</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image014.png" alt="img"></p><h1 id="八、扩展（3）"><a href="#八、扩展（3）" class="headerlink" title="八、扩展（3）"></a>八、扩展（3）</h1><h2 id="1、vim的配置（重点）"><a href="#1、vim的配置（重点）" class="headerlink" title="1、vim的配置（重点）"></a>1、vim的配置（重点）</h2><p>Vim是一款编辑器，编辑器也是有配置文件的。</p><p>Vim配置有三种情况：</p><p>​    a. 在文件打开的时候在末行模式下输入的配置（临时的）</p><p>​    b. 个人配置文件（~/.vimrc，如果没有可以自行新建）</p><p>​    c. 全局配置文件（vim自带，/etc/vimrc）</p><p>①新建好个人配置文件之后进入编辑</p><p>②在配置文件中进行配置</p><p>比如显示行号：set nu</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/klip_image15.png" alt="img"></p><p>配置好之后vim打开文件就会永远显示行号</p><p><strong>问题：如果某个配置项，在个人配置文件与全局配置文件产生冲突的时候应该以谁为准？</strong></p><p>测试步骤：在两个配置文件中针对同一个配置项设置不同的值</p><p>①先在全局的配置中设置不显示行号，在个人的配置文件中设置显示行号，观察结果</p><p>最后显示行号：说明以个人为准</p><p>②先在全局中配置显示行号，在个人中设置不显示行号，观察结果</p><p>最后的显示是不显示行号，说明以个人为准</p><p>结论：<strong>如果针对同一个配置项，个人配置文件中存在，则以个人配置文件为准，如果个人配置文件中不存在这一项，则以全局配置文件为准</strong>。</p><h2 id="2、异常退出"><a href="#2、异常退出" class="headerlink" title="2、异常退出"></a>2、异常退出</h2><p>什么是异常退出：在编辑文件之后并没有正常的去wq（保存退出），而是遇到突然关闭终端或者断电的情况，则会显示下面的效果，这个情况称之为异常退出：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image017.jpg" alt="img"></p><p>解决办法：将交换文件（在编程过程中产生的临时文件）删除掉即可</p><p>#rm -f .passwd.swp</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/klip_image18.png" alt="img"></p><h2 id="3、别名机制（实用）"><a href="#3、别名机制（实用）" class="headerlink" title="3、别名机制（实用）"></a>3、别名机制（实用）</h2><p>作用：相当于创建一些属于自己的自定义命令</p><p>例如：在windows下有cls命令，在Linux下可能因为没有这个命令而不习惯清屏。现在可以通过别名机制来解决这个问题，可以自己创造出cls命令</p><p>别名机制依靠一个别名映射文件：~/.bashrc</p><p>#vim ~/.bashrc</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image019.png" alt="img"></p><p><strong>注意：如果想新创造的命令生效，必须要重新登录当前用户。</strong></p><h2 id="4、退出方式"><a href="#4、退出方式" class="headerlink" title="4、退出方式"></a>4、退出方式</h2><p>回顾：之前vim中退出编辑的文件可以使用“:q”或者“:wq”。</p><p><strong>除了上面的这个语法之外，vim还支持另外一个保存退出方法“:x”。</strong></p><p>说明：</p><p>​    ①“:x”在文件没有修改的情况下，表示直接退出，在文件修改的情况下表示保存并退出；</p><p>​    ②如果文件没有被修改，但是使用wq进行退出的话，则文件的修改时间会被更新；但是如果文件没有被修改，使用x进行退出的话，则文件修改时间不会被更新的；主要是会混淆用户对文件的修改时间的认定。</p><p>因此建议以后使用“:x”来进行对文件的保存退出。</p><p><strong>但是：不要使用X，不要使用X，不要使用X，X表示对文件进行加密操作。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;编辑器之神——vim编辑器&quot;&gt;&lt;a href=&quot;#编辑器之神——vim编辑器&quot; class=&quot;headerlink&quot; title=&quot;编辑器之神——vim编辑器&quot;&gt;&lt;/a&gt;编辑器之神——vim编辑器&lt;/h1&gt;&lt;h1 id=&quot;一、vi介绍&quot;&gt;&lt;a href=&quot;#一、v</summary>
      
    
    
    
    <category term="Vim" scheme="https://roranrui.cn/categories/Vim/"/>
    
    
    <category term="Linux" scheme="https://roranrui.cn/tags/Linux/"/>
    
    <category term="操作系统" scheme="https://roranrui.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Vim" scheme="https://roranrui.cn/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>常用 Linux 命令的基本使用</title>
    <link href="https://roranrui.cn/2022/04/22/chang-yong-linux-ming-ling-de-ji-ben-shi-yong/"/>
    <id>https://roranrui.cn/2022/04/22/chang-yong-linux-ming-ling-de-ji-ben-shi-yong/</id>
    <published>2022-04-22T15:08:33.000Z</published>
    <updated>2022-04-26T07:40:31.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用-Linux-命令的基本使用"><a href="#常用-Linux-命令的基本使用" class="headerlink" title="常用 Linux 命令的基本使用"></a>常用 Linux 命令的基本使用</h1><h2 id="01-学习-Linux-终端命令的原因"><a href="#01-学习-Linux-终端命令的原因" class="headerlink" title="01. 学习 Linux 终端命令的原因"></a>01. 学习 Linux 终端命令的原因</h2><ul><li>Linux 刚面世时并没有图形界面，所有的操作全靠命令完成，如 <strong>磁盘操作</strong>、<strong>文件存取</strong>、<strong>目录操作</strong>、<strong>进程管理</strong>、<strong>文件权限</strong> 设定等</li><li>在职场中，大量的 <strong>服务器维护工作</strong> 都是在 <strong>远程</strong> 通过 <strong>SSH 客户端</strong> 来完成的，并没有图形界面，所有的维护工作都需要通过命令来完成</li><li>在职场中，作为后端程序员，必须要或多或少的掌握一些 Linux 常用的终端命令</li><li>Linux 发行版本的命令大概有 200 多个，但是常用的命令只有 10 多个而已</li></ul><blockquote><p>学习终端命令的技巧：</p><ul><li>不需要死记硬背，对于常用命令，用的多了，自然就记住了</li><li>不要尝试一次学会所有的命令，有些命令是非常不常用的，临时遇到，临时百度就可以</li></ul></blockquote><h2 id="02-常用-Linux-命令的基本使用"><a href="#02-常用-Linux-命令的基本使用" class="headerlink" title="02. 常用 Linux 命令的基本使用"></a>02. 常用 Linux 命令的基本使用</h2><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ls</td><td>list</td><td>查看当前文件夹下的内容</td></tr><tr><td>02</td><td>pwd</td><td>print work directory</td><td>查看当前所在文件夹</td></tr><tr><td>03</td><td>cd [目录名]</td><td>change directory</td><td>切换文件夹</td></tr><tr><td>04</td><td>touch [文件名]</td><td>touch</td><td>如果文件不存在，新建文件</td></tr><tr><td>05</td><td>mkdir [目录名]</td><td>make directory</td><td>创建目录</td></tr><tr><td>06</td><td>rm [文件名]</td><td>remove</td><td>删除指定的文件名</td></tr><tr><td>07</td><td>clear</td><td>clear</td><td>清屏</td></tr></tbody></table><blockquote><p>小技巧</p><ul><li><code>ctrl + shift + = </code> <strong>放大</strong>终端窗口的字体显示</li><li><code>ctrl + - </code> <strong>缩小</strong>终端窗口的字体显示</li></ul></blockquote><h2 id="03-自动补全"><a href="#03-自动补全" class="headerlink" title="03. 自动补全"></a>03. 自动补全</h2><ul><li>在敲出 <code>文件</code>／<code>目录</code>／<code>命令</code> 的前几个字母之后，按下 <code>tab</code> 键<ul><li>如果输入的没有歧义，系统会自动补全</li><li>如果还存在其他 <code>文件</code>／<code>目录</code>／<code>命令</code>，再按一下 <code>tab</code> 键，系统会提示可能存在的命令</li></ul></li></ul><blockquote><p>小技巧</p><ul><li>按 <code>上</code>／<code>下</code> 光标键可以在曾经使用过的命令之间来回切换</li><li>如果想要退出选择，并且不想执行当前选中的命令，可以按 <code>ctrl + c</code></li></ul></blockquote><hr><h1 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>查找文件<ul><li><code>find</code></li></ul></li><li>软链接<ul><li><code>ln</code></li></ul></li><li>打包和压缩<ul><li><code>tar</code></li></ul></li><li>软件安装<ul><li><code>apt-get</code></li></ul></li></ul><h2 id="01-查找文件"><a href="#01-查找文件" class="headerlink" title="01. 查找文件"></a>01. 查找文件</h2><ul><li><code>find</code> 命令功能非常强大，通常用来在 <strong>特定的目录下</strong> <strong>搜索</strong> 符合条件的文件</li></ul><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>find [路径] -name “*.py”</td><td>查找指定路径下扩展名是 <code>.py</code> 的文件，包括子目录</td></tr></tbody></table><ul><li>如果省略路径，表示在当前文件夹下查找</li><li>之前学习的通配符，在使用 <code>find</code> 命令时同时可用</li><li>有关 <code>find</code> 的高级使用，在就业班会讲</li></ul><h3 id="演练目标"><a href="#演练目标" class="headerlink" title="演练目标"></a>演练目标</h3><ul><li><ol><li>搜索桌面目录下，文件名包含 <code>1</code> 的文件</li></ol></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> -name <span class="token string">"*1*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="2"><li>搜索桌面目录下，所有以 <code>.txt</code> 为扩展名的文件</li></ol></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> -name <span class="token string">"*.txt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="3"><li>搜索桌面目录下，以数字 <code>1</code> 开头的文件</li></ol></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> -name <span class="token string">"1*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="02-软链接"><a href="#02-软链接" class="headerlink" title="02. 软链接"></a>02. 软链接</h2><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ln -s 被链接的源文件 链接文件</td><td>建立文件的软链接，用通俗的方式讲<strong>类似于</strong> Windows 下的<strong>快捷方式</strong></td></tr></tbody></table><ul><li><p>注意：</p></li><li><ol><li>没有 <code>-s</code> 选项建立的是一个 <strong>硬链接文件</strong></li></ol><ul><li>两个文件占用相同大小的硬盘空间，<strong>工作中几乎不会建立文件的硬链接</strong></li></ul></li><li><ol start="2"><li><strong>源文件要使用绝对路径</strong>，不能使用相对路径，这样可以方便移动链接文件后，仍然能够正常使用</li></ol></li></ul><h3 id="演练目标-1"><a href="#演练目标-1" class="headerlink" title="演练目标"></a>演练目标</h3><ul><li><ol><li>将桌面目录下的 <code>01.py</code> <strong>移动</strong>到 <code>demo/b/c</code> 目录下</li></ol></li><li><ol start="2"><li>在桌面目录下新建 <code>01.py</code> 的 <strong>软链接</strong> <code>FirstPython</code></li></ol><ul><li>分别使用 <strong>相对路径</strong> 和 <strong>绝对路径</strong> 建立 <code>FirstPython</code> 的软链接</li></ul></li><li><ol start="3"><li>将 <code>FirstPython</code> <strong>移动</strong>到 <code>demo</code> 目录下，对比使用 <strong>相对路径</strong> 和 <strong>绝对路径</strong> 的区别</li></ol></li></ul><h3 id="硬链接简介（知道）"><a href="#硬链接简介（知道）" class="headerlink" title="硬链接简介（知道）"></a>硬链接简介（知道）</h3><ul><li>在使用 <code>ln</code> 创建链接时，如果没有 <code>-s</code> 选项，会创建一个 <strong>硬链接</strong>，而不是软链接</li></ul><h4 id="硬链接演练"><a href="#硬链接演练" class="headerlink" title="硬链接演练"></a>硬链接演练</h4><ul><li><ol><li>在 <code>~/Desktop/demo</code> 目录下建立 <code>~/Desktop/demo/b/c/01.py</code> 的硬链接 <code>01_hard</code></li></ol></li><li><ol start="2"><li>使用 <code>ls -l</code> 查看文件的<strong>硬链接数</strong>（硬链接——有多少种方式可以访问文件或者目录）</li></ol></li><li><ol start="3"><li>删除 <code>~/Desktop/demo/b/c/01.py</code>，并且使用 <code>tree</code> 来确认 <code>demo</code> 目录下的三个链接文件</li></ol></li></ul><h4 id="文件软硬链接的示意图"><a href="#文件软硬链接的示意图" class="headerlink" title="文件软硬链接的示意图"></a>文件软硬链接的示意图</h4><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/001_%E6%96%87%E4%BB%B6%E8%BD%AF%E7%A1%AC%E9%93%BE%E6%8E%A5%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="001_文件软硬链接示意图"></p><blockquote><p>在 Linux 中，<strong>文件名</strong> 和 <strong>文件的数据</strong> 是分开存储的</p></blockquote><ul><li>提示：<ul><li>在 Linux 中，只有文件的 <code>硬链接数 == 0</code> 才会被删除</li><li>使用 <code>ls -l</code> 可以查看一个文件的硬链接的数量</li><li>在日常工作中，几乎不会建立文件的硬链接，知道即可</li></ul></li></ul><h2 id="03-打包压缩"><a href="#03-打包压缩" class="headerlink" title="03. 打包压缩"></a>03. 打包压缩</h2><ul><li><strong>打包压缩</strong> 是日常工作中备份文件的一种方式</li><li>在不同操作系统中，常用的打包压缩方式是不同的<ul><li><code>Windows</code> 常用 <code>rar</code></li><li><code>Mac</code> 常用 <code>zip</code></li><li><code>Linux</code> 常用 <code>tar.gz</code></li></ul></li></ul><h3 id="3-1-打包-／-解包"><a href="#3-1-打包-／-解包" class="headerlink" title="3.1 打包 ／ 解包"></a>3.1 打包 ／ 解包</h3><ul><li><code>tar</code> 是 Linux 中最常用的 <strong>备份</strong>工具，此命令可以 <strong>把一系列文件</strong> 打包到 <strong>一个大文件中</strong>，也可以把一个 <strong>打包的大文件恢复成一系列文件</strong></li><li><code>tar</code> 的命令格式如下：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 打包文件</span><span class="token function">tar</span> -cvf 打包文件.tar 被打包的文件／路径<span class="token punctuation">..</span>.<span class="token comment" spellcheck="true"># 解包文件</span><span class="token function">tar</span> -xvf 打包文件.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>tar</code> 选项说明</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>c</td><td>生成档案文件，创建打包文件</td></tr><tr><td>x</td><td>解开档案文件</td></tr><tr><td>v</td><td>列出归档解档的详细过程，显示进度</td></tr><tr><td>f</td><td>指定档案文件名称，f 后面一定是 .tar 文件，所以必须放选项最后</td></tr></tbody></table><blockquote><p>注意：<code>f</code> 选项必须放在最后，其他选项顺序可以随意</p></blockquote><h4 id="打包解包演练"><a href="#打包解包演练" class="headerlink" title="打包解包演练"></a>打包解包演练</h4><ol><li>删除桌面下的所有内容</li><li>在桌面下新建三个空白文件 <code>01.py</code>、<code>02.py</code>、<code>03.py</code></li><li>将这三个文件打一个 <code>py.tar</code> 的包</li><li>新建 <code>tar</code> 目录，并且将 <code>py.tar</code> 移动到 <code>tar</code> 目录下</li><li>解包 <code>py.tar</code></li></ol><h3 id="3-2-压缩／解压缩"><a href="#3-2-压缩／解压缩" class="headerlink" title="3.2 压缩／解压缩"></a>3.2 压缩／解压缩</h3><h4 id="1-gzip"><a href="#1-gzip" class="headerlink" title="1) gzip"></a>1) <code>gzip</code></h4><ul><li><code>tar</code> 与 <code>gzip</code> 命令结合可以使用实现文件 <strong>打包和压缩</strong><ul><li><code>tar</code> 只负责打包文件，但不压缩</li><li>用 <code>gzip</code> 压缩 <code>tar</code> 打包后的文件，其扩展名一般用 <code>xxx.tar.gz</code></li></ul></li></ul><blockquote><p>在 <code>Linux</code> 中，最常见的压缩文件格式就是 <code>xxx.tar.gz</code></p></blockquote><ul><li><p>在 <code>tar</code> 命令中有一个选项 <strong>-z</strong> 可以调用 <code>gzip</code>，从而可以方便的实现压缩和解压缩的功能</p></li><li><p>命令格式如下：</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 压缩文件</span><span class="token function">tar</span> -zcvf 打包文件.tar.gz 被压缩的文件／路径<span class="token punctuation">..</span>.<span class="token comment" spellcheck="true"># 解压缩文件</span><span class="token function">tar</span> -zxvf 打包文件.tar.gz<span class="token comment" spellcheck="true"># 解压缩到指定路径</span><span class="token function">tar</span> -zxvf 打包文件.tar.gz -C 目标路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-C</td><td>解压缩到指定目录，注意：要解压缩的目录必须存在</td></tr></tbody></table><h4 id="2-bzip2-two"><a href="#2-bzip2-two" class="headerlink" title="2) bzip2(two)"></a>2) <code>bzip2(two)</code></h4><ul><li><p><code>tar</code> 与 <code>bzip2</code> 命令结合可以使用实现文件 <strong>打包和压缩</strong>（用法和 <code>gzip</code> 一样）</p><ul><li><code>tar</code> 只负责打包文件，但不压缩，</li><li>用 <code>bzip2</code> 压缩 <code>tar</code> 打包后的文件，其扩展名一般用 <code>xxx.tar.bz2</code></li></ul></li><li><p>在 <code>tar</code> 命令中有一个选项 <strong>-j</strong> 可以调用 <code>bzip2</code>，从而可以方便的实现压缩和解压缩的功能</p></li><li><p>命令格式如下：</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 压缩文件</span><span class="token function">tar</span> -jcvf 打包文件.tar.bz2 被压缩的文件／路径<span class="token punctuation">..</span>.<span class="token comment" spellcheck="true"># 解压缩文件</span><span class="token function">tar</span> -jxvf 打包文件.tar.bz2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="04-软件安装"><a href="#04-软件安装" class="headerlink" title="04. 软件安装"></a>04. 软件安装</h2><h2 id="4-1-通过-apt-安装／卸载软件"><a href="#4-1-通过-apt-安装／卸载软件" class="headerlink" title="4.1 通过 apt 安装／卸载软件"></a>4.1 通过 apt 安装／卸载软件</h2><ul><li>apt 是 <code>Advanced Packaging Tool</code>，是 Linux 下的一款安装包管理工具</li><li>可以在终端中方便的 <strong>安装</strong>／<strong>卸载</strong>／<strong>更新软件包</strong></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 1. 安装软件</span>$ <span class="token function">sudo</span> apt <span class="token function">install</span> 软件包<span class="token comment" spellcheck="true"># 2. 卸载软件</span>$ <span class="token function">sudo</span> apt remove 软件名<span class="token comment" spellcheck="true"># 3. 更新已安装的包</span>$ <span class="token function">sudo</span> apt upgrade <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装演练"><a href="#安装演练" class="headerlink" title="安装演练"></a>安装演练</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 一个小火车提示</span>$ <span class="token function">sudo</span> apt <span class="token function">install</span> sl<span class="token comment" spellcheck="true"># 一个比较漂亮的查看当前进程排名的软件</span>$ <span class="token function">sudo</span> apt <span class="token function">install</span> <span class="token function">htop</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-配置软件源"><a href="#4-2-配置软件源" class="headerlink" title="4.2 配置软件源"></a>4.2 配置软件源</h2><ul><li>如果希望在 <code>ubuntu</code> 中安装软件，<strong>更加快速</strong>，可以通过设置<strong>镜像源</strong>，选择一个访问网速更快的服务器，来提供软件下载／安装服务</li><li>提示：更换服务器之后，需要一个相对比较长时间的更新过程，需要耐心等待。更新完成后，再安装软件都会从新设置的服务器下载软件了</li></ul><blockquote><p>所谓镜像源，就是<strong>所有服务器的内容是相同的（镜像）</strong>，但是根据所在位置不同，国内服务器通常速度会更快一些！</p></blockquote><p><img src="/../../../Data/Notes/Linux/Linux_Basic/media/14934226357576/003_%25E9%2595%259C%25E5%2583%258F%25E6%259C%258D%25E5%258A%25A1%25E5%2599%25A8%25E7%25A4%25BA%25E6%2584%258F%25E5%259B%25BE.png" alt="003_镜像服务器示意图"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/001_ubuntu%E8%AE%BE%E7%BD%AE%E8%BD%AF%E4%BB%B6%E6%BA%90.png" alt="001_ubuntu设置软件源"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常用-Linux-命令的基本使用&quot;&gt;&lt;a href=&quot;#常用-Linux-命令的基本使用&quot; class=&quot;headerlink&quot; title=&quot;常用 Linux 命令的基本使用&quot;&gt;&lt;/a&gt;常用 Linux 命令的基本使用&lt;/h1&gt;&lt;h2 id=&quot;01-学习-Lin</summary>
      
    
    
    
    <category term="操作系统学习" scheme="https://roranrui.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Linux" scheme="https://roranrui.cn/tags/Linux/"/>
    
    <category term="操作系统" scheme="https://roranrui.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>排序算法总结</title>
    <link href="https://roranrui.cn/2022/04/22/pai-xu-suan-fa-zong-jie/"/>
    <id>https://roranrui.cn/2022/04/22/pai-xu-suan-fa-zong-jie/</id>
    <published>2022-04-22T15:05:50.000Z</published>
    <updated>2022-04-23T05:17:31.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序算法总结"><a href="#排序算法总结" class="headerlink" title="排序算法总结"></a>排序算法总结</h1><h2 id="一-冒泡排序"><a href="#一-冒泡排序" class="headerlink" title="一. 冒泡排序"></a>一. 冒泡排序</h2><p><strong>核心思想</strong>:</p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><p><strong>关键:</strong></p><p><code>排序轮数 = 元素个数 - 1</code></p><p><code>每轮比较次数 = 元素个数 - 当前排序轮数 - 1</code></p><p>代码实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="二-选择排序"><a href="#二-选择排序" class="headerlink" title="二. 选择排序"></a>二. 选择排序</h2><p><strong>核心思想:</strong></p><p>将整个数组遍历一遍，将最小的数和首个元素互换<br>然后将第二个到最后的数组遍历，其中最小的和第二个互换<br>以此类推。</p><p><strong>关键:</strong></p><p>确定要遍历寻找数组的位置: <code>arr_len - 1</code></p><p>每次都要从<code>i + 1(int i = 0)</code>位置开始找最小值</p><p>代码实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 第一层for循环是最小值的位置,只用遍历到数组长度前一个</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 最小值下标</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 第二层for循环用于遍历数组找出最小值所在的位置, 并将下标返回min</span>        <span class="token punctuation">{</span>            min <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">?</span> j <span class="token operator">:</span> min<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 交换初始认为的最小值和已知最小值</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="三-插入排序"><a href="#三-插入排序" class="headerlink" title="三. 插入排序"></a>三. 插入排序</h2><p><strong>核心思想:</strong></p><ol><li><p>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</p></li><li><p>从头到尾依次扫描未排序序列，将扫描到的每个元素与它后面一个元素相比较, 谁小谁往前移（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面）</p></li></ol><p><strong>关键:</strong></p><p>数组在<code>0~0</code>位置已经有序, 遍历数组时只需从<code>1</code>位置开始</p><p>代码实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0~0上有序, 要在0到i上有序</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="四-归并排序"><a href="#四-归并排序" class="headerlink" title="四. 归并排序"></a>四. 归并排序</h2><p><strong>核心思想:</strong></p><p>多次将若干个已经排序好的有序表合并成一个有序表。直接将两个表合并的归并成为二路归并。</p><p>其基本思想是，先递归划分子问题，然后合并结果。其实就是先两两合并，然后四四合并, 最终形成有序序列。</p><p><strong>关键:</strong></p><ul><li><p>首先<code>mergeSort</code>整段数组</p></li><li><p>然后进行递归</p><ul><li><p>首先<code>mergeSort</code>数组begin与end的左侧，让左侧有序</p></li><li><p>再<code>mergerSort</code>右侧</p></li><li><p>左侧和右侧都有序后，对左侧和右侧进行<code>merge</code>，一起排序</p></li><li><p>由于此次排序左右都有序，建立一个临时数组，对左右从头到尾进行扫描，谁小就进入数组，一遍扫描即可</p></li></ul></li></ul><p>代码实现: </p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> M<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 归并排序的子过程</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span> help <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>R <span class="token operator">-</span> L <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 辅助数组</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 辅助数组专用下标</span>    <span class="token keyword">int</span> p1 <span class="token operator">=</span> L<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 原数组左侧下标</span>    <span class="token keyword">int</span> p2 <span class="token operator">=</span> M <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 原数组中点后第一个位置下标</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> M <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">&lt;=</span> R<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 两个下标都不越界</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 拷贝最小值到辅助数组中, 并让下标前进</span>        help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span> <span class="token operator">?</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">:</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// p1 和 p2 总有一个会先临界, 一下两个情况只会发生一个</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> M<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// p1没有越界, 就把p1往后的数拷贝到help中去</span>    <span class="token punctuation">{</span>        help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p2 <span class="token operator">&lt;=</span> R<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// p2没有越界, 就把p2往后的数拷贝到help中去</span>    <span class="token punctuation">{</span>        help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> R <span class="token operator">-</span> L <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 把help中的数到回原数组</span>    <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>L <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> help<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 归并排序的主过程</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L <span class="token operator">==</span> R<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> L <span class="token operator">+</span> <span class="token punctuation">(</span>R <span class="token operator">-</span> L<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 中点</span>    <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> L<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 让左侧有序</span>    <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 让右侧有序</span>    <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> L<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 整体有序</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="五-计数排序"><a href="#五-计数排序" class="headerlink" title="五. 计数排序"></a>五. 计数排序</h2><p><strong>核心思想:</strong></p><ol><li>首先找到数组中的最大值，然后新建一个<code>count</code>数组此数组的长度是数组最大值+1，其实新建的这个数组中的下标值就是原数组的数据值.</li><li>遍历数组, 将原数组的数对应<code>count</code>数组的下标进行统计(<strong>统计词频</strong>)</li><li>将<code>count</code>数组中的数按顺序倒出</li></ol><p><strong>关键:</strong></p><p>倒出<code>count</code>数组中的数时, 原数组应接收的是<code>count</code>数组的下标</p><p>代码实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">countSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token function">getMax</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> clen <span class="token operator">=</span> max <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>clen<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr_len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 统计词频</span>    <span class="token punctuation">{</span>        count<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 遍历词频表, 得到有序数组</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> clen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 第一层是找到词频表的位置</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 第二层是打印该位置所有的数</span>        <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="六-快速排序"><a href="#六-快速排序" class="headerlink" title="六. 快速排序"></a>六. 快速排序</h2><p><strong>核心思想:</strong></p><ol><li><p>从数列中挑出一个元素, 作为参考数.</p></li><li><p>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为<strong>分区（partition）</strong>操作.</p></li><li><p>递归地把小于基准值元素的子数列和大于基准值元素的子数列排序.</p></li></ol><p><strong>关键:</strong></p><ol><li>先从数列中取出一个数作为基准数</li><li>分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边</li><li>再对左右区间重复第二步，(<strong>递归到死</strong>)</li></ol><p>代码实现:</p><h3 id="快排1-0"><a href="#快排1-0" class="headerlink" title="快排1.0"></a>快排1.0</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 在L...R上有序</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;</span> R<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> arr<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将数组最后一个数作为基准</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> L<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 左边指针位置</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> R<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 右边指针位置</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 左右两个指针没有相遇时</span>        <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 默认基准是最后一个数, 所以从左边开始比较</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> num <span class="token operator">&amp;&amp;</span> r <span class="token operator">></span> l<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 左侧指针指向数小于等于我指定的数, 并且右侧指针的位置大于左侧指针</span>            <span class="token punctuation">{</span>                l<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 左侧指针继续向后寻找我指定的值</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 当找到比 array[r]大的时，就把后面的值 array[l] 赋给它</span>            <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">>=</span> num <span class="token operator">&amp;&amp;</span> r <span class="token operator">></span> l<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 右侧指针指向数大于等于我指定的数, 并且右侧指针的位置大于左侧指针</span>            <span class="token punctuation">{</span>                r<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 右侧指针继续向前寻找大于我指定的值</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 当找到比 array[l] 小的时，就把后面的值 array[r] 赋给它</span>            <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 一轮交换后, 让我指定的数变成l指向位置的数</span>        arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 确定基准点</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> L<span class="token punctuation">,</span> l <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 让左侧递归</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 让右侧递归</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快排2-0"><a href="#快排2-0" class="headerlink" title="快排2.0"></a>快排2.0</h3><p><strong>问题:</strong></p><p>1.0版本每次只能排好一个数, 时间耗费多</p><p><strong>解决:</strong></p><p>2.0版本参考荷兰国旗问题, 将小于, 等于, 大于参考数的数分为三个区, 这样每次递归都能排好等于区的数, 相当于一次排好一批数, 比1.0版本稍快</p><p>代码实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> small <span class="token operator">=</span> L <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化小于区</span>    <span class="token keyword">int</span> large <span class="token operator">=</span> R<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化大于区</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> large<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 指针l到达大于区之前</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// arr[R]作为指定数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 当前数大于指定数, 就和大于区前一个交换, 大于区左扩, p不动</span>        <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token operator">--</span>large<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 当前数小于指定数, 就和小于区后一个交换, 小于区右扩, p++</span>        <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token operator">++</span>small<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>  <span class="token comment" spellcheck="true">// 如果当前数等于指定数, p++</span>        <span class="token punctuation">{</span>            p<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>large<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>small <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> large<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;</span> R<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> L<span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> L<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 小于区</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 大于区</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快排3-0"><a href="#快排3-0" class="headerlink" title="快排3.0"></a>快排3.0</h3><p><strong>问题:</strong></p><p>1.0 和 2.0 都存在一个问题, 容易受初始数据状况影响, 若数组本来就有序, 再选取最后一个数作为参考, 显然不合适</p><p><strong>解决:</strong></p><p>在开始partition之前, 先在数组中随机选取一个数, 放到最后一位作为参考数, 通过随机性减少极端情况发生</p><p>代码实现</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;</span> R<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>L <span class="token operator">+</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>R <span class="token operator">-</span> L <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> L<span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> L<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 小于区</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 大于区</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="七-堆排序"><a href="#七-堆排序" class="headerlink" title="七. 堆排序"></a>七. 堆排序</h2><p><strong>核心思想:</strong></p><p>利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p><p>堆排序是借助堆来实现的选择排序，思想同简单的选择排序，以下以大顶堆为例。注意：如果想升序排序就使用大顶堆，反之使用小顶堆。原因是堆顶元素需要交换到序列尾部。</p><p><strong>关键:</strong></p><p>每次弹出数的时候, 要<code>维护堆的性质</code></p><p>代码实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 某个数在index位置,能否往下移动</span><span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token keyword">int</span> heapsize<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 左孩子</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> heapsize<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 下方还有孩子</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 右孩子存在并且两个孩子的值相比较,谁的值大返回谁的</span>        <span class="token keyword">int</span> largest <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> heapsize <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">?</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> left<span class="token punctuation">;</span>        largest <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">?</span> largest<span class="token operator">:</span> index<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> largest<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 当我是我自己的时候</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        index <span class="token operator">=</span> largest<span class="token punctuation">;</span>        left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 某个数在index位置,能否往上移动</span><span class="token keyword">void</span> <span class="token function">heapinsert</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        index <span class="token operator">=</span> <span class="token punctuation">(</span>index<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> heapsize<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 先构建大根堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> heapsize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">heapinsert</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>heapsize <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 将0位置的数弹出到末尾, 再维护堆的性质</span>    <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>heapsize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heapsize<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> heapsize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="八-各个排序的复杂度-稳定性"><a href="#八-各个排序的复杂度-稳定性" class="headerlink" title="八. 各个排序的复杂度, 稳定性"></a>八. 各个排序的复杂度, 稳定性</h2><ul><li><p>冒泡排序: 时间复杂度O(N^2) 额外空间复杂度O(1)</p></li><li><p>选择排序: 时间复杂度O(N^2) 额外空间复杂度O(1)</p></li><li><p>插入排序: 时间复杂度O(N^2) 额外空间复杂度O(1)</p></li><li><p>归并排序: 时间复杂度O(NlogN) 额外空间复杂度O(N)</p></li><li><p>计数排序: 时间复杂度O(NlogN) 额外空间复杂度O(N)</p></li><li><p>快速排序<strong>1.0</strong>: 时间复杂度O(N^2) 额外空间复杂度O(N)</p></li><li><p>快速排序<strong>2.0</strong>: 时间复杂度O(N^2) 额外空间复杂度O(N)</p></li><li><p>快速排序<strong>3.0</strong>: 时间复杂度O(NlogN) 额外空间复杂度O(N)</p></li><li><p>堆排序: 时间复杂度O(NlogN) 额外空间复杂度O(N)</p></li></ul><p><strong>对时间复杂度和额外空间复杂度的估计都是按最坏的情况</strong></p><p><strong>稳定性:</strong></p><p><strong>稳定</strong> ：如果a原本在b前面，而a=b，排序之后a仍然在b的前面；</p><p>稳定的排序方法有:</p><ul><li>冒泡排序</li><li>插入排序</li><li>归并排序</li><li>计数排序(不基于比较的排序)</li></ul><p><strong>不稳定排序算法的原因:</strong></p><ul><li>选择排序: 受初始数据状况影响</li><li>快速排序: 受初始数据状况影响</li><li>堆排序: 受初始数据状况影响</li></ul><hr><h2 id="附-排序算法代码测试环境"><a href="#附-排序算法代码测试环境" class="headerlink" title="附 排序算法代码测试环境"></a>附 排序算法代码测试环境</h2><h3 id="1-IDE配置"><a href="#1-IDE配置" class="headerlink" title="1. IDE配置"></a>1. IDE配置</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span><span class="token macro property">#<span class="token directive keyword">define</span> arr_len 10</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">getArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"排序前: "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">printIN</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> arr_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"***********************************************"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"排序后: "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 排序方法添加在此处</span>    <span class="token function">printIN</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> arr_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作用: 定义宏常量数组长度为10, 生成随机数组, 打印结果</p><hr><h3 id="2-swap-函数"><a href="#2-swap-函数" class="headerlink" title="2. swap()函数"></a>2. swap()函数</h3><p>作用: 交换两个数的位置</p><p>由于采用异或运算, 减少额外空间的使用</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-getArr-函数"><a href="#3-getArr-函数" class="headerlink" title="3. getArr()函数"></a>3. getArr()函数</h3><p>作用: 获取随机数组, 保证每次排序数据的随机性</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token function">getArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr_len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr_len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="4-printIN-函数"><a href="#4-printIN-函数" class="headerlink" title="4. printIN()函数"></a>4. printIN()函数</h3><p>作用: 遍历数组, 打印数组中的每个数</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">printIN</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="5-getMax-函数"><a href="#5-getMax-函数" class="headerlink" title="5. getMax()函数"></a>5. getMax()函数</h3><p>作用: 遍历数组, 获取数组中的最大值</p><p>由于采用二分递归找最大值, 比一般从头遍历要快, 能够优化整个程序的时间</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 用二分求最大值的过程</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">==</span> R<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 数组在L...R范围上只有一个数, 直接返回</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> L <span class="token operator">+</span> <span class="token punctuation">(</span>R <span class="token operator">-</span> L<span class="token punctuation">)</span><span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 中点</span>    <span class="token keyword">int</span> leftMax <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> L<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 左边二分到死</span>    <span class="token keyword">int</span> rightMax <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 右边二分到死</span>    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>leftMax<span class="token punctuation">,</span> rightMax<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="下次一定"><a href="#下次一定" class="headerlink" title="下次一定"></a>下次一定</h2><ul><li><input disabled="" type="checkbox"> <strong>希尔排序没整明白</strong></li><li><input disabled="" type="checkbox"> <strong>基数排序没整明白</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;排序算法总结&quot;&gt;&lt;a href=&quot;#排序算法总结&quot; class=&quot;headerlink&quot; title=&quot;排序算法总结&quot;&gt;&lt;/a&gt;排序算法总结&lt;/h1&gt;&lt;h2 id=&quot;一-冒泡排序&quot;&gt;&lt;a href=&quot;#一-冒泡排序&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="算法学习" scheme="https://roranrui.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="算法" scheme="https://roranrui.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
