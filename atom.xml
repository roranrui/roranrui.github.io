<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>若然无亦的Blog</title>
  
  <subtitle>长日终有时, 长梦终有逝</subtitle>
  <link href="https://roranrui.cn/atom.xml" rel="self"/>
  
  <link href="https://roranrui.cn/"/>
  <updated>2022-04-26T07:36:35.962Z</updated>
  <id>https://roranrui.cn/</id>
  
  <author>
    <name>若然无亦</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>五.Linux自有服务（二）</title>
    <link href="https://roranrui.cn/2022/04/26/wu.linux-zi-you-fu-wu-er/"/>
    <id>https://roranrui.cn/2022/04/26/wu.linux-zi-you-fu-wu-er/</id>
    <published>2022-04-26T07:29:55.000Z</published>
    <updated>2022-04-26T07:36:35.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux自有服务（2）"><a href="#Linux自有服务（2）" class="headerlink" title="Linux自有服务（2）"></a>Linux自有服务（2）</h1><p>自有服务，即不需要用户独立去安装的软件的服务，而是当系统安装好之后就可以直接使用的服务（内置）。</p><h1 id="一、设置主机名"><a href="#一、设置主机名" class="headerlink" title="一、设置主机名"></a>一、设置主机名</h1><p>回顾：</p><p>#hostname</p><p>#hostname -f      FQDN（全限定域名）</p><p>①临时设置主机名（立竿见影），需要切换用户使之生效</p><p>#hostname 设置的主机名</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image1.png" alt="img"></p><p>②永久设置主机名（需要重启）</p><p>先找到一个文件</p><p>/etc/sysconfig/network      【主机名的配置文件】</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image2.png" alt="img"></p><p>修改其中的HOSTNAME为自己需要设置的永久主机名</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image3.png" alt="img"></p><p><strong>③修改linux服务器的hosts文件，将yunwei指向本地（设置FQDN）</strong></p><p>Hosts文件的位置：/etc/hosts</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image5.jpg" alt="img"></p><p>问题：不设置FQDN会怎么样？</p><p>​    ①很多开源服务器软件（例如Apache）则无法启动，或出现报错；</p><p>​    ②方便记忆，看到主机名对其作用有一个初步判断；</p><p>​    ③如果不设置则会影响本地的域名的解析（本地访问）；</p><h1 id="二、chkconfig"><a href="#二、chkconfig" class="headerlink" title="二、chkconfig"></a>二、chkconfig</h1><p>作用：相当于windows下“安全卫士”、“电脑管家”之类的安全辅助工具<strong>提供“开机启动项”的一个管理服务</strong>。</p><p>在linux下不是所有的软件安装完成之后都有开机启动服务，有的可能需要自己去添加。除此之外还可以查看和删除。</p><p>①开机启动<strong>服务查询</strong></p><p>#chkconfig –list</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image7.jpg" alt="img"></p><p>其中0-6表示各个启动级别</p><p>例如：以httpd为例，其3级别为关闭（off），则表示其在3启动形式下默认开机不启动</p><p>5对应的也是关闭，则表示其在桌面环境下也是开机不启动。</p><p>再例如：kdump服务，在2，3，4，5的级别下默认开机启动的，其他级别下默认开机不启动</p><p>②删除服务</p><p>#chkconfig –del 服务名</p><p>例如删除httpd服务</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image9.jpg" alt="img"></p><p>③添加开机启动服务</p><p>#chkconfig –add 服务名            【必须要保证服务正常运行，才可以添加】</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image11.jpg" alt="img"></p><p><strong>④设置服务在某个级别下开机启动/不启动【重点命令】</strong></p><p><strong>#chkconfig –level</strong> <strong>连在一起的启动级别</strong> <strong>服务名on/off</strong></p><p>案例：设置httpd服务在3，5级别下默认开机启动</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image13.jpg" alt="img"></p><p>案例：设置httpd服务在5的级别下默认开机不启动</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image15.jpg" alt="img"></p><h1 id="三、ntp服务"><a href="#三、ntp服务" class="headerlink" title="三、ntp服务"></a>三、ntp服务</h1><p>作用：ntp主要是用于<strong>对计算机的时间同步管理</strong>操作。</p><p>时间是对服务器来说是很重要的，一般很多网站都需要读取服务器时间来记录相关信息，如果时间不准，则可能造成很大的影响。</p><p>例如：当前虚拟机里的linux时间就是不准确的</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image16.png" alt="img"></p><p>同时服务器时间方式有2个：<strong>一次性同步（手动同步）、通过服务自动同步</strong>。</p><p>上游的概念：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image18.jpg" alt="img"></p><p>①一次性同步时间（简单）</p><p><strong>#ntpdate</strong> <strong>时间服务器的域名或ip地址</strong></p><p>Ip地址查看可以访问：<a href="http://www.ntp.org.cn/pool.php">http://www.ntp.org.cn/pool.php</a></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image20.jpg" alt="img"></p><p>②设置时间同步服务</p><p>服务名：ntpd</p><p>启动ntpd服务</p><p>​    #service ntpd start   或者  /etc/init.d/ntpd start</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image22.jpg" alt="img"></p><p>设置ntpd服务开机启动：</p><p># chkconfig –list|grep ntpd</p><p># chkconfig –level 35 ntpd on</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image24.jpg" alt="img"></p><h1 id="四、防火墙服务"><a href="#四、防火墙服务" class="headerlink" title="四、防火墙服务"></a>四、防火墙服务</h1><p>防火墙：<strong>防范一些网络攻击</strong>。有<strong>软件防火墙</strong>、硬件防火墙之分。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image25.png" alt="img"></p><p>防火墙选择让请求通过，从而保证网络安全性。</p><p><strong>在当前的centos6.5中防火墙有一个名称：iptables</strong> 【7.x中默认使用的是firewalld】</p><p>①查看iptables是否开机启动</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image27.jpg" alt="img"></p><p>②iptables服务启动/重启/关闭</p><p>#service iptables start/restart/stop</p><p>/etc/init.d/iptables start /restart/stop</p><p><strong>③查看iptables的状态（规则）</strong></p><p>]# service iptables status</p><p>如果iptables没有启动，则提示服务没启动，如果已经启动，则显示防火墙的相关的规则信息</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image29.jpg" alt="img"></p><p>④查看规则的命令</p><p>#iptables -L -n</p><p>含义：</p><p>​    -L：表示列出规则</p><p>​    -n：表示将单词表达形式改成数字形式显示</p><p>⑤简单设置防火墙规则</p><p>例如，需要允许80端口通过防火墙，则规则可以用以下的命令来设置</p><p><strong>#iptables -I INPUT -p tcp –dport 80 -j ACCEPT  #允许访问80端口</strong></p><p>Iptables：主命令</p><p>-I：表示将规则放到最前面</p><p>-A：add，添加规则（最后）</p><p>INPUT：进站请求【出站output】</p><p>-p：protocol，指定协议（icmp/tcp/udp）</p><p>–dport：指定端口号</p><p>-j：指定行为结果，允许（accept）/禁止（reject）/丢弃（drop）</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image31.jpg" alt="img"></p><p>添加完成之后需要保存操作：</p><p><strong>/etc/init.d/iptables save</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image33.jpg" alt="img"></p><p>测试80端口访问：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image34.png" alt="img"></p><h1 id="五、rpm管理（重点）"><a href="#五、rpm管理（重点）" class="headerlink" title="五、rpm管理（重点）"></a>五、rpm管理（重点）</h1><p>作用：rpm的作用类似于windows上的电脑管家中“软件管理”、安全卫士里面“软件管家”等产品，主要作用是对linux服务器上的软件包进行对应管理操作，<strong>管理分为：查询、卸载、安装</strong>。</p><p>①查询某个软件的安装情况</p><p><strong>#rpm -qa|grep</strong> <strong>关键词</strong></p><p>选项：</p><p>​    -q：查询，query</p><p>​    -a：全部，all</p><p>案例：查询linux上是否安装firefox</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image35.png" alt="img"></p><p>案例：查询是否安装qq</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image36.png" alt="img"></p><p>②卸载某个软件</p><p>#rpm -e 软件的名称</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image38.jpg" alt="img"></p><p>火狐卸载的时候是没有依赖关系的，所以可以直接卸载。</p><p>但是在卸载Apache的时候提示无法卸载：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image40.jpg" alt="img"></p><p>当存在依赖关系的时候又不想去解决这个问题的时候可以：</p><p>#rpm -e 软件包名 –nodeps</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image41.png" alt="img"></p><p>③软件的安装</p><p>要想装软件，和windows下一样，先得找到安装包。</p><p>​    软件包的获得方式：</p><p>​         a. 去官网去下载；</p><p>​         b. 不介意老版本的话，可以从光盘（或者镜像文件）中读取；</p><p>此处以光盘文件为例：</p><p><strong>查看块状设备的信息：</strong></p><p>#lsblk  （list block devices）       查看块状设备的信息  </p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image43.jpg" alt="img"></p><p>Name：名称</p><p>Size：设备大小</p><p>Type：类型</p><p>MountPoint：挂载点（类似windows下盘符）</p><p><strong>扩展：光盘的挂载和解挂</strong></p><p>a. 解挂操作</p><p>​    命令：umount</p><p>​    <strong>语法：#umount</strong> <strong>当前设备的挂载点（路径）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image45.jpg" alt="img"></p><p>此时，相当于U盘在windows上已经被弹出了，但是没有拔下电脑USB接口。</p><p>b. 挂载光盘</p><p>​    命令：mount</p><p>​    <strong>语法：#mount</strong> <strong>设备原始地址</strong> <strong>要挂载的位置路径</strong></p><p>设备原始地址：地址统一都在/dev下，然后根据大小确定具体name值，拼凑在一起组成原始地址，例如当前：“/dev/sr0”</p><p>要挂载的位置路径：挂载目录一般都在mnt下，也可以在mnt下建目录，此处以“/mnt/dvd”为例</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image47.jpg" alt="img"></p><p><strong>安装软件的命令：</strong></p><p><strong>#rpm -ivh</strong> <strong>软件包完整名称</strong></p><p>选项：</p><p>​    -i：install，安装</p><p>​    -v：显示进度条</p><p>​    -h：表示以“#”形式显示进度条</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image49.jpg" alt="img"></p><h1 id="六、cron-x2F-crontab计划任务（重点）"><a href="#六、cron-x2F-crontab计划任务（重点）" class="headerlink" title="六、cron/crontab计划任务（重点）"></a>六、cron/crontab计划任务（重点）</h1><p>作用：操作系统不可能24小时都有人在操作，有些时候想在指定的时间点去执行任务（例如：每天夜里2点去重新启动Apache），此时不可能真有人每天夜里2点去执行命令，此时可以交给计划任务程序去执行操作。</p><p>语法：#crontab 选项</p><p>​    常用选项：</p><p>​         <strong>-l：list，列出指定用户的计划任务列表</strong></p><p>​         <strong>-e：edit，编辑指定用户的计划任务列表</strong></p><p>​         -u：user，指定的用户名，如果不指定，则表示当前用户</p><p>​         -r：remove，删除指定用户的计划任务列表</p><p>①列出</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image50.png" alt="img"></p><p><strong>②编辑计划任务（重点）</strong></p><p>计划任务的规则语法格式，以行为单位，一行则为一个计划：</p><p>分 时 日 月 周 需要执行的命令</p><p>例如：如果想要每天的0点0分执行reboot指令，则可以写成</p><p>0 0 * * * reboot</p><p><strong>取值范围：</strong></p><p>分：0~59</p><p>时：0~23</p><p>日：1~31</p><p>月：1~12</p><p>周：0~7，0和7表示星期天</p><p><strong>四个符号：</strong></p><p>*：表示取值范围中的每一个数字</p><p>-：做连续区间表达式的，要想表示1~7，则可以写成：1-7</p><p>/：表示每多少个，例如：想每10分钟一次，则可以在分的位置写：*/10</p><p>,：表示多个取值，比如想在1点，2点6点执行，则可以在时的位置写：1,2,6</p><p>问题1：每月1、10、22日的4:45重启network服务</p><p>45 4 1,10,22 * * service network restart</p><p>问题2：每周六、周日的1:10重启network服务</p><p>10 1 * * 6,0  service network restart</p><p>问题3：每天18:00至23:00之间每隔30分钟重启network服务</p><p>*/30 18-23 * * *  service network restart</p><p>问题4：每隔两天的上午8点到11点的第3和第15分钟执行一次重启</p><p>3,15 8-11 */2 * *  reboot</p><p>案例：真实测试案例，每1分钟往root家目录中的RT.txt中输入当前的时间信息，为了看到效果使用追加输出</p><p>计划任务：*/1 *  *  *  * ls ~&gt;&gt; /root/RT.txt</p><p><strong>Crontab权限问题：本身是任何用户都可以创建自己的计划任务</strong>。</p><p>但是超级管理员可以通过配置来设置某些用户不允许设置计划任务 ：</p><p>配置文件位于（黑名单）：</p><p>​    /etc/cron.deny             里面写用户名，一行一个</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image51.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/alip_image53.jpg" alt="img"></p><p>还有一个配置文件：（白名单）</p><p>​    /etc/cron.allow        （本身不存在，自己创建）</p><p><strong>注意：白名单优先级高于黑名单，如果一个用户同时存在两个名单文件中，则会被默认允许创建计划任务。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux自有服务（2）&quot;&gt;&lt;a href=&quot;#Linux自有服务（2）&quot; class=&quot;headerlink&quot; title=&quot;Linux自有服务（2）&quot;&gt;&lt;/a&gt;Linux自有服务（2）&lt;/h1&gt;&lt;p&gt;自有服务，即不需要用户独立去安装的软件的服务，而是当系统安装</summary>
      
    
    
    
    <category term="操作系统学习" scheme="https://roranrui.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="操作系统" scheme="https://roranrui.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Linux" scheme="https://roranrui.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>四.Linux自有服务（一）</title>
    <link href="https://roranrui.cn/2022/04/26/si.linux-zi-you-fu-wu-yi/"/>
    <id>https://roranrui.cn/2022/04/26/si.linux-zi-you-fu-wu-yi/</id>
    <published>2022-04-26T07:29:49.000Z</published>
    <updated>2022-04-26T07:36:30.840Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux自有服务（1）"><a href="#Linux自有服务（1）" class="headerlink" title="Linux自有服务（1）"></a>Linux自有服务（1）</h1><p>自有服务，即不需要用户独立去安装的软件的服务，而是当系统安装好之后就可以直接使用的服务（内置）。</p><h1 id="一、运行模式"><a href="#一、运行模式" class="headerlink" title="一、运行模式"></a>一、运行模式</h1><p>运行模式也可以称之为<strong>运行级别</strong>。</p><p>在linux中存在一个进程：init （initialize，初始化），进程id是1。</p><p>查看进程：#ps -ef|grep init</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image1.png" alt="img"></p><p>该进程存在一个对应的配置文件：inittab（<strong>系统运行级别配置文件</strong>，位置/etc/inittab）</p><p>文件的主要内容：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image3.jpg" alt="img"></p><p>根据上述的描述，可以得知，Centos6.5中存在7中运行级别/模式。</p><p>0 — 表示关机级别（不要将默认的运行级别设置成这个值）</p><p>1 — 单用户模式</p><p>2 — 多用户模式，不带NFS（Network File Syetem）</p><p>3 — 多用户模式，完全的多用户模式（不带桌面的，纯命令行模式）</p><p>4 — 没有被使用的模式（被保留模式）</p><p>5 — X11，完整的图形化界面模式</p><p>6 — 表示重启级别（不要将默认的运行级别设置成这个值）</p><p>与该级别相关的几个命令：</p><p>#init 0       表示关机</p><p>#init 3       表示切换到不带桌面的模式</p><p>#init 5       切换到图形界面</p><p>#init 6       重启电脑</p><p>注意：init指令需要超级管理员的权限，普通用户无法执行。</p><p><strong>这些命令其实都是调用的init进程，将数字（运行级别）传递给进程，进程去读配置文件执行对应的操作。</strong></p><p>①切换到纯命令行模式下（<strong>临时切换，重启之后又恢复</strong>）</p><p>#init 3</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image4.png" alt="img"></p><p>切换之后需要输入用户名和密码，在<strong>输入密码的时候没有“*”提示输入，只要自己确认输入的密码没有错误，按下回车即可</strong>。</p><p>②回到桌面模式</p><p>#init 5</p><p><strong>③设置模式永久为命令行模式</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image5.png" alt="img"></p><p>将/etc/inittab文件中的initdefault值设置成3，然后重启操作系统。</p><h1 id="二、用户与用户组管理（重点）"><a href="#二、用户与用户组管理（重点）" class="headerlink" title="二、用户与用户组管理（重点）"></a>二、用户与用户组管理（重点）</h1><p>Linux系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p><p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p><p>每个用户账号都拥有一个惟一的用户名和各自的密码。</p><p>用户在登录时键入正确的用户名和密码后，就能够进入系统和自己的主目录。</p><p>要想实现用户账号的管理，要完成的工作主要有如下几个方面：</p><p>用户账号的添加、删除、修改以及用户密码的管理。</p><p>用户组的管理。</p><p><strong>注意三个文件：</strong></p><p>/etc/passwd               存储用户的关键信息</p><p>/etc/group                存储用户组的关键信息</p><p>/etc/shadow               存储用户的密码信息</p><h2 id="1、用户管理"><a href="#1、用户管理" class="headerlink" title="1、用户管理"></a>1、用户管理</h2><p>①添加用户</p><p>常用语法：#useradd 选项 用户名</p><p>常用选项：</p><p>​    -g：表示指定用户的用户主组，选项的值可以是用户组的id，也可以是组名</p><p>​    -G：表示指定用户的用户附加组，选项的值可以是用户组的id，也可以是组名</p><p>​    -u：uid，用户的id（用户的标识符），<strong>系统默认会从500之后按顺序分配uid</strong>，如果不想使用系统分配的，可以通过该选项自定义【类似于腾讯QQ的自选靓号情况】</p><p>​    -c comment：添加注释</p><p>案例：创建用户zhangsan，不带任何选项</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image6.png" alt="img"></p><p>验证是否成功：</p><p>​    a. 验证/etc/passwd的最后一行，查看是否有zhangsan的信息；</p><p>​    b. 验证是否存在家目录（在Centos下创建好用户之后随之产生一个同名家目录）；</p><p>扩展：认识passwd文件</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image8.jpg" alt="img"></p><p>用户名:密码:用户ID:用户组ID:注释:家目录:解释器shell</p><p>用户名：创建新用户名称，后期登录的时候需要输入；</p><p>密码：此密码位置一般情况都是“x”，表示密码的占位；</p><p>用户ID：用户的识别符；</p><p>用户组ID：该用户所属的主组ID；</p><p>注释：解释该用户是做什么用的；</p><p>家目录：用户登录进入系统之后默认的位置；</p><p>解释器shell：等待用户进入系统之后，用户输入指令之后，该解释器会收集用户输入的指令，传递给内核处理；</p><p><strong>注意：在不添加选项的时候，执行useradd之后会执行一系列的操作</strong></p><p>​    <strong>a.</strong> <strong>创建同名的家目录；</strong></p><p>​    <strong>b.</strong> <strong>创建同名的用户组；</strong></p><p>案例：添加选项，创建用户lisi，让lisi属于501主组，附加组500，自选靓号666。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image9.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image10.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image11.png" alt="img"></p><p><strong>注意：查看用户的主组可以查看passwd文件，查看附加组可以查看group文件。</strong></p><p>②修改用户</p><p>常用语法：#usermod 选项 用户名</p><p>Usermod：user modify，用户修改</p><p>常用选项：</p><p>​    -g：表示指定用户的用户主组，选项的值可以是用户组的id，也可以是组名</p><p>​    -G：表示指定用户的用户附加组，选项的值可以是用户组的id，也可以是组名</p><p>​    -u：uid，用户的id（用户的标识符），<strong>系统默认会从500之后按顺序分配uid</strong>，如果不想使用系统分配的，可以通过该选项自定义【类似于腾讯QQ的自选靓号情况】</p><p>​    -l：修改用户名</p><p>案例：修改zhangsan用户主组为500，附加组改为501</p><p>#usermod -g 500 -G 501 zhangsan</p><p>案例：修改zhangsan用户用户名，改为wangerma</p><p><strong>#usermod -l</strong> <strong>新的用户名</strong> <strong>旧的用户名</strong></p><p>#usermod -l wangerma zhangsan</p><p>③设置密码</p><p>Linux不允许没有密码的用户登录到系统，因此前面创建的用户目前都处于锁定状态，需要设置密码之后才能登录计算机。</p><p><strong>常用语法：#passwd</strong> <strong>用户名</strong></p><p>案例：设置wangerma用户的密码</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image12.png" alt="img"></p><p>在设置密码的时候也是没有任何输入提示的，放心输入，确保两次输入的密码一致，按下回车即可。</p><p>也可以使用弱密码，但是不建议，否则会看到以下的提示：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image14.jpg" alt="img"></p><p>设置密码之后shadow文件中的体现：能够看出lisi用户没有密码的。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image16.jpg" alt="img"></p><p>在设置用户密码之后可以登录帐号，例如此处需要登录wangerma</p><p>切换用户命令：#su [用户名]   （switch user）</p><p>如果用户名不指定则表示切换到root用户。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image17.png" alt="img"></p><p>切换用户需要注意的事项：</p><p>​    a. 从root往普通用户切换不需要密码，但是反之则需要root密码；</p><p>​    b. 切换用户之后前后的工作路径是不变的；</p><p>​    c. 普通用户没有办法访问root用户家目录，但是反之则可以；</p><p>④删除用户</p><p>常用语法：#userdel 选项 用户名</p><p>Userdel：user delete（用户删除）</p><p>常用选项：</p><p>​    -r：表示删除用户的同时，删除其家目录；</p><p>案例：删除wangerma用户</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image18.png" alt="img"></p><p><strong>注意：已经登录的wangerma用户删除的时候提示删除失败，但是没有登录的lisi用户可以正常删除</strong>。</p><p>解决办法：简单粗暴，kill对应用户的全部进程</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image20.jpg" alt="img"></p><p>提示：所有跟用户操作的命令（除passwd外）只有root超级管理员有权限执行。</p><h2 id="2、用户组管理"><a href="#2、用户组管理" class="headerlink" title="2、用户组管理"></a>2、用户组管理</h2><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，<strong>这个用户组在创建用户时同时创建</strong>。</p><p>用户组的管理涉及用户组的<strong>添加、删除和修改</strong>。组的增加、删除和修改实际上就是对/etc/group文件的更新。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image21.png" alt="img"></p><p>文件结构：</p><p><strong>用户组名:密码:用户组ID:组内用户名</strong></p><p>密码：X表示占位符，虽然用户组可以设置密码，但是绝大部分的情况下不设置密码；</p><p>组内用户名：表示附加组是该组的用户名称；</p><p>①用户组添加</p><p>常用语法：#groupadd 选项 用户组名</p><p>常用选项：</p><p>​    -g：类似用户添加里的“-u”，-g表示选择自己设置一个自定义的用户组ID数字，如果自己不指定，则默认从500之后递增；</p><p>案例：使用groupadd指令创建一个新的用户组，命名为Administrators</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image22.png" alt="img"></p><p>②用户组编辑</p><p>常用语法：#groupmod 选项 用户组名</p><p>常用选项：</p><p>​    -g：类似用户修改里的“-u”，-g表示选择自己设置一个自定义的用户组ID数字</p><p>​    -n：类似于用户修改“-l”，表示设置新的用户组的名称</p><p>案例：修改Administrators用户组，将组ID从502改成520，将名称改为admins</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image24.jpg" alt="img"></p><p>③用户组删除</p><p>常用语法：#groupdel 用户组名</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image25.png" alt="img"></p><p>注意：当如果需要删除一个组，但是<strong>这个组是某个用户的主组时</strong>，则不允许删除；如果确实需要删除，则先从组内移出所有用户。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image27.jpg" alt="img"></p><h1 id="三、网络设置"><a href="#三、网络设置" class="headerlink" title="三、网络设置"></a>三、网络设置</h1><p>首先知道网卡配置文件位置：/etc/sysconfig/network-scripts</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image29.jpg" alt="img"></p><p>在目录中网卡的配置文件命名格式：ifcfg-网卡名称</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image31.jpg" alt="img"></p><p>ONBOOT：是否开机启动</p><p>BOOTPROTO：ip地址分配方式，DHCP表示动态主机分配协议</p><p>HWADDR：硬件地址，MAC地址</p><p>如果后续需要重启网卡怎么去操作呢？</p><p><strong>#service network restart</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image33.jpg" alt="img"></p><p>在有的分支版本中可能没有service命令来快速操作服务，但是有一个共性的目录：/etc/init.d</p><p>这个目录中放着很对服务的快捷方式。</p><p>此处重启网卡命令还可以使用：</p><p><strong>#/etc/init.d/network restart</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image35.jpg" alt="img"></p><p><strong>扩展1：</strong>如果修改网卡的配置文件，但是配置文件的目录层次很深，此时可以在浅的目录中创建一个快捷方式（软连接），方便以后去查找</p><p><strong>#ln -s</strong> <strong>原始文件的路径</strong> <strong>快捷方式的路径</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image37.jpg" alt="img"></p><p>通过ls -l可以列出如下的效果：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image39.jpg" alt="img"></p><p>其中，文件类型位置的“l”表示其类型为link（连接类型），后面的“-&gt;”指向的是原始文件路径。</p><p><strong>扩展2：如何去重启单个网卡？</strong></p><p>停止某个网卡：#ifdown 网卡名</p><p>开启某个网卡：#ifup 网卡名</p><p>例如：需要停止-启动（重启）eth0网卡，则可以输入</p><p>#ifdown eth0</p><p>#ifup eth0</p><p><strong>提示：在实际工作的时候不要随意禁网卡。</strong></p><h1 id="四、ssh服务（重点）"><a href="#四、ssh服务（重点）" class="headerlink" title="四、ssh服务（重点）"></a>四、ssh服务（重点）</h1><p>ssh（secure shell，安全外壳协议），该协议有2个常用的作用：<strong>远程连接协议</strong>、远程文件传输协议。</p><p>协议使用<strong>端口</strong>号：默认是22</p><p>可以是被修改的，如果需要修改，则需要修改ssh服务的配置文件：</p><p>#/etc/ssh/ssh_config</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image40.png" alt="img"></p><p>端口号可以修改，但是得注意2个事项：</p><p>​    a. 注意范围，端口范围是从0-65535；</p><p>​    b. 不能使用别的服务已经占用的端口；</p><p><strong>服务启动/停止/重启</strong></p><p>#service sshd start/stop/restart</p><p>#/etc/init.d/sshd start/stop/restart</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image42.jpg" alt="img"></p><h2 id="1、远程终端"><a href="#1、远程终端" class="headerlink" title="1、远程终端"></a>1、远程终端</h2><p>终端工具主要帮助运维人员连接远程的服务器，常见终端工具有：Xshell、secureCRT、Putty等。以putty为例：</p><p>①获取服务器ip地址，可以通过ifconfig命令进行查看，然后顺手测试ip的连接相通性</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image43.png" alt="img"></p><p>②打开putty，输入相关的信息</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image44.png" alt="img"></p><p>③在弹出key确认的时候点击“是”，以后不会再提示</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image45.png" alt="img"></p><p>④输入登录信息</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image47.jpg" alt="img"></p><h2 id="2、SSH服务文件传输"><a href="#2、SSH服务文件传输" class="headerlink" title="2、SSH服务文件传输"></a>2、SSH服务文件传输</h2><p>可视化的界面传输工具：Filezilla</p><p>安装好之后可以查看到桌面图标：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image48.png" alt="img"></p><p>①选择“文件”- “站点管理器（Ctrl + S）”</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image50.jpg" alt="img"></p><p>②点击“文件”菜单下方的“▽”选择需要连接的服务器，连接好之后的效果</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image52.jpg" alt="img"></p><p>③从本地windows上传文件到linux中方式</p><p>支持直接拖拽文件，也可以右键本地需要上传的文件，然后点选“上传”即可</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image54.jpg" alt="img"></p><p>④下载linux文件到本地</p><p>支持服务器文件直接拖拽到本地，也可以在右侧窗口选择需要下载的文件，右键，点选“下载”。</p><p><strong>扩展3：通过命令行工具来传输文件/文件夹</strong></p><p>工具：PSCP.exe（必须通过cmd命令行打开），为了使用方便可以将其放到环境变量目录中</p><p>如果不清楚哪些路径是环境变量路径，只需要将其放到C:/Windows目录下即可。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image55.png" alt="img"></p><p>用法：</p><p>​    <strong>a. pscp</strong> <strong>选项</strong> <strong>用户名@linux主机地址:资源路径 windows本地的地址</strong> <strong>（下载到win）</strong></p><p>​    <strong>b. pscp</strong> <strong>选项</strong> <strong>资源路径</strong> <strong>用户名@linux主机地址:远程路径</strong>  <strong>（上传到linux）</strong></p><p>​    c. pscp 选项 -ls 用户名@linux主机地址 （列出远程路径下结构）</p><p>①下载到本地windows</p><p>要求将远程linux服务器下的/etc整个目录下载到本地E:\tmp下</p><p>#pscp -r <a href="mailto:root@192.168.21.128:/etc">root@192.168.21.128:/etc</a> E:\tmp</p><p>在CMD中输入之后输入密码</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image56.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image57.png" alt="img"></p><p>②上传文件到linux</p><p>将“E:\coursedocs\运维学科\北京运维01期\01-基础班\20180329_Linux自有服务”所有的内容传输到linux下root用户的家目录</p><p>#pscp -r “E:\coursedocs\运维学科\北京运维01期\01-基础班\20180329_Linux自有服务” <a href="mailto:root@192.168.21.128:/root">root@192.168.21.128:/root</a></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/slip_image59.jpg" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux自有服务（1）&quot;&gt;&lt;a href=&quot;#Linux自有服务（1）&quot; class=&quot;headerlink&quot; title=&quot;Linux自有服务（1）&quot;&gt;&lt;/a&gt;Linux自有服务（1）&lt;/h1&gt;&lt;p&gt;自有服务，即不需要用户独立去安装的软件的服务，而是当系统安装</summary>
      
    
    
    
    <category term="操作系统学习" scheme="https://roranrui.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="操作系统" scheme="https://roranrui.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Linux" scheme="https://roranrui.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>三.Linux高级指令</title>
    <link href="https://roranrui.cn/2022/04/26/san.linux-gao-ji-zhi-ling/"/>
    <id>https://roranrui.cn/2022/04/26/san.linux-gao-ji-zhi-ling/</id>
    <published>2022-04-26T07:29:43.000Z</published>
    <updated>2022-04-26T07:36:24.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux的基本指令（2）"><a href="#Linux的基本指令（2）" class="headerlink" title="Linux的基本指令（2）"></a>Linux的基本指令（2）</h1><h1 id="一、高级指令"><a href="#一、高级指令" class="headerlink" title="一、高级指令"></a>一、高级指令</h1><h2 id="1、hostname指令"><a href="#1、hostname指令" class="headerlink" title="1、hostname指令"></a>1、hostname指令</h2><p>作用：操作服务器的<strong>主机名</strong>（<strong>读取</strong>、设置）</p><p>语法1：#hostname            含义：表示输出完整的主机名</p><p><strong>语法2：#hostname -f</strong>             <strong>含义：表示输出当前主机名中的FQDN</strong>（全限定<strong>域名</strong>）</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/QQ%E5%9B%BE%E7%89%8732131220220426153236.png" alt="img"></p><h2 id="2、id指令"><a href="#2、id指令" class="headerlink" title="2、id指令"></a>2、id指令</h2><p><strong>作用：查看一个用户的一些基本信息（包含用户id，用户组id，附加组id…），该指令如果不指定用户则默认当前用户。</strong></p><p>语法1：#id       默认显示当前执行该命令的用户的基本信息</p><p>语法2：#id 用户名       显示指定用户的基本信息</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/QQ%E5%9B%BE%E7%89%8720321312220426153317.png" alt="img"></p><p>验证上述信息是否正确？</p><p><strong>验证用户信息：通过文件/etc/passwd</strong></p><p><strong>验证用户组信息：通过文件/etc/group</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image004.png" alt="img"></p><h2 id="3、whoami指令"><a href="#3、whoami指令" class="headerlink" title="3、whoami指令"></a>3、whoami指令</h2><p><strong>作用：“我是谁？”显示当前登录的用户名，一般用于shell脚本，用于获取当前操作的用户名方便记录日志。</strong></p><p>语法：#whoami</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image05.png" alt="img"></p><h2 id="4、ps-ef指令（重点）"><a href="#4、ps-ef指令（重点）" class="headerlink" title="4、ps -ef指令（重点）"></a>4、ps -ef指令（重点）</h2><p>指令：ps </p><p>作用：主要是查看服务器的进程信息</p><p>选项含义：</p><p>​    -e：等价于“-A”，表示列出全部的进程</p><p>​    -f：显示全部的列（显示全字段）</p><p>执行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image007.jpg" alt="img"></p><p>列的含义：</p><p>UID：该进程执行的用户id；</p><p>PID：进程id；</p><p>PPID：该进程的父级进程id，如果一个程序的父级进程找不到，该程序的进程称之为僵尸进程（parent process ID）；</p><p>C：Cpu的占用率，其形式是百分数；</p><p>STIME：进行的启动时间；</p><p>TTY：终端设备，发起该进程的设备识别符号，如果显示“?”则表示该进程并不是由终端设备发起；</p><p>TIME：进程的执行时间；</p><p>CMD：该进程的名称或者对应的路径；</p><p>案例：（100%使用的命令）在ps的结果中过滤出想要查看的进程状态</p><p><strong>#ps -ef|grep “进程名称”</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/lip_image9.jpg" alt="img"></p><p>再例如查看火狐浏览器的进程：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/lip_image11.jpg" alt="img"></p><h2 id="5、top指令（重点）"><a href="#5、top指令（重点）" class="headerlink" title="5、top指令（重点）"></a>5、top指令（重点）</h2><p><strong>作用：查看服务器的进程占的资源（100%使用）</strong></p><p>语法：</p><p>​    进入命令：#top           （动态显示）</p><p>​    退出命令：按下q键</p><p>输出的结果：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image013.jpg" alt="img"></p><p>表头含义：</p><p>PID：进程id；</p><p>USER：该进程对应的用户；</p><p>PR：优先级；</p><p>VIRT：虚拟内存；</p><p>RES：常驻内存；</p><p>SHR：共享内存；</p><p>​    计算一个进程实际使用的内存 = 常驻内存（RES）- 共享内存（SHR）</p><p>S：表示进程的状态status（sleeping，其中S表示睡眠，R表示运行）；</p><p>%CPU：表示CPU的占用百分比；</p><p>%MEM：表示内存的占用百分比；</p><p>TIME+：执行的时间；</p><p>COMMAND：进程的名称或者路径；</p><p><strong>在运行top的时候，可以按下方便的快捷键：</strong></p><p>M：表示将结果按照内存（MEM）从高到低进行降序排列；</p><p>P：表示将结果按照CPU使用率从高到低进行降序排列；</p><p>1：当服务器拥有多个cpu的时候可以使用“1”快捷键来切换是否展示显示各个cpu的详细信息；</p><h2 id="6、du-sh指令"><a href="#6、du-sh指令" class="headerlink" title="6、du -sh指令"></a>6、du -sh指令</h2><p>作用：查看目录的真实大小</p><p><strong>语法：#du -sh</strong> <strong>目录路径</strong></p><p>选项含义：</p><p>​    -s：summaries，只显示汇总的大小</p><p>​    -h：表示以高可读性的形式进行显示</p><p>案例：统计“/root/yunweihenniux”目录的实际大小</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/lip_image14.png" alt="img"></p><p>案例：统计“/etc”目录实际大小</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/lip_image15.png" alt="img"></p><h2 id="7、find指令"><a href="#7、find指令" class="headerlink" title="7、find指令"></a>7、find指令</h2><p>作用：用于查找文件（其参数有55个之多）</p><p>语法：#<strong>find</strong> <strong>路径范围</strong> <strong>选项</strong> <strong>选项的值</strong></p><p>选项：</p><p>​    -name：按照文档名称进行搜索（支持模糊搜索）</p><p>​    -type：按照文档的类型进行搜索</p><p>​         <strong>文档类型：“-”表示文件（在使用find的时候需要用f来替换），“d”表示文件夹</strong></p><p>案例：使用find来搜索httpd.conf</p><p>#find / -name httpd.conf</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/lip_image16.png" alt="img"></p><p>案例：搜索etc目录下所有的conf后缀文件</p><p>#find /etc -name *.conf</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/lip_image17.png" alt="img"></p><p>案例：使用find来搜索/etc/sane.d/目录下所有的<strong>文件</strong></p><p>#find /etc/sane.d/ -type f</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image018.png" alt="img"></p><p>案例：使用find来搜索/etc/目录下所有的<strong>文件夹</strong></p><p>#find /etc -type d</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/lip_image19.png" alt="img"></p><h2 id="8、service指令（重点）"><a href="#8、service指令（重点）" class="headerlink" title="8、service指令（重点）"></a>8、service指令（重点）</h2><p>作用：用于控制一些软件的服务启动/停止/重启</p><p><strong>语法：#service</strong> <strong>服务名 start/stop/restart</strong></p><p>例如：需要启动本机安装的Apache（网站服务器软件），其服务名httpd</p><p>#service httpd start</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/lip_image21.jpg" alt="img"></p><p>通过ps命令来检查httpd服务是否启动：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image023.jpg" alt="img"></p><h2 id="9、kill指令（重点）"><a href="#9、kill指令（重点）" class="headerlink" title="9、kill指令（重点）"></a>9、kill指令（重点）</h2><p><strong>作用：表示杀死进程</strong>      （当遇到僵尸进程或者出于某些原因需要关闭进程的时候）</p><p>语法：**#kill** <strong>进程PID</strong>      （语法需要配合ps一起使用）</p><p>案例：需要kill掉Apache的进程</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/lip_image25.jpg" alt="img"></p><p>与kill命令作用相似但是比kill更加好用的杀死进程的命令：killall</p><p>语法：**#killall** <strong>进程名称</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/lip_image26.png" alt="img"></p><h2 id="10、ifconfig指令（重点）"><a href="#10、ifconfig指令（重点）" class="headerlink" title="10、ifconfig指令（重点）"></a>10、ifconfig指令（重点）</h2><p><strong>作用：用于操作网卡相关的指令。</strong></p><p>简单语法：#ifconfig        （获取网卡信息）</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image028.jpg" alt="img"></p><p>Eth0表示Linux中的一个网卡，eth0是其名称。Lo（<strong>loop，本地回还网卡，其ip地址一般都是127.0.0.1</strong>）也是一个网卡名称。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/lip_image30.jpg" alt="img"></p><p><strong>注意：inet addr就是网卡的ip地址</strong>。</p><h2 id="11、reboot指令"><a href="#11、reboot指令" class="headerlink" title="11、reboot指令"></a>11、reboot指令</h2><p>作用：重新启动计算机         </p><p><strong>语法1：#reboot</strong>      <strong>重启</strong></p><p>语法2：#reboot  -w  模拟重启，但是不重启（只写关机与开机的日志信息）</p><h2 id="12、shutdown指令"><a href="#12、shutdown指令" class="headerlink" title="12、shutdown指令"></a>12、shutdown指令</h2><p>作用：关机           （慎用）</p><p><strong>语法1：#shutdown -h now “关机提示”</strong> <strong>或者  #shutdown -h 15:25 “关机提示”</strong></p><p>案例：设置Linux系统关机时间在12:00</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image032.jpg" alt="img"></p><p><strong>如果想要取消关机计划的话，则可以按照以下方式去尝试：</strong></p><p><strong>①针对于centos7.x之前的版本：ctrl+c</strong></p><p><strong>②针对于centos7.x（包含）之后的版本：#shutdown  -c</strong></p><p>除了shutdown关机以外，还有以下几个关机命令：</p><p>#init 0</p><p>#halt</p><p>#poweroff</p><h2 id="13、uptime指令"><a href="#13、uptime指令" class="headerlink" title="13、uptime指令"></a>13、uptime指令</h2><p>作用：输出计算机的持续在线时间（<strong>计算机从开机到现在运行的时间</strong>）</p><p><strong>语法：#uptime</strong></p><p><img src="C:/Users/13993/AppData/Local/Temp/msohtmlclip1/01/lip_image34.jpg" alt="img"></p><h2 id="14、uname指令"><a href="#14、uname指令" class="headerlink" title="14、uname指令"></a>14、uname指令</h2><p>作用：获取计算机操作系统相关信息</p><p>语法1：#uname           获取操作系统的类型</p><p><strong>语法2：#uname -a       all，表示获取全部的系统信息（类型、全部主机名、内核版本、发布时间、开源计划）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image036.jpg" alt="img"></p><h2 id="15、netstat-tnlp指令"><a href="#15、netstat-tnlp指令" class="headerlink" title="15、netstat -tnlp指令"></a>15、netstat -tnlp指令</h2><p>作用：查看网络连接状态</p><p>语法：#netstat -tnlp</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/lip_image38.jpg" alt="img"></p><p>选项说明：</p><p>​    -t：表示只列出tcp协议的连接；</p><p>​    -n：表示将地址从字母组合转化成ip地址，将协议转化成端口号来显示；</p><p>​    -l：表示过滤出“state（状态）”列中其值为LISTEN（监听）的连接；</p><p>​    -p：表示显示发起连接的进程pid和进程名称；</p><h2 id="16、man指令"><a href="#16、man指令" class="headerlink" title="16、man指令"></a>16、man指令</h2><p>作用：manual，手册（包含了Linux中全部命令手册，英文）</p><p>语法：#man 命令         （退出按下q键）</p><p>案例：通过man命令查询cp指令的用法</p><p>#man cp</p><h1 id="二、练习题"><a href="#二、练习题" class="headerlink" title="二、练习题"></a>二、练习题</h1><p>1、如何通过命令行重启linux操作系统？  #reboot</p><p>2、<strong>如何在命令行中快速删除光标前/后的内容？</strong>  <strong>前：ctrl + u</strong>  <strong>后：ctrl + k</strong></p><p>3、如何删除/tmp下所有A开头的文件？    #rm -f /tmp/A* </p><p>4、系统重要文件需要备份，如何把/etc/passwd备份到/tmp目录下？</p><p>   #cp /etc/passwd /tmp/</p><p>5、如何查看系统最后创建的3个用户？</p><p>   #tail -3 /etc/passwd</p><p>6、什么命令可以统计当前系统中一共有多少账户？</p><p>   #wc -l /etc/passwd    #cat /etc/passwd|wc -l</p><p>7、如何创建/tmp/test.conf文件？</p><p>   #touch /tmp/test.conf</p><p>8、如何通过vim编辑打开/tmp/test.conf?</p><p>   #vim /tmp/test.conf</p><p>9、如何查看/etc/passwd的头3行和尾3行？</p><p>   #head -3 /etc/passwd</p><p>   #tail -3 /etc/passwd</p><p>10、如何<strong>一次性</strong>创建目录/text/1/2/3/4？</p><p>   #mkdir -p /text/1/2/3/4</p><p>11、如何最快的返回到当前账户的家目录？</p><p>   #cd ~         #cd</p><p>12、如何查看/etc所占的磁盘空间？</p><p>   #du -sh /etc</p><p>13、如何删除/tmp下所有的文件？</p><p>   #rm -rf /tmp/*</p><p>14、尝试启动Apache的服务，并且检查是否启动成功。</p><p>   #service httpd start</p><p>   #ps -ef|grep httpd</p><p>15、使用已学命令杀死Apache的进程。</p><p>   #killall httpd</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux的基本指令（2）&quot;&gt;&lt;a href=&quot;#Linux的基本指令（2）&quot; class=&quot;headerlink&quot; title=&quot;Linux的基本指令（2）&quot;&gt;&lt;/a&gt;Linux的基本指令（2）&lt;/h1&gt;&lt;h1 id=&quot;一、高级指令&quot;&gt;&lt;a href=&quot;#一、高</summary>
      
    
    
    
    <category term="操作系统学习" scheme="https://roranrui.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="操作系统" scheme="https://roranrui.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Linux" scheme="https://roranrui.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>二.Linux的基本指令</title>
    <link href="https://roranrui.cn/2022/04/26/er.linux-de-ji-ben-zhi-ling/"/>
    <id>https://roranrui.cn/2022/04/26/er.linux-de-ji-ben-zhi-ling/</id>
    <published>2022-04-26T07:29:35.000Z</published>
    <updated>2022-04-26T07:36:20.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux的基本指令"><a href="#Linux的基本指令" class="headerlink" title="Linux的基本指令"></a>Linux的基本指令</h1><h1 id="一、指令与选项"><a href="#一、指令与选项" class="headerlink" title="一、指令与选项"></a>一、指令与选项</h1><p>什么是Linux的指令？</p><p>指在Linux终端（命令行）中输入的内容就称之为指令。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image001.png" alt="img"></p><p>一个完整的指令的标准格式：Linux通用的格式</p><p>#<strong>指令主体（空格） [选项]（空格） [操作对象]</strong></p><p>一个指令可以包含多个选项</p><p>操作对象也可以是多个</p><p>例如：需要让张三同学帮忙去楼下小卖铺买一瓶农夫山泉水和清风餐巾纸，在这个指令中“买东西”是指令的主体，买的水和餐巾纸是操作的对象，农夫山泉、清风是操作的选项。</p><h1 id="二、基础指令（重点）"><a href="#二、基础指令（重点）" class="headerlink" title="二、基础指令（重点）"></a>二、基础指令（重点）</h1><h2 id="1、ls指令"><a href="#1、ls指令" class="headerlink" title="1、ls指令"></a>1、ls指令</h2><p>含义：ls （list）</p><p><strong>用法1：#ls</strong></p><p>含义：列出当前工作目录下的所有文件/文件夹的名称</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image003.jpg" alt="img"></p><p><strong>用法2：#ls 路径</strong></p><p>含义：列出指定路径下的所有文件/文件夹的名称</p><p>关于路径（重要）：</p><p>路径可以分为两种：相对路径、绝对路径。</p><p>相对路径：相对首先得有一个参照物（一般就是当前的工作路径）；</p><p>​    相对路径的写法：在相对路径中通常会用到2个符号“./”【表示当前目录下】、“../”【上一级目录下】。</p><p>绝对路径：绝对路径不需要参照物，直接从根“/”开始寻找对应路径；</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image0004.png" alt="img"></p><p><strong>用法3：#ls 选项 路径</strong></p><p>含义：在列出指定路径下的文件/文件夹的名称，并以指定的格式进行显示。</p><p>常见的语法：</p><p>​    #ls -l 路径</p><p>​    #ls -la 路径</p><p>选项解释：</p><p>​    <strong>-l：表示list，表示以详细列表的形式进行展示</strong></p><p>​    <strong>-a：表示显示所有的文件/文件夹（包含了隐藏文件/文件夹）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image005.png" alt="img"></p><p>上述列表中的第一列字符表示文档的类型，<strong>其中“-”表示改行对应的文档类型为文件，“d”表示文档类型为文件夹</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image0006.png" alt="img"></p><p><strong>在Linux中隐藏文档一般都是以“.”开头。</strong></p><p><strong>用法4：#ls -lh路径</strong></p><p>含义：列出指定路径下的所有文件/文件夹的名称，以列表的形式并且在显示文档大小的时候以<strong>可读性较高的形式显示</strong></p><p>参数含义：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image007.png" alt="img"></p><h2 id="2、pwd指令"><a href="#2、pwd指令" class="headerlink" title="2、pwd指令"></a>2、pwd指令</h2><p><strong>用法：#pwd      （print working directory，打印当前工作目录）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image008.png" alt="img"></p><h2 id="3、cd指令"><a href="#3、cd指令" class="headerlink" title="3、cd指令"></a>3、cd指令</h2><p>命令：#cd        （change directory，改变目录）</p><p>作用：用于切换当前的工作目录的</p><p><strong>语法：#cd 路径</strong></p><p>案例：当前在“/”下，需要使用绝对路径切换到/usr/local。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image009.jpg" alt="img"></p><p>案例：当前在/usr/local下，需要使用相对路径切换目录到home目录下的Linux123用户家目录中去。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image010.png" alt="img"></p><p>补充：</p><p>在Linux中有一个特殊的符号“~”，表示当前用户的家目录。</p><p>切换的方式：#cd ~</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image011.png" alt="img"></p><h2 id="4、mkdir指令"><a href="#4、mkdir指令" class="headerlink" title="4、mkdir指令"></a>4、mkdir指令</h2><p>指令：mkdir  （make directory，创建目录）</p><p>语法1：**#mkdir** <strong>路径</strong> <strong>【路径，可以是文件夹名称也可以是包含名称的一个完整路径】</strong></p><p>案例：在当前路径下创建出目录“yunweihenniux”</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image012.png" alt="img"></p><p>注意：ls列出的结果颜色说明，<strong>其中蓝色的名称表示文件夹</strong>，黑色的表示文件，<strong>绿色的其权限为拥有所有权限</strong>。</p><p>案例：在指定路径下创建出一个文件夹“yunweihenniux”</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image013.png" alt="img"></p><p>语法2：**#mkdir -p** <strong>路径</strong></p><p>含义：<strong>当一次性创建多层不存在的目录的时候</strong>，添加-p参数，否则会报错</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image015.jpg" alt="img"></p><p>语法3：**#mkdir** <strong>路径1</strong> <strong>路径2</strong> <strong>路径3 ….</strong>  【表示一次性创建多个目录】</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image017.png" alt="img"></p><h2 id="5、touch指令"><a href="#5、touch指令" class="headerlink" title="5、touch指令"></a>5、touch指令</h2><p>指令：touch  </p><p>作用：创建文件</p><p>语法：**#touch 文件路径**   【路径可以是直接的文件名也可以是路径】</p><p>案例：使用touch来在当前路径下创建一个文件，命名为Linux.txt</p><p><img src="C:/Users/13993/AppData/Local/Temp/msohtmlclip1/01/clip_image019.jpg" alt="img"></p><p>案例：使用touch来同时创建多个文件</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image021.jpg" alt="img"></p><p>案例：使用touch来在“Linux123”用户的家目录中创建文件，Linux.txt</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image022.png" alt="img"></p><h2 id="6、cp指令"><a href="#6、cp指令" class="headerlink" title="6、cp指令"></a>6、cp指令</h2><p>指令：cp     （copy，复制）</p><p>作用：复制文件/文件夹到指定的位置</p><p>语法：**#cp** <strong>被复制的文档路径</strong> <strong>文档被复制到的路径</strong></p><p>案例：使用cp命令来复制一个文件</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image023.png" alt="img"></p><p><strong>注意：Linux在复制过程中是可以重新对新位置的文件进行重命名的，但是如果不是必须的需要，则建议保持前后名称一致。</strong></p><p>案例：使用cp命令来复制一个文件夹</p><p><strong>注意：当使用cp命令进行文件夹复制操作的时候需要添加选项“-r”【-r表示递归复制】，否则目录将被忽略</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image025.jpg" alt="img"></p><h2 id="7、mv指令"><a href="#7、mv指令" class="headerlink" title="7、mv指令"></a>7、mv指令</h2><p>指令：mv  （move，移动，剪切）</p><p>作用：移动文档到新的位置</p><p>语法：**#mv** <strong>需要移动的文档路径</strong> <strong>需要保存的位置路径</strong></p><p>确认：移动之后原始的文件还在不在原来的位置？原始文件是不在原始位置的</p><p>案例：使用mv命令移动一个文件</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image026.png" alt="img"></p><p>案例：使用mv命令移动一个文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image027.png" alt="img"></p><p>补充：在Linux中重命名的命令也是mv，语法和移动语法一样。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image0028.jpg" alt="img"></p><h2 id="8、rm指令"><a href="#8、rm指令" class="headerlink" title="8、rm指令"></a>8、rm指令</h2><p>指令：rm （remove，移除、删除）</p><p>作用：移除/删除文档</p><p>语法：#rm 选项 需要移除的文档路径</p><p>选项：</p><p>​    -f：force，强制删除，不提示是否删除</p><p>​    -r：表示递归</p><p>案例：删除一个文件</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image029.png" alt="img"></p><p>在删除的时候如果不带选项，会提示是否删除，如果需要确认则输入“y/yes”，否则输入“n/no”按下回车。</p><p><strong>注意：如果在删除的时候不想频繁的确认，则可以在指令中添加选项“-f”，表示force（强制）。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image031.png" alt="img"></p><p>案例：删除一个文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image032.png" alt="img"></p><p><strong>注意：删除一个目录的时候需要做递归删除，并且一般也不需要进行删除确认询问，所以移除目录的时候一般需要使用-rf选项。</strong></p><p>案例：删除多个文档</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image033.png" alt="img"></p><p>案例：要删除一个目录下有公共特性的文档，例如都以Linux开头</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image035.jpg" alt="img"></p><p>其中*<strong>称之为通配符，意思表示任意的字符，Linux*，则表示只要文件以Linux开头，后续字符则不管</strong>。</p><h2 id="9、vim指令"><a href="#9、vim指令" class="headerlink" title="9、vim指令"></a>9、vim指令</h2><p>指令：vim  （vim是一款文本编辑器）</p><p>语法：**#vim** <strong>文件的路径</strong></p><p>作用：打开一个文件（可以不存在，也可以存在）</p><p>案例：使用vim来打开文件</p><p>退出打开的文件：在没有按下其他命令的时候，按下shift+英文冒号，输入q，按下回车即可</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image0036.jpg" alt="img"></p><h2 id="10、输出重定向"><a href="#10、输出重定向" class="headerlink" title="10、输出重定向"></a>10、输出重定向</h2><p><strong>一般命令的输出都会显示在终端中，有些时候需要将一些命令的执行结果想要保存到文件中进行后续的分析/统计，则这时候需要使用到的输出重定向技术。</strong></p><p>&gt;：覆盖输出，会覆盖掉原先的文件内容</p><p>&gt;&gt;：追加输出，不会覆盖原始文件内容，会在原始内容末尾继续添加</p><p><strong>语法：#正常执行的指令 &gt; / &gt;&gt;</strong> <strong>文件的路径</strong></p><p>注意：文件可以不存在，不存在则新建</p><p>案例：使用覆盖重定向，保存ls -la 的执行结果，保存到当前目录下的ls.txt</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image0037.png" alt="img"></p><p>案例：使用追加重定向，保存ls -la的执行结果到ls.txt中</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image038.png" alt="img"></p><h2 id="11、cat指令"><a href="#11、cat指令" class="headerlink" title="11、cat指令"></a>11、cat指令</h2><p><strong>作用1：cat有直接打开一个文件的功能。</strong></p><p><strong>语法1：#cat</strong> <strong>文件的路径</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image039.png" alt="img"></p><p><strong>作用2：cat还可以对文件进行合并</strong></p><p><strong>语法2：#cat</strong> <strong>待合并的文件路径1</strong> <strong>待合并的文件路径2 ….</strong> <strong>文件路径n &gt;</strong> <strong>合并之后的文件路径</strong></p><p>例如，合并3个文件，并存到一个文件中【配合输出重定向使用】</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image041.jpg" alt="img"></p><h1 id="三、进阶指令（重点）"><a href="#三、进阶指令（重点）" class="headerlink" title="三、进阶指令（重点）"></a>三、进阶指令（重点）</h1><h2 id="1、df指令"><a href="#1、df指令" class="headerlink" title="1、df指令"></a>1、df指令</h2><p>作用：查看磁盘的空间</p><p><strong>语法：#df -h      -h表示以可读性较高的形式展示大小</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/20220426150013.png" alt="img"></p><h2 id="2、free指令"><a href="#2、free指令" class="headerlink" title="2、free指令"></a>2、free指令</h2><p>作用：查看内存使用情况</p><p><strong>语法：#free -m  -m表示以mb为单位查看</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image045.jpg" alt="img"></p><p>剩余的真实可以用的内存为1665mb。</p><p>Swap：用于临时内存，当系统真实内存不够用的时候可以临时使用磁盘空间来充当内存。</p><h2 id="3、head指令"><a href="#3、head指令" class="headerlink" title="3、head指令"></a>3、head指令</h2><p>作用：查看一个文件的前n行，如果不指定n，则默认显示前10行。</p><p><strong>语法：#head -n</strong> <strong>文件路径</strong>  <strong>【n表示数字】</strong></p><p><img src="C:/Users/13993/AppData/Local/Temp/msohtmlclip1/01/clip_image047.jpg" alt="img"></p><h2 id="4、tail指令"><a href="#4、tail指令" class="headerlink" title="4、tail指令"></a>4、tail指令</h2><p>作用1：查看一个文件的未n行，如果n不指定默认显示后10行</p><p><strong>语法：#tail -n</strong> <strong>文件的路径   n同样表示数字</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/QQ%E5%9B%BE%E7%89%8720220426150122.png" alt="img"></p><p>作用2：可以通过tail指令来查看一个文件的动态变化内容【<strong>变化的内容不能是用户手动增加的</strong>】</p><p><strong>语法：#tail -f</strong> <strong>文件路径</strong></p><p><strong>该命令一般用于查看系统的日志比较多。</strong></p><h2 id="5、less指令"><a href="#5、less指令" class="headerlink" title="5、less指令"></a>5、less指令</h2><p>作用：查看文件，以较少的内容进行输出，按下辅助功能键（数字+回车、<strong>空格键</strong>+上下方向键）查看更多</p><p><strong>语法：#less</strong> <strong>需要查看的文件路径</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image050.jpg" alt="img"></p><p>在退出的只需要按下q键即可。</p><h2 id="6、wc指令"><a href="#6、wc指令" class="headerlink" title="6、wc指令"></a>6、wc指令</h2><p>作用：统计文件内容信息（包含行数、单词数、字节数）</p><p>语法：**#wc -lwc** <strong>需要统计的文件路径</strong></p><p>​    <strong>-l：表示lines，行数</strong></p><p>​    -w：表示words，单词数  依照空格来判断单词数量</p><p>​    -c：表示bytes，字节数</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/QQ%E5%9B%BE%E7%89%8720220426150201.png" alt="img"></p><h2 id="7、date指令（重点）"><a href="#7、date指令（重点）" class="headerlink" title="7、date指令（重点）"></a>7、date指令（重点）</h2><p>作用：表示操作时间日期（<strong>读取</strong>、设置）</p><p>语法1：#date             输出的形式：2018年 3月 24日 星期六 15:54:28</p><p>语法2：**#date  +%F**   <strong>（等价于#date  “+%Y-%m-%d”</strong> <strong>）</strong>   输出形式：2018-03-24</p><p>语法3：#date “+%F %T”  引号表示让“年月日与时分秒”成为一个不可分割的整体</p><p>​    <strong>等价操作#date “+%Y-%m-%d %H:%M:%S”</strong></p><p>输出的形式：2018-03-24 16:01:00</p><p>语法4：获取之前或者之后的某个时间（备份）</p><p>#date -d  “**-**1 <strong>day</strong>” “+%Y-%m-%d %H:%M:%S”</p><p>符号的可选值：+（之后） 或者 - （之前）</p><p>单位的可选值：day（天）、month（月份）、year（年）</p><p>%F：表示完整的年月日</p><p>%T：表示完整的时分秒</p><p>%Y：表示四位年份</p><p>%m：表示两位月份（带前导0）</p><p>%d：表示日期（带前导0）</p><p>%H：表示小时（带前导0）</p><p>%M：表示分钟（带前导0）</p><p>%S：表示秒数（带前导0）</p><h2 id="8、cal指令"><a href="#8、cal指令" class="headerlink" title="8、cal指令"></a>8、cal指令</h2><p><strong>作用：用来操作日历的</strong></p><p><strong>语法1：#cal 等价于 #cal -1</strong>    直接输出当前月份的日历</p><p><strong>语法2：#cal -3</strong>          表示输出上一个月+本月+下个月的日历</p><p><strong>语法3：#cal -y</strong> <strong>年份</strong>         表示输出某一个年份的日历</p><h2 id="9、clear-x2F-ctrl-L指令"><a href="#9、clear-x2F-ctrl-L指令" class="headerlink" title="9、clear/ctrl + L指令"></a>9、clear/ctrl + L指令</h2><p>作用：清除终端中已经存在的命令和结果（信息）。</p><p><strong>语法：clear</strong>      <strong>或者快捷键：ctrl + L</strong></p><p>需要注意的是，该命令并不是真的清除了之前的信息，而是把之前的信息的隐藏到了最上面，通过滚动条继续查看以前的信息。</p><h2 id="10、管道（重要）"><a href="#10、管道（重要）" class="headerlink" title="10、管道（重要）"></a>10、管道（重要）</h2><p><strong>管道符：|</strong></p><p>作用：管道一般可以用于“<strong>过滤</strong>”，“特殊”，“扩展处理”。</p><p>语法：管道不能单独使用，必须需要配合前面所讲的一些指令来一起使用，其作用<strong>主要是辅助作用</strong>。</p><p><strong>①过滤案例（100%使用</strong>）：需要通过管道查询出根目录下包含“y”字母的文档名称。</p><p>#ls / | grep y</p><p>针对上面这个命令说明：</p><p>①以管道作为分界线，前面的命令有个输出，后面需要先输入，然后再过滤，最后再输出，通俗的讲就是管道前面的输出就是后面指令的输入；</p><p>②grep指令：主要用于过滤</p><p>②特殊用法案例：通过管道的操作方法来实现less的等价效果（了解）</p><p>之前通过less查看一个文件，可以#less 路径</p><p>现在通过管道还可以这么：#cat 路径|less</p><p>③扩展处理：请使用学过的命令，来统计某个目录下的文档的总个数？</p><p><strong>答：#ls / | wc -l</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux的基本指令&quot;&gt;&lt;a href=&quot;#Linux的基本指令&quot; class=&quot;headerlink&quot; title=&quot;Linux的基本指令&quot;&gt;&lt;/a&gt;Linux的基本指令&lt;/h1&gt;&lt;h1 id=&quot;一、指令与选项&quot;&gt;&lt;a href=&quot;#一、指令与选项&quot; class</summary>
      
    
    
    
    <category term="操作系统学习" scheme="https://roranrui.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="操作系统" scheme="https://roranrui.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Linux" scheme="https://roranrui.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>一.Linux介绍</title>
    <link href="https://roranrui.cn/2022/04/26/yi.linux-jie-shao/"/>
    <id>https://roranrui.cn/2022/04/26/yi.linux-jie-shao/</id>
    <published>2022-04-26T07:29:30.000Z</published>
    <updated>2022-04-26T07:36:10.953Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Linux发展史"><a href="#一、Linux发展史" class="headerlink" title="一、Linux发展史"></a>一、Linux发展史</h1><h2 id="1、Linux前身-Unix"><a href="#1、Linux前身-Unix" class="headerlink" title="1、Linux前身-Unix"></a>1、Linux前身-Unix</h2><p>1968年 Multics项目</p><p><strong>MIT</strong>、<strong>Bell</strong>实验室、<strong>美国通用电气有限公司</strong>走到了一起，致力于开发Multics项目。到后期由于开发进度不是很好，MIT和Bell实验室相继离开这个项目的开发，最终导致项目搁浅。</p><p><strong>1970年（Unix元年，时间戳）</strong> Unix诞生</p><p>当时在开发Multics项目的时候，实验室中有一个开发成员开发了一款游戏（travel space：遨游太空），因为两个实验室相继离开项目开发，导致这名开发人员没法玩游戏，后来他提议组织人员重新在Multics项目之上重新的开发，也就出现了1970年的Unix。当时Unix操作系统是使用的<strong>汇编语言（机器语言）</strong>开发的。</p><p>1973年 用<strong>C</strong>语言**重写Unix</p><p>因为汇编语言有一个最大的局限性：对于计算机硬件过于依赖。导致移植性不好，所以后期在1973年使用了C语言对其进行重新开发。</p><p>1975年 Bell实验室允许大学使用Unix。</p><p>1975年，bell实验室允许大学使用Unix操作系统用于教学作用，而不允许用于商业用途。</p><h2 id="2、Linux诞生"><a href="#2、Linux诞生" class="headerlink" title="2、Linux诞生"></a>2、Linux诞生</h2><p>人物 Linus</p><p>Linux的开发作者，Linux之父，李纳斯·托瓦兹。Linux诞生时是荷兰在校大学生。</p><p>Linux的开发作者，Linux之父，李纳斯·托瓦兹。Linux诞生时是荷兰在校大学生。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/e21312321%20.png" alt="img"></p><p>1991年 0.0.1版本</p><p>​李纳斯当时学校使用的就是Unix操作系统，然后其对系统的底层代码进行了修改，放到了学校为学生开放的网站上，原先他把文件命名写成了Linus’s Unix，后期网络管理发现之后觉得这个名字不好，自己手动的将名字改成Linux。随后其他同学下载之后发现这个版本还是挺好用的，随后都把自己代码贡献给李纳斯。</p><p>1992年 0.0.2版本</p><p>1994年 1.0版本</p><p>2003年 2.6版本</p><p><strong>上述所提及的版本号并不是分支版本，而是指Linux的内核版本。</strong></p><h2 id="3、开源文化"><a href="#3、开源文化" class="headerlink" title="3、开源文化"></a>3、开源文化</h2><p>Linux是<strong>开源</strong>的操作系统。所谓开源就是指开放源代码。</p><p>人 物 Stallman 斯特曼，开源文化的倡导人。</p><p><strong>1983<strong><strong>年 GNU</strong></strong>计划</strong></p><p>1985年 FSF基金会</p><p>1990年 Emacs、<strong>GCC</strong>（c语言的编译器）、程序库 </p><p>1991年   Stallman去找Linus，商谈让Linux加入其开源计划（GNU计划）</p><p>1992年 GNU/Linux</p><h2 id="4、Linux系统特点"><a href="#4、Linux系统特点" class="headerlink" title="4、Linux系统特点"></a>4、Linux系统特点</h2><p>开放性（开源）、多用户、多任务、良好的用户界面、优异的性能与稳定性</p><p>多用户多任务：</p><p>单用户：一个用户，在登录计算机（操作系统），只能允许<strong>同时</strong>登录一个用户；</p><p>单任务：一个任务，允许用户<strong>同时</strong>进行的操作任务数量；</p><p>多用户：多个用户，在登录计算机（操作系统），允许<strong>同时</strong>登录多个用户进行操作；</p><p>多任务：多个任务，允许用户<strong>同时</strong>进行多个操作任务；</p><p><strong>Windows属于：单用户、多任务。</strong></p><p><strong>Linux属于：多用户、多任务。</strong></p><h2 id="5、Linux分支"><a href="#5、Linux分支" class="headerlink" title="5、Linux分支"></a>5、Linux分支</h2><p>分支：Linux分支有很多，现在比较有名的<strong>ubuntu</strong>、debian、<strong>centos</strong>（Community Enterprise Operating System）、redhat、suse等等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、Linux发展史&quot;&gt;&lt;a href=&quot;#一、Linux发展史&quot; class=&quot;headerlink&quot; title=&quot;一、Linux发展史&quot;&gt;&lt;/a&gt;一、Linux发展史&lt;/h1&gt;&lt;h2 id=&quot;1、Linux前身-Unix&quot;&gt;&lt;a href=&quot;#1、Linux</summary>
      
    
    
    
    <category term="操作系统学习" scheme="https://roranrui.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="操作系统" scheme="https://roranrui.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Linux" scheme="https://roranrui.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>第三天_字符串（简单)</title>
    <link href="https://roranrui.cn/2022/04/26/shua-ti-bi-ji-san/"/>
    <id>https://roranrui.cn/2022/04/26/shua-ti-bi-ji-san/</id>
    <published>2022-04-26T04:27:52.000Z</published>
    <updated>2022-04-26T04:49:32.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三天-字符串（简单"><a href="#第三天-字符串（简单" class="headerlink" title="第三天_字符串（简单)"></a>第三天_字符串（简单)</h1><h2 id="一-知识学习"><a href="#一-知识学习" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><blockquote><p>  字符串就是由字符组成的数组</p></blockquote><blockquote><p>  <strong>本质：</strong></p><ul><li>string是C++风格的字符串，而string本质上是一个类</li></ul><p>  <strong>string和char * 区别：</strong></p><ul><li>char * 是一个指针</li><li>string是一个类，类内部封装了char<em>，管理这个字符串，是一个char</em>型的容器。</li></ul></blockquote><hr><h2 id="二-题目练习"><a href="#二-题目练习" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-替换空格"><a href="#1-替换空格" class="headerlink" title="1. 替换空格"></a>1. 替换空格</h3><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426123725224.png" alt="image-20220426123725224"></p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">replaceSpace</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        string res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                res <span class="token operator">+</span><span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                res <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"%20"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426123828786.png" alt="image-20220426123828786"></p><hr><h3 id="2-左旋转字符串"><a href="#2-左旋转字符串" class="headerlink" title="2. 左旋转字符串"></a>2. 左旋转字符串</h3><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426123856996.png" alt="image-20220426123856996"></p><p><strong>解题思路:</strong></p><p>读取字符串到指定位数, 然后存储, 删除从0到指定位数的字符, 再将存储的字符串加到原字符串末尾.</p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        string temp<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            temp <span class="token operator">+</span><span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        s <span class="token operator">+</span><span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426124351559.png" alt="image-20220426124351559"></p><p><strong>执行用时为 0 ms 的范例:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  reverse(first, end)函数，包含在#include&lt;**algorithm**&gt;里，<a href="https://so.csdn.net/so/search?q=%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4&amp;spm=1001.2101.3001.7020">命名空间</a>std, 可以反转顺序</p></blockquote><p>使用三次<code>reverse()函数</code>, </p><ul><li><p>第一次反转从开始到指定位数的字符, 如: in: <code>abcde, 2</code></p><p>out :<strong>bacde</strong>;</p></li><li><p>第二次反转指定位数后面的字符, out: <strong>baedc</strong></p></li><li><p>第三次再反转整个字符串, 从而达到目的</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第三天-字符串（简单&quot;&gt;&lt;a href=&quot;#第三天-字符串（简单&quot; class=&quot;headerlink&quot; title=&quot;第三天_字符串（简单)&quot;&gt;&lt;/a&gt;第三天_字符串（简单)&lt;/h1&gt;&lt;h2 id=&quot;一-知识学习&quot;&gt;&lt;a href=&quot;#一-知识学习&quot; class</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://roranrui.cn/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
    <category term="Programming" scheme="https://roranrui.cn/tags/Programming/"/>
    
    <category term="算法" scheme="https://roranrui.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>WINDOWS美化教程</title>
    <link href="https://roranrui.cn/2022/04/26/windows-mei-hua-jiao-cheng/"/>
    <id>https://roranrui.cn/2022/04/26/windows-mei-hua-jiao-cheng/</id>
    <published>2022-04-26T01:21:30.000Z</published>
    <updated>2022-04-26T05:21:54.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于WINDOWS10的系统美化分享"><a href="#基于WINDOWS10的系统美化分享" class="headerlink" title="基于WINDOWS10的系统美化分享"></a>基于WINDOWS10的系统美化分享</h1><h2 id="一-我的桌面展示"><a href="#一-我的桌面展示" class="headerlink" title="一. 我的桌面展示"></a>一. 我的桌面展示</h2><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426125705590.png" alt="桌面"></p><blockquote><p>  个人认为桌面就是要干净整洁, 能不放东西就不放</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426130132949.png" alt="资源管理器"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426130253328.png" alt="开始菜单"></p><h2 id="二-美化软件推荐"><a href="#二-美化软件推荐" class="headerlink" title="二. 美化软件推荐"></a>二. 美化软件推荐</h2><h3 id="Wallpaper-Engine-位于steam平台"><a href="#Wallpaper-Engine-位于steam平台" class="headerlink" title="Wallpaper Engine: 位于steam平台"></a><code>Wallpaper Engine</code>: 位于steam平台</h3><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426130422362.png" alt="image-20220426130422362"></p><p>庞大的创意工坊, 丰富的动态壁纸, 可以极大提示你的桌面观感</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426130510251.png" alt="image-20220426130510251"></p><hr><h3 id="Rainmeter"><a href="#Rainmeter" class="headerlink" title="Rainmeter"></a>Rainmeter</h3><blockquote><p>  雨滴皮肤（Rainmeter皮肤），是一些有特定功能的Windows桌面小工具。一些复杂的皮肤则看起来像是小型应用程序，风格相近的皮肤则可以组成一个套装或者主题。任何一个雨滴皮肤在不同电脑上工作都是不完全相同的，这取决于使用者对它的调整和修饰。</p></blockquote><p><a href="https://zhutix.com/tag/rainmeter/page/2">雨滴软件下载, 皮肤下载</a></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426130709344.png" alt="image-20220426130709344"></p><h3 id="RocketDock"><a href="#RocketDock" class="headerlink" title="RocketDock"></a>RocketDock</h3><blockquote><p>  官方介绍: Our super-cool dock for Windows. It’s a bit outdated, but people still love it.</p></blockquote><p><a href="https://punklabs.com/">官网地址</a></p><p>类似于<code>Mac OS</code>的dock栏, 对于桌面整洁很有效</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426131023496.png" alt="image-20220426131023496"></p><hr><h3 id="StartlsBack"><a href="#StartlsBack" class="headerlink" title="StartlsBack"></a>StartlsBack</h3><blockquote><p>  可以自定义开始菜单, 任务栏透明, 开始按钮</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426131128255.png" alt="image-20220426131128255"></p><hr><h2 id="三-系统个性化美化"><a href="#三-系统个性化美化" class="headerlink" title="三. 系统个性化美化"></a>三. 系统个性化美化</h2><h3 id="鼠标指针"><a href="#鼠标指针" class="headerlink" title="鼠标指针"></a>鼠标指针</h3><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426131645462.png" alt="image-20220426131645462"></p><blockquote><p>  比原版好看太多还简洁</p></blockquote><p><a href="https://zhutix.com/ico/material-design-cursor-v2/">下载地址</a></p><hr><h3 id="主题修改"><a href="#主题修改" class="headerlink" title="主题修改"></a>主题修改</h3><p><a href="https://zhutix.com/tag/win10-zhuti/">资源网站推荐_致美化</a></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426131959489.png" alt="image-20220426131959489"></p><blockquote><p>  教程此网站已经很详细了</p></blockquote><hr><p>至此, 个人认为美化教程已经足够了, 下期带来<code>win10</code>好用的工具分享</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基于WINDOWS10的系统美化分享&quot;&gt;&lt;a href=&quot;#基于WINDOWS10的系统美化分享&quot; class=&quot;headerlink&quot; title=&quot;基于WINDOWS10的系统美化分享&quot;&gt;&lt;/a&gt;基于WINDOWS10的系统美化分享&lt;/h1&gt;&lt;h2 id=&quot;一</summary>
      
    
    
    
    <category term="美化教程" scheme="https://roranrui.cn/categories/%E7%BE%8E%E5%8C%96%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="桌面美化" scheme="https://roranrui.cn/tags/%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96/"/>
    
    <category term="经验分享" scheme="https://roranrui.cn/tags/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>第二天_链表(简单)</title>
    <link href="https://roranrui.cn/2022/04/25/shua-ti-bi-ji-er/"/>
    <id>https://roranrui.cn/2022/04/25/shua-ti-bi-ji-er/</id>
    <published>2022-04-25T00:18:53.000Z</published>
    <updated>2022-04-25T08:25:48.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二天-链表-简单"><a href="#第二天-链表-简单" class="headerlink" title="第二天_链表(简单)"></a>第二天_链表(简单)</h1><blockquote><p>  刷题日程指引: <a href="https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/px2ds5/">行百里者半九十。坚持一个月刷完，一起加油！</a></p></blockquote><h2 id="一-知识学习"><a href="#一-知识学习" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><blockquote><p>  链表以节点为单位，每个元素都是一个独立对象，在内存空间的存储是非连续的。链表的节点对象具有两个成员变量：「值 <code>val</code>」，「后继节点引用 <code>next</code>」 。</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> ListNode <span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 节点值</span>    ListNode <span class="token operator">*</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 后继节点引用</span>    <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">val</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图所示，建立此链表需要实例化每个节点，并构建各节点的引用指向。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 实例化节点</span>ListNode <span class="token operator">*</span>n1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 节点 head</span>ListNode <span class="token operator">*</span>n2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ListNode <span class="token operator">*</span>n3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 构建引用指向</span>n1<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> n2<span class="token punctuation">;</span>n2<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> n3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/1599578767-zgLjYw-Picture3.png" alt="Picture3.png"></p><hr><h2 id="二-题目练习"><a href="#二-题目练习" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-从尾到头打印链表"><a href="#1-从尾到头打印链表" class="headerlink" title="1. 从尾到头打印链表"></a>1. 从尾到头打印链表</h3><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220425082308455.png" alt="image-20220425082308455" style="zoom:150%;"><p>**解题思路: **</p><blockquote><p>  题目要求逆序输出, 满足栈的先进后出特性, 可以用栈来模拟输出</p></blockquote><p>实现</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">reversePrint</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>           stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> output<span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            output<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>output<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            output<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220425093925129.png" alt="image-20220425093925129"></p><blockquote><p>  本题用栈模拟已是优解</p></blockquote><hr><h3 id="2-反转链表"><a href="#2-反转链表" class="headerlink" title="2. 反转链表"></a>2. 反转链表</h3><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220425085321953.png" alt="image-20220425085321953" style="zoom:150%;"><p><strong>解题思路:</strong></p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/20200510214622321.gif" alt="在这里插入图片描述" style="zoom:150%;"><p>用一个 <code>pre</code> 指针和一个 <code>cur</code> 指针，顾名思义，<code>curr</code> 从头开始，指向每个当前的结点，<code>pre</code> 就是 <code>cur</code> 的前一个结点。所谓反转，就是要让每个结点指向其前一个结点。每次移动，我们用 <code>cur</code> 记录当下的<code>node</code>，用 <code>pre</code> 记录前一个<code>node</code>，然后让 <code>cur.next = pre</code></p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode<span class="token operator">*</span> curr <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> pre <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>curr <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ListNode<span class="token operator">*</span> temp <span class="token operator">=</span>  curr<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 记录下一位</span>            <span class="token comment" spellcheck="true">// 反转</span>            curr<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 后移</span>            pre <span class="token operator">=</span> curr<span class="token punctuation">;</span>            curr <span class="token operator">=</span> temp<span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220425093805387.png" alt="image-20220425093805387"></p><p>还有最普通的栈方式:</p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/20200510214932541.gif" alt="栈实现" style="zoom:150%;"><pre class="line-numbers language-cpp"><code class="language-cpp"> <span class="token keyword">public</span> ListNode <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>       Stack<span class="token operator">&lt;</span>ListNode<span class="token operator">></span> stack <span class="token operator">=</span>  <span class="token keyword">new</span> Stack<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ListNode temp <span class="token operator">=</span> node<span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ListNode head <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ListNode temp1 <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ListNode temp2 <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp1<span class="token punctuation">.</span>next <span class="token operator">=</span> temp2<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>temp2 <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp2<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  思想其实就是利用栈先进后出的原理，把这些node逆序排起来，然后一个一个拿出来，连起来，</p></blockquote><hr><h3 id="3-复杂链表的复制"><a href="#3-复杂链表的复制" class="headerlink" title="3. 复杂链表的复制"></a>3. 复杂链表的复制</h3><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220425091240411.png" alt="image-20220425091240411"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220425091252478.png" alt="image-20220425091252478"></p><p><strong>解题思路:</strong></p><blockquote><p>  第一步：创建新链表时，将原链表的每一个节点复制，并连接在原节点的后面，相当于在原链表的每一个节点后面插入一个val值相等的新节点。</p><p>  以例一为例：</p>  <img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/20210321153137291.png" alt="第一次复制过的链表" style="zoom:150%;"><p>  第二步：通过原链表的<code>random</code>找到新链表的<code>random</code>。新复制的节点的<code>random</code>由原节点的<code>random</code>决定，如果原节点的<code>random == NULL</code>，则新节点的<code>random == NULL</code>，否则，由于新节点还在原链表中，所以新节点的<code>random =</code> 原节点的<code>random-&gt;next</code>。</p><p>  第三步：把新节点从原链表中分离出，返回新链表。</p></blockquote><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*// Definition for a Node.class Node {public:    int val;    Node* next;    Node* random;        Node(int _val) {        val = _val;        next = NULL;        random = NULL;    }};*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    Node<span class="token operator">*</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node<span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 拷贝原链表每一个节点并将新节点链到原节点后面</span>        <span class="token punctuation">{</span>            Node <span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            newNode<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            cur<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            cur <span class="token operator">=</span> newNode<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 通过原节点为新节点的random域赋值</span>        <span class="token punctuation">{</span>            Node <span class="token operator">*</span> newcur <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>random <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                newcur<span class="token operator">-</span><span class="token operator">></span>random <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                newcur<span class="token operator">-</span><span class="token operator">></span>random <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>random<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cur <span class="token operator">=</span> newcur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        Node<span class="token operator">*</span> newList <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 将新链表从原链表中分离出来</span>        <span class="token punctuation">{</span>            Node <span class="token operator">*</span> newcur <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            cur<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> newcur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                newcur<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                newcur<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> newList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220425093943577.png" alt="image-20220425093943577"></p><p>执行用时为 8 ms 的范例:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*// Definition for a Node.class Node {public:    int val;    Node* next;    Node* random;        Node(int _val) {        val = _val;        next = NULL;        random = NULL;    }};*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    Node<span class="token operator">*</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span> node <span class="token operator">=</span> head<span class="token punctuation">;</span> node <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> node <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">*</span> nodeNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            nodeNew<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            node<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> nodeNew<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span> node <span class="token operator">=</span> head<span class="token punctuation">;</span> node <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> node <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">*</span> nodeNew <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            nodeNew<span class="token operator">-</span><span class="token operator">></span>random <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>random <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">?</span> node<span class="token operator">-</span><span class="token operator">></span>random<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">:</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node<span class="token operator">*</span> headNew <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span> node <span class="token operator">=</span> head<span class="token punctuation">;</span> node <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> node <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">*</span> nodeNew <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            node<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            nodeNew<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token punctuation">(</span>nodeNew<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">?</span> nodeNew<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">:</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> headNew<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  使用for循环 + 三目运算符, 思想基本一样</p></blockquote><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第二天-链表-简单&quot;&gt;&lt;a href=&quot;#第二天-链表-简单&quot; class=&quot;headerlink&quot; title=&quot;第二天_链表(简单)&quot;&gt;&lt;/a&gt;第二天_链表(简单)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;  刷题日程指引: &lt;a href=&quot;https://</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://roranrui.cn/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
    <category term="Programming" scheme="https://roranrui.cn/tags/Programming/"/>
    
    <category term="算法" scheme="https://roranrui.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>第一天_栈与队列（简单）</title>
    <link href="https://roranrui.cn/2022/04/24/shua-ti-bi-ji-yi/"/>
    <id>https://roranrui.cn/2022/04/24/shua-ti-bi-ji-yi/</id>
    <published>2022-04-24T12:42:11.000Z</published>
    <updated>2022-04-25T01:10:05.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一天-栈与队列（简单）"><a href="#第一天-栈与队列（简单）" class="headerlink" title="第一天_栈与队列（简单）"></a>第一天_栈与队列（简单）</h1><blockquote><p>  刷题日程指引: <a href="https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/px2ds5/">行百里者半九十。坚持一个月刷完，一起加油！</a></p></blockquote><h2 id="一-知识学习"><a href="#一-知识学习" class="headerlink" title="一.知识学习"></a>一.知识学习</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><blockquote><p>  栈是一种具有 「先入后出」 特点的抽象数据结构，可使用数组或链表实现。</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp">stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stk<span class="token punctuation">;</span>stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 元素 1 入栈</span>stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 元素 2 入栈</span>stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 出栈 -> 元素 2</span>stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 出栈 -> 元素 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图所示，通过常用操作「入栈 <code>push()</code>」,「出栈 <code>pop()</code>」，展示了栈的先入后出特性。</p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/1599578767-ZifMEX-Picture4.png" alt="Picture4.png" style="zoom:150%;"><hr><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><blockquote><p>  队列是一种具有 「先入先出」 特点的抽象数据结构，可使用链表实现。</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp">queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> que<span class="token punctuation">;</span>que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 元素 1 入队</span>que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 元素 2 入队</span>que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 出队 -> 元素 1</span>que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 出队 -> 元素 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/1599588416-Majmwh-Picture5.png" alt="Picture5.png" style="zoom:150%;"><hr><h2 id="二-题目练习"><a href="#二-题目练习" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-用两个栈实现队列"><a href="#1-用两个栈实现队列" class="headerlink" title="1. 用两个栈实现队列"></a>1. 用两个栈实现队列</h3><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220424211735242.png" alt="image-20220424211735242"></p><p><strong>解决方案：</strong></p><ul><li>栈的特点是先进后出，队列的特点是先进先出，这里我们可以使用两个栈（栈A和栈B）模拟队列，具体如下：</li><li>初始时，栈A和栈B都为空，当需要压入元素时，全部压入栈A；当想要元素出栈时，将栈A中的元素依次出栈并压入栈B；例如：我们将元素a，b，c依次压入栈A，要出栈时，将栈A元素出栈并压入栈B，则栈B中的元素为c,b,a；这时再进行出栈，元素为a，符合队列先进先出的特点；<img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/20200819084611888.png" alt="用两个栈实现队列" style="zoom:150%;"></li></ul><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CQueue</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> A<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> B<span class="token punctuation">;</span>    <span class="token function">CQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">appendTail</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        A<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">deleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>A<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 将栈A中的值逆序保存到B</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            A<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            B<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        B<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>B<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 又将B中的值逆序送回A(这样一来就满足先进先出)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            B<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            A<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Your CQueue object will be instantiated and called as such: * CQueue* obj = new CQueue(); * obj->appendTail(value); * int param_2 = obj->deleteHead(); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220424213830541.png" alt="image-20220424213830541"></p><p>执行用时为 252 ms 的范例:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CQueue</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st1<span class="token punctuation">,</span> st2<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">CQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">appendTail</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        st1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">deleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>st1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> st2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>st2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>st1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                st2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>st1<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                st1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> st2<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  只用了一次循环, 耗时少了近180毫秒</p></blockquote><hr><h3 id="2-包含-min-函数的栈"><a href="#2-包含-min-函数的栈" class="headerlink" title="2. 包含 min 函数的栈"></a>2. 包含 min 函数的栈</h3><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220424214313949.png" alt="image-20220424214313949" style="zoom:150%;"><p><strong>解题思路</strong>:</p><blockquote><p>  使用两个stack，一个为数据栈，另一个为辅助栈。数据栈用于存储所有数据，辅助栈用于存储最小值。</p><p>  普通栈的 push() 和 pop() 函数的复杂度为 O(1) ；而获取栈最小值 min() 函数需要遍历整个栈，复杂度为 O(N) 。</p><p>  本题难点： 将 min() 函数复杂度降为 O(1)O(1) ，可通过建立辅助栈实现；</p></blockquote><ul><li>数据栈 A ： 栈 A 用于存储所有元素，保证入栈 push() 函数、出栈 pop() 函数、获取栈顶 top() 函数的正常逻辑。</li><li>辅助栈 B ： 栈 B中存储栈 A 中所有 非严格降序 的元素，则栈 A 中的最小元素始终对应栈 B 的栈顶元素，即 min() 函数只需返回栈 B 的栈顶元素即可。</li><li>因此，只需设法维护好 栈 B 的元素，使其保持非严格降序，即可实现 min() 函数的 O(1)复杂度。</li></ul><ol><li><p>push()–入栈的时候：首先将数值x压入数据栈A中，若辅助栈B为空或者辅助栈B的栈顶元素大于等于数值x时，则将数值x压入辅助栈中。</p></li><li><p>pop()—出栈的时候：当数据栈A和辅助栈的栈顶元素相同的时候，辅助栈的栈顶元素出栈。否则，数据栈的栈顶元素出栈。</p></li><li><p>top()函数–获得栈顶元素的时候：直接返回数据栈A的栈顶元素。</p></li><li><p>min()函数—栈最小元素：直接返回辅助栈B的栈顶元素。</p></li></ol><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> main<span class="token punctuation">,</span> help<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/** initialize your data structure here. */</span>    <span class="token function">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>help<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> help<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> x<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            help<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        main<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> help<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            help<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        main<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> main<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> help<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Your MinStack object will be instantiated and called as such: * MinStack* obj = new MinStack(); * obj->push(x); * obj->pop(); * int param_3 = obj->top(); * int param_4 = obj->min(); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220424220317281.png" alt="image-20220424220317281"></p><p>执行用时为 12 ms 的范例:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/** initialize your data structure here. */</span>    <span class="token function">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        m_min<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>            <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        m_data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> m_min<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            m_min<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            m_min<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>m_min<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               m_min<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_data<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>  m_data<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> m_min<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> m_data<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> m_min<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Your MinStack object will be instantiated and called as such: * MinStack* obj = new MinStack(); * obj->push(x); * obj->pop(); * int param_3 = obj->top(); * int param_4 = obj->min(); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  pop()时, 没有比较, 而是将两个栈的top()元素一起出栈了</p></blockquote><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一天-栈与队列（简单）&quot;&gt;&lt;a href=&quot;#第一天-栈与队列（简单）&quot; class=&quot;headerlink&quot; title=&quot;第一天_栈与队列（简单）&quot;&gt;&lt;/a&gt;第一天_栈与队列（简单）&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;  刷题日程指引: &lt;a href</summary>
      
    
    
    
    <category term="刷题笔记" scheme="https://roranrui.cn/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
    <category term="Programming" scheme="https://roranrui.cn/tags/Programming/"/>
    
    <category term="算法" scheme="https://roranrui.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>51单片机学习（二）</title>
    <link href="https://roranrui.cn/2022/04/23/51-dan-pian-ji-xue-xi-er/"/>
    <id>https://roranrui.cn/2022/04/23/51-dan-pian-ji-xue-xi-er/</id>
    <published>2022-04-23T12:55:22.000Z</published>
    <updated>2022-04-23T13:32:42.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="51单片机学习笔记-二"><a href="#51单片机学习笔记-二" class="headerlink" title="51单片机学习笔记(二)"></a>51单片机学习笔记(二)</h1><h2 id="一-数码管"><a href="#一-数码管" class="headerlink" title="一.  数码管"></a>一.  数码管</h2><h3 id="1-数码管介绍"><a href="#1-数码管介绍" class="headerlink" title="1. 数码管介绍"></a>1. 数码管介绍</h3><blockquote><p>led数码管（LED Segment Displays）由多个发光二极管封装在一起组成“8”字型的器件，引线已在内部连接完成，只需引出它们的各个笔划，公共电极。数码管实际上是由七个发光管组成8字形构成的，加上小数点就是8个。这些段分别由字母a,b,c,d,e,f,g,dp来表示。<br>LED数码管根据LED的不同接法可以分为2类：共阴和共阳。</p></blockquote><p><strong>封装</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/20171224212348497" alt="数码管"></p><p>控制哪个数码管亮:  </p><blockquote><p>按CBA排列, 对<code>P2_4</code> <code>P2_3</code> <code>P2_2</code>分别给不同的电平, 可转换成10进制控制右边<code>Y0~Y7</code>的LED引脚</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220423205957947.png" alt="138译码器"></p><p>按图中顺序给读取所给8位控制哪部分亮的二进制数, 转换成16进制即可</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220423210555254.png" alt="数码管"></p><h3 id="2-静态显示数码管"><a href="#2-静态显示数码管" class="headerlink" title="2. 静态显示数码管"></a>2. 静态显示数码管</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> NixieTable<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">,</span> <span class="token number">0X66</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0X6F</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Location<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>Location<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">8</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    P0 <span class="token operator">=</span> NixieTable<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-动态显示数码管"><a href="#3-动态显示数码管" class="headerlink" title="3. 动态显示数码管"></a>3. 动态显示数码管</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> NixieTable<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">,</span> <span class="token number">0X66</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0X6F</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Location<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>Location<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">8</span><span class="token punctuation">:</span>        <span class="token punctuation">{</span>            P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    P0 <span class="token operator">=</span> NixieTable<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 消影操作</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    P0 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-LCD1602"><a href="#二-LCD1602" class="headerlink" title="二. LCD1602"></a>二. LCD1602</h2><h2 id="三-矩阵键盘"><a href="#三-矩阵键盘" class="headerlink" title="三. 矩阵键盘"></a>三. 矩阵键盘</h2><h3 id="1-矩阵键盘介绍"><a href="#1-矩阵键盘介绍" class="headerlink" title="1. 矩阵键盘介绍"></a>1. 矩阵键盘介绍</h3><blockquote><p>矩阵键盘：在键盘中按键数量较多时，为了减少I/O口的占用，（通常）将按键排列成矩阵排列<br>的形式。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/5de4b608f50c477a81bd60c3c0ef65df.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/ab2bd830dc8f4cbb94be04a481f632de.png" alt="img"></p><p>16个按键用了8个I/O口</p><blockquote><p>【注：矩阵越多，I/O口占用的减少越明显。<br> 如：1080P有1920<em>1080 =2073600个像素，若让彩色显示器“完整”显示，需2073600</em>3=6220800个LED-单色灯（注：1个RGB-LED灯需3个发光源[红、绿、蓝]，这三原色组成一个像素）<br>故 每一个单独引线需6220800个I/O口，用矩阵方式，则需（1920+1080)*3=9000个LED-单色灯的I/O口。】</p></blockquote><ol><li><p>读出矩阵键盘任何位置按键的状态的方式：采用逐行或逐列的“扫描”。</p></li><li><p>扫描的概念（注：需占用单片机CPU的时间）：<br>①数码管扫描（输出扫描）<br>原理：显示第1位→显示第2位→显示第3位→……，然后快速循环这个过程，最终实现所有数码管“看似”同时显示的效果</p></li></ol><blockquote><p>【弊端：在同一时刻不能控制多位数码管显示】</p></blockquote><p>②矩阵键盘扫描（输入扫描）<br>原理：读取第1行(列)→读取第2行(列) →读取第3行(列) → ……，然后快速循环这个过程，最终实现所有按键同时检测的效果</p><ol start="3"><li>51单片机扫描原理线性化说明【注：此为粗糙式说明】：<br> ①I/O的工作模式是：准双向口配置（“弱上拉，强下拉”）。</li></ol><blockquote><p>【注：还有开漏输出、推挽输出、高阻输入模式】</p></blockquote><p>​当IO输出为高电平时，其驱动能力很弱，外部负载很容易将其拉至低电平。这样的设计有利于保护电路（“拉低比拉高更安全”）<br>（简化后电路原理： <img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/966d86fcc03642e0a8a9fd0fd5aaa25a.png" alt="img"><br>​RES阻值较多大于Res2。<br>​当1、2相通，若此时PX.Y接GND（即输入低电平），数据读取点即使受高电平（VCC）信号，但强度弱，被输入低电平（GND）拉低。 因此，对的单片机而言，管脚输出高电平而接入管脚输出低电平相通不会短路损坏。）<br>​②扫描原理：单片机能输出电平，<br>​首先控制某段电平，按键按下后，另一段电平被拉低，然后读取另一段电平，这样就知道哪个按键被按下。<br>​③扫描思路：<br>​❶思路1（“扩散型”→控制某一行（或列）“0”，其它为“1”)：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/3c4712ca9a7b4046bddd61ee0434dd80.png" alt="img"></p><p>​❷思路2（“广撒网”→控制行为“1”，控制列为“0” + 控制列为“1”，控制行为“0”）：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/5c19f8a0c95a4d3898cfe5bb1dd2b47f.png" alt="img"></p><ol start="4"><li>单片机的矩阵按键扫描模型化说明（“十字交叉即选中”）：</li></ol><p>  扩散型”思路：</p><p>  ①按行扫描（对比独立按键）：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/e87c5853bd634b25aa622553c36dca7d.png" alt="以第一行为例"></p><p>先视行为共端，控制某一行的共端处为低电平“0”，则这一行被选中， 当某一按键按下时，此按键的列端被拉低，读为“0”，这样，就知道了某一行的某个按键被按下。</p><blockquote><p>【注：每次只能给一行“0”。否则，无法判断是否被按下</p></blockquote><p>举例：S7按下的按行扫描</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/b6184668da984bbeb07bd7b7181e7707.png" alt="img"></p><p>②按列扫描：先视列为共端，控制某一列的共端处为低电平“0”，则这一列被选中，当某一按键按下时，此按键的行端被拉低，读为“0”，这样，就知道了某一行的某个按键被按下。</p><blockquote><p>【注：每次只能给一列“0”。】</p></blockquote><p>举例：S6按下的扫描</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/f94b5eafe51e4ef6958bd4dfe8aff1e7.png" alt="img"></p><h3 id="2-矩阵键盘控制LCD1602"><a href="#2-矩阵键盘控制LCD1602" class="headerlink" title="2. 矩阵键盘控制LCD1602"></a>2. 矩阵键盘控制LCD1602</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"LCD1602.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"MatrixKey.h"</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> KeyNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"MatrixKey:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        KeyNum <span class="token operator">=</span> <span class="token function">MatrixKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>KeyNum<span class="token punctuation">)</span>        <span class="token punctuation">{</span>                        <span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> KeyNum<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-矩阵键盘密码锁"><a href="#3-矩阵键盘密码锁" class="headerlink" title="3. 矩阵键盘密码锁"></a>3. 矩阵键盘密码锁</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"LCD1602.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"MatrixKey.h"</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> KeyNum<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> passWord<span class="token punctuation">,</span> count<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"PassWord:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        KeyNum <span class="token operator">=</span> <span class="token function">MatrixKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>KeyNum<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>KeyNum <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 输入密码的区域</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 限制输入密码的次数</span>                <span class="token punctuation">{</span>                    passWord <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                    passWord <span class="token operator">+</span><span class="token operator">=</span> KeyNum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                                <span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> passWord<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>KeyNum <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// s11 按下 confirm操作</span>            <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>passWord <span class="token operator">==</span> <span class="token number">1348</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// correct password</span>                <span class="token punctuation">{</span>                                        <span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">"OK "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    passWord <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> passWord<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    <span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">"ERR"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    passWord <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> passWord<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>KeyNum <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                passWord <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"PassWord:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> passWord<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>KeyNum <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                passWord <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"LCD_ShowString: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1399398004</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="附录-模块化编程"><a href="#附录-模块化编程" class="headerlink" title="附录: 模块化编程"></a>附录: 模块化编程</h2><p>封装: </p><p><code>Nixie.c</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token comment" spellcheck="true">//包含Delay头文件</span><span class="token comment" spellcheck="true">//数码管段码表</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> NixieTable<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x5B</span><span class="token punctuation">,</span><span class="token number">0x4F</span><span class="token punctuation">,</span><span class="token number">0x66</span><span class="token punctuation">,</span><span class="token number">0x6D</span><span class="token punctuation">,</span><span class="token number">0x7D</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x6F</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数码管显示子函数</span><span class="token keyword">void</span> <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Location<span class="token punctuation">,</span>Number<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>Location<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//位码输出</span>    <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>P2_4<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>P2_3<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>P2_2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>P2_4<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>P2_3<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>P2_2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>P2_4<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>P2_3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P2_2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>P2_4<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>P2_3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P2_2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>P2_4<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P2_3<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>P2_2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>P2_4<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P2_3<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>P2_2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span>P2_4<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P2_3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P2_2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">8</span><span class="token punctuation">:</span>P2_4<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P2_3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P2_2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    P0<span class="token operator">=</span>NixieTable<span class="token punctuation">[</span>Number<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//段码输出</span>    <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示一段时间</span>    P0<span class="token operator">=</span><span class="token number">0x00</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//段码清0，消影</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Nixie.h</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __NIXIE_H__</span><span class="token macro property">#<span class="token directive keyword">define</span> __NIXIE_H__</span><span class="token keyword">void</span> <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Location<span class="token punctuation">,</span>Number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>MatrixKey.c</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">MatrixKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> KeyNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 逐列扫描</span>        <span class="token comment" spellcheck="true">// first col</span>    P1 <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// P1全部置为高电平</span>    P1_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_7 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_7 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_6 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_6 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_5 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_5 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_4 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_4 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// second col</span>    P1 <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// P1全部置为高电平</span>    P1_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_7 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_7 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_6 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_6 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_5 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_5 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_4 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_4 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// third col</span>    P1 <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// P1全部置为高电平</span>    P1_1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_7 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_7 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_6 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_6 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_5 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_5 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_4 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_4 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// fourth col</span>    P1 <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// P1全部置为高电平</span>    P1_0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_7 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_7 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_6 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_6 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_5 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_5 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P1_4 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>P1_4 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyNumber <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> KeyNumber<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>MatrixKey.h</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span> __MATRIXKEY_H__</span><span class="token macro property">#<span class="token directive keyword">define</span> __MATRIXKEY_H__</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">MatrixKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>LCD1602.c</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token comment" spellcheck="true">//引脚配置：</span>sbit LCD_RS<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">6</span><span class="token punctuation">;</span>sbit LCD_RW<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">5</span><span class="token punctuation">;</span>sbit LCD_EN<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> LCD_DataPort P0</span><span class="token comment" spellcheck="true">//函数定义：</span><span class="token comment" spellcheck="true">/**  * @brief  LCD1602延时函数，12MHz调用可延时1ms  * @param  无  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">LCD_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    j <span class="token operator">=</span> <span class="token number">239</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  LCD1602写命令  * @param  Command 要写入的命令  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">LCD_WriteCommand</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Command<span class="token punctuation">)</span><span class="token punctuation">{</span>    LCD_RS<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    LCD_RW<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    LCD_DataPort<span class="token operator">=</span>Command<span class="token punctuation">;</span>    LCD_EN<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">LCD_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LCD_EN<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">LCD_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  LCD1602写数据  * @param  Data 要写入的数据  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Data<span class="token punctuation">)</span><span class="token punctuation">{</span>    LCD_RS<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    LCD_RW<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    LCD_DataPort<span class="token operator">=</span>Data<span class="token punctuation">;</span>    LCD_EN<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">LCD_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LCD_EN<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">LCD_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  LCD1602设置光标位置  * @param  Line 行位置，范围：1~2  * @param  Column 列位置，范围：1~16  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">LCD_SetCursor</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Line<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">LCD_WriteCommand</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">|</span><span class="token punctuation">(</span>Column<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>Line<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">LCD_WriteCommand</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">|</span><span class="token punctuation">(</span>Column<span class="token number">-1</span><span class="token operator">+</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  LCD1602初始化函数  * @param  无  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">LCD_WriteCommand</span><span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//八位数据接口，两行显示，5*7点阵</span>    <span class="token function">LCD_WriteCommand</span><span class="token punctuation">(</span><span class="token number">0x0c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示开，光标关，闪烁关</span>    <span class="token function">LCD_WriteCommand</span><span class="token punctuation">(</span><span class="token number">0x06</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据读写操作后，光标自动加一，画面不动</span>    <span class="token function">LCD_WriteCommand</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//光标复位，清屏</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  在LCD1602指定位置上显示一个字符  * @param  Line 行位置，范围：1~2  * @param  Column 列位置，范围：1~16  * @param  Char 要显示的字符  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">LCD_ShowChar</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">,</span><span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">LCD_SetCursor</span><span class="token punctuation">(</span>Line<span class="token punctuation">,</span>Column<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  在LCD1602指定位置开始显示所给字符串  * @param  Line 起始行位置，范围：1~2  * @param  Column 起始列位置，范围：1~16  * @param  String 要显示的字符串  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>    <span class="token function">LCD_SetCursor</span><span class="token punctuation">(</span>Line<span class="token punctuation">,</span>Column<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>String<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  返回值=X的Y次方  */</span><span class="token keyword">int</span> <span class="token function">LCD_Pow</span><span class="token punctuation">(</span><span class="token keyword">int</span> X<span class="token punctuation">,</span><span class="token keyword">int</span> Y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> Result<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Y<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Result<span class="token operator">*</span><span class="token operator">=</span>X<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  在LCD1602指定位置开始显示所给数字  * @param  Line 起始行位置，范围：1~2  * @param  Column 起始列位置，范围：1~16  * @param  Number 要显示的数字，范围：0~65535  * @param  Length 要显示数字的长度，范围：1~5  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>    <span class="token function">LCD_SetCursor</span><span class="token punctuation">(</span>Line<span class="token punctuation">,</span>Column<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>Length<span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token function">LCD_Pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  在LCD1602指定位置开始以有符号十进制显示所给数字  * @param  Line 起始行位置，范围：1~2  * @param  Column 起始列位置，范围：1~16  * @param  Number 要显示的数字，范围：-32768~32767  * @param  Length 要显示数字的长度，范围：1~5  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">LCD_ShowSignedNum</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">,</span><span class="token keyword">int</span> Number<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> Number1<span class="token punctuation">;</span>    <span class="token function">LCD_SetCursor</span><span class="token punctuation">(</span>Line<span class="token punctuation">,</span>Column<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Number<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Number1<span class="token operator">=</span>Number<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Number1<span class="token operator">=</span><span class="token operator">-</span>Number<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>Length<span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>Number1<span class="token operator">/</span><span class="token function">LCD_Pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  在LCD1602指定位置开始以十六进制显示所给数字  * @param  Line 起始行位置，范围：1~2  * @param  Column 起始列位置，范围：1~16  * @param  Number 要显示的数字，范围：0~0xFFFF  * @param  Length 要显示数字的长度，范围：1~4  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">LCD_ShowHexNum</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span>SingleNumber<span class="token punctuation">;</span>    <span class="token function">LCD_SetCursor</span><span class="token punctuation">(</span>Line<span class="token punctuation">,</span>Column<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>Length<span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        SingleNumber<span class="token operator">=</span>Number<span class="token operator">/</span><span class="token function">LCD_Pow</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">16</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>SingleNumber<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>SingleNumber<span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>SingleNumber<span class="token number">-10</span><span class="token operator">+</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  在LCD1602指定位置开始以二进制显示所给数字  * @param  Line 起始行位置，范围：1~2  * @param  Column 起始列位置，范围：1~16  * @param  Number 要显示的数字，范围：0~1111 1111 1111 1111  * @param  Length 要显示数字的长度，范围：1~16  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">LCD_ShowBinNum</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Length<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>    <span class="token function">LCD_SetCursor</span><span class="token punctuation">(</span>Line<span class="token punctuation">,</span>Column<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>Length<span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span>Number<span class="token operator">/</span><span class="token function">LCD_Pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>LCD1602.h</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __LCD1602_H__</span><span class="token macro property">#<span class="token directive keyword">define</span> __LCD1602_H__</span><span class="token comment" spellcheck="true">//用户调用函数：</span><span class="token keyword">void</span> <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_ShowChar</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">,</span><span class="token keyword">char</span> Char<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>String<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_ShowSignedNum</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">,</span><span class="token keyword">int</span> Number<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_ShowHexNum</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">LCD_ShowBinNum</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Line<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Column<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Number<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文章: </p><p><a href="https://blog.csdn.net/faithandvirtue/category_11404877.html">https://blog.csdn.net/faithandvirtue/category_11404877.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;51单片机学习笔记-二&quot;&gt;&lt;a href=&quot;#51单片机学习笔记-二&quot; class=&quot;headerlink&quot; title=&quot;51单片机学习笔记(二)&quot;&gt;&lt;/a&gt;51单片机学习笔记(二)&lt;/h1&gt;&lt;h2 id=&quot;一-数码管&quot;&gt;&lt;a href=&quot;#一-数码管&quot; cla</summary>
      
    
    
    
    <category term="嵌入式开发" scheme="https://roranrui.cn/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="51单片机" scheme="https://roranrui.cn/tags/51%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    <category term="Hardware" scheme="https://roranrui.cn/tags/Hardware/"/>
    
  </entry>
  
  <entry>
    <title>51单片机学习（一）</title>
    <link href="https://roranrui.cn/2022/04/23/51-dan-pian-ji-xue-xi-yi/"/>
    <id>https://roranrui.cn/2022/04/23/51-dan-pian-ji-xue-xi-yi/</id>
    <published>2022-04-23T09:10:49.000Z</published>
    <updated>2022-04-23T12:59:01.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="51单片机学习笔记-一"><a href="#51单片机学习笔记-一" class="headerlink" title="51单片机学习笔记(一)"></a>51单片机学习笔记(一)</h1><h2 id="一．STC89C52单片机的基本结构"><a href="#一．STC89C52单片机的基本结构" class="headerlink" title="一．STC89C52单片机的基本结构"></a>一．STC89C52单片机的基本结构</h2><blockquote><p><strong>什么是单片机</strong></p><ul><li><p>单片机（Microcontrollers）是一种集成电路芯片，是采用超大规模集成电路技术把具有数据处理能力的中央处理器CPU、随机存储器RAM、只读存储器ROM、多种I/O口和中断系统、定时器/计数器等功能（可能还包括显示驱动电路、脉宽调制电路、模拟多路转换器、A/D转换器等电路）集成到一块硅片上构成的一个小而完善的微型计算机系统，在工业控制领域广泛应用。从上世纪80年代，由当时的4位、8位单片机，发展到现在的300M的高速单片机。</p></li><li><p>不是完成某一个逻辑功能的芯片,而是把一个计算机系统集成到一个芯片上。相当于一个微型的计算机，和计算机相比，单片机只缺少了I/O设备。概括的讲：一块芯片就成了一台计算机。</p></li></ul></blockquote><ol><li><p>CPU 运算器和控制器 单片机的核心构成部分之一</p></li><li><p>内部数据存储器 存放可读的数据，如程序中的定义。</p></li><li><p>程序存储器 8KB，（0000H~1FFFH）存放程序，原始数据。</p></li><li><p>定时/计算器 3个定时器/计算器，即可设置成计数方式用于外部事件计数，也可以设置成定时模式，用于对单片机的计时控制。</p></li><li><p>并行端口</p><p>4个8位I/O口(P1,P2,P3,P4)。每个8位I/O口，既可作为输入信号端，也可作为输出信号端。可同时对8位同步读写，也可以单独操作。</p></li><li><p>串行端口</p><p>有一个全双工的串行接口，实现单片机与其他设备之间的串行数据传输，可作为全双工异步通信收发器使用，也可作为同步移位器使用。</p></li><li><p>中断系统</p><p>拥有6个中断源，包含两个外中断，3个定时器，和一个串行口中断。</p></li><li><p>时钟电路</p><p>   内部拥有时钟电路，但需要外接石英晶体和微调电容，即晶振电路，产生时钟脉冲序列。</p></li></ol><h2 id="二-使用单片机之前的准备"><a href="#二-使用单片机之前的准备" class="headerlink" title="二. 使用单片机之前的准备"></a>二. 使用单片机之前的准备</h2><h3 id="1-软件"><a href="#1-软件" class="headerlink" title="1. 软件"></a>1. 软件</h3><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220423171937001.png" alt="image-20220423171937001"></p><p><strong>KEIL5(写程序)</strong> 与 <strong>STC-ISP(烧录)</strong>, 以及相应单片机的<strong>usb驱动</strong>(接电脑用)</p><p>具体使用互联网可查</p><hr><h3 id="2-建立keil工程文件"><a href="#2-建立keil工程文件" class="headerlink" title="2. 建立keil工程文件"></a>2. 建立keil工程文件</h3><blockquote><p>1.创建工程文件夹<br>2.创建工程文件<br>3.选择正确的单片机型号<br>4.创建新的C语言文件<br>5.保存并添加C语言文件<br>6.开始编写程序</p></blockquote><hr><h3 id="3-熟悉进制"><a href="#3-熟悉进制" class="headerlink" title="3. 熟悉进制"></a>3. 熟悉进制</h3><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8C%96.png" alt="进制转化"></p><h2 id="三-LED模块"><a href="#三-LED模块" class="headerlink" title="三. LED模块"></a>三. LED模块</h2><h3 id="1-LED介绍"><a href="#1-LED介绍" class="headerlink" title="1. LED介绍"></a>1. <strong>LED介绍</strong></h3><p><strong>Light Emitting Diode</strong><br>LED,即发光二极管，是一种半导体固体发光器件。<br><strong>插件</strong><br><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/20171224210340650" alt="这里写图片描述"><br><strong>贴片</strong><br><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/20171224210406444" alt="这里写图片描述"> </p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/20171224210452525" alt="LED原理图"></p><p><strong>LED原理图</strong>:</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220423172504922.png" alt="LED模块"></p><hr><h3 id="2-点亮第一个LED"><a href="#2-点亮第一个LED" class="headerlink" title="2. 点亮第一个LED"></a>2. 点亮第一个LED</h3><p><strong>P2_0 ~ P2_78个引脚控制8个LED</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    P2 <span class="token operator">=</span> <span class="token number">0xFE</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-LED闪烁"><a href="#3-LED闪烁" class="headerlink" title="3. LED闪烁"></a>3. LED闪烁</h3><p>生成延时函数控制LED闪烁</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220423173005049.png" alt="生成延时函数"></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;INTRINS.H></span></span><span class="token keyword">void</span> <span class="token function">Delay500ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//@12.000MHz</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token function">_nop_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_nop_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>    j <span class="token operator">=</span> <span class="token number">205</span><span class="token punctuation">;</span>    k <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        <span class="token keyword">do</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        P2 <span class="token operator">=</span> <span class="token number">0xFE</span><span class="token punctuation">;</span>        <span class="token function">Delay500ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        P2 <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>        <span class="token function">Delay500ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="4-LED流水灯"><a href="#4-LED流水灯" class="headerlink" title="4. LED流水灯"></a>4. LED流水灯</h3><h4 id="4-1-简单实现流水灯"><a href="#4-1-简单实现流水灯" class="headerlink" title="4.1 简单实现流水灯"></a>4.1 简单实现流水灯</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;INTRINS.H></span></span><span class="token keyword">void</span> <span class="token function">Delay100ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//@12.000MHz</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token function">_nop_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_nop_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    j <span class="token operator">=</span> <span class="token number">144</span><span class="token punctuation">;</span>    k <span class="token operator">=</span> <span class="token number">71</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        <span class="token keyword">do</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        P2 <span class="token operator">=</span> <span class="token number">0xFE</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1111 1110</span>        <span class="token function">Delay100ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        P2 <span class="token operator">=</span> <span class="token number">0xFD</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1111 1101</span>        <span class="token function">Delay100ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        P2 <span class="token operator">=</span> <span class="token number">0xFB</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1111 1011</span>        <span class="token function">Delay100ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        P2 <span class="token operator">=</span> <span class="token number">0xF7</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1111 0111</span>        <span class="token function">Delay100ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        P2 <span class="token operator">=</span> <span class="token number">0xEF</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1110 1111</span>        <span class="token function">Delay100ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        P2 <span class="token operator">=</span> <span class="token number">0xDF</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1101 1111</span>        <span class="token function">Delay100ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        P2 <span class="token operator">=</span> <span class="token number">0xBF</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1011 1111</span>        <span class="token function">Delay100ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        P2 <span class="token operator">=</span> <span class="token number">0x7F</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 0111 1111</span>        <span class="token function">Delay100ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-用按键和定时器控制实现"><a href="#4-2-用按键和定时器控制实现" class="headerlink" title="4.2 用按键和定时器控制实现"></a>4.2 用按键和定时器控制实现</h4><p>关于定时器及相关代码后面会介绍</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Timer0.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Key.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;INTRINS.H></span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> KeyNum<span class="token punctuation">,</span> LEDMode<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    P2 <span class="token operator">=</span> <span class="token number">0xFE</span><span class="token punctuation">;</span>    <span class="token function">Timer0Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        KeyNum <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>KeyNum<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>KeyNum <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                LEDMode<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>LEDMode <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span>LEDMode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Timer0_Routine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">1</span>  <span class="token comment" spellcheck="true">// 中断 先执行这部分在执行主程序</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> T0Count<span class="token punctuation">;</span>    TL0 <span class="token operator">=</span> <span class="token number">0x18</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Initial timer value</span>    TH0 <span class="token operator">=</span> <span class="token number">0xFC</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Initial timer value</span>    T0Count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T0Count <span class="token operator">>=</span> <span class="token number">500</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 1s 执行一次</span>    <span class="token punctuation">{</span>        T0Count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>LEDMode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            P2 <span class="token operator">=</span> <span class="token function">_crol_</span><span class="token punctuation">(</span>P2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>LEDMode <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            P2 <span class="token operator">=</span> <span class="token function">_cror_</span><span class="token punctuation">(</span>P2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四-独立按键模块"><a href="#四-独立按键模块" class="headerlink" title="四. 独立按键模块"></a>四. 独立按键模块</h2><h3 id="1-独立按键介绍"><a href="#1-独立按键介绍" class="headerlink" title="1. 独立按键介绍"></a>1. 独立按键介绍</h3><p><strong>轻触开关</strong>是一种电子开关，使用时,轻轻按开关按钮就可使开关接通，当松开手时,开关断开。我们使用的开关如下图：</p><p><strong>封装</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/20171224212709471" alt="独立按键"></p><p><strong>原理图</strong></p><p>由P3引脚控制</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/image-20220423173944446.png" alt="独立按键模块"></p><hr><h3 id="2-独立按键控制LED亮灭"><a href="#2-独立按键控制LED亮灭" class="headerlink" title="2. 独立按键控制LED亮灭"></a>2. 独立按键控制LED亮灭</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//P2 = 0xFE;   // operate all register</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P3_1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            P2_0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            P2_0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-独立按键控制LED状态"><a href="#3-独立按键控制LED状态" class="headerlink" title="3. 独立按键控制LED状态"></a>3. 独立按键控制LED状态</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//@12.000MHz</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>    <span class="token punctuation">{</span>            i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        j <span class="token operator">=</span> <span class="token number">239</span><span class="token punctuation">;</span>        <span class="token keyword">do</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            time<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>P3_1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// one turn for pressing button detection</span>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>P3_1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// while detect </span>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        P2_0 <span class="token operator">=</span> <span class="token operator">~</span>P2_0<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-独立按键控制LED显示二进制"><a href="#4-独立按键控制LED显示二进制" class="headerlink" title="4. 独立按键控制LED显示二进制"></a>4. 独立按键控制LED显示二进制</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>time<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">239</span><span class="token punctuation">;</span>        <span class="token keyword">do</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        time<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> LED_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// control light</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>P3_1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>P3_1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LED_num<span class="token operator">++</span><span class="token punctuation">;</span>            P2 <span class="token operator">=</span> <span class="token operator">~</span>LED_num<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-独立按键控制LED移位"><a href="#5-独立按键控制LED移位" class="headerlink" title="5. 独立按键控制LED移位"></a>5. 独立按键控制LED移位</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> LED_Num<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// control light</span><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>time<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">239</span><span class="token punctuation">;</span>        <span class="token keyword">do</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    P2 <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">0x01</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>P3_1<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果K1按键按下</span>        <span class="token punctuation">{</span>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>P3_1<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        LED_Num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//LEDNum自增</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>LED_Num <span class="token operator">>=</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//限制LEDNum自增范围</span>                LED_Num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            P2 <span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">0x01</span> <span class="token operator">&lt;&lt;</span> LED_Num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//LED的第LEDNum位点亮</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>P3_0 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果K2按键按下</span>        <span class="token punctuation">{</span>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>P3_0<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>LED_Num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                LED_Num <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                LED_Num<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//LEDNum自减</span>            P2<span class="token operator">=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">0x01</span> <span class="token operator">&lt;&lt;</span> LED_Num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//LED的第LEDNum位点亮</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="附录-模块化编程"><a href="#附录-模块化编程" class="headerlink" title="附录: 模块化编程"></a>附录: 模块化编程</h2><blockquote><p>封装Delay函数</p></blockquote><p><code>Delay.c</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> xms<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>xms<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        j <span class="token operator">=</span> <span class="token number">239</span><span class="token punctuation">;</span>        <span class="token keyword">do</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Delay.h</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> __DELAY_H__</span><span class="token macro property">#<span class="token directive keyword">define</span> __DELAY_H__</span><span class="token keyword">void</span> <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> xms<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p>参考文章: </p><p><a href="https://blog.csdn.net/zhanganliu/category_7816577.html">https://blog.csdn.net/zhanganliu/category_7816577.html</a> </p><p><a href="https://blog.csdn.net/hu_9716/category_7243036.html">https://blog.csdn.net/hu_9716/category_7243036.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;51单片机学习笔记-一&quot;&gt;&lt;a href=&quot;#51单片机学习笔记-一&quot; class=&quot;headerlink&quot; title=&quot;51单片机学习笔记(一)&quot;&gt;&lt;/a&gt;51单片机学习笔记(一)&lt;/h1&gt;&lt;h2 id=&quot;一．STC89C52单片机的基本结构&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="嵌入式开发" scheme="https://roranrui.cn/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="51单片机" scheme="https://roranrui.cn/tags/51%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    <category term="Hardware" scheme="https://roranrui.cn/tags/Hardware/"/>
    
  </entry>
  
  <entry>
    <title>Numpy使用手册</title>
    <link href="https://roranrui.cn/2022/04/22/numpy-shi-yong-shou-ce/"/>
    <id>https://roranrui.cn/2022/04/22/numpy-shi-yong-shou-ce/</id>
    <published>2022-04-22T15:48:16.000Z</published>
    <updated>2022-04-22T15:49:12.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Numpy使用手册"><a href="#Numpy使用手册" class="headerlink" title="Numpy使用手册"></a>Numpy使用手册</h1><h2 id="1-一维数组"><a href="#1-一维数组" class="headerlink" title="1. 一维数组"></a>1. 一维数组</h2><p>NumPy Ndarray 对象<br>NumPy 最重要的一个特点是其 N 维数组对象 ndarray，它是一系列同类型数据的集合，以 0 下标为开始进行集合中元素的索引。</p><p>ndarray 对象是用于存放同类型元素的多维数组。</p><p>ndarray 中的每个元素在内存中都有相同存储大小的区域。</p><p>ndarray 内部由以下内容组成：</p><p>一个指向数据（内存或内存映射文件中的一块数据）的指针。</p><p>数据类型或 dtype，描述在数组中的固定大小值的格子。</p><p>一个表示数组形状（shape）的元组，表示各维度大小的元组。</p><p>一个跨度元组（stride），其中的整数指的是为了前进到当前维度下一个元素需要”跨过”的字节数。</p><p>ndarray 的内部结构:</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/pREJuYgw19sKbjn.png" alt="img"></p><p>跨度可以是负数，这样会使数组在内存中后向移动，切片中 obj[::-1] 或 obj[:,::-1] 就是如此。</p><p>创建一个 ndarray 只需调用 NumPy 的 array 函数即可</p><hr><h4 id="1-1-创建一维数组"><a href="#1-1-创建一维数组" class="headerlink" title="1.1 创建一维数组"></a>1.1 创建一维数组</h4><p>API: <code>np.array(obj)</code>, obj 的类型只可以是列表或者元组</p><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">print</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结果为:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h4 id="1-2-数组的数据类型"><a href="#1-2-数组的数据类型" class="headerlink" title="1.2 数组的数据类型"></a>1.2 数组的数据类型</h4><table><thead><tr><th>bool_</th><th>布尔型数据类型（True 或者 False）</th></tr></thead><tbody><tr><td>int_</td><td>默认的整数类型（类似于 C 语言中的 long，int32 或 int64）</td></tr><tr><td>intc</td><td>与 C 的 int 类型一样，一般是 int32 或 int 64</td></tr><tr><td>intp</td><td>用于索引的整数类型（类似于 C 的 ssize_t，一般情况下仍然是 int32 或 int64）</td></tr><tr><td>int8</td><td>字节（-128 to 127）</td></tr><tr><td>int16</td><td>整数（-32768 to 32767）</td></tr><tr><td>int32</td><td>整数（-2147483648 to 2147483647）</td></tr><tr><td>int64</td><td>整数（-9223372036854775808 to 9223372036854775807）</td></tr><tr><td>uint8</td><td>无符号整数（0 to 255）</td></tr><tr><td>uint16</td><td>无符号整数（0 to 65535）</td></tr><tr><td>uint32</td><td>无符号整数（0 to 4294967295）</td></tr><tr><td>uint64</td><td>无符号整数（0 to 18446744073709551615）</td></tr><tr><td>float_</td><td>float64 类型的简写</td></tr><tr><td>float16</td><td>半精度浮点数，包括：1 个符号位，5 个指数位，10 个尾数位</td></tr><tr><td>float32</td><td>单精度浮点数，包括：1 个符号位，8 个指数位，23 个尾数位</td></tr><tr><td>float64</td><td>双精度浮点数，包括：1 个符号位，11 个指数位，52 个尾数位</td></tr><tr><td>complex_</td><td>complex128 类型的简写，即 128 位复数</td></tr><tr><td>complex64</td><td>复数，表示双 32 位浮点数（实数部分和虚数部分）</td></tr><tr><td>complex128</td><td>复数，表示双 64 位浮点数（实数部分和虚数部分）</td></tr></tbody></table><p>指定数据类型 –<code>dtype</code></p><ul><li><code>dtype = np.int32</code>  – 直接指定名称</li><li><code>dtype = 'i4'</code>  – 使用字符串代号(<strong>int8, int16, int32, int64</strong> 四种数据类型可以使用字符串 <strong>‘i1’, ‘i2’,’i4’,’i8’</strong> 代替)</li></ul><hr><h4 id="1-3-一维数组的函数"><a href="#1-3-一维数组的函数" class="headerlink" title="1.3 一维数组的函数"></a>1.3 一维数组的函数</h4><p>API:</p><ol><li><p><code>np.arrange(start, stop, step, dtype)</code>创建数组</p><ul><li><strong>start:</strong> 开始值, 默认为0, <strong>包含</strong>开始值</li><li><strong>stop:</strong> 结束值, <strong>不包含</strong>结束值</li><li><strong>step:</strong> 步长, 默认1, 可为负</li></ul></li><li><p><code>np.linspase(start, stop, num, endpoint, restep, dtype)</code> 创建<strong>等差</strong>数组</p><ul><li><strong>num:</strong> 设置生成的元素个数</li><li><strong>endpoint:</strong> 是否包含结束值, 默认True</li><li><strong>restop:</strong> 是否返回步长(公差), 默认False(如果为True, 返回的是二维数组, 包括数组和步长)</li></ul></li><li><p><code>np.logspace(start, stop, num, endpoint, base, dtype)</code> 创建<strong>等比</strong>数组</p><ul><li><strong>start:</strong> 开始值 = base ** start</li><li><strong>stop:</strong> 结束值 = base ** stop</li><li><strong>base:</strong> 底数, 默认为0</li></ul></li></ol><p>实例: </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 初始值0 ,结束值不为10, 步长1</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 初始值1, 结束值不为10, 步长2</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stop<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 数据类型</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 等差数组</span>d <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stop<span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> retstep<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'i4'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 等比数组</span>e <span class="token operator">=</span> np<span class="token punctuation">.</span>logspace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2-二维数组"><a href="#2-二维数组" class="headerlink" title="2. 二维数组"></a>2. 二维数组</h2><p><strong>数组的轴</strong></p><p>二维数组有两个轴, 轴索引分别为0和1</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/JwoVU1W7cjsGDYv.png" alt="image-20211123224715748"></p><p>**数组转置: **利用数组对象T, 将轴索引交换</p><hr><h4 id="2-1-二维数组的函数"><a href="#2-1-二维数组的函数" class="headerlink" title="2.1 二维数组的函数"></a>2.1 二维数组的函数</h4><p>API:</p><ol><li><p><code>np.ones(shape, dtype=None)</code>创建全为<strong>一</strong>的数组</p><ul><li><strong>shape:</strong> 数组形状(可为列表, 元组) [2, 3]二行三列</li></ul></li><li><p><code>np.zeros(shape, dtype=None)</code>创建全为<strong>零</strong>的数组</p></li><li><p><code>np.full(shape, fill_value, dtype=None)</code>根据指定形状和类型生成数组, 并用指定数据填充</p><ul><li><strong>fill_value:</strong> 指定填充的数据</li></ul></li><li><p><code>np.identity(n, dtype=None)</code>创建单位矩阵(对角线元素为1, 其他元素为0的矩阵)</p><ul><li><strong>n:</strong> 数组形状</li></ul></li></ol><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 6x5 1</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 3x2 0</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 3x3 5</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fill_value<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>complex64<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 单位矩阵5x5</span>d <span class="token operator">=</span> np<span class="token punctuation">.</span>identity<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="3-数组访问"><a href="#3-数组访问" class="headerlink" title="3. 数组访问"></a>3. 数组访问</h2><h3 id="3-1-索引访问"><a href="#3-1-索引访问" class="headerlink" title="3.1 索引访问"></a>3.1 索引访问</h3><p>即通过对应下标访问元素</p><ul><li>一维: <code>ndarrary[index]</code>;</li><li>二维: <code>ndarray[0轴索引][1轴索引]</code>;</li></ul><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 一维</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 二维</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>d <span class="token operator">=</span> c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-2-切片访问"><a href="#3-2-切片访问" class="headerlink" title="3.2 切片访问"></a>3.2 切片访问</h3><p>一维:</p><ul><li><code>ndarray[start:end]</code></li><li><code>ndarray[start:end:step]</code><ul><li><strong>step</strong>: 步长, 默认1</li><li>包含起始值<strong>不包含结束值</strong></li></ul></li></ul><p>二维:</p><ul><li><code>ndarray[所在0轴切片, 所在1轴切片]</code><ul><li>切片的元素类型与原数据相同</li><li>两个切片是二维数组</li><li>一个切片一个标量是一维数组</li></ul></li></ul><p>实例:</p><pre><code></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 一维数组索引</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 步长为2</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>d <span class="token operator">=</span> c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 二维数组</span>e <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>f <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 切片中有一个是标量</span>h <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>i <span class="token operator">=</span> h<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-3-布尔索引"><a href="#3-3-布尔索引" class="headerlink" title="3.3 布尔索引"></a>3.3 布尔索引</h3><ul><li>布尔索引必须与要索引的数组<strong>形状相同</strong>, 否则会引发IndexError错误</li><li>布尔索引返回的新数组是原数组的副本, 拥有独立的内存空间(切片索引为浅层复制)</li><li>为Ture 保留, 为False 剔除</li><li><strong>布尔索引输出的值一定是一个一维数组</strong></li></ul><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"> <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 一维布尔索引</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 二维布尔索引</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>d <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-4-花式索引"><a href="#3-4-花式索引" class="headerlink" title="3.4 花式索引"></a>3.4 花式索引</h3><p>索引方法:</p><ul><li>索引为整数列表</li><li>索引为一维整数数组</li><li>索引为二维整数数组</li><li>索引返回的新数组是原数组的副本, 拥有独立的内存空间</li><li>二维数组上<strong>每一个轴</strong>的索引数组形状相同</li></ul><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 一维数组的花式索引(二维索引)</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 一维数组的花式索引(一维索引)</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>d <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 一维数组的花式索引(整数列表)</span>e <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 二维数组的花式索引(整数列表)</span>a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>n <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 二维数组的花式索引(一维索引)</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>m <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>n <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 二维数组花式索引(二维数组)</span>a3 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b3 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b4 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">[</span>b3<span class="token punctuation">,</span> b4<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="4-数组处理"><a href="#4-数组处理" class="headerlink" title="4. 数组处理"></a>4. 数组处理</h2><h3 id="4-1-连接数组"><a href="#4-1-连接数组" class="headerlink" title="4.1 连接数组"></a>4.1 连接数组</h3><p>API:</p><ol><li><p><code>np.concatenate((a1, a2, ...), axis)</code> 沿指定的轴连接多个数组</p><ul><li><strong>(a1, a2, …):</strong> 要连接的数组</li><li><strong>axis:</strong> 轴, 默认为0轴</li></ul></li><li><p><code>np.vstack((a1, a2, ...))</code> 沿垂直堆叠多个数组, 相当于concatenate() axis=0</p><ul><li><strong>1轴元素个数要相同</strong></li></ul></li><li><p><code>np.hstack((a1, a2, ...))</code> 沿水平堆叠多个数组, 相当于concatenate() axis=1</p><ul><li><strong>0轴元素个数要相同</strong></li></ul></li></ol><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 沿指定的轴连接多个数组</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 沿垂直堆叠多个数组</span>a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>c1 <span class="token operator">=</span> np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> b1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 沿水平堆叠多个数组</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>c2 <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>a2<span class="token punctuation">,</span> b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="4-2-分割数组"><a href="#4-2-分割数组" class="headerlink" title="4.2 分割数组"></a>4.2 分割数组</h3><p>API:</p><ol><li><p><code>np.split(arr, indices_or_scetions, axis)</code>沿指定的轴分割成多个数组</p><ul><li><strong>arr:</strong> 要分割的数组</li><li><strong>indices_or_scetions:</strong> 如果是<strong>整数</strong>就平均分割, 如果是<strong>数组</strong>, 则为沿指定的轴的切片操作</li><li><strong>axis:</strong> 默认0轴</li></ul></li><li><p><code>np.vsplit(arr, indices_or_scetions)</code>沿着垂直方向分割数组, 相当于split() axis=0</p></li><li><p><code>np.hsplit(arr, indices_or_scetions)</code>沿着水平方向分割数组, 相当于split() axis=1</p></li></ol><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 沿指定的轴分割成多个数组(整数)</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>split<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 沿指定的轴分割成多个数组(数组)</span>a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>sections <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b1 <span class="token operator">=</span> np<span class="token punctuation">.</span>split<span class="token punctuation">(</span>a1<span class="token punctuation">,</span> sections<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 沿着垂直方向分割数组</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b2 <span class="token operator">=</span> np<span class="token punctuation">.</span>vsplit<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 沿着水平方向分割数组</span>a3 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>sections1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b3 <span class="token operator">=</span> np<span class="token punctuation">.</span>hsplit<span class="token punctuation">(</span>a3<span class="token punctuation">,</span> sections1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="4-3-数组的算数运算"><a href="#4-3-数组的算数运算" class="headerlink" title="4.3 数组的算数运算"></a>4.3 数组的算数运算</h3><p>数组的运算用<strong>标准运算符</strong>即可</p><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 一维</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">**</span> b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 一维</span>a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1 <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 二维</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> b2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 二维</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a2 <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="4-3-数组广播"><a href="#4-3-数组广播" class="headerlink" title="4.3 数组广播"></a>4.3 数组广播</h3><p>​当数组与标量或者不同形状的数组进行算术运算时, 就会发生数组广播</p><p>下面的图片展示了数组 b 如何通过广播来与数组 a 兼容。</p><p><img src="https://i.loli.net/2021/11/27/2PgsYGzu1DE8yVS.gif" alt="img"></p><p><strong>广播的规则:</strong></p><ul><li>先比较形状, 再比较维度, 最后比较对应轴长度</li><li>若两数组的纬度不相等, 会在较低维度数组的形状左侧填充1, 直到维度相等</li><li>两数组维度相等: 如果对应轴长度相等, 则兼容, 可以发生数组广播, 若其中一个轴长度为1, 长度为1的轴会拓展</li></ul><p><strong>简单理解：</strong>对两个数组，分别比较他们的每一个维度（若其中一个数组没有当前维度则忽略），满足：</p><ul><li>数组拥有相同形状。</li><li>当前维度的值相等。</li><li>当前维度的值有一个是1。</li></ul><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 数组与标量</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [2, 2, 2]</span><span class="token comment" spellcheck="true"># %% 数组与数组 一</span>a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ([1, 2], [1, 2])</span>b1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> b1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 数组与数组 二</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (1, 2)  ([[1, 2], [1, 2]])</span>b2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (2, 1)  ([[3, 3], [3, 3]])</span><span class="token keyword">print</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> b2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 数组与数组 三</span>a3 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ([[1, 2], [1, 2]])  (2, 2)</span>b3 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (2, 3)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">,</span> b3<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 无法计算, 不满足广播原则</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="5-其他数组函数"><a href="#5-其他数组函数" class="headerlink" title="5. 其他数组函数"></a>5. 其他数组函数</h2><h3 id="5-1-随机数函数"><a href="#5-1-随机数函数" class="headerlink" title="5.1 随机数函数"></a>5.1 随机数函数</h3><p>API:</p><ol><li><p><code>np.random.rand(a0, a1, ...)</code> 返回[0.0, 1.0)的随机浮点数</p></li><li><p><code>np.random.randint(low, high, size, dtype)</code> 返回[low, high)的随机整数</p><ul><li><strong>size:</strong> 数组形状</li></ul></li><li><p><code>np.random.normal(loc, scale, size)</code> 返回正态分布随机数</p><ul><li><strong>loc:</strong> 平均值</li><li><strong>scale:</strong> 标准差</li></ul></li><li><p><code>np.random.randn(a0, a1, ...)</code> 返回标准正态分布随机数(loc=0, scale=1)</p><p>实例:</p><pre><code>import numpy as np# %% 浮点数a = np.random.rand(3, 4)print(a)# %% 整数b = np.random.randint(4, 7, size=(8, 8))print(b)# %% 正态分布一c = np.random.normal(5, 3, (3, 4))print(c)# %% 正态分布二d = np.random.randn(3, 4)print(d)</code></pre></li></ol><hr><h3 id="5-2-排序函数"><a href="#5-2-排序函数" class="headerlink" title="5.2 排序函数"></a>5.2 排序函数</h3><p>API: </p><ol><li><code>np.sort(arr, axis=-1, kind='quicksort', order=None)</code> 按轴对数组进行排序<ul><li>**arr: **要排序的数组</li><li><strong>axis:</strong> 轴索引, 默认-1</li><li><strong>kind:</strong> 排序类型(quicksort, mergesort, heapsort)</li><li><strong>order:</strong> 排序字段</li></ul></li><li><code>np.asort(arr, axis=-1, kind='quicksort', order=None)</code> 对数组按轴进行排序索引, 即对索引排序</li></ol><p>输出的是排好序的数在原数组中的位置</p><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 一维</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 二维</span>a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>b1 <span class="token operator">=</span> np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>a1<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 轴索引排序</span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>d <span class="token operator">=</span> np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="5-3-聚合函数"><a href="#5-3-聚合函数" class="headerlink" title="5.3 聚合函数"></a>5.3 聚合函数</h3><h4 id="5-3-1-求和"><a href="#5-3-1-求和" class="headerlink" title="5.3.1 求和"></a>5.3.1 求和</h4><p>API:</p><ol><li><p><code>np.sum(arr, axis=None)</code></p></li><li><p><code>np.nansum(arr, axis=None)</code> 忽略NaN</p></li><li><p>使用数组对象的sum()方法:</p><p>``np.ndarray.sum(axis=None)`</p></li></ol><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 求和</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>nansum<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="5-3-2-求最大值"><a href="#5-3-2-求最大值" class="headerlink" title="5.3.2 求最大值"></a>5.3.2 求最大值</h4><p>API:</p><ol><li><p><code>np.amax(arr, axis=None)</code></p></li><li><p><code>np.namax(arr, axis=None)</code> 忽略NaN</p></li><li><p>使用数组对象的max()方法:</p><p><code>np.ndarray.max(axis=None)</code></p></li></ol><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 求最大值</span>a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>amax<span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>amax<span class="token punctuation">(</span>a1<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>max<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>nanmax<span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="5-3-3-求最小值"><a href="#5-3-3-求最小值" class="headerlink" title="5.3.3 求最小值"></a>5.3.3 求最小值</h4><p>API:</p><ol><li><p><code>np.amin(arr, axis=None)</code></p></li><li><p><code>np.namin(arr, axis=None)</code></p></li><li><p>使用数组对象的min()方法:</p><p><code>np.ndarray.min(axis=None)</code></p></li></ol><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 求最小值</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>amin<span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>amin<span class="token punctuation">(</span>a2<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">.</span>min<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>nanmin<span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="5-3-4-求平均值"><a href="#5-3-4-求平均值" class="headerlink" title="5.3.4 求平均值"></a>5.3.4 求平均值</h4><p>API:</p><ol><li><p><code>np.mean(arr, axis=None)</code></p></li><li><p><code>np.nmean(arr, axis=None)</code> 忽略NaN</p></li><li><p>使用数组对象的mean()方法:</p><p><code>np.ndarray.mean(axis=None)</code></p></li><li><p><code>np.average(a, axis=None, weights=None)</code></p><ul><li><strong>weights:</strong> 权重</li></ul></li></ol><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 求平均值</span>a3 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>a3<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a3<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>nanmean<span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 求加权平均值</span>a4 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>a4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>average<span class="token punctuation">(</span>a4<span class="token punctuation">,</span> weights<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                              <span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 精度不够</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="6-数组的保存与读取"><a href="#6-数组的保存与读取" class="headerlink" title="6. 数组的保存与读取"></a>6. 数组的保存与读取</h2><h3 id="6-1-数组的保存"><a href="#6-1-数组的保存" class="headerlink" title="6.1 数组的保存"></a>6.1 数组的保存</h3><p>API:</p><ol><li><code>np.save(file, arr, allow_pickle=True, fix_imports=True)</code> 可以将一个数组保存至”.npy”的二进制文件中<ul><li><strong>file:</strong> 文件路径</li><li><strong>arr:</strong> 数组</li><li><strong>allow_pickle:</strong> 是否允许用pickle保存数组对象</li><li><strong>fix_imports:</strong> 是否允许在Python2中读取Python3的数据</li></ul></li><li><code>np.savez(file)</code> 可以将多个数组保存至”.npz”的<strong>未压缩</strong>二进制文件中<ul><li><strong>多个数组相当于保存在字典中, 要给每个数组指定键</strong></li></ul></li><li><code>np.savez_compressed(file)</code> 可以将多个数组保存至”.npz”的<strong>压缩</strong>二进制文件中</li></ol><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %% 一个数组</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'./array_save01'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 多个数组</span>a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>savez<span class="token punctuation">(</span><span class="token string">'./array_savez01'</span><span class="token punctuation">,</span> arr_a1<span class="token operator">=</span>a1<span class="token punctuation">,</span> arr_b<span class="token operator">=</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% 多个数组压缩</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>savez_compressed<span class="token punctuation">(</span><span class="token string">'./array_savez02'</span><span class="token punctuation">,</span> arr_a1<span class="token operator">=</span>a2<span class="token punctuation">,</span> arr_b<span class="token operator">=</span>b1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="6-2-数组的读取"><a href="#6-2-数组的读取" class="headerlink" title="6.2 数组的读取"></a>6.2 数组的读取</h3><p>API:</p><ul><li><code>np.load(file, mmap_mode, allow_pickle, fix_imports)</code> 读取 .npy 和 .npz 文件中的数组<ul><li><strong>mmap_mode:</strong> 表示内存的映射模式, 即在读取较大的np数组时的模式, 默认None</li></ul></li></ul><p>实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># %%</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'array_save01.npy'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %%</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'array_savez01.npz'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 返回一个字典</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token string">'arr_a1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token string">'arr_b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># %% </span>c <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'array_savez02.npz'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token string">'arr_a1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token string">'arr_b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Numpy使用手册&quot;&gt;&lt;a href=&quot;#Numpy使用手册&quot; class=&quot;headerlink&quot; title=&quot;Numpy使用手册&quot;&gt;&lt;/a&gt;Numpy使用手册&lt;/h1&gt;&lt;h2 id=&quot;1-一维数组&quot;&gt;&lt;a href=&quot;#1-一维数组&quot; class=&quot;head</summary>
      
    
    
    
    <category term="语言学习" scheme="https://roranrui.cn/categories/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Programming" scheme="https://roranrui.cn/tags/Programming/"/>
    
    <category term="Python" scheme="https://roranrui.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>vi/vim的使用</title>
    <link href="https://roranrui.cn/2022/04/22/vi-vim-de-shi-yong/"/>
    <id>https://roranrui.cn/2022/04/22/vi-vim-de-shi-yong/</id>
    <published>2022-04-22T15:28:42.000Z</published>
    <updated>2022-04-22T15:31:27.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vi-x2F-vim-——-终端中的编辑器"><a href="#vi-x2F-vim-——-终端中的编辑器" class="headerlink" title="vi/vim —— 终端中的编辑器"></a>vi/vim —— 终端中的编辑器</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li><code>vi</code> 简介</li><li>打开和新建文件</li><li>三种工作模式</li><li>常用命令</li><li>分屏命令</li><li>常用命令速查图</li></ul><h2 id="01-vi-简介"><a href="#01-vi-简介" class="headerlink" title="01. vi 简介"></a>01. <code>vi</code> 简介</h2><h3 id="1-1-学习-vi-的目的"><a href="#1-1-学习-vi-的目的" class="headerlink" title="1.1 学习 vi 的目的"></a>1.1 学习 <code>vi</code> 的目的</h3><ul><li>在工作中，要对 <strong>服务器</strong> 上的文件进行 <strong>简单</strong> 的修改，可以使用 <code>ssh</code> 远程登录到服务器上，并且使用 <code>vi</code> 进行快速的编辑即可</li><li>常见需要修改的文件包括：<ul><li><strong>源程序</strong></li><li><strong>配置文件</strong>，例如 <code>ssh</code> 的配置文件 <code>~/.ssh/config</code></li></ul></li></ul><blockquote><ul><li>在没有图形界面的环境下，要编辑文件，<code>vi</code> 是最佳选择！</li><li>每一个要使用 Linux 的程序员，都应该或多或少的学习一些 <code>vi</code> 的常用命令</li></ul></blockquote><h3 id="1-2-vi-和-vim"><a href="#1-2-vi-和-vim" class="headerlink" title="1.2 vi 和 vim"></a>1.2 vi 和 vim</h3><ul><li>在很多 <code>Linux</code> 发行版中，直接把 <code>vi</code> 做成 <code>vim</code> 的软连接</li></ul><h4 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h4><ul><li><code>vi</code> 是 <code>Visual interface</code> 的简称，是 <code>Linux</code> 中 <strong>最经典</strong> 的文本编辑器</li><li><code>vi</code> 的核心设计思想 —— <strong>让程序员的手指始终保持在键盘的核心区域，就能完成所有的编辑操作</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/001_vi%E9%94%AE%E7%9B%98.png" alt="001_vi键盘-w551"></p><ul><li><code>vi</code> 的特点：<ul><li><strong>没有图形界面</strong> 的 <strong>功能强大</strong> 的编辑器</li><li>只能是编辑 <strong>文本内容</strong>，不能对字体、段落进行排版</li><li><strong>不支持鼠标操作</strong></li><li><strong>没有菜单</strong></li><li><strong>只有命令</strong></li></ul></li><li><code>vi</code> 编辑器在 <strong>系统管理</strong>、<strong>服务器管理</strong> 编辑文件时，<strong>其功能永远不是图形界面的编辑器能比拟的</strong></li></ul><h4 id="vim"><a href="#vim" class="headerlink" title="vim"></a><code>vim</code></h4><p><strong>vim = vi improved</strong></p><ul><li><code>vim</code> 是从 <code>vi</code> 发展出来的一个文本编辑器，支持 <strong>代码补全</strong>、<strong>编译</strong> 及 <strong>错误跳转</strong> 等方便编程的功能特别丰富，在程序员中被广泛使用，被称为 <strong>编辑器之神</strong></li></ul><h4 id="查询软连接命令（知道）"><a href="#查询软连接命令（知道）" class="headerlink" title="查询软连接命令（知道）"></a>查询软连接命令（知道）</h4><ul><li>在很多 <code>Linux</code> 发行版中直接把 <code>vi</code> 做成 <code>vim</code> 的软连接</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查找 vi 的运行文件</span>$ <span class="token function">which</span> <span class="token function">vi</span>$ <span class="token function">ls</span> -l /usr/bin/vi$ <span class="token function">ls</span> -l /etc/alternatives/vi$ <span class="token function">ls</span> -l /usr/bin/vim.basic<span class="token comment" spellcheck="true"># 查找 vim 的运行文件</span>$ <span class="token function">which</span> vim$ <span class="token function">ls</span> -l /usr/bin/vim$ <span class="token function">ls</span> -l /etc/alternatives/vim$ <span class="token function">ls</span> -l /usr/bin/vim.basic <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="02-打开和新建文件"><a href="#02-打开和新建文件" class="headerlink" title="02. 打开和新建文件"></a>02. 打开和新建文件</h2><ul><li>在终端中输入 <code>vi</code> <strong>在后面跟上文件名</strong> 即可</li></ul><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">vi</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果文件已经存在，会直接打开该文件</li><li>如果文件不存在，会新建一个文件</li></ul><h3 id="2-1-打开文件并且定位行"><a href="#2-1-打开文件并且定位行" class="headerlink" title="2.1 打开文件并且定位行"></a>2.1 打开文件并且定位行</h3><ul><li><p>在日常工作中，有可能会遇到 <strong>打开一个文件，并定位到指定行</strong> 的情况</p></li><li><p>例如：在开发时，<strong>知道某一行代码有错误</strong>，可以 <strong>快速定位</strong> 到出错代码的位置</p></li><li><p>这个时候，可以使用以下命令打开文件</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">vi</span> 文件名 +行数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>提示：如果只带上 <code>+</code> 而不指定行号，会直接定位到文件末尾</p></blockquote><h3 id="2-2-异常处理"><a href="#2-2-异常处理" class="headerlink" title="2.2 异常处理"></a>2.2 异常处理</h3><ul><li>如果 <code>vi</code> 异常退出，在磁盘上可能会保存有 <strong>交换文件</strong></li><li>下次再使用 <code>vi</code> 编辑该文件时，会看到以下屏幕信息，按下字母 <code>d</code> 可以 <strong>删除交换文件</strong> 即可</li></ul><blockquote><p>提示：按下键盘时，注意关闭输入法</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/002_%E5%88%A0%E9%99%A4%E4%BA%A4%E6%8D%A2%E6%96%87%E4%BB%B6.png" alt="002_删除交换文件-w1048"></p><h2 id="03-三种工作模式"><a href="#03-三种工作模式" class="headerlink" title="03. 三种工作模式"></a>03. 三种工作模式</h2><ul><li><p><code>vi</code> 有三种基本工作模式：</p><ol><li><strong>命令模式</strong><ul><li><strong>打开文件首先进入命令模式</strong>，是使用 <code>vi</code> 的 <strong>入口</strong></li><li>通过 <strong>命令</strong> 对文件进行常规的编辑操作，例如：<strong>定位</strong>、<strong>翻页</strong>、<strong>复制</strong>、<strong>粘贴</strong>、<strong>删除</strong>……</li><li>在其他图形编辑器下，通过 <strong>快捷键</strong> 或者 <strong>鼠标</strong> 实现的操作，都在 <strong>命令模式</strong> 下实现</li></ul></li><li><strong>末行模式</strong> —— 执行 <strong>保存</strong>、<strong>退出</strong> 等操作 <ul><li>要退出 <code>vi</code> 返回到控制台，需要在末行模式下输入命令</li><li><strong>末行模式</strong> 是 <code>vi</code> 的 <strong>出口</strong></li></ul></li><li><strong>编辑模式</strong> —— 正常的编辑文字</li></ol></li></ul><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/003_vi%E7%9A%84%E6%A8%A1%E5%BC%8F.png" alt="003_vi的模式-w500"></p><blockquote><p>提示：在 <code>Touch Bar</code> 的 Mac 电脑上 ，按 <code>ESC</code> 不方便，可以使用 <code>CTRL + [</code> 替代</p></blockquote><h3 id="末行模式命令"><a href="#末行模式命令" class="headerlink" title="末行模式命令"></a>末行模式命令</h3><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">w</td><td align="center">write</td><td>保存</td></tr><tr><td align="center">q</td><td align="center">quit</td><td>退出，如果没有保存，不允许退出</td></tr><tr><td align="center">q!</td><td align="center">quit</td><td>强行退出，不保存退出</td></tr><tr><td align="center">wq</td><td align="center">write &amp; quit</td><td>保存并退出</td></tr><tr><td align="center">x</td><td align="center"></td><td>保存并退出</td></tr></tbody></table><h2 id="04-常用命令"><a href="#04-常用命令" class="headerlink" title="04. 常用命令"></a>04. 常用命令</h2><h3 id="命令线路图"><a href="#命令线路图" class="headerlink" title="命令线路图"></a>命令线路图</h3><ol start="0"><li>重复次数<ul><li>在命令模式下，<strong>先输入一个数字</strong>，<strong>再跟上一个命令</strong>，可以让该命令 <strong>重复执行指定次数</strong></li></ul></li><li>移动和选择（<strong>多练</strong>）<ul><li><code>vi</code> 之所以快，关键在于 <strong>能够快速定位到要编辑的代码行</strong></li><li><strong>移动命令</strong> 能够 和 <strong>编辑操作</strong> 命令 <strong>组合使用</strong></li></ul></li><li>编辑操作<ul><li><strong>删除</strong>、<strong>复制</strong>、<strong>粘贴</strong>、<strong>替换</strong>、<strong>缩排</strong></li></ul></li><li>撤销和重复</li><li>查找替换</li><li>编辑</li></ol><h4 id="学习提示"><a href="#学习提示" class="headerlink" title="学习提示"></a>学习提示</h4><ol><li><code>vi</code> 的命令较多，<strong>不要期望一下子全部记住</strong>，个别命令忘记了，只是会影响编辑速度而已</li><li>在使用 <code>vi</code> 命令时，注意 <strong>关闭中文输入法</strong></li></ol><h3 id="4-1-移动（基本）"><a href="#4-1-移动（基本）" class="headerlink" title="4.1 移动（基本）"></a>4.1 移动（基本）</h3><ul><li>要熟练使用 <code>vi</code>，首先应该学会怎么在 <strong>命令模式</strong> 下样快速移动光标</li><li><strong>编辑操作命令</strong>，能够和 <strong>移动命令</strong> 结合在一起使用</li></ul><h4 id="1-上、下、左、右"><a href="#1-上、下、左、右" class="headerlink" title="1) 上、下、左、右"></a>1) 上、下、左、右</h4><table><thead><tr><th align="center">命令</th><th>功能</th><th align="center">手指</th></tr></thead><tbody><tr><td align="center">h</td><td>向左</td><td align="center">食指</td></tr><tr><td align="center">j</td><td>向下</td><td align="center">食指</td></tr><tr><td align="center">k</td><td>向上</td><td align="center">中指</td></tr><tr><td align="center">l</td><td>向右</td><td align="center">无名指</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/005_%E7%A7%BB%E5%8A%A8%E5%85%89%E6%A0%87.png" alt="005_移动光标-w551"></p><h4 id="2-行内移动"><a href="#2-行内移动" class="headerlink" title="2) 行内移动"></a>2) 行内移动</h4><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">w</td><td align="center">word</td><td>向后移动一个单词</td></tr><tr><td align="center">b</td><td align="center">back</td><td>向前移动一个单词</td></tr><tr><td align="center">0</td><td align="center"></td><td>行首</td></tr><tr><td align="center">^(shift + 6)</td><td align="center"></td><td>行首，第一个不是空白字符的位置</td></tr><tr><td align="center">$(shift + 4)</td><td align="center"></td><td>行尾</td></tr></tbody></table><h4 id="3-行数移动"><a href="#3-行数移动" class="headerlink" title="3) 行数移动"></a>3) 行数移动</h4><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">gg</td><td align="center">go</td><td>文件顶部</td></tr><tr><td align="center">G</td><td align="center">go</td><td>文件末尾</td></tr><tr><td align="center">数字gg</td><td align="center">go</td><td>移动到 数字 对应行数</td></tr><tr><td align="center">数字G</td><td align="center">go</td><td>移动到 数字 对应行数</td></tr><tr><td align="center">:数字</td><td align="center"></td><td>移动到 数字 对应行数</td></tr></tbody></table><h4 id="4-屏幕移动"><a href="#4-屏幕移动" class="headerlink" title="4) 屏幕移动"></a>4) 屏幕移动</h4><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">Ctrl + b</td><td align="center">back</td><td>向上翻页</td></tr><tr><td align="center">Ctrl + f</td><td align="center">forward</td><td>向下翻页</td></tr><tr><td align="center">H</td><td align="center">Head</td><td>屏幕顶部</td></tr><tr><td align="center">M</td><td align="center">Middle</td><td>屏幕中间</td></tr><tr><td align="center">L</td><td align="center">Low</td><td>屏幕底部</td></tr></tbody></table><blockquote><p>快速移动</p><p>数字 G</p><p>数字 ↑/↓</p><p>数字 ←/→</p></blockquote><h3 id="4-2-移动（程序）"><a href="#4-2-移动（程序）" class="headerlink" title="4.2 移动（程序）"></a>4.2 移动（程序）</h3><h4 id="1-段落移动"><a href="#1-段落移动" class="headerlink" title="1) 段落移动"></a>1) 段落移动</h4><ul><li><code>vi</code> 中使用 空行 来区分段落</li><li>在程序开发时，通常 <strong>一段功能相关的代码会写在一起</strong> —— 之间没有空行</li></ul><table><thead><tr><th align="center">命令</th><th>功能</th></tr></thead><tbody><tr><td align="center">{</td><td>上一段</td></tr><tr><td align="center">}</td><td>下一段</td></tr></tbody></table><h4 id="2-括号切换"><a href="#2-括号切换" class="headerlink" title="2) 括号切换"></a>2) 括号切换</h4><ul><li>在程序世界中，<code>()</code>、<code>[]</code>、<code>{}</code> 使用频率很高，而且 <strong>都是成对出现的</strong></li></ul><table><thead><tr><th align="center">命令</th><th>功能</th></tr></thead><tbody><tr><td align="center">%</td><td>括号匹配及切换</td></tr></tbody></table><h4 id="3-标记"><a href="#3-标记" class="headerlink" title="3) 标记"></a>3) 标记</h4><ul><li>在开发时，某一块代码可能<strong>需要稍后处理</strong>，例如：编辑、查看</li><li>此时先使用 <code>m</code> 增加一个标记，这样可以 <strong>在需要时快速地跳转回来</strong> 或者 <strong>执行其他编辑操作</strong></li><li><strong>标记名称</strong> 可以是 <code>a~z</code> 或者 <code>A~Z</code> 之间的任意 <strong>一个</strong> 字母</li><li>添加了标记的 <strong>行如果被删除</strong>，<strong>标记同时被删除</strong></li><li>如果 <strong>在其他行添加了相同名称的标记</strong>，<strong>之前添加的标记也会被替换掉</strong></li></ul><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">mx</td><td align="center">mark</td><td>添加标记 x，x 是 a<del>z 或者 A</del>Z 之间的任意一个字母</td></tr><tr><td align="center">‘x</td><td align="center"></td><td>直接定位到标记 x 所在位置</td></tr></tbody></table><h3 id="4-3-选中文本（可视模式）"><a href="#4-3-选中文本（可视模式）" class="headerlink" title="4.3 选中文本（可视模式）"></a>4.3 选中文本（可视模式）</h3><ul><li>学习 <code>复制</code> 命令前，应该先学会 <strong>怎么样选中 要复制的代码</strong></li><li>在 <code>vi</code> 中要选择文本，需要先使用 <code>Visual</code> 命令切换到 <strong>可视模式</strong></li><li><code>vi</code> 中提供了 <strong>三种</strong> 可视模式，可以方便程序员选择 <strong>选中文本的方式</strong></li><li>按 <code>ESC</code> 可以放弃选中，返回到 <strong>命令模式</strong></li></ul><table><thead><tr><th align="center">命令</th><th>模式</th><th>功能</th></tr></thead><tbody><tr><td align="center">v</td><td>可视模式</td><td>从光标位置开始按照正常模式选择文本</td></tr><tr><td align="center">V</td><td>可视行模式</td><td>选中光标经过的完整行</td></tr><tr><td align="center">Ctrl + v</td><td>可视块模式</td><td>垂直方向选中文本</td></tr></tbody></table><ul><li><strong>可视模式</strong>下，可以和 <strong>移动命令</strong> 连用，例如：<code>ggVG</code> 能够选中所有内容</li></ul><h3 id="4-4-撤销和恢复撤销"><a href="#4-4-撤销和恢复撤销" class="headerlink" title="4.4 撤销和恢复撤销"></a>4.4 撤销和恢复撤销</h3><ul><li>在学习编辑命令之前，先要知道怎样撤销之前一次 <strong>错误的</strong> 编辑动作！</li></ul><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">u</td><td align="center">undo</td><td>撤销上次命令</td></tr><tr><td align="center">CTRL + r</td><td align="center">redo</td><td>恢复撤销的命令</td></tr></tbody></table><h3 id="4-5-删除文本"><a href="#4-5-删除文本" class="headerlink" title="4.5 删除文本"></a>4.5 删除文本</h3><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">x</td><td align="center">cut</td><td>删除光标所在字符，或者选中文字</td></tr><tr><td align="center">d(移动命令)</td><td align="center">delete</td><td>删除移动命令对应的内容</td></tr><tr><td align="center">dd</td><td align="center">delete</td><td>删除光标所在行，可以 ndd 复制多行</td></tr><tr><td align="center">D</td><td align="center">delete</td><td>删除至行尾</td></tr></tbody></table><blockquote><p>提示：如果使用 <strong>可视模式</strong> 已经选中了一段文本，那么无论使用 <code>d</code> 还是 <code>x</code>，都可以删除选中文本</p></blockquote><ul><li>删除命令可以和 <strong>移动命令</strong> 连用，以下是常见的组合命令：</li></ul><pre><code>* dw        # 从光标位置删除到单词末尾* d0        # 从光标位置删除到一行的起始位置* d}        # 从光标位置删除到段落结尾* ndd       # 从光标位置向下连续删除 n 行* d代码行G   # 从光标所在行 删除到 指定代码行 之间的所有代码* d'a       # 从光标所在行 删除到 标记a 之间的所有代码</code></pre><h3 id="4-6-复制、粘贴"><a href="#4-6-复制、粘贴" class="headerlink" title="4.6 复制、粘贴"></a>4.6 复制、粘贴</h3><ul><li><code>vi</code> 中提供有一个 <strong>被复制文本的缓冲区</strong><ul><li><strong>复制</strong> 命令会将选中的文字保存在缓冲区 </li><li><strong>删除</strong> 命令删除的文字会被保存在缓冲区</li><li>在需要的位置，使用 <strong>粘贴</strong> 命令可以将缓冲区的文字插入到光标所在位置</li></ul></li></ul><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">y(移动命令)</td><td align="center">copy</td><td>复制</td></tr><tr><td align="center">yy</td><td align="center">copy</td><td>复制一行，可以 nyy 复制多行</td></tr><tr><td align="center">p</td><td align="center">paste</td><td>粘贴</td></tr></tbody></table><p><strong>提示</strong></p><ul><li>命令 <code>d</code>、<code>x</code> 类似于图形界面的 <strong>剪切操作</strong> —— <code>CTRL + X</code></li><li>命令 <code>y</code> 类似于图形界面的 <strong>复制操作</strong> —— <code>CTRL + C</code></li><li>命令 <code>p</code> 类似于图形界面的 <strong>粘贴操作</strong> —— <code>CTRL + V</code></li><li><code>vi</code> 中的 <strong>文本缓冲区同样只有一个</strong>，如果后续做过 <strong>复制、剪切</strong> 操作，之前缓冲区中的内容会被替换</li></ul><p><strong>注意</strong></p><ul><li><code>vi</code> 中的 <strong>文本缓冲区</strong> 和系统的 <strong>剪贴板</strong> 不是同一个</li><li>所以在其他软件中使用 <code>CTRL + C</code> 复制的内容，不能在 <code>vi</code> 中通过 <code>P</code> 命令粘贴</li><li>可以在 <strong>编辑模式</strong> 下使用 <strong>鼠标右键粘贴</strong></li></ul><h3 id="4-7-替换"><a href="#4-7-替换" class="headerlink" title="4.7 替换"></a>4.7 替换</h3><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th><th>工作模式</th></tr></thead><tbody><tr><td align="center">r</td><td align="center">replace</td><td>替换当前字符</td><td>命令模式</td></tr><tr><td align="center">R</td><td align="center">replace</td><td>替换当前行光标后的字符</td><td>替换模式</td></tr></tbody></table><ul><li><code>R</code> 命令可以进入 <strong>替换模式</strong>，替换完成后，按下 <code>ESC</code> 可以回到 <strong>命令模式</strong></li><li><strong>替换命令</strong> 的作用就是不用进入 <strong>编辑模式</strong>，对文件进行 <strong>轻量级的修改</strong></li></ul><h3 id="4-8-缩排和重复执行"><a href="#4-8-缩排和重复执行" class="headerlink" title="4.8 缩排和重复执行"></a>4.8 缩排和重复执行</h3><table><thead><tr><th align="center">命令</th><th>功能</th></tr></thead><tbody><tr><td align="center">&gt;&gt;</td><td>向右增加缩进</td></tr><tr><td align="center">&lt;&lt;</td><td>向左减少缩进</td></tr><tr><td align="center">.</td><td>重复上次命令</td></tr></tbody></table><ul><li><strong>缩排命令</strong> 在开发程序时，<strong>统一增加代码的缩进</strong> 比较有用！<ul><li>一次性 <strong>在选中代码前增加 4 个空格</strong>，就叫做 <strong>增加缩进</strong></li><li>一次性 <strong>在选中代码前删除 4 个空格</strong>，就叫做 <strong>减少缩进</strong></li></ul></li><li>在 <strong>可视模式</strong> 下，缩排命令只需要使用 <strong>一个</strong> <code>&gt;</code> 或者 <code>&lt;</code></li></ul><blockquote><p>在程序中，<strong>缩进</strong> 通常用来表示代码的归属关系</p><ul><li>前面空格越少，代码的级别越高</li><li>前面空格越多，代码的级别越低</li></ul></blockquote><h3 id="4-9-查找"><a href="#4-9-查找" class="headerlink" title="4.9 查找"></a>4.9 查找</h3><h4 id="常规查找"><a href="#常规查找" class="headerlink" title="常规查找"></a>常规查找</h4><table><thead><tr><th align="center">命令</th><th>功能</th></tr></thead><tbody><tr><td align="center">/str</td><td>查找 str</td></tr></tbody></table><ul><li>查找到指定内容之后，使用 <code>Next</code> 查找下一个出现的位置：<ul><li><code>n</code>: 查找下一个</li><li><code>N</code>: 查找上一个</li></ul></li><li>如果不想看到高亮显示，可以随便查找一个文件中不存在的内容即可</li></ul><h4 id="单词快速匹配"><a href="#单词快速匹配" class="headerlink" title="单词快速匹配"></a>单词快速匹配</h4><table><thead><tr><th align="center">命令</th><th>功能</th></tr></thead><tbody><tr><td align="center">*</td><td>向后查找当前光标所在单词</td></tr><tr><td align="center">#</td><td>向前查找当前光标所在单词</td></tr></tbody></table><ul><li>在开发中，通过单词快速匹配，可以快速看到这个单词在其他什么位置使用过</li></ul><h3 id="4-10-查找并替换"><a href="#4-10-查找并替换" class="headerlink" title="4.10 查找并替换"></a>4.10 查找并替换</h3><ul><li>在 <code>vi</code> 中查找和替换命令需要在 <strong>末行模式</strong> 下执行</li><li>记忆命令格式：</li></ul><pre><code>:%s///g</code></pre><h4 id="1-全局替换"><a href="#1-全局替换" class="headerlink" title="1) 全局替换"></a>1) 全局替换</h4><ul><li><strong>一次性</strong>替换文件中的 <strong>所有出现的旧文本</strong></li><li>命令格式如下：</li></ul><pre><code>:%s/旧文本/新文本/g</code></pre><h4 id="2-可视区域替换"><a href="#2-可视区域替换" class="headerlink" title="2) 可视区域替换"></a>2) 可视区域替换</h4><ul><li><strong>先选中</strong> 要替换文字的 <strong>范围</strong></li><li>命令格式如下：</li></ul><pre><code>:s/旧文本/新文本/g</code></pre><h4 id="3-确认替换"><a href="#3-确认替换" class="headerlink" title="3) 确认替换"></a>3) 确认替换</h4><ul><li>如果把末尾的 <code>g</code> 改成 <code>gc</code> 在替换的时候，会有提示！<strong>推荐使用！</strong></li></ul><pre><code>:%s/旧文本/新文本/gc</code></pre><ol><li><code>y</code> - <code>yes</code> 替换</li><li><code>n</code> - <code>no</code> 不替换</li><li><code>a</code> - <code>all</code> 替换所有</li><li><code>q</code> - <code>quit</code> 退出替换</li><li><code>l</code> - <code>last</code> 最后一个，并把光标移动到行首</li><li><code>^E</code> 向下滚屏</li><li><code>^Y</code> 向上滚屏</li></ol><h3 id="4-11-插入命令"><a href="#4-11-插入命令" class="headerlink" title="4.11 插入命令"></a>4.11 插入命令</h3><ul><li>在 <code>vi</code> 中除了常用的 <code>i</code> 进入 <strong>编辑模式</strong> 外，还提供了以下命令同样可以进入编辑模式：</li></ul><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th><th align="center">常用</th></tr></thead><tbody><tr><td align="center">i</td><td align="center">insert</td><td>在当前字符前插入文本</td><td align="center">常用</td></tr><tr><td align="center">I</td><td align="center">insert</td><td>在行首插入文本</td><td align="center">较常用</td></tr><tr><td align="center">a</td><td align="center">append</td><td>在当前字符后添加文本</td><td align="center"></td></tr><tr><td align="center">A</td><td align="center">append</td><td>在行末添加文本</td><td align="center">较常用</td></tr><tr><td align="center">o</td><td align="center"></td><td>在当前行后面插入一空行</td><td align="center">常用</td></tr><tr><td align="center">O</td><td align="center"></td><td>在当前行前面插入一空行</td><td align="center">常用</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/004_%E6%8F%92%E5%85%A5%E5%91%BD%E4%BB%A4.png" alt="004_插入命令-w400"></p><h4 id="演练-1-——-编辑命令和数字连用"><a href="#演练-1-——-编辑命令和数字连用" class="headerlink" title="演练 1 —— 编辑命令和数字连用"></a>演练 1 —— 编辑命令和数字连用</h4><ul><li>在开发中，可能会遇到连续输入 <code>N</code> 个同样的字符</li></ul><blockquote><p>在 <code>Python</code> 中有简单的方法，但是其他语言中通常需要自己输入</p></blockquote><ul><li>例如：<code>**********</code> 连续 10 个星号</li></ul><p>要实现这个效果可以在 <strong>命令模式</strong> 下</p><ol><li>输入 <code>10</code>，表示要重复 10 次</li><li>输入 <code>i</code> 进入 <strong>编辑模式</strong></li><li>输入 <code>*</code> 也就是重复的文字</li><li>按下 <code>ESC</code> 返回到 <strong>命令模式</strong>，返回之后 <code>vi</code> 就会把第 <code>2、3</code> 两步的操作重复 <code>10</code> 次</li></ol><blockquote><p>提示：正常开发时，在 <strong>进入编辑模式之前，不要按数字</strong></p></blockquote><h4 id="演练-2-——-利用-可视块-给多行代码增加注释"><a href="#演练-2-——-利用-可视块-给多行代码增加注释" class="headerlink" title="演练 2 —— 利用 可视块 给多行代码增加注释"></a>演练 2 —— 利用 可视块 给多行代码增加注释</h4><ul><li>在开发中，可能会遇到一次性给多行代码 <strong>增加注释</strong> 的情况</li></ul><blockquote><p>在 <code>Python</code> 中，要给代码增加注释，可以在代码前增加一个 <code># </code></p></blockquote><p>要实现这个效果可以在 <strong>命令模式</strong> 下</p><ol><li>移动到要添加注释的 <strong>第 1 行代码</strong>，按 <code>^</code> 来到行首</li><li>按 <code>CTRL + v</code> 进入 <strong>可视块</strong> 模式</li><li>使用 <code>j</code> 向下连续选中要添加的代码行</li><li>输入 <code>I</code> 进入 <strong>编辑模式</strong>(光标前输入)，并在 <strong>行首插入</strong>，注意：一定要使用 <strong>I</strong>(<code>a</code>是在光标后输入)</li><li>输入 <code># </code> 也就是注释符号</li><li>按下 <code>ESC</code> 返回到 <strong>命令模式</strong>，返回之后 <code>vi</code> 会在之前选中的每一行代码 <strong>前</strong> 插入 <code># </code></li></ol><h2 id="05-分屏命令"><a href="#05-分屏命令" class="headerlink" title="05. 分屏命令"></a>05. 分屏命令</h2><ul><li>属于 <code>vi</code> 的高级命令 —— 可以 <strong>同时编辑和查看多个文件</strong></li></ul><h3 id="5-1-末行命令扩展"><a href="#5-1-末行命令扩展" class="headerlink" title="5.1 末行命令扩展"></a>5.1 末行命令扩展</h3><p><strong>末行命令</strong> 主要是针对文件进行操作的：<strong>保存</strong>、<strong>退出</strong>、<strong>保存&amp;退出</strong>、<strong>搜索&amp;替换</strong>、<strong>另存</strong>、<strong>新建</strong>、<strong>浏览文件</strong></p><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">:e .</td><td align="center">edit</td><td>会打开内置的文件浏览器，浏览要当前目录下的文件</td></tr><tr><td align="center">:n 文件名</td><td align="center">new</td><td>新建文件</td></tr><tr><td align="center">:w 文件名</td><td align="center">write</td><td>另存为，但是仍然编辑当前文件，并不会切换文件</td></tr></tbody></table><blockquote><p>提示：切换文件之前，必须保证当前这个文件已经被保存！</p></blockquote><ul><li>已经学习过的 <strong>末行命令</strong>：</li></ul><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">:w</td><td align="center">write</td><td>保存</td></tr><tr><td align="center">:q</td><td align="center">quit</td><td>退出，如果没有保存，不允许退出</td></tr><tr><td align="center">:q!</td><td align="center">quit</td><td>强行退出，不保存退出</td></tr><tr><td align="center">:wq</td><td align="center">write &amp; quit</td><td>保存并退出</td></tr><tr><td align="center">:x</td><td align="center"></td><td>保存并退出</td></tr><tr><td align="center">:%s///gc</td><td align="center"></td><td>确认搜索并替换</td></tr><tr><td align="center">set nu</td><td align="center"></td><td>显示行号</td></tr><tr><td align="center">:files</td><td align="center"></td><td>查看打开文件名</td></tr><tr><td align="center">:open 打开的文件名</td><td align="center"></td><td>切换文件1</td></tr><tr><td align="center">:bn</td><td align="center"></td><td>切换到下一个文件</td></tr><tr><td align="center">:bp</td><td align="center"></td><td>切换到上一个文件</td></tr><tr><td align="center"></td><td align="center"></td><td></td></tr><tr><td align="center"></td><td align="center"></td><td></td></tr></tbody></table><blockquote><p>在实际开发中，可以使用 <code>w</code> 命令 <strong>阶段性的备份代码</strong></p></blockquote><h3 id="5-2-分屏命令"><a href="#5-2-分屏命令" class="headerlink" title="5.2 分屏命令"></a>5.2 分屏命令</h3><ul><li>使用 <strong>分屏命令</strong>，可以 <strong>同时编辑和查看多个文件</strong></li></ul><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">:sp [文件名]</td><td align="center">split</td><td>横向增加分屏</td></tr><tr><td align="center">:vsp [文件名]</td><td align="center">vertical split</td><td>纵向增加分屏</td></tr></tbody></table><h4 id="1-切换分屏窗口"><a href="#1-切换分屏窗口" class="headerlink" title="1) 切换分屏窗口"></a>1) 切换分屏窗口</h4><blockquote><p>分屏窗口都是基于 <code>CTRL + W</code> 这个快捷键的，<code>w</code> 对应的英文单词是 <code>window</code></p></blockquote><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">w</td><td align="center">window</td><td>切换到下一个窗口</td></tr><tr><td align="center">r</td><td align="center">reverse</td><td>互换窗口</td></tr><tr><td align="center">c</td><td align="center">close</td><td>关闭当前窗口，但是不能关闭最后一个窗口</td></tr><tr><td align="center">q</td><td align="center">quit</td><td>退出当前窗口，如果是最后一个窗口，则关闭 vi</td></tr><tr><td align="center">o</td><td align="center">other</td><td>关闭其他窗口</td></tr></tbody></table><h4 id="2-调整窗口大小"><a href="#2-调整窗口大小" class="headerlink" title="2) 调整窗口大小"></a>2) 调整窗口大小</h4><blockquote><p>分屏窗口都是基于 <code>CTRL + W</code> 这个快捷键的，<code>w</code> 对应的英文单词是 <code>window</code></p></blockquote><table><thead><tr><th align="center">命令</th><th align="center">英文</th><th>功能</th></tr></thead><tbody><tr><td align="center">+</td><td align="center"></td><td>增加窗口高度</td></tr><tr><td align="center">-</td><td align="center"></td><td>减少窗口高度</td></tr><tr><td align="center">&gt;</td><td align="center"></td><td>增加窗口宽度</td></tr><tr><td align="center">&lt;</td><td align="center"></td><td>减少窗口宽度</td></tr><tr><td align="center">=</td><td align="center"></td><td>等分窗口大小</td></tr></tbody></table><blockquote><p>调整窗口宽高的命令可以和数字连用，例如：<code>5 CTRL + W +</code> 连续 5 次增加高度</p></blockquote><h2 id="06-常用命令速查图"><a href="#06-常用命令速查图" class="headerlink" title="06. 常用命令速查图"></a>06. 常用命令速查图</h2><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/vim.png" alt="vi"></p><h3 id="vimrc"><a href="#vimrc" class="headerlink" title="vimrc"></a>vimrc</h3><ul><li><code>vimrc</code> 是 <code>vim</code> 的配置文件，可以设置 vim 的配置，包括：<strong>热键</strong>、<strong>配色</strong>、<strong>语法高亮</strong>、<strong>插件</strong> 等</li><li><code>Linux</code> 中 <code>vimrc</code> 有两个位置，<strong>家目录下的配置文件优先级更高</strong></li></ul><pre><code>/etc/vim/vimrc~/.vimrc</code></pre><ul><li>常用的插件有：<ul><li>代码补全</li><li>代码折叠</li><li>搜索</li><li>Git 集成</li><li>……</li></ul></li><li>网上有很多高手已经配置好的针对 <code>python</code> 开发的 <code>vimrc</code> 文件，可以下载过来直接使用，或者等大家多 <code>Linux</code> 比较熟悉后，再行学习！</li></ul><h3 id="实用功能"><a href="#实用功能" class="headerlink" title="实用功能"></a>实用功能</h3><h4 id="1-代码着色"><a href="#1-代码着色" class="headerlink" title="1_代码着色"></a>1_代码着色</h4><p><code>syntax on/off</code> 控制着色开关</p><h4 id="2-计算器"><a href="#2-计算器" class="headerlink" title="2_计算器"></a>2_计算器</h4><p>编辑模式下按下<code>ctrl + r</code>, 然后输入<code>=</code>, 输入需要计算的内容</p><h4 id="3-别名机制"><a href="#3-别名机制" class="headerlink" title="3_别名机制"></a>3_别名机制</h4><blockquote><p>依靠一个别名映射文件</p><p>: ~/.bashrc</p></blockquote><h4 id="4-退出方式"><a href="#4-退出方式" class="headerlink" title="4_退出方式"></a>4_退出方式</h4><p><code>:x</code>: 文件没有被修改, 表示直接退出, 文件修改情况下, 表示保存并退出(:wq会刷新文件的更新时间, 即使没有修改文件)</p><blockquote><p><code>:X</code>: 对文件进行加密</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vi-x2F-vim-——-终端中的编辑器&quot;&gt;&lt;a href=&quot;#vi-x2F-vim-——-终端中的编辑器&quot; class=&quot;headerlink&quot; title=&quot;vi/vim —— 终端中的编辑器&quot;&gt;&lt;/a&gt;vi/vim —— 终端中的编辑器&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="操作系统学习" scheme="https://roranrui.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="操作系统" scheme="https://roranrui.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Linux" scheme="https://roranrui.cn/tags/Linux/"/>
    
    <category term="Vim" scheme="https://roranrui.cn/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>远程管理常用命令</title>
    <link href="https://roranrui.cn/2022/04/22/yuan-cheng-guan-li-chang-yong-ming-ling/"/>
    <id>https://roranrui.cn/2022/04/22/yuan-cheng-guan-li-chang-yong-ming-ling/</id>
    <published>2022-04-22T15:26:46.000Z</published>
    <updated>2022-04-22T15:28:21.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="远程管理常用命令"><a href="#远程管理常用命令" class="headerlink" title="远程管理常用命令"></a>远程管理常用命令</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>关机/重启<ul><li><code>shutdown</code></li></ul></li><li>查看或配置网卡信息<ul><li><code>ifconfig</code></li><li><code>ping</code></li></ul></li><li>远程登录和复制文件<ul><li><code>ssh</code></li><li><code>scp</code></li></ul></li></ul><h2 id="01-关机-x2F-重启"><a href="#01-关机-x2F-重启" class="headerlink" title="01. 关机/重启"></a>01. 关机/重启</h2><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>shutdown 选项 时间</td><td>shutdown</td><td>关机／重新启动</td></tr></tbody></table><h3 id="1-1-shutdown-服务器慎用"><a href="#1-1-shutdown-服务器慎用" class="headerlink" title="1.1 shutdown(服务器慎用)"></a>1.1 <code>shutdown</code>(服务器慎用)</h3><ul><li><code>shutdown</code> 命令可以 <strong>安全</strong> <strong>关闭</strong> 或者 <strong>重新启动系统</strong></li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-r</td><td>重新启动</td></tr></tbody></table><blockquote><p>提示：</p><ul><li><strong>不指定选项和参数</strong>，默认表示 <strong>1 分钟</strong>之后 <strong>关闭电脑</strong></li><li>远程维护服务器时，最好不要关闭系统，而应该重新启动系统</li></ul></blockquote><ul><li>常用命令示例</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 重新启动操作系统，其中 now 表示现在</span>$ <span class="token function">shutdown</span> -r now<span class="token comment" spellcheck="true"># 立刻关机，其中 now 表示现在</span>$ <span class="token function">shutdown</span> now<span class="token comment" spellcheck="true"># 系统在今天的 20:25 会关机</span>$ <span class="token function">shutdown</span> 20:25<span class="token comment" spellcheck="true"># 系统再过十分钟后自动关机</span>$ <span class="token function">shutdown</span> +10<span class="token comment" spellcheck="true"># 取消之前指定的关机计划</span>$ <span class="token function">shutdown</span> -c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>其他关机命令: </p><p>init 0</p><p>halt</p><p>poweroff</p></blockquote><h3 id="1-2-reboot"><a href="#1-2-reboot" class="headerlink" title="1.2 reboot"></a>1.2 reboot</h3><p><code>reboot</code>: 重启</p><p><code>reboot -w</code>: 模拟重启但不重启(之写关机与开机的日志信息)</p><h2 id="02-查看或配置网卡信息"><a href="#02-查看或配置网卡信息" class="headerlink" title="02. 查看或配置网卡信息"></a>02. 查看或配置网卡信息</h2><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ifconfig</td><td>configure a network interface</td><td>查看/配置计算机当前的网卡配置信息</td></tr><tr><td>02</td><td>ping ip地址</td><td>ping</td><td>检测到目标 ip地址 的连接是否正常</td></tr></tbody></table><h3 id="2-1-网卡-和-IP-地址"><a href="#2-1-网卡-和-IP-地址" class="headerlink" title="2.1 网卡 和 IP 地址"></a>2.1 网卡 和 IP 地址</h3><h4 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h4><ul><li>网卡是一个专门负责网络通讯的硬件设备</li><li><strong>IP 地址</strong>是设置在网卡上的地址信息</li></ul><blockquote><p>我们可以把 <strong>电脑</strong> 比作 <strong>电话</strong>，<strong>网卡</strong> 相当于 <strong>SIM 卡</strong>，<strong>IP 地址</strong> 相当于 <strong>电话号码</strong></p></blockquote><h4 id="IP-地址"><a href="#IP-地址" class="headerlink" title="IP 地址"></a>IP 地址</h4><ul><li><strong>每台联网的电脑上</strong>都有 <strong>IP 地址</strong>，<strong>是保证电脑之间正常通讯的重要设置</strong></li></ul><blockquote><p>注意：每台电脑的 IP 地址不能相同，否则会出现 IP 地址冲突，并且没有办法正常通讯</p><p>提示：有关 <strong>IP 地址</strong>的详细内容，在就业班会详细讲解！</p></blockquote><h3 id="2-2-ifconfig"><a href="#2-2-ifconfig" class="headerlink" title="2.2 ifconfig"></a>2.2 <code>ifconfig</code></h3><ul><li><code>ifconfig</code> 可以查看／配置计算机当前的网卡配置信息</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看网卡配置信息</span>$ <span class="token function">ifconfig</span><span class="token comment" spellcheck="true"># 查看网卡对应的 IP 地址</span>$ <span class="token function">ifconfig</span> <span class="token operator">|</span> <span class="token function">grep</span> inet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>提示：一台计算机中有可能会有一个 <strong>物理网卡</strong> 和 <strong>多个虚拟网卡</strong>，在 Linux 中物理网卡的名字通常以 <code>ensXX</code> 表示</p></blockquote><ul><li><code>127.0.0.1</code> 被称为 <strong>本地回环/环回地址</strong>，一般用来测试本机网卡是否正常</li></ul><h3 id="2-3-ping"><a href="#2-3-ping" class="headerlink" title="2.3 ping"></a>2.3 <code>ping</code></h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 检测到目标主机是否连接正常</span>$ <span class="token function">ping</span> IP地址<span class="token comment" spellcheck="true"># 检测本地网卡工作正常</span>$ <span class="token function">ping</span> 127.0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>ping</code> 一般用于检测当前计算机到目标计算机之间的网络 <strong>是否通畅</strong>，<strong>数值越大，速度越慢</strong></li></ul><blockquote><ul><li><code>ping</code> 的工作原理与潜水艇的声纳相似，<code>ping</code> 这个命令就是取自 <strong>声纳的声音</strong> </li><li>网络管理员之间也常将 <code>ping</code> 用作动词 —— <strong>ping 一下计算机X，看他是否开着</strong></li></ul></blockquote><p>原理：网络上的机器都有 <strong>唯一确定的 IP 地址</strong>，我们给<strong>目标 IP 地址</strong>发送一个数据包，对方就要返回一个数据包，根据返回的数据包以及时间，我们可以确定目标主机的存在</p><blockquote><p>提示：在 Linux 中，想要终止一个终端程序的执行，绝大多数都可以使用 <code>CTRL + C</code></p></blockquote><h2 id="03-远程登录和复制文件"><a href="#03-远程登录和复制文件" class="headerlink" title="03. 远程登录和复制文件"></a>03. 远程登录和复制文件</h2><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ssh 用户名@ip</td><td>secure shell</td><td>关机／重新启动</td></tr><tr><td>02</td><td>scp 用户名@ip:文件名或路径 用户名@ip:文件名或路径</td><td>secure copy</td><td>远程复制文件</td></tr></tbody></table><h3 id="3-1-ssh-基础（重点）"><a href="#3-1-ssh-基础（重点）" class="headerlink" title="3.1 ssh 基础（重点）"></a>3.1 <code>ssh</code> 基础（重点）</h3><p>在 Linux 中 SSH 是 <strong>非常常用</strong> 的工具，通过 <strong>SSH 客户端</strong> 我们可以连接到运行了 <strong>SSH 服务器</strong> 的远程机器上</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/001_SSH%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="001_SSH示意图"></p><ul><li><strong>SSH 客户端</strong>是一种使用 <code>Secure Shell（SSH）</code> 协议连接到远程计算机的软件程序</li><li><code>SSH</code> 是目前较可靠，<strong>专为远程登录会话和其他网络服务</strong> 提供安全性的协议<ul><li>利用 <code>SSH 协议</code> 可以有效<strong>防止远程管理过程中的信息泄露</strong></li><li>通过 <code>SSH 协议</code> 可以对所有传输的数据进行加密，也能够防止 DNS 欺骗和 IP 欺骗</li></ul></li><li><code>SSH</code> 的另一项优点是传输的数据可以是经过压缩的，所以可以加快传输的速度</li></ul><h4 id="1-域名-和-端口号"><a href="#1-域名-和-端口号" class="headerlink" title="1) 域名 和 端口号"></a>1) 域名 和 端口号</h4><h5 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h5><ul><li>由一串 <strong>用点分隔</strong> 的名字组成，例如：<code>www.itcast.cn</code></li><li>是 <strong>IP 地址</strong> 的别名，方便用户记忆</li></ul><h5 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h5><ul><li><p><strong>IP 地址</strong>：通过 <strong>IP 地址</strong> 找到网络上的 <strong>计算机</strong></p></li><li><p><strong>端口号</strong>：通过 <strong>端口号</strong> 可以找到 <strong>计算机上运行的应用程序</strong></p><ul><li><strong>SSH 服务器</strong> 的默认端口号是 <code>22</code>，如果是默认端口号，在连接的时候，可以省略</li></ul></li><li><p>常见服务端口号列表：</p></li></ul><table><thead><tr><th>序号</th><th>服务</th><th>端口号</th></tr></thead><tbody><tr><td>01</td><td>SSH 服务器</td><td>22</td></tr><tr><td>02</td><td>Web 服务器</td><td>80</td></tr><tr><td>03</td><td>HTTPS</td><td>443</td></tr><tr><td>04</td><td>FTP 服务器</td><td>21</td></tr></tbody></table><blockquote><p>提示：有关 <strong>端口号</strong>的详细内容，在就业班会详细讲解！</p></blockquote><h4 id="2-SSH-客户端的简单使用"><a href="#2-SSH-客户端的简单使用" class="headerlink" title="2) SSH 客户端的简单使用"></a>2) SSH 客户端的简单使用</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token punctuation">[</span>-p port<span class="token punctuation">]</span> user@remote<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>user</code> 是在远程机器上的用户名，如果不指定的话默认为当前用户</li><li><code>remote</code> 是远程机器的地址，可以是 <strong>IP</strong>／<strong>域名</strong>，或者是 <strong>后面会提到的别名</strong></li><li><code>port</code> 是 <strong>SSH Server 监听的端口</strong>，如果不指定，就为默认值 <code>22</code></li></ul><blockquote><p>提示：</p><ul><li>使用 <code>exit</code> 退出当前用户的登录</li></ul><p>注意：</p><ul><li><code>ssh</code> 这个终端命令只能在 <code>Linux</code> 或者 <code>UNIX</code> 系统下使用</li><li>如果在 <code>Windows</code> 系统中，可以安装 <code>PuTTY</code> 或者 <code>XShell</code> 客户端软件即可</li></ul><p>提示：</p><ul><li>在工作中，SSH 服务器的端口号很有可能<strong>不是 22</strong>，如果遇到这种情况就需要使用 <code>-p</code> 选项，指定正确的端口号，否则无法正常连接到服务器</li></ul></blockquote><h4 id="3-Windows-下-SSH-客户端的安装"><a href="#3-Windows-下-SSH-客户端的安装" class="headerlink" title="3) Windows 下 SSH 客户端的安装"></a>3) Windows 下 SSH 客户端的安装</h4><ul><li><code>Putty</code> <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">http://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html</a></li><li><code>XShell</code> <a href="http://xshellcn.com/">http://xshellcn.com</a></li></ul><blockquote><p>建议从官方网站下载正式的安装程序</p></blockquote><h3 id="3-2-scp（掌握）"><a href="#3-2-scp（掌握）" class="headerlink" title="3.2 scp（掌握）"></a>3.2 <code>scp</code>（掌握）</h3><ul><li>scp 就是 <code>secure copy</code>，是一个在 Linux 下用来进行 <strong>远程拷贝文件</strong> 的命令</li><li>它的<strong>地址格式与 ssh 基本相同</strong>，<strong>需要注意的是</strong>，在指定端口时用的是大写的 <code>-P</code> 而不是小写的</li></ul><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/002_SCP%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="002_SCP示意图"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 把本地当前目录下的 01.py 文件 复制到 远程 家目录下的 Desktop/01.py</span><span class="token comment" spellcheck="true"># 注意：`:` 后面的路径如果不是绝对路径，则以用户的家目录作为参照路径</span><span class="token function">scp</span> -P port 01.py user@remote:Desktop/01.py<span class="token comment" spellcheck="true"># 把远程 家目录下的 Desktop/01.py 文件 复制到 本地当前目录下的 01.py</span><span class="token function">scp</span> -P port user@remote:Desktop/01.py 01.py<span class="token comment" spellcheck="true"># 加上 -r 选项可以传送文件夹</span><span class="token comment" spellcheck="true"># 把当前目录下的 demo 文件夹 复制到 远程 家目录下的 Desktop</span><span class="token function">scp</span> -r demo user@remote:Desktop<span class="token comment" spellcheck="true"># 把远程 家目录下的 Desktop 复制到 当前目录下的 demo 文件夹</span><span class="token function">scp</span> -r user@remote:Desktop demo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-r</td><td>若给出的源文件是目录文件，则 scp 将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名</td></tr><tr><td>-P</td><td>若远程 SSH 服务器的端口不是 22，需要使用大写字母 -P 选项指定端口</td></tr></tbody></table><blockquote><p>注意：</p><ul><li><code>scp</code> 这个终端命令只能在 <code>Linux</code> 或者 <code>UNIX</code> 系统下使用</li><li>如果在 <code>Windows</code> 系统中，可以安装 <code>PuTTY</code>，使用 <code>pscp</code> 命令行工具或者安装 <code>FileZilla</code> 使用 <code>FTP</code> 进行文件传输</li></ul></blockquote><h4 id="FileZilla"><a href="#FileZilla" class="headerlink" title="FileZilla"></a><code>FileZilla</code></h4><ul><li>官方网站：<a href="https://www.filezilla.cn/download/client">https://www.filezilla.cn/download/client</a></li><li><code>FileZilla</code> 在传输文件时，使用的是 <code>FTP 服务</code> 而不是 <code>SSH 服务</code>，因此端口号应该设置为 <code>21</code></li></ul><h3 id="3-3-SSH-高级（知道）"><a href="#3-3-SSH-高级（知道）" class="headerlink" title="3.3 SSH 高级（知道）"></a>3.3 SSH 高级（知道）</h3><ul><li>免密码登录</li><li>配置别名</li></ul><blockquote><p>提示：有关 SSH 配置信息都保存在用户家目录下的 <code>.ssh</code> 目录下</p></blockquote><h4 id="1）免密码登录"><a href="#1）免密码登录" class="headerlink" title="1）免密码登录"></a>1）免密码登录</h4><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ul><li>配置公钥<ul><li>执行 <code>ssh-keygen</code> 即可生成 SSH 钥匙，一路回车即可</li></ul></li><li>上传公钥到服务器<ul><li>执行 <code>ssh-copy-id -p port user@remote</code>，可以让远程服务器记住我们的公钥</li></ul></li></ul><h5 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h5><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/003_SSH%20%E5%85%8D%E5%AF%86%E7%A0%81%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="003_SSH 免密码示意图"></p><blockquote><p>非对称加密算法</p><ul><li>使用 <strong>公钥</strong> 加密的数据，需要使用 <strong>私钥</strong> 解密</li><li>使用 <strong>私钥</strong> 加密的数据，需要使用 <strong>公钥</strong> 解密</li></ul></blockquote><h4 id="2-配置别名"><a href="#2-配置别名" class="headerlink" title="2) 配置别名"></a>2) 配置别名</h4><p>每次都输入 <code>ssh -p port user@remote</code>，时间久了会觉得很麻烦，特别是当 <code>user</code>, <code>remote</code> 和 <code>port</code> 都得输入，而且还不好记忆</p><p>而 <strong>配置别名</strong> 可以让我们进一步偷懒，譬如用：<code>ssh mac</code> 来替代上面这么一长串，那么就在 <code>~/.ssh/config</code> 里面追加以下内容：</p><pre><code>Host mac    HostName ip地址    User itheima    Port 22</code></pre><p><strong>保存之后，即可用 <code>ssh mac</code> 实现远程登录了，<code>scp</code> 同样可以使用</strong></p><h2 id="04-其他"><a href="#04-其他" class="headerlink" title="04. 其他"></a>04. 其他</h2><h3 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h3><p><code>hostname: </code>操作服务器的主机名, 默认输入完整的主机名</p><p><code>hostname -f</code> : 表示输出当前主机名中的FQDN(全限定域名)</p><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p><code>id</code>:  查看一个用户的基本信息(用户id 用户组id 附加组id) 默认当前用户</p><p><code>id 用户名</code></p><h3 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h3><p><code>whoami</code>: 当前登录用户名</p><h3 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h3><p>统计计算机运行时间</p><h3 id="uname"><a href="#uname" class="headerlink" title="uname"></a>uname</h3><p>获取计算机操作系统相关信息</p><p><code>uname</code>: 操作系统类型</p><p><code>uname -a</code>: 完整信息</p><h3 id="netstat-tnlp"><a href="#netstat-tnlp" class="headerlink" title="netstat -tnlp"></a>netstat -tnlp</h3><p>查看网络链接状态</p><blockquote><p>-t : 只列出TCP协议的链接</p><p>-n : 将地址从字母组合转化成ip地址 将协议转化成端口号来显示</p><p>-l : 过滤出”state” 列中值为<strong>LISTEN</strong>(监听)的连接</p><p>-p : 显示发起链接的进程<strong>PID</strong>和进程链接</p></blockquote><h3 id="man"><a href="#man" class="headerlink" title="man"></a>man</h3><p>manual, 手册, 包含Linux全部命令, EN;</p><p><code>man 命令</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;远程管理常用命令&quot;&gt;&lt;a href=&quot;#远程管理常用命令&quot; class=&quot;headerlink&quot; title=&quot;远程管理常用命令&quot;&gt;&lt;/a&gt;远程管理常用命令&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="操作系统学习" scheme="https://roranrui.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="操作系统" scheme="https://roranrui.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Linux" scheme="https://roranrui.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>用户权限相关命令</title>
    <link href="https://roranrui.cn/2022/04/22/yong-hu-quan-xian-xiang-guan-ming-ling/"/>
    <id>https://roranrui.cn/2022/04/22/yong-hu-quan-xian-xiang-guan-ming-ling/</id>
    <published>2022-04-22T15:22:53.000Z</published>
    <updated>2022-04-22T15:26:29.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户权限相关命令"><a href="#用户权限相关命令" class="headerlink" title="用户权限相关命令"></a>用户权限相关命令</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li><strong>用户</strong> 和 <strong>权限</strong> 的基本概念</li><li><strong>用户管理</strong> 终端命令</li><li><strong>组管理</strong> 终端命令</li><li><strong>修改权限</strong> 终端命令</li></ul><h2 id="01-用户-和-权限-的基本概念"><a href="#01-用户-和-权限-的基本概念" class="headerlink" title="01. 用户 和 权限 的基本概念"></a>01. <strong>用户</strong> 和 <strong>权限</strong> 的基本概念</h2><h3 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h3><ul><li><strong>用户</strong> 是 Linux 系统工作中重要的一环，用户管理包括 <strong>用户</strong> 与 <strong>组</strong> 管理</li><li>在 Linux 系统中，不论是由本机或是远程登录系统，每个系统都<strong>必须拥有一个账号</strong>，并且<strong>对于不同的系统资源拥有不同的使用权限</strong></li><li>在 Linux 中，可以指定 <strong>每一个用户</strong> 针对 <strong>不同的文件或者目录</strong> 的 <strong>不同权限</strong></li><li>对 <strong>文件／目录</strong> 的权限包括：</li></ul><table><thead><tr><th align="center">序号</th><th align="center">权限</th><th align="center">英文</th><th align="center">缩写</th><th align="center">数字代号</th></tr></thead><tbody><tr><td align="center">01</td><td align="center">读</td><td align="center">read</td><td align="center">r</td><td align="center">4</td></tr><tr><td align="center">02</td><td align="center">写</td><td align="center">write</td><td align="center">w</td><td align="center">2</td></tr><tr><td align="center">03</td><td align="center">执行</td><td align="center">excute</td><td align="center">x</td><td align="center">1</td></tr></tbody></table><h3 id="1-2-组"><a href="#1-2-组" class="headerlink" title="1.2 组"></a>1.2 组</h3><ul><li>为了方便用户管理，提出了 <strong>组</strong> 的概念，如下图所示</li></ul><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/001_%E7%BB%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="001_组示意图"></p><ul><li>在实际应用中，可以预先针对 <strong>组</strong> 设置好权限，然后 <strong>将不同的用户添加到对应的组中</strong>，从而<strong>不用依次为每一个用户设置权限</strong></li></ul><h3 id="1-3-ls-l-扩展"><a href="#1-3-ls-l-扩展" class="headerlink" title="1.3 ls -l 扩展"></a>1.3 ls -l 扩展</h3><ul><li><p><code>ls -l</code> 可以查看文件夹下文件的详细信息，从左到右依次是：</p><ul><li><strong>权限</strong>，第 1 个字符如果是 <code>d</code> 表示目录</li><li><strong>硬链接数</strong>，通俗地讲，就是有多少种方式，可以访问到当前目录／文件</li><li><strong>拥有者</strong>，家目录下 文件／目录 的拥有者通常都是当前用户</li><li><strong>组</strong>，在 Linux 中，很多时候，会出现组名和用户名相同的情况，后续会讲</li><li><strong>大小</strong></li><li><strong>时间</strong></li><li><strong>名称</strong></li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/321002.png" alt="002_权限示意图"></p><h3 id="1-4-chmod-简单使用（重要）"><a href="#1-4-chmod-简单使用（重要）" class="headerlink" title="1.4 chmod 简单使用（重要）"></a>1.4 <code>chmod</code> 简单使用（重要）</h3><ul><li><code>chmod</code> 可以修改 <strong>用户／组</strong> 对 <strong>文件／目录</strong> 的权限</li><li>命令格式如下：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> +/-rwx 文件名<span class="token operator">|</span>目录名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>提示：以上方式会一次性修改 <code>拥有者</code> / <code>组</code> 权限，有关 <code>chmod</code> 的高级用法，后续会讲</p></blockquote><h3 id="1-5-超级用户"><a href="#1-5-超级用户" class="headerlink" title="1.5 超级用户"></a>1.5 超级用户</h3><ul><li>Linux 系统中的 <code>root</code> 账号通常 <strong>用于系统的维护和管理</strong>，对操作系统的所有资源 <strong>具有所有访问权限</strong></li><li>在大多数版本的 Linux 中，都不推荐 <strong>直接使用 root 账号登录系统</strong></li><li>在 Linux 安装的过程中，系统会自动创建一个用户账号，而这个默认的用户就称为“标准用户”</li></ul><h4 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h4><ul><li><code>su</code> 是 <code>substitute user</code> 的缩写，表示 <strong>使用另一个用户的身份</strong></li><li><code>sudo</code> 命令用来以其他身份来执行命令，预设的身份为 <code>root</code></li><li>用户使用 <code>sudo</code> 时，必须先输入密码，之后有 <strong>5 分钟的有效期限</strong>，超过期限则必须重新输入密码</li></ul><blockquote><p>若其未经授权的用户企图使用 <code>sudo</code>，则会发出警告邮件给管理员</p></blockquote><h2 id="02-组管理-终端命令"><a href="#02-组管理-终端命令" class="headerlink" title="02. 组管理 终端命令"></a>02. <strong>组管理</strong> 终端命令</h2><blockquote><p>提示：<strong>创建组</strong> / <strong>删除组</strong> 的终端命令都需要通过 <code>sudo</code> 执行</p></blockquote><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>groupadd 组名</td><td>添加组</td></tr><tr><td>02</td><td>groupdel 组名</td><td>删除组</td></tr><tr><td>03</td><td>cat /etc/group</td><td>确认组信息</td></tr><tr><td>04</td><td>chgrp -R 组名 文件/目录名</td><td>递归修改文件/目录的所属组</td></tr></tbody></table><blockquote><p>提示：</p><ul><li>组信息保存在 <code>/etc/group</code> 文件中</li><li><code>/etc</code> 目录是专门用来保存 <strong>系统配置信息</strong> 的目录</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/001_%E7%BB%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="001_组示意图"></p><ul><li>在实际应用中，可以预先针对 <strong>组</strong> 设置好权限，然后 <strong>将不同的用户添加到对应的组中</strong>，从而<strong>不用依次为每一个用户设置权限</strong></li></ul><h4 id="演练目标"><a href="#演练目标" class="headerlink" title="演练目标"></a>演练目标</h4><ol><li>在 <code>python</code> 用户的桌面文件夹下创建 <code>Python学习</code> 目录</li><li>新建 <code>dev</code> 组</li><li>将 <code>Python学习</code> 目录的组修改为 <code>dev</code></li></ol><h2 id="03-用户管理-终端命令"><a href="#03-用户管理-终端命令" class="headerlink" title="03. 用户管理 终端命令"></a>03. <strong>用户管理</strong> 终端命令</h2><blockquote><p>提示：<strong>创建用户</strong> / <strong>删除用户</strong> / <strong>修改其他用户密码</strong> 的终端命令都需要通过 <code>sudo</code> 执行</p></blockquote><h3 id="3-1-创建用户／设置密码／删除用户"><a href="#3-1-创建用户／设置密码／删除用户" class="headerlink" title="3.1 创建用户／设置密码／删除用户"></a>3.1 创建用户／设置密码／删除用户</h3><table><thead><tr><th>序号</th><th>命令</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>01</td><td>useradd -m -g 组 新建用户名</td><td>添加新用户</td><td><ul><li>-m 自动建立用户家目录</li><li>-g 指定用户所在的组，否则会建立一个和同名的组</li></ul></td></tr><tr><td>02</td><td>passwd 用户名</td><td>设置用户密码</td><td>如果是普通用户，直接用 passwd 可以修改自己的账户密码</td></tr><tr><td>03</td><td>userdel -r 用户名</td><td>删除用户</td><td>-r 选项会自动删除用户家目录</td></tr><tr><td>04</td><td>cat /etc/passwd | grep 用户名</td><td>确认用户信息</td><td>新建用户后，用户信息会保存在 /etc/passwd 文件中</td></tr></tbody></table><blockquote><p>提示：</p><ul><li>创建用户时，如果忘记添加 <code>-m</code> 选项指定新用户的家目录 —— 最简单的方法就是<strong>删除用户，重新创建</strong></li><li>创建用户时，默认会创建一个和<strong>用户名</strong>同名的<strong>组名</strong></li><li>用户信息保存在 <code>/etc/passwd</code> 文件中</li><li>-g: 指定用户的用户主组</li><li>-G: 指定用户的用户附加组</li><li>-u: uid</li><li>-c: comment 注释</li></ul><p>eg: <code>useradd -g 501 -G 500 -u 666 lisi</code></p></blockquote><h3 id="3-2-查看用户信息"><a href="#3-2-查看用户信息" class="headerlink" title="3.2 查看用户信息"></a>3.2 查看用户信息</h3><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>id [用户名]</td><td>查看用户 UID 和 GID 信息</td></tr><tr><td>02</td><td>who</td><td>查看当前所有登录的用户列表</td></tr><tr><td>03</td><td>whoami</td><td>查看当前登录用户的账户名</td></tr></tbody></table><h4 id="passwd-文件"><a href="#passwd-文件" class="headerlink" title="passwd 文件"></a>passwd 文件</h4><p><code>/etc/passwd</code> 文件存放的是用户的信息，由 6 个分号组成的 7 个信息，分别是</p><ol><li>用户名</li><li>密码（x，表示加密的密码）</li><li>UID（用户标识）</li><li>GID（组标识）</li><li>用户全名或本地帐号</li><li>家目录</li><li>登录使用的 Shell，就是登录之后，使用的终端命令，<code>ubuntu</code> 默认是 <code>dash</code></li></ol><h4 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h4><ul><li><code>usermod</code> 可以用来设置 <strong>用户</strong> 的 <strong>主组</strong> ／ <strong>附加组</strong> 和 <strong>登录 Shell</strong>，命令格式如下：</li><li><strong>主组</strong>：通常在新建用户时指定，在 <code>etc/passwd</code> 的第 4 列 <strong>GID 对应的组</strong></li><li><strong>附加组</strong>：在 <code>etc/group</code> 中最后一列表示该组的用户列表，用于指定 <strong>用户的附加权限</strong></li></ul><blockquote><p>提示：设置了用户的附加组之后，需要重新登录才能生效！</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 修改用户的主组（passwd 中的 GID）</span><span class="token function">usermod</span> -g 组 用户名<span class="token comment" spellcheck="true"># 修改用户的附加组</span><span class="token function">usermod</span> -G 组 用户名<span class="token comment" spellcheck="true"># 修改用户登录 Shell</span><span class="token function">usermod</span> -s /bin/bash 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：默认使用 <code>useradd</code> 添加的用户是没有权限使用 <code>sudo</code> 以 <code>root</code> 身份执行命令的，可以使用以下命令，将用户添加到 <code>sudo</code> 附加组中</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">usermod</span> -G <span class="token function">sudo</span> 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="which（重要）"><a href="#which（重要）" class="headerlink" title="which（重要）"></a>which（重要）</h4><blockquote><p>提示</p><ul><li><code>/etc/passwd</code> 是用于保存用户信息的文件</li><li><code>/usr/bin/passwd</code> 是用于修改用户密码的程序</li></ul></blockquote><ul><li><code>which</code> 命令可以查看执行命令所在位置，例如：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">which</span> <span class="token function">ls</span><span class="token comment" spellcheck="true"># 输出</span><span class="token comment" spellcheck="true"># /bin/ls</span><span class="token function">which</span> <span class="token function">useradd</span><span class="token comment" spellcheck="true"># 输出</span><span class="token comment" spellcheck="true"># /usr/sbin/useradd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="bin-和-sbin"><a href="#bin-和-sbin" class="headerlink" title="bin 和 sbin"></a><code>bin</code> 和 <code>sbin</code></h5><ul><li>在 <code>Linux</code> 中，绝大多数可执行文件都是保存在 <code>/bin</code>、<code>/sbin</code>、<code>/usr/bin</code>、<code>/usr/sbin</code></li><li><code>/bin</code>（<code>binary</code>）是二进制执行文件目录，主要用于具体应用</li><li><code>/sbin</code>（<code>system binary</code>）是系统管理员专用的二进制代码存放目录，主要用于系统管理</li><li><code>/usr/bin</code>（<code>user commands for applications</code>）后期安装的一些软件</li><li><code>/usr/sbin</code>（<code>super user commands for applications</code>）超级用户的一些管理程序</li></ul><blockquote><p>提示：</p><ul><li><code>cd</code> 这个终端命令是内置在系统内核中的，没有独立的文件，因此用 <code>which</code> 无法找到 <code>cd</code> 命令的位置</li></ul></blockquote><h3 id="3-3-切换用户"><a href="#3-3-切换用户" class="headerlink" title="3.3 切换用户"></a>3.3 切换用户</h3><table><thead><tr><th>序号</th><th>命令</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>01</td><td>su - 用户名</td><td>切换用户，并且切换目录</td><td>- 可以切换到用户家目录，否则保持位置不变</td></tr><tr><td>02</td><td>exit</td><td>退出当前登录账户</td><td></td></tr></tbody></table><ul><li><code>su</code> 不接用户名，可以切换到 <code>root</code>，但是不推荐使用，因为不安全</li><li><code>exit</code> 示意图如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/003_su%E5%92%8Cexit%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="003_su和exit示意图"></p><h2 id="04-修改文件权限"><a href="#04-修改文件权限" class="headerlink" title="04. 修改文件权限"></a>04. 修改文件权限</h2><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>chown</td><td>修改拥有者</td></tr><tr><td>02</td><td>chgrp</td><td>修改组</td></tr><tr><td>03</td><td>chmod</td><td>修改权限</td></tr></tbody></table><ul><li>命令格式如下：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 修改文件|目录的拥有者</span><span class="token function">chown</span> 用户名 文件名<span class="token operator">|</span>目录名<span class="token comment" spellcheck="true"># 递归修改文件|目录的组</span><span class="token function">chgrp</span> -R 组名 文件名<span class="token operator">|</span>目录名<span class="token comment" spellcheck="true"># 递归修改文件权限</span><span class="token function">chmod</span> -R 755 文件名<span class="token operator">|</span>目录名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>chmod</code> 在设置权限时，可以简单地使用三个数字分别对应 <strong>拥有者</strong> ／ <strong>组</strong> 和 <strong>其他</strong> 用户的权限</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 直接修改文件|目录的 读|写|执行 权限，但是不能精确到 拥有者|组|其他</span><span class="token function">chmod</span> +/-rwx 文件名<span class="token operator">|</span>目录名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/004_%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="004_文件权限示意图"></p><ul><li>常见数字组合有（<code>u</code>表示用户／<code>g</code>表示组／<code>o</code>表示其他）：<ul><li><code>777</code> ===&gt; <code>u=rwx,g=rwx,o=rwx</code> </li><li><code>755</code> ===&gt; <code>u=rwx,g=rx,o=rx</code></li><li><code>644</code> ===&gt; <code>u=rw,g=r,o=r</code></li></ul></li></ul><h4 id="chmod-演练目标"><a href="#chmod-演练目标" class="headerlink" title="chmod 演练目标"></a><code>chmod</code> 演练目标</h4><ol><li>将 <code>01.py</code> 的权限修改为 <code>u=rwx,g=rx,o=r</code> </li><li>将 <code>123.txt</code> 的权限修改为 <code>u=rw,g=r,o=-</code> </li><li>将 <code>test</code> 目录以及目录下的 <strong>所有</strong> 文件权限修改为 <code>u=rwx,g=rwx,o=rx</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;用户权限相关命令&quot;&gt;&lt;a href=&quot;#用户权限相关命令&quot; class=&quot;headerlink&quot; title=&quot;用户权限相关命令&quot;&gt;&lt;/a&gt;用户权限相关命令&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="操作系统学习" scheme="https://roranrui.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="操作系统" scheme="https://roranrui.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Linux" scheme="https://roranrui.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>系统信息相关命令</title>
    <link href="https://roranrui.cn/2022/04/22/xi-tong-xin-xi-xiang-guan-ming-ling/"/>
    <id>https://roranrui.cn/2022/04/22/xi-tong-xin-xi-xiang-guan-ming-ling/</id>
    <published>2022-04-22T15:21:21.000Z</published>
    <updated>2022-04-22T15:51:31.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统信息相关命令"><a href="#系统信息相关命令" class="headerlink" title="系统信息相关命令"></a>系统信息相关命令</h1><ul><li>本节内容主要是为了方便通过远程终端维护服务器时，查看服务器上当前 <strong>系统日期和时间</strong> ／ <strong>磁盘空间占用情况</strong> ／ <strong>程序执行情况</strong></li><li>本小结学习的终端命令基本都是查询命令，通过这些命令对系统资源的使用情况有个了解</li></ul><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li><p>时间和日期</p><ul><li><h3 id="date"><a href="#date" class="headerlink" title="date"></a><code>date</code></h3></li><li><h3 id="cal"><a href="#cal" class="headerlink" title="cal"></a><code>cal</code></h3></li></ul></li><li><p>磁盘和目录空间</p><ul><li><code>df</code></li><li><code>du</code></li></ul></li><li><p>进程信息</p><ul><li><p><code>ps</code></p></li><li><p><code>top</code></p></li><li><p><code>kill</code></p></li><li><p><code>free</code></p></li><li><p><code> head</code></p></li><li><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a><code>tail</code></h3></li><li><p><code>less</code></p></li><li><p><code>wc</code></p></li></ul></li></ul><h2 id="01-时间和日期"><a href="#01-时间和日期" class="headerlink" title="01. 时间和日期"></a>01. 时间和日期</h2><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>date</td><td>查看系统时间(读取 )</td></tr><tr><td>02</td><td>cal</td><td><code>calendar</code> 查看日历，<code>-y</code> 选项可以查看一年的日历</td></tr></tbody></table><p><code>date</code>:  形式: 2022 年 4月7日 星期四 22:25:28</p><p><code>date +%F("+%Y-%m-%d") </code>:  形式: 2022-4-7</p><p><code>date "+%F %T(%H:%M:%S)"</code>: 2022-4-7 22:28:32 (+表示读取)</p><p>获取之前或者之后的某个时间</p><p><code>date -d "-1 day" "+%F %T"</code></p><table><thead><tr><th>可选值</th><th>符号</th></tr></thead><tbody><tr><td>单位可选</td><td>+/-</td></tr><tr><td>符号可选:</td><td>day month year</td></tr></tbody></table><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td>%F</td><td>完整年月日</td></tr><tr><td>%T</td><td>完整时分秒</td></tr><tr><td>%Y</td><td>完整四位年份</td></tr><tr><td>%m</td><td>两位月份</td></tr><tr><td>%d</td><td>日期(前导0)</td></tr><tr><td>%H</td><td>小时</td></tr><tr><td>%M</td><td>分钟</td></tr><tr><td>%S</td><td>秒数</td></tr></tbody></table><p><code>cal == cal -1</code>: 输出本月</p><p><code>cal -3</code>: 输出上月 本月 下月</p><h2 id="02-磁盘信息"><a href="#02-磁盘信息" class="headerlink" title="02. 磁盘信息"></a>02. 磁盘信息</h2><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>df -h</td><td><code>disk free</code> 显示磁盘剩余空间</td></tr><tr><td>02</td><td>du -h [目录名]</td><td><code>disk usage</code> 显示目录下的文件大小</td></tr></tbody></table><ul><li>选项说明</li></ul><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-h</td><td>以人性化的方式显示文件大小</td></tr></tbody></table><h2 id="03-进程信息"><a href="#03-进程信息" class="headerlink" title="03. 进程信息"></a>03. 进程信息</h2><ul><li>所谓 <strong>进程</strong>，通俗地说就是 <strong>当前正在执行的一个程序</strong></li></ul><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ps - aux</td><td><code>process status</code> 查看进程的详细状况</td></tr><tr><td>02</td><td>top</td><td><strong>动态</strong>显示运行中的进程并且排序</td></tr><tr><td>03</td><td>kill [-9] 进程代号</td><td>终止指定代号的进程，<code>-9</code> 表示强行终止</td></tr></tbody></table><blockquote><p><code>ps</code> 默认只会显示当前用户通过终端启动的应用程序</p></blockquote><ul><li><code>ps</code> 选项说明</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>a(e)</td><td>显示终端上的所有进程，包括其他用户的进程</td></tr><tr><td>u</td><td>显示进程的详细状态</td></tr><tr><td>x</td><td>显示没有控制终端的进程</td></tr><tr><td>f</td><td>显示全部的列</td></tr></tbody></table><blockquote><p>列的含义: </p><p>UID: 该进程执行的用户id</p><p><strong>PID: 进程id</strong></p><p><strong>PPID: 该进程的父级进程id, 无父级进程的称为僵尸进程</strong></p><p>C: Cpu占用率, 形式是百分数</p><p>STIME: 进程的启动时间</p><p>TTY: 发起该进程的设备识别符号</p><p>CMD: 进程名称或对应路径</p></blockquote><p>查看指定进程: <code>ps -ef | grep 进程</code> </p><blockquote><p>top表头含义:</p><p>PR: 优先级</p><p>VIRT: 虚拟内存</p><p>RES: 常驻内存</p><p>SHR: 共享内存</p><p>一个进程实际使用的内存 = RES - SHR </p><p>S: sleeping R: running</p></blockquote><blockquote><p>提示：使用 <code>kill</code> 命令时，最好只终止由当前用户开启的进程，而不要终止 <code>root</code> 身份开启的进程，否则可能导致系统崩溃</p><p><code>killall 进程名称</code></p></blockquote><blockquote><ul><li>要退出 <code>top</code> 可以直接输入 <code>q</code></li><li><code>M</code>: 按内存从高到低进行降序排列</li><li><code>1</code>: 切换显示cpu的详细信息</li></ul></blockquote><h4 id="free"><a href="#free" class="headerlink" title="free"></a>free</h4><p><code>free</code>: 查看内存使用情况</p><p><code>-m</code>: 以mb为单位查看 </p><p><code>head -n</code> : 查看一个文件的前n行, 如果不指定n, 则默认显示前10行 </p><h4 id="tail-1"><a href="#tail-1" class="headerlink" title="tail"></a>tail</h4><p><code>tail -n</code>: 查看一个文件的后n行, 如果不指定n, 则默认显示后10行</p><p><code>tail -f</code>: 查看文件的动态变化(<strong>变化的内容不能是用户手动添加的, 可以借助输出重定向</strong>) 一般用于查看系统日志</p><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><p><code>less</code>: 查看文件, 以较少内容进行输出, 按下辅助按键查看更多(数字 空格 上下键)</p><p><code>wc</code>: 统计文件内容信息(行数, 单词数, 字节数)</p><table><thead><tr><th>-l</th><th>lines 行数</th></tr></thead><tbody><tr><td>-w</td><td>words 单词数(空格判断)</td></tr><tr><td>-c</td><td>bytes 字节数</td></tr></tbody></table><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><p>控制一些软件的服务启动/停止/重启</p><p><code>service 服务名 start/stop/restart</code></p><p><code>service httpd start</code>: 启动<em>Apache</em></p><h2 id="04-系统优先级"><a href="#04-系统优先级" class="headerlink" title="04. 系统优先级"></a>04. 系统优先级</h2><table><thead><tr><th>代号</th><th>作用</th></tr></thead><tbody><tr><td>0 –halt</td><td>关机模式</td></tr><tr><td>1 Single user mode</td><td>单用户模式</td></tr><tr><td>2 Multiuser without NFS</td><td>多用户模式</td></tr><tr><td>3 full Multiuser mode</td><td>全多用户模式</td></tr><tr><td>4 -unused</td><td>保留</td></tr><tr><td>5 -X11 <strong>default</strong></td><td>完整的图形化界面模式</td></tr><tr><td>6 -reboot</td><td>重启模式</td></tr></tbody></table><p>命令行输入<code>init 数字</code>执行相应的进程</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;系统信息相关命令&quot;&gt;&lt;a href=&quot;#系统信息相关命令&quot; class=&quot;headerlink&quot; title=&quot;系统信息相关命令&quot;&gt;&lt;/a&gt;系统信息相关命令&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;本节内容主要是为了方便通过远程终端维护服务器时，查看服务器上当前 &lt;strong</summary>
      
    
    
    
    <category term="操作系统学习" scheme="https://roranrui.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="操作系统" scheme="https://roranrui.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Linux" scheme="https://roranrui.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>文件和目录相关命令</title>
    <link href="https://roranrui.cn/2022/04/22/wen-jian-he-mu-lu-xiang-guan-ming-ling/"/>
    <id>https://roranrui.cn/2022/04/22/wen-jian-he-mu-lu-xiang-guan-ming-ling/</id>
    <published>2022-04-22T15:19:33.000Z</published>
    <updated>2022-04-22T15:50:34.224Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件和目录常用命令"><a href="#文件和目录常用命令" class="headerlink" title="文件和目录常用命令"></a>文件和目录常用命令</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>查看目录内容<ul><li><code>ls</code></li></ul></li><li>切换目录<ul><li><code>cd</code></li></ul></li><li>创建和删除操作<ul><li><code>touch</code></li><li><code>rm</code></li><li><code>mkdir</code></li></ul></li><li>拷贝和移动文件<ul><li><code>cp</code></li><li><code>mv</code></li></ul></li><li>查看文件内容<ul><li><code>cat</code></li><li><code>more</code></li><li><code>grep</code></li></ul></li><li>其他<ul><li><code>echo</code></li><li>重定向 <code>&gt;</code> 和 <code>&gt;&gt;</code></li><li>管道 <code>|</code></li></ul></li></ul><h2 id="01-查看目录内容"><a href="#01-查看目录内容" class="headerlink" title="01. 查看目录内容"></a>01. 查看目录内容</h2><h3 id="1-1-终端实用技巧"><a href="#1-1-终端实用技巧" class="headerlink" title="1.1 终端实用技巧"></a>1.1 终端实用技巧</h3><h4 id="1-gt-自动补全"><a href="#1-gt-自动补全" class="headerlink" title="1> 自动补全"></a>1&gt; 自动补全</h4><ul><li>在敲出 <code>文件</code>／<code>目录</code>／<code>命令</code> 的前几个字母之后，按下 <code>tab</code> 键<ul><li>如果输入的没有歧义，系统会自动补全</li><li>如果还存在其他 <code>文件</code>／<code>目录</code>／<code>命令</code>，再按一下 <code>tab</code> 键，系统会提示可能存在的命令</li></ul></li></ul><h4 id="2-gt-曾经使用过的命令"><a href="#2-gt-曾经使用过的命令" class="headerlink" title="2> 曾经使用过的命令"></a>2&gt; 曾经使用过的命令</h4><ul><li>按 <code>上</code>／<code>下</code> 光标键可以在曾经使用过的命令之间来回切换</li><li>如果想要退出选择，并且不想执行当前选中的命令，可以按 <code>ctrl + c</code></li></ul><h3 id="1-2-ls-命令说明"><a href="#1-2-ls-命令说明" class="headerlink" title="1.2 ls 命令说明"></a>1.2 <code>ls</code> 命令说明</h3><ul><li><code>ls</code> 是英文单词 <strong>list</strong> 的简写，其功能为列出目录的内容，是用户最常用的命令之一，类似于 <strong>DOS</strong> 下的 <code>dir</code> 命令</li></ul><h4 id="Linux-下文件和目录的特点"><a href="#Linux-下文件和目录的特点" class="headerlink" title="Linux 下文件和目录的特点"></a>Linux 下文件和目录的特点</h4><ul><li>Linux <strong>文件</strong> 或者 <strong>目录</strong> 名称最长可以有 <code>256</code> 个字符</li><li>以 <code>.</code> 开头的文件为隐藏文件，需要用 -a 参数才能显示</li><li><strong>.</strong> 代表当前目录</li><li><strong>..</strong> 代表上一级目录</li></ul><h3 id="1-3-ls-常用选项"><a href="#1-3-ls-常用选项" class="headerlink" title="1.3 ls 常用选项"></a>1.3 ls 常用选项</h3><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-a</td><td>显示指定目录下所有子目录与文件，包括隐藏文件</td></tr><tr><td>-l</td><td>以列表方式显示文件的详细信息</td></tr><tr><td>-h</td><td>配合 -l 以人性化的方式显示文件大小</td></tr></tbody></table><h4 id="计算机中文件大小的表示方式（科普）"><a href="#计算机中文件大小的表示方式（科普）" class="headerlink" title="计算机中文件大小的表示方式（科普）"></a>计算机中文件大小的表示方式（科普）</h4><table><thead><tr><th>单位</th><th>英文</th><th>含义</th></tr></thead><tbody><tr><td>字节</td><td>B（Byte）</td><td>在计算机中作为一个数字单元，一般为 8 位二进制数</td></tr><tr><td>千</td><td>K（Kibibyte）</td><td>1 KB = 1024 B，千字节 （1024 = 2 ** 10）</td></tr><tr><td>兆</td><td>M（Mebibyte）</td><td>1 MB = 1024 KB，百万字节</td></tr><tr><td>千兆</td><td>G（Gigabyte）</td><td>1 GB = 1024 MB，十亿字节，千兆字节</td></tr><tr><td>太</td><td>T（Terabyte）</td><td>1 TB = 1024 GB，万亿字节，太字节</td></tr><tr><td>拍</td><td>P（Petabyte）</td><td>1 PB = 1024 TB，千万亿字节，拍字节</td></tr><tr><td>艾</td><td>E（Exabyte）</td><td>1 EB = 1024 PB，百亿亿字节，艾字节</td></tr><tr><td>泽</td><td>Z（Zettabyte）</td><td>1 ZB = 1024 EB，十万亿亿字节，泽字节</td></tr><tr><td>尧</td><td>Y（Yottabyte）</td><td>1 YB = 1024 ZB，一亿亿亿字节，尧字节</td></tr></tbody></table><h3 id="1-4-ls-通配符的使用"><a href="#1-4-ls-通配符的使用" class="headerlink" title="1.4 ls 通配符的使用"></a>1.4 ls 通配符的使用</h3><table><thead><tr><th>通配符</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>代表任意个数个字符</td></tr><tr><td>?</td><td>代表任意一个字符，至少 1 个</td></tr><tr><td>[]</td><td>表示可以匹配字符组中的任一一个</td></tr><tr><td>[abc]</td><td>匹配 a、b、c 中的任意一个</td></tr><tr><td>[a-f]</td><td>匹配从 a 到 f 范围内的的任意一个字符</td></tr></tbody></table><ul><li>ls 颜色: 蓝色-文件夹, 黑色-文件, 绿色-拥有所有权限</li></ul><h2 id="02-切换目录"><a href="#02-切换目录" class="headerlink" title="02. 切换目录"></a>02. 切换目录</h2><h3 id="2-1-cd"><a href="#2-1-cd" class="headerlink" title="2.1 cd"></a>2.1 <code>cd</code></h3><ul><li><code>cd</code> 是英文单词 <strong>change directory</strong> 的简写，其功能为更改当前的工作目录，也是用户最常用的命令之一</li></ul><blockquote><p>注意：Linux 所有的 <strong>目录</strong> 和 <strong>文件名</strong> 都是大小写敏感的</p></blockquote><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>cd</td><td>切换到当前用户的主目录(/home/用户目录)</td></tr><tr><td>cd ~</td><td>切换到当前用户的主目录(/home/用户目录)</td></tr><tr><td>cd .</td><td>保持在当前目录不变</td></tr><tr><td>cd ..</td><td>切换到上级目录</td></tr><tr><td>cd -</td><td>可以在最近两次工作目录之间来回切换</td></tr></tbody></table><h3 id="2-2-相对路径和绝对路径"><a href="#2-2-相对路径和绝对路径" class="headerlink" title="2.2 相对路径和绝对路径"></a>2.2 相对路径和绝对路径</h3><ul><li><strong>相对路径</strong> 在输入路径时，最前面不是 <strong>/</strong> 或者 **~**，表示相对 <strong>当前目录</strong> 所在的目录位置</li><li><strong>绝对路径</strong> 在输入路径时，最前面是 <strong>/</strong> 或者 **~**，表示从 <strong>根目录/家目录</strong> 开始的具体目录位置</li></ul><h2 id="03-创建和删除操作"><a href="#03-创建和删除操作" class="headerlink" title="03. 创建和删除操作"></a>03. 创建和删除操作</h2><h3 id="3-1-touch"><a href="#3-1-touch" class="headerlink" title="3.1 touch"></a>3.1 <code>touch</code></h3><ul><li>创建文件或修改文件时间<ul><li>如果文件 <strong>不存在</strong>，可以创建一个空白文件</li><li>如果文件 <strong>已经存在</strong>，可以修改文件的末次修改日期</li></ul></li></ul><h3 id="3-2-mkdir"><a href="#3-2-mkdir" class="headerlink" title="3.2 mkdir"></a>3.2 <code>mkdir</code></h3><ul><li>创建一个新的目录</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-p</td><td>可以递归创建目录</td></tr></tbody></table><blockquote><p><strong>新建目录的名称</strong> 不能与当前目录中 <strong>已有的目录或文件</strong> 同名</p></blockquote><h3 id="3-3-rm"><a href="#3-3-rm" class="headerlink" title="3.3 rm"></a>3.3 <code>rm</code></h3><ul><li>删除文件或目录</li></ul><blockquote><p>使用 <code>rm</code> 命令要小心，因为文件删除后不能恢复</p></blockquote><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-f</td><td>强制删除，忽略不存在的文件，无需提示</td></tr><tr><td>-r</td><td>递归地删除目录下的内容，<strong>删除文件夹</strong> 时必须加此参数</td></tr></tbody></table><h2 id="04-拷贝和移动文件"><a href="#04-拷贝和移动文件" class="headerlink" title="04. 拷贝和移动文件"></a>04. 拷贝和移动文件</h2><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>tree [目录名]</td><td>tree</td><td>以树状图列出文件目录结构</td></tr><tr><td>02</td><td>cp 源文件 目标文件</td><td>copy</td><td>复制文件或者目录</td></tr><tr><td>03</td><td>mv 源文件 目标文件</td><td>move</td><td>移动文件或者目录／文件或者目录重命名</td></tr></tbody></table><h3 id="4-1-tree"><a href="#4-1-tree" class="headerlink" title="4.1 tree"></a>4.1 <code>tree</code></h3><ul><li><code>tree</code> 命令可以以树状图列出文件目录结构</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-d</td><td>只显示目录</td></tr></tbody></table><h3 id="4-2-cp"><a href="#4-2-cp" class="headerlink" title="4.2 cp"></a>4.2 <code>cp</code></h3><ul><li><code>cp</code> 命令的功能是将给出的 <strong>文件</strong> 或 <strong>目录</strong> 复制到另一个 <strong>文件</strong> 或 <strong>目录</strong> 中，相当于 <strong>DOS</strong> 下的 <code>copy</code> 命令</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-i</td><td>覆盖文件前提示</td></tr><tr><td>-r</td><td>若给出的源文件是目录文件，则 cp 将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名(<strong>复制目录用</strong>)</td></tr></tbody></table><ul><li><strong>tips: 复制过程中可以改名(非必须)</strong></li></ul><h3 id="4-3-mv"><a href="#4-3-mv" class="headerlink" title="4.3 mv"></a>4.3 <code>mv</code></h3><ul><li><code>mv</code> 命令可以用来 <strong>移动</strong> <strong>文件</strong> 或 <strong>目录</strong>，也可以给 <strong>文件或目录重命名</strong></li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-i</td><td>覆盖文件前提示</td></tr></tbody></table><ul><li>移动目录不用加 -r</li></ul><h2 id="05-查看文件内容"><a href="#05-查看文件内容" class="headerlink" title="05. 查看文件内容"></a>05. 查看文件内容</h2><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>cat 文件名</td><td>concatenate</td><td>查看文件内容、创建文件、文件合并、追加文件内容等功能</td></tr><tr><td>02</td><td>more 文件名</td><td>more</td><td>分屏显示文件内容</td></tr><tr><td>03</td><td>grep 搜索文本 文件名</td><td>grep</td><td>搜索文本文件内容</td></tr></tbody></table><h3 id="5-1-cat"><a href="#5-1-cat" class="headerlink" title="5.1 cat"></a>5.1 <code>cat</code></h3><ul><li><code>cat</code> 命令可以用来 <strong>查看文件内容</strong>、<strong>创建文件</strong>、<strong>文件合并</strong>、<strong>追加文件内容</strong> 等功能</li><li><code>cat</code> 会一次显示所有的内容，适合 <strong>查看内容较少</strong> 的文本文件</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-b</td><td>对非空输出行编号</td></tr><tr><td>-n</td><td>对输出的所有行编号</td></tr></tbody></table><blockquote><p>Linux 中还有一个 <code>nl</code> 的命令和 <code>cat -b</code> 的效果等价</p></blockquote><ul><li>合并文件: #cat 路径1 路径2 路径3…  &gt;&gt; 合并后的新路径</li></ul><h3 id="5-2-more"><a href="#5-2-more" class="headerlink" title="5.2 more"></a>5.2 <code>more</code></h3><ul><li><code>more</code> 命令可以用于分屏显示文件内容，每次只显示一页内容</li><li>适合于 <strong>查看内容较多</strong>的文本文件</li></ul><p>使用 <code>more</code> 的操作键：</p><table><thead><tr><th>操作键</th><th>功能</th></tr></thead><tbody><tr><td>空格键</td><td>显示手册页的下一屏</td></tr><tr><td>Enter 键</td><td>一次滚动手册页的一行</td></tr><tr><td>b</td><td>回滚一屏</td></tr><tr><td>f</td><td>前滚一屏</td></tr><tr><td>q</td><td>退出</td></tr><tr><td>/word</td><td>搜索 <strong>word</strong> 字符串</td></tr></tbody></table><h3 id="5-3-grep"><a href="#5-3-grep" class="headerlink" title="5.3 grep"></a>5.3 <code>grep</code></h3><ul><li>Linux 系统中 <code>grep</code> 命令是一种强大的文本搜索工具</li><li><code>grep</code>允许对文本文件进行 <strong>模式</strong>查找，所谓模式查找，又被称为正则表达式，在就业班会详细讲解</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-n</td><td>显示匹配行及行号</td></tr><tr><td>-v</td><td>显示不包含匹配文本的所有行（相当于求反）</td></tr><tr><td>-i</td><td>忽略大小写</td></tr></tbody></table><ul><li>常用的两种模式查找</li></ul><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>^a</td><td>行首，搜寻以 <strong>a</strong> 开头的行</td></tr><tr><td>ke$</td><td>行尾，搜寻以 <strong>ke</strong> 结束的行</td></tr></tbody></table><h2 id="06-其他"><a href="#06-其他" class="headerlink" title="06. 其他"></a>06. 其他</h2><h3 id="6-1-echo-文字内容"><a href="#6-1-echo-文字内容" class="headerlink" title="6.1 echo 文字内容"></a>6.1 <code>echo 文字内容</code></h3><ul><li><code>echo</code> 会在终端中显示参数指定的文字，通常会和 <strong>重定向</strong> 联合使用</li></ul><h3 id="6-2-重定向-gt-和-gt-gt"><a href="#6-2-重定向-gt-和-gt-gt" class="headerlink" title="6.2 重定向 > 和 >>"></a>6.2 重定向 <code>&gt;</code> 和 <code>&gt;&gt;</code></h3><ul><li>一个 <strong>文件</strong></li><li>将本应显示在<strong>终端上的内容</strong> <strong>输出／追加</strong> 到<strong>指定文件中</strong></li></ul><p>其中</p><ul><li><code>&gt;</code> 表示输出，会覆盖文件原有的内容</li><li><code>&gt;&gt;</code> 表示追加，会将内容追加到已有文件的末尾</li></ul><h3 id="6-3-管道"><a href="#6-3-管道" class="headerlink" title="6.3 管道 |"></a>6.3 管道 <code>|</code></h3><ul><li>Linux 允许将 <strong>一个命令的输出</strong> 可以<strong>通过管道</strong> 做为 <strong>另一个命令的输入</strong></li><li>可以理解现实生活中的管子，管子的一头塞东西进去，另一头取出来，这里 <code>|</code> 的左右分为两端，左端塞东西（写），右端取东西（读）</li></ul><p>常用的管道命令有：</p><ul><li><code>more</code>：分屏显示内容</li><li><code>grep</code>：在命令执行结果的基础上查询指定的文本</li></ul><h3 id="6-4-find"><a href="#6-4-find" class="headerlink" title="6.4 find"></a>6.4 find</h3><p><code>find 路径范围 选项 选项值</code>:</p><ul><li>参数:</li><li>-<code>name</code>:  名称搜索(模糊)</li><li>-<code>type</code>: 类型</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文件和目录常用命令&quot;&gt;&lt;a href=&quot;#文件和目录常用命令&quot; class=&quot;headerlink&quot; title=&quot;文件和目录常用命令&quot;&gt;&lt;/a&gt;文件和目录常用命令&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="操作系统学习" scheme="https://roranrui.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="操作系统" scheme="https://roranrui.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Linux" scheme="https://roranrui.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件和目录（理解）</title>
    <link href="https://roranrui.cn/2022/04/22/linux-wen-jian-he-mu-lu-li-jie/"/>
    <id>https://roranrui.cn/2022/04/22/linux-wen-jian-he-mu-lu-li-jie/</id>
    <published>2022-04-22T15:12:00.000Z</published>
    <updated>2022-04-26T05:00:31.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件和目录（理解）"><a href="#文件和目录（理解）" class="headerlink" title="文件和目录（理解）"></a>文件和目录（理解）</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>理解 Linux 文件目录的结构</li></ul><h2 id="01-单用户操作系统和多用户操作系统（科普）"><a href="#01-单用户操作系统和多用户操作系统（科普）" class="headerlink" title="01. 单用户操作系统和多用户操作系统（科普）"></a>01. 单用户操作系统和多用户操作系统（科普）</h2><ul><li><p><strong>单用户操作系统</strong>：指一台计算机在同一时间 <strong>只能由一个用户</strong> 使用，一个用户独自享用系统的全部硬件和软件资源</p><ul><li><strong>Windows XP</strong> 之前的版本都是单用户操作系统</li></ul></li><li><p><strong>多用户操作系统</strong>：指一台计算机在同一时间可以由 <strong>多个用户</strong> 使用，多个用户共同享用系统的全部硬件和软件资源</p><ul><li><strong>Unix</strong> 和 <strong>Linux</strong> 的设计初衷就是多用户操作系统</li></ul></li></ul><h2 id="02-Windows-和-Linux-文件系统区别"><a href="#02-Windows-和-Linux-文件系统区别" class="headerlink" title="02. Windows 和 Linux 文件系统区别"></a>02. <code>Windows</code> 和 <code>Linux</code> 文件系统区别</h2><h3 id="2-1-Windows-下的文件系统"><a href="#2-1-Windows-下的文件系统" class="headerlink" title="2.1 Windows 下的文件系统"></a>2.1 <code>Windows</code> 下的文件系统</h3><ul><li>在 <code>Windows</code> 下，打开 “计算机”，我们看到的是一个个的驱动器盘符：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/0021.png" alt="001_Windows下的多个盘"></p><ul><li>每个驱动器都有自己的根目录结构，这样形成了多个树并列的情形，如图所示：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/001-Windows%E4%B8%8B%E5%A4%9A%E4%B8%AA%E7%9B%98%E4%B8%BA%E8%8A%82%E7%82%B9%E7%9A%84%E7%9B%AE%E5%BD%95%E5%88%86%E6%94%AF.png" alt="001-Windows下多个盘为节点的目录分支"></p><h3 id="2-2-Linux-下的文件系统"><a href="#2-2-Linux-下的文件系统" class="headerlink" title="2.2 Linux 下的文件系统"></a>2.2 <code>Linux</code> 下的文件系统</h3><ul><li>在 <code>Linux</code> 下，我们是看不到这些驱动器盘符，我们看到的是文件夹（目录）：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/002_Ubuntu%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95.png" alt="002_Ubuntu文件目录"></p><ul><li><code>Ubuntu</code> 没有盘符这个概念，只有一个根目录 <code>/</code>，所有文件都在它下面</li></ul><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/003-Linux%E7%9A%84%E6%A0%91%E5%BD%A2%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="003-Linux的树形示意图"></p><h3 id="2-3-用户目录"><a href="#2-3-用户目录" class="headerlink" title="2.3 用户目录"></a>2.3 用户目录</h3><p>位于 <code>/home/user</code>，称之为用户工作目录或家目录，表示方式：</p><pre class="line-numbers language-bash"><code class="language-bash">/home/user~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-4-Linux-主要目录速查表"><a href="#2-4-Linux-主要目录速查表" class="headerlink" title="2.4 Linux 主要目录速查表"></a>2.4 <code>Linux</code> 主要目录速查表</h3><ul><li>/：根目录，<strong>一般根目录下只存放目录</strong>，在 linux 下有且只有一个根目录，所有的东西都是从这里开始<ul><li>当在终端里输入 <code>/home</code>，其实是在告诉电脑，先从 <code>/</code>（根目录）开始，再进入到 <code>home</code> 目录</li></ul></li><li>/bin、/usr/bin：可执行二进制文件的目录，如常用的命令 ls、tar、mv、cat 等</li><li>/boot：放置 linux 系统启动时用到的一些文件，如 linux 的内核文件：<code>/boot/vmlinuz</code>，系统引导管理器：<code>/boot/grub</code></li><li>/dev：存放linux系统下的设备文件，访问该目录下某个文件，相当于访问某个设备，常用的是挂载光驱<code>mount /dev/cdrom /mnt</code></li><li>/etc：系统配置文件存放的目录，不建议在此目录下存放可执行文件，重要的配置文件有 <ul><li>/etc/inittab</li><li>/etc/fstab</li><li>/etc/init.d</li><li>/etc/X11</li><li>/etc/sysconfig</li><li>/etc/xinetd.d</li></ul></li><li>/home：系统默认的用户家目录，新增用户账号时，用户的家目录都存放在此目录下<ul><li><code>~</code> 表示当前用户的家目录</li><li><code>~edu</code> 表示用户 <code>edu</code> 的家目录</li></ul></li><li>/lib、/usr/lib、/usr/local/lib：系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助</li><li>/lost+fount：系统异常产生错误时，会将一些遗失的片段放置于此目录下</li><li>/mnt: /media：光盘默认挂载点，通常光盘挂载于 /mnt/cdrom 下，也不一定，可以选择任意位置进行挂载</li><li>/opt：给主机额外安装软件所摆放的目录</li><li>/proc：此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的文件有：/proc/cpuinfo、/proc/interrupts、/proc/dma、/proc/ioports、/proc/net/* 等</li><li>/root：系统管理员root的家目录</li><li>/sbin、/usr/sbin、/usr/local/sbin：放置系统管理员使用的可执行命令，如 fdisk、shutdown、mount 等。与 /bin 不同的是，这几个目录是给系统管理员 root 使用的命令，一般用户只能”查看”而不能设置和使用</li><li>/tmp：一般用户或正在执行的程序临时存放文件的目录，任何人都可以访问，重要数据不可放置在此目录下</li><li>/srv：服务启动之后需要访问的数据目录，如 www 服务需要访问的网页数据存放在 /srv/www 内</li><li>/usr：应用程序存放目录<ul><li>/usr/bin：存放应用程序</li><li>/usr/share：存放共享数据</li><li>/usr/lib：存放不能直接运行的，却是许多程序运行所必需的一些函数库文件</li><li>/usr/local：存放软件升级包</li><li>/usr/share/doc：系统说明文件存放目录</li><li>/usr/share/man：程序说明文件存放目录</li></ul></li><li>/var：放置系统执行过程中经常变化的文件<ul><li>/var/log：随时更改的日志文件 </li><li>/var/spool/mail：邮件存放的目录</li><li>/var/run：程序或服务启动后，其 PID 存放在该目录下</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文件和目录（理解）&quot;&gt;&lt;a href=&quot;#文件和目录（理解）&quot; class=&quot;headerlink&quot; title=&quot;文件和目录（理解）&quot;&gt;&lt;/a&gt;文件和目录（理解）&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="操作系统学习" scheme="https://roranrui.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="操作系统" scheme="https://roranrui.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Linux" scheme="https://roranrui.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>常用 Linux 命令的基本使用</title>
    <link href="https://roranrui.cn/2022/04/22/chang-yong-linux-ming-ling-de-ji-ben-shi-yong/"/>
    <id>https://roranrui.cn/2022/04/22/chang-yong-linux-ming-ling-de-ji-ben-shi-yong/</id>
    <published>2022-04-22T15:08:33.000Z</published>
    <updated>2022-04-22T15:11:12.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用-Linux-命令的基本使用"><a href="#常用-Linux-命令的基本使用" class="headerlink" title="常用 Linux 命令的基本使用"></a>常用 Linux 命令的基本使用</h1><h2 id="01-学习-Linux-终端命令的原因"><a href="#01-学习-Linux-终端命令的原因" class="headerlink" title="01. 学习 Linux 终端命令的原因"></a>01. 学习 Linux 终端命令的原因</h2><ul><li>Linux 刚面世时并没有图形界面，所有的操作全靠命令完成，如 <strong>磁盘操作</strong>、<strong>文件存取</strong>、<strong>目录操作</strong>、<strong>进程管理</strong>、<strong>文件权限</strong> 设定等</li><li>在职场中，大量的 <strong>服务器维护工作</strong> 都是在 <strong>远程</strong> 通过 <strong>SSH 客户端</strong> 来完成的，并没有图形界面，所有的维护工作都需要通过命令来完成</li><li>在职场中，作为后端程序员，必须要或多或少的掌握一些 Linux 常用的终端命令</li><li>Linux 发行版本的命令大概有 200 多个，但是常用的命令只有 10 多个而已</li></ul><blockquote><p>学习终端命令的技巧：</p><ul><li>不需要死记硬背，对于常用命令，用的多了，自然就记住了</li><li>不要尝试一次学会所有的命令，有些命令是非常不常用的，临时遇到，临时百度就可以</li></ul></blockquote><h2 id="02-常用-Linux-命令的基本使用"><a href="#02-常用-Linux-命令的基本使用" class="headerlink" title="02. 常用 Linux 命令的基本使用"></a>02. 常用 Linux 命令的基本使用</h2><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ls</td><td>list</td><td>查看当前文件夹下的内容</td></tr><tr><td>02</td><td>pwd</td><td>print work directory</td><td>查看当前所在文件夹</td></tr><tr><td>03</td><td>cd [目录名]</td><td>change directory</td><td>切换文件夹</td></tr><tr><td>04</td><td>touch [文件名]</td><td>touch</td><td>如果文件不存在，新建文件</td></tr><tr><td>05</td><td>mkdir [目录名]</td><td>make directory</td><td>创建目录</td></tr><tr><td>06</td><td>rm [文件名]</td><td>remove</td><td>删除指定的文件名</td></tr><tr><td>07</td><td>clear</td><td>clear</td><td>清屏</td></tr></tbody></table><blockquote><p>小技巧</p><ul><li><code>ctrl + shift + = </code> <strong>放大</strong>终端窗口的字体显示</li><li><code>ctrl + - </code> <strong>缩小</strong>终端窗口的字体显示</li></ul></blockquote><h2 id="03-自动补全"><a href="#03-自动补全" class="headerlink" title="03. 自动补全"></a>03. 自动补全</h2><ul><li>在敲出 <code>文件</code>／<code>目录</code>／<code>命令</code> 的前几个字母之后，按下 <code>tab</code> 键<ul><li>如果输入的没有歧义，系统会自动补全</li><li>如果还存在其他 <code>文件</code>／<code>目录</code>／<code>命令</code>，再按一下 <code>tab</code> 键，系统会提示可能存在的命令</li></ul></li></ul><blockquote><p>小技巧</p><ul><li>按 <code>上</code>／<code>下</code> 光标键可以在曾经使用过的命令之间来回切换</li><li>如果想要退出选择，并且不想执行当前选中的命令，可以按 <code>ctrl + c</code></li></ul></blockquote><hr><h1 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>查找文件<ul><li><code>find</code></li></ul></li><li>软链接<ul><li><code>ln</code></li></ul></li><li>打包和压缩<ul><li><code>tar</code></li></ul></li><li>软件安装<ul><li><code>apt-get</code></li></ul></li></ul><h2 id="01-查找文件"><a href="#01-查找文件" class="headerlink" title="01. 查找文件"></a>01. 查找文件</h2><ul><li><code>find</code> 命令功能非常强大，通常用来在 <strong>特定的目录下</strong> <strong>搜索</strong> 符合条件的文件</li></ul><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>find [路径] -name “*.py”</td><td>查找指定路径下扩展名是 <code>.py</code> 的文件，包括子目录</td></tr></tbody></table><ul><li>如果省略路径，表示在当前文件夹下查找</li><li>之前学习的通配符，在使用 <code>find</code> 命令时同时可用</li><li>有关 <code>find</code> 的高级使用，在就业班会讲</li></ul><h3 id="演练目标"><a href="#演练目标" class="headerlink" title="演练目标"></a>演练目标</h3><ul><li><ol><li>搜索桌面目录下，文件名包含 <code>1</code> 的文件</li></ol></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> -name <span class="token string">"*1*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="2"><li>搜索桌面目录下，所有以 <code>.txt</code> 为扩展名的文件</li></ol></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> -name <span class="token string">"*.txt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="3"><li>搜索桌面目录下，以数字 <code>1</code> 开头的文件</li></ol></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> -name <span class="token string">"1*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="02-软链接"><a href="#02-软链接" class="headerlink" title="02. 软链接"></a>02. 软链接</h2><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ln -s 被链接的源文件 链接文件</td><td>建立文件的软链接，用通俗的方式讲<strong>类似于</strong> Windows 下的<strong>快捷方式</strong></td></tr></tbody></table><ul><li><p>注意：</p></li><li><ol><li>没有 <code>-s</code> 选项建立的是一个 <strong>硬链接文件</strong></li></ol><ul><li>两个文件占用相同大小的硬盘空间，<strong>工作中几乎不会建立文件的硬链接</strong></li></ul></li><li><ol start="2"><li><strong>源文件要使用绝对路径</strong>，不能使用相对路径，这样可以方便移动链接文件后，仍然能够正常使用</li></ol></li></ul><h3 id="演练目标-1"><a href="#演练目标-1" class="headerlink" title="演练目标"></a>演练目标</h3><ul><li><ol><li>将桌面目录下的 <code>01.py</code> <strong>移动</strong>到 <code>demo/b/c</code> 目录下</li></ol></li><li><ol start="2"><li>在桌面目录下新建 <code>01.py</code> 的 <strong>软链接</strong> <code>FirstPython</code></li></ol><ul><li>分别使用 <strong>相对路径</strong> 和 <strong>绝对路径</strong> 建立 <code>FirstPython</code> 的软链接</li></ul></li><li><ol start="3"><li>将 <code>FirstPython</code> <strong>移动</strong>到 <code>demo</code> 目录下，对比使用 <strong>相对路径</strong> 和 <strong>绝对路径</strong> 的区别</li></ol></li></ul><h3 id="硬链接简介（知道）"><a href="#硬链接简介（知道）" class="headerlink" title="硬链接简介（知道）"></a>硬链接简介（知道）</h3><ul><li>在使用 <code>ln</code> 创建链接时，如果没有 <code>-s</code> 选项，会创建一个 <strong>硬链接</strong>，而不是软链接</li></ul><h4 id="硬链接演练"><a href="#硬链接演练" class="headerlink" title="硬链接演练"></a>硬链接演练</h4><ul><li><ol><li>在 <code>~/Desktop/demo</code> 目录下建立 <code>~/Desktop/demo/b/c/01.py</code> 的硬链接 <code>01_hard</code></li></ol></li><li><ol start="2"><li>使用 <code>ls -l</code> 查看文件的<strong>硬链接数</strong>（硬链接——有多少种方式可以访问文件或者目录）</li></ol></li><li><ol start="3"><li>删除 <code>~/Desktop/demo/b/c/01.py</code>，并且使用 <code>tree</code> 来确认 <code>demo</code> 目录下的三个链接文件</li></ol></li></ul><h4 id="文件软硬链接的示意图"><a href="#文件软硬链接的示意图" class="headerlink" title="文件软硬链接的示意图"></a>文件软硬链接的示意图</h4><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/001_%E6%96%87%E4%BB%B6%E8%BD%AF%E7%A1%AC%E9%93%BE%E6%8E%A5%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="001_文件软硬链接示意图"></p><blockquote><p>在 Linux 中，<strong>文件名</strong> 和 <strong>文件的数据</strong> 是分开存储的</p></blockquote><ul><li>提示：<ul><li>在 Linux 中，只有文件的 <code>硬链接数 == 0</code> 才会被删除</li><li>使用 <code>ls -l</code> 可以查看一个文件的硬链接的数量</li><li>在日常工作中，几乎不会建立文件的硬链接，知道即可</li></ul></li></ul><h2 id="03-打包压缩"><a href="#03-打包压缩" class="headerlink" title="03. 打包压缩"></a>03. 打包压缩</h2><ul><li><strong>打包压缩</strong> 是日常工作中备份文件的一种方式</li><li>在不同操作系统中，常用的打包压缩方式是不同的<ul><li><code>Windows</code> 常用 <code>rar</code></li><li><code>Mac</code> 常用 <code>zip</code></li><li><code>Linux</code> 常用 <code>tar.gz</code></li></ul></li></ul><h3 id="3-1-打包-／-解包"><a href="#3-1-打包-／-解包" class="headerlink" title="3.1 打包 ／ 解包"></a>3.1 打包 ／ 解包</h3><ul><li><code>tar</code> 是 Linux 中最常用的 <strong>备份</strong>工具，此命令可以 <strong>把一系列文件</strong> 打包到 <strong>一个大文件中</strong>，也可以把一个 <strong>打包的大文件恢复成一系列文件</strong></li><li><code>tar</code> 的命令格式如下：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 打包文件</span><span class="token function">tar</span> -cvf 打包文件.tar 被打包的文件／路径<span class="token punctuation">..</span>.<span class="token comment" spellcheck="true"># 解包文件</span><span class="token function">tar</span> -xvf 打包文件.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>tar</code> 选项说明</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>c</td><td>生成档案文件，创建打包文件</td></tr><tr><td>x</td><td>解开档案文件</td></tr><tr><td>v</td><td>列出归档解档的详细过程，显示进度</td></tr><tr><td>f</td><td>指定档案文件名称，f 后面一定是 .tar 文件，所以必须放选项最后</td></tr></tbody></table><blockquote><p>注意：<code>f</code> 选项必须放在最后，其他选项顺序可以随意</p></blockquote><h4 id="打包解包演练"><a href="#打包解包演练" class="headerlink" title="打包解包演练"></a>打包解包演练</h4><ol><li>删除桌面下的所有内容</li><li>在桌面下新建三个空白文件 <code>01.py</code>、<code>02.py</code>、<code>03.py</code></li><li>将这三个文件打一个 <code>py.tar</code> 的包</li><li>新建 <code>tar</code> 目录，并且将 <code>py.tar</code> 移动到 <code>tar</code> 目录下</li><li>解包 <code>py.tar</code></li></ol><h3 id="3-2-压缩／解压缩"><a href="#3-2-压缩／解压缩" class="headerlink" title="3.2 压缩／解压缩"></a>3.2 压缩／解压缩</h3><h4 id="1-gzip"><a href="#1-gzip" class="headerlink" title="1) gzip"></a>1) <code>gzip</code></h4><ul><li><code>tar</code> 与 <code>gzip</code> 命令结合可以使用实现文件 <strong>打包和压缩</strong><ul><li><code>tar</code> 只负责打包文件，但不压缩</li><li>用 <code>gzip</code> 压缩 <code>tar</code> 打包后的文件，其扩展名一般用 <code>xxx.tar.gz</code></li></ul></li></ul><blockquote><p>在 <code>Linux</code> 中，最常见的压缩文件格式就是 <code>xxx.tar.gz</code></p></blockquote><ul><li><p>在 <code>tar</code> 命令中有一个选项 <strong>-z</strong> 可以调用 <code>gzip</code>，从而可以方便的实现压缩和解压缩的功能</p></li><li><p>命令格式如下：</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 压缩文件</span><span class="token function">tar</span> -zcvf 打包文件.tar.gz 被压缩的文件／路径<span class="token punctuation">..</span>.<span class="token comment" spellcheck="true"># 解压缩文件</span><span class="token function">tar</span> -zxvf 打包文件.tar.gz<span class="token comment" spellcheck="true"># 解压缩到指定路径</span><span class="token function">tar</span> -zxvf 打包文件.tar.gz -C 目标路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-C</td><td>解压缩到指定目录，注意：要解压缩的目录必须存在</td></tr></tbody></table><h4 id="2-bzip2-two"><a href="#2-bzip2-two" class="headerlink" title="2) bzip2(two)"></a>2) <code>bzip2(two)</code></h4><ul><li><p><code>tar</code> 与 <code>bzip2</code> 命令结合可以使用实现文件 <strong>打包和压缩</strong>（用法和 <code>gzip</code> 一样）</p><ul><li><code>tar</code> 只负责打包文件，但不压缩，</li><li>用 <code>bzip2</code> 压缩 <code>tar</code> 打包后的文件，其扩展名一般用 <code>xxx.tar.bz2</code></li></ul></li><li><p>在 <code>tar</code> 命令中有一个选项 <strong>-j</strong> 可以调用 <code>bzip2</code>，从而可以方便的实现压缩和解压缩的功能</p></li><li><p>命令格式如下：</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 压缩文件</span><span class="token function">tar</span> -jcvf 打包文件.tar.bz2 被压缩的文件／路径<span class="token punctuation">..</span>.<span class="token comment" spellcheck="true"># 解压缩文件</span><span class="token function">tar</span> -jxvf 打包文件.tar.bz2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="04-软件安装"><a href="#04-软件安装" class="headerlink" title="04. 软件安装"></a>04. 软件安装</h2><h2 id="4-1-通过-apt-安装／卸载软件"><a href="#4-1-通过-apt-安装／卸载软件" class="headerlink" title="4.1 通过 apt 安装／卸载软件"></a>4.1 通过 apt 安装／卸载软件</h2><ul><li>apt 是 <code>Advanced Packaging Tool</code>，是 Linux 下的一款安装包管理工具</li><li>可以在终端中方便的 <strong>安装</strong>／<strong>卸载</strong>／<strong>更新软件包</strong></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 1. 安装软件</span>$ <span class="token function">sudo</span> apt <span class="token function">install</span> 软件包<span class="token comment" spellcheck="true"># 2. 卸载软件</span>$ <span class="token function">sudo</span> apt remove 软件名<span class="token comment" spellcheck="true"># 3. 更新已安装的包</span>$ <span class="token function">sudo</span> apt upgrade <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装演练"><a href="#安装演练" class="headerlink" title="安装演练"></a>安装演练</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 一个小火车提示</span>$ <span class="token function">sudo</span> apt <span class="token function">install</span> sl<span class="token comment" spellcheck="true"># 一个比较漂亮的查看当前进程排名的软件</span>$ <span class="token function">sudo</span> apt <span class="token function">install</span> <span class="token function">htop</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-配置软件源"><a href="#4-2-配置软件源" class="headerlink" title="4.2 配置软件源"></a>4.2 配置软件源</h2><ul><li>如果希望在 <code>ubuntu</code> 中安装软件，<strong>更加快速</strong>，可以通过设置<strong>镜像源</strong>，选择一个访问网速更快的服务器，来提供软件下载／安装服务</li><li>提示：更换服务器之后，需要一个相对比较长时间的更新过程，需要耐心等待。更新完成后，再安装软件都会从新设置的服务器下载软件了</li></ul><blockquote><p>所谓镜像源，就是<strong>所有服务器的内容是相同的（镜像）</strong>，但是根据所在位置不同，国内服务器通常速度会更快一些！</p></blockquote><p><img src="/../../../Data/Notes/Linux/Linux_Basic/media/14934226357576/003_%25E9%2595%259C%25E5%2583%258F%25E6%259C%258D%25E5%258A%25A1%25E5%2599%25A8%25E7%25A4%25BA%25E6%2584%258F%25E5%259B%25BE.png" alt="003_镜像服务器示意图"></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/001_ubuntu%E8%AE%BE%E7%BD%AE%E8%BD%AF%E4%BB%B6%E6%BA%90.png" alt="001_ubuntu设置软件源"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常用-Linux-命令的基本使用&quot;&gt;&lt;a href=&quot;#常用-Linux-命令的基本使用&quot; class=&quot;headerlink&quot; title=&quot;常用 Linux 命令的基本使用&quot;&gt;&lt;/a&gt;常用 Linux 命令的基本使用&lt;/h1&gt;&lt;h2 id=&quot;01-学习-Lin</summary>
      
    
    
    
    <category term="操作系统学习" scheme="https://roranrui.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="操作系统" scheme="https://roranrui.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Linux" scheme="https://roranrui.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>排序算法总结</title>
    <link href="https://roranrui.cn/2022/04/22/pai-xu-suan-fa-zong-jie/"/>
    <id>https://roranrui.cn/2022/04/22/pai-xu-suan-fa-zong-jie/</id>
    <published>2022-04-22T15:05:50.000Z</published>
    <updated>2022-04-23T05:17:31.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序算法总结"><a href="#排序算法总结" class="headerlink" title="排序算法总结"></a>排序算法总结</h1><h2 id="一-冒泡排序"><a href="#一-冒泡排序" class="headerlink" title="一. 冒泡排序"></a>一. 冒泡排序</h2><p><strong>核心思想</strong>:</p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><p><strong>关键:</strong></p><p><code>排序轮数 = 元素个数 - 1</code></p><p><code>每轮比较次数 = 元素个数 - 当前排序轮数 - 1</code></p><p>代码实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="二-选择排序"><a href="#二-选择排序" class="headerlink" title="二. 选择排序"></a>二. 选择排序</h2><p><strong>核心思想:</strong></p><p>将整个数组遍历一遍，将最小的数和首个元素互换<br>然后将第二个到最后的数组遍历，其中最小的和第二个互换<br>以此类推。</p><p><strong>关键:</strong></p><p>确定要遍历寻找数组的位置: <code>arr_len - 1</code></p><p>每次都要从<code>i + 1(int i = 0)</code>位置开始找最小值</p><p>代码实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 第一层for循环是最小值的位置,只用遍历到数组长度前一个</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 最小值下标</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 第二层for循环用于遍历数组找出最小值所在的位置, 并将下标返回min</span>        <span class="token punctuation">{</span>            min <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">?</span> j <span class="token operator">:</span> min<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 交换初始认为的最小值和已知最小值</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="三-插入排序"><a href="#三-插入排序" class="headerlink" title="三. 插入排序"></a>三. 插入排序</h2><p><strong>核心思想:</strong></p><ol><li><p>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</p></li><li><p>从头到尾依次扫描未排序序列，将扫描到的每个元素与它后面一个元素相比较, 谁小谁往前移（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面）</p></li></ol><p><strong>关键:</strong></p><p>数组在<code>0~0</code>位置已经有序, 遍历数组时只需从<code>1</code>位置开始</p><p>代码实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0~0上有序, 要在0到i上有序</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="四-归并排序"><a href="#四-归并排序" class="headerlink" title="四. 归并排序"></a>四. 归并排序</h2><p><strong>核心思想:</strong></p><p>多次将若干个已经排序好的有序表合并成一个有序表。直接将两个表合并的归并成为二路归并。</p><p>其基本思想是，先递归划分子问题，然后合并结果。其实就是先两两合并，然后四四合并, 最终形成有序序列。</p><p><strong>关键:</strong></p><ul><li><p>首先<code>mergeSort</code>整段数组</p></li><li><p>然后进行递归</p><ul><li><p>首先<code>mergeSort</code>数组begin与end的左侧，让左侧有序</p></li><li><p>再<code>mergerSort</code>右侧</p></li><li><p>左侧和右侧都有序后，对左侧和右侧进行<code>merge</code>，一起排序</p></li><li><p>由于此次排序左右都有序，建立一个临时数组，对左右从头到尾进行扫描，谁小就进入数组，一遍扫描即可</p></li></ul></li></ul><p>代码实现: </p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> M<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 归并排序的子过程</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span> help <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>R <span class="token operator">-</span> L <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 辅助数组</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 辅助数组专用下标</span>    <span class="token keyword">int</span> p1 <span class="token operator">=</span> L<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 原数组左侧下标</span>    <span class="token keyword">int</span> p2 <span class="token operator">=</span> M <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 原数组中点后第一个位置下标</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> M <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">&lt;=</span> R<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 两个下标都不越界</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 拷贝最小值到辅助数组中, 并让下标前进</span>        help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span> <span class="token operator">?</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">:</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// p1 和 p2 总有一个会先临界, 一下两个情况只会发生一个</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> M<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// p1没有越界, 就把p1往后的数拷贝到help中去</span>    <span class="token punctuation">{</span>        help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p2 <span class="token operator">&lt;=</span> R<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// p2没有越界, 就把p2往后的数拷贝到help中去</span>    <span class="token punctuation">{</span>        help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> R <span class="token operator">-</span> L <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 把help中的数到回原数组</span>    <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>L <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> help<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 归并排序的主过程</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L <span class="token operator">==</span> R<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> L <span class="token operator">+</span> <span class="token punctuation">(</span>R <span class="token operator">-</span> L<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 中点</span>    <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> L<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 让左侧有序</span>    <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 让右侧有序</span>    <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> L<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 整体有序</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="五-计数排序"><a href="#五-计数排序" class="headerlink" title="五. 计数排序"></a>五. 计数排序</h2><p><strong>核心思想:</strong></p><ol><li>首先找到数组中的最大值，然后新建一个<code>count</code>数组此数组的长度是数组最大值+1，其实新建的这个数组中的下标值就是原数组的数据值.</li><li>遍历数组, 将原数组的数对应<code>count</code>数组的下标进行统计(<strong>统计词频</strong>)</li><li>将<code>count</code>数组中的数按顺序倒出</li></ol><p><strong>关键:</strong></p><p>倒出<code>count</code>数组中的数时, 原数组应接收的是<code>count</code>数组的下标</p><p>代码实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">countSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token function">getMax</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> clen <span class="token operator">=</span> max <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>clen<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr_len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 统计词频</span>    <span class="token punctuation">{</span>        count<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 遍历词频表, 得到有序数组</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> clen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 第一层是找到词频表的位置</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 第二层是打印该位置所有的数</span>        <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="六-快速排序"><a href="#六-快速排序" class="headerlink" title="六. 快速排序"></a>六. 快速排序</h2><p><strong>核心思想:</strong></p><ol><li><p>从数列中挑出一个元素, 作为参考数.</p></li><li><p>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为<strong>分区（partition）</strong>操作.</p></li><li><p>递归地把小于基准值元素的子数列和大于基准值元素的子数列排序.</p></li></ol><p><strong>关键:</strong></p><ol><li>先从数列中取出一个数作为基准数</li><li>分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边</li><li>再对左右区间重复第二步，(<strong>递归到死</strong>)</li></ol><p>代码实现:</p><h3 id="快排1-0"><a href="#快排1-0" class="headerlink" title="快排1.0"></a>快排1.0</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 在L...R上有序</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;</span> R<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> arr<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将数组最后一个数作为基准</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> L<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 左边指针位置</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> R<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 右边指针位置</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 左右两个指针没有相遇时</span>        <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 默认基准是最后一个数, 所以从左边开始比较</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> num <span class="token operator">&amp;&amp;</span> r <span class="token operator">></span> l<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 左侧指针指向数小于等于我指定的数, 并且右侧指针的位置大于左侧指针</span>            <span class="token punctuation">{</span>                l<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 左侧指针继续向后寻找我指定的值</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 当找到比 array[r]大的时，就把后面的值 array[l] 赋给它</span>            <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">>=</span> num <span class="token operator">&amp;&amp;</span> r <span class="token operator">></span> l<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 右侧指针指向数大于等于我指定的数, 并且右侧指针的位置大于左侧指针</span>            <span class="token punctuation">{</span>                r<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 右侧指针继续向前寻找大于我指定的值</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 当找到比 array[l] 小的时，就把后面的值 array[r] 赋给它</span>            <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 一轮交换后, 让我指定的数变成l指向位置的数</span>        arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 确定基准点</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> L<span class="token punctuation">,</span> l <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 让左侧递归</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 让右侧递归</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快排2-0"><a href="#快排2-0" class="headerlink" title="快排2.0"></a>快排2.0</h3><p><strong>问题:</strong></p><p>1.0版本每次只能排好一个数, 时间耗费多</p><p><strong>解决:</strong></p><p>2.0版本参考荷兰国旗问题, 将小于, 等于, 大于参考数的数分为三个区, 这样每次递归都能排好等于区的数, 相当于一次排好一批数, 比1.0版本稍快</p><p>代码实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> small <span class="token operator">=</span> L <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化小于区</span>    <span class="token keyword">int</span> large <span class="token operator">=</span> R<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化大于区</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> large<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 指针l到达大于区之前</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// arr[R]作为指定数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 当前数大于指定数, 就和大于区前一个交换, 大于区左扩, p不动</span>        <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token operator">--</span>large<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 当前数小于指定数, 就和小于区后一个交换, 小于区右扩, p++</span>        <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token operator">++</span>small<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>  <span class="token comment" spellcheck="true">// 如果当前数等于指定数, p++</span>        <span class="token punctuation">{</span>            p<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>large<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>small <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> large<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;</span> R<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> L<span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> L<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 小于区</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 大于区</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快排3-0"><a href="#快排3-0" class="headerlink" title="快排3.0"></a>快排3.0</h3><p><strong>问题:</strong></p><p>1.0 和 2.0 都存在一个问题, 容易受初始数据状况影响, 若数组本来就有序, 再选取最后一个数作为参考, 显然不合适</p><p><strong>解决:</strong></p><p>在开始partition之前, 先在数组中随机选取一个数, 放到最后一位作为参考数, 通过随机性减少极端情况发生</p><p>代码实现</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;</span> R<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>L <span class="token operator">+</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>R <span class="token operator">-</span> L <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> L<span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> L<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 小于区</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 大于区</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="七-堆排序"><a href="#七-堆排序" class="headerlink" title="七. 堆排序"></a>七. 堆排序</h2><p><strong>核心思想:</strong></p><p>利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p><p>堆排序是借助堆来实现的选择排序，思想同简单的选择排序，以下以大顶堆为例。注意：如果想升序排序就使用大顶堆，反之使用小顶堆。原因是堆顶元素需要交换到序列尾部。</p><p><strong>关键:</strong></p><p>每次弹出数的时候, 要<code>维护堆的性质</code></p><p>代码实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 某个数在index位置,能否往下移动</span><span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token keyword">int</span> heapsize<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 左孩子</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> heapsize<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 下方还有孩子</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 右孩子存在并且两个孩子的值相比较,谁的值大返回谁的</span>        <span class="token keyword">int</span> largest <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> heapsize <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">?</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> left<span class="token punctuation">;</span>        largest <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">?</span> largest<span class="token operator">:</span> index<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> largest<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 当我是我自己的时候</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        index <span class="token operator">=</span> largest<span class="token punctuation">;</span>        left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 某个数在index位置,能否往上移动</span><span class="token keyword">void</span> <span class="token function">heapinsert</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        index <span class="token operator">=</span> <span class="token punctuation">(</span>index<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> heapsize<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 先构建大根堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> heapsize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">heapinsert</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>heapsize <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 将0位置的数弹出到末尾, 再维护堆的性质</span>    <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>heapsize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heapsize<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> heapsize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="八-各个排序的复杂度-稳定性"><a href="#八-各个排序的复杂度-稳定性" class="headerlink" title="八. 各个排序的复杂度, 稳定性"></a>八. 各个排序的复杂度, 稳定性</h2><ul><li><p>冒泡排序: 时间复杂度O(N^2) 额外空间复杂度O(1)</p></li><li><p>选择排序: 时间复杂度O(N^2) 额外空间复杂度O(1)</p></li><li><p>插入排序: 时间复杂度O(N^2) 额外空间复杂度O(1)</p></li><li><p>归并排序: 时间复杂度O(NlogN) 额外空间复杂度O(N)</p></li><li><p>计数排序: 时间复杂度O(NlogN) 额外空间复杂度O(N)</p></li><li><p>快速排序<strong>1.0</strong>: 时间复杂度O(N^2) 额外空间复杂度O(N)</p></li><li><p>快速排序<strong>2.0</strong>: 时间复杂度O(N^2) 额外空间复杂度O(N)</p></li><li><p>快速排序<strong>3.0</strong>: 时间复杂度O(NlogN) 额外空间复杂度O(N)</p></li><li><p>堆排序: 时间复杂度O(NlogN) 额外空间复杂度O(N)</p></li></ul><p><strong>对时间复杂度和额外空间复杂度的估计都是按最坏的情况</strong></p><p><strong>稳定性:</strong></p><p><strong>稳定</strong> ：如果a原本在b前面，而a=b，排序之后a仍然在b的前面；</p><p>稳定的排序方法有:</p><ul><li>冒泡排序</li><li>插入排序</li><li>归并排序</li><li>计数排序(不基于比较的排序)</li></ul><p><strong>不稳定排序算法的原因:</strong></p><ul><li>选择排序: 受初始数据状况影响</li><li>快速排序: 受初始数据状况影响</li><li>堆排序: 受初始数据状况影响</li></ul><hr><h2 id="附-排序算法代码测试环境"><a href="#附-排序算法代码测试环境" class="headerlink" title="附 排序算法代码测试环境"></a>附 排序算法代码测试环境</h2><h3 id="1-IDE配置"><a href="#1-IDE配置" class="headerlink" title="1. IDE配置"></a>1. IDE配置</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span><span class="token macro property">#<span class="token directive keyword">define</span> arr_len 10</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">getArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"排序前: "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">printIN</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> arr_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"***********************************************"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"排序后: "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 排序方法添加在此处</span>    <span class="token function">printIN</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> arr_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作用: 定义宏常量数组长度为10, 生成随机数组, 打印结果</p><hr><h3 id="2-swap-函数"><a href="#2-swap-函数" class="headerlink" title="2. swap()函数"></a>2. swap()函数</h3><p>作用: 交换两个数的位置</p><p>由于采用异或运算, 减少额外空间的使用</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-getArr-函数"><a href="#3-getArr-函数" class="headerlink" title="3. getArr()函数"></a>3. getArr()函数</h3><p>作用: 获取随机数组, 保证每次排序数据的随机性</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token function">getArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr_len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr_len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="4-printIN-函数"><a href="#4-printIN-函数" class="headerlink" title="4. printIN()函数"></a>4. printIN()函数</h3><p>作用: 遍历数组, 打印数组中的每个数</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">printIN</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="5-getMax-函数"><a href="#5-getMax-函数" class="headerlink" title="5. getMax()函数"></a>5. getMax()函数</h3><p>作用: 遍历数组, 获取数组中的最大值</p><p>由于采用二分递归找最大值, 比一般从头遍历要快, 能够优化整个程序的时间</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 用二分求最大值的过程</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">==</span> R<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 数组在L...R范围上只有一个数, 直接返回</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> L <span class="token operator">+</span> <span class="token punctuation">(</span>R <span class="token operator">-</span> L<span class="token punctuation">)</span><span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 中点</span>    <span class="token keyword">int</span> leftMax <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> L<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 左边二分到死</span>    <span class="token keyword">int</span> rightMax <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 右边二分到死</span>    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>leftMax<span class="token punctuation">,</span> rightMax<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="下次一定"><a href="#下次一定" class="headerlink" title="下次一定"></a>下次一定</h2><ul><li><input disabled="" type="checkbox"> <strong>希尔排序没整明白</strong></li><li><input disabled="" type="checkbox"> <strong>基数排序没整明白</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;排序算法总结&quot;&gt;&lt;a href=&quot;#排序算法总结&quot; class=&quot;headerlink&quot; title=&quot;排序算法总结&quot;&gt;&lt;/a&gt;排序算法总结&lt;/h1&gt;&lt;h2 id=&quot;一-冒泡排序&quot;&gt;&lt;a href=&quot;#一-冒泡排序&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="算法学习" scheme="https://roranrui.cn/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="算法" scheme="https://roranrui.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
