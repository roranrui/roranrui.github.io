<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>若然无亦的Blog</title>
  
  <subtitle>长日终有时, 长梦终有逝</subtitle>
  <link href="https://roranrui.github.io/atom.xml" rel="self"/>
  
  <link href="https://roranrui.github.io/"/>
  <updated>2022-04-20T14:48:51.735Z</updated>
  <id>https://roranrui.github.io/</id>
  
  <author>
    <name>若然无亦</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++核心_面向对象编程</title>
    <link href="https://roranrui.github.io/2022/04/20/c-he-xin-mian-xiang-dui-xiang-bian-cheng/"/>
    <id>https://roranrui.github.io/2022/04/20/c-he-xin-mian-xiang-dui-xiang-bian-cheng/</id>
    <published>2022-04-20T14:22:32.000Z</published>
    <updated>2022-04-20T14:48:51.735Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-核心编程"><a href="#C-核心编程" class="headerlink" title="C++核心编程"></a>C++核心编程</h1><p>本阶段主要针对C++==面向对象==编程技术做详细讲解，探讨C++中的核心和精髓。</p><h2 id="1-内存分区模型"><a href="#1-内存分区模型" class="headerlink" title="1 内存分区模型"></a>1 内存分区模型</h2><p>C++程序在执行时，将内存大方向划分为<strong>4个区域</strong></p><ul><li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li><li>全局区：存放全局变量和静态变量以及常量</li><li>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等</li><li>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收</li></ul><p><strong>内存四区意义：</strong></p><p>不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程</p><h3 id="1-1-程序运行前"><a href="#1-1-程序运行前" class="headerlink" title="1.1 程序运行前"></a>1.1 程序运行前</h3><p>​在程序编译后，生成了exe可执行程序，<strong>未执行该程序前</strong>分为两个区域</p><p>​<strong>代码区：</strong></p><p>​存放 CPU 执行的机器指令</p><p>​代码区是<strong>共享</strong>的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可</p><p>​代码区是<strong>只读</strong>的，使其只读的原因是防止程序意外地修改了它的指令</p><p>​<strong>全局区：</strong></p><p>​全局变量和静态变量存放在此.</p><p>​全局区还包含了常量区, 字符串常量和其他常量也存放在此.</p><p>​==<strong>该区域的数据在程序结束后由操作系统释放</strong>==.</p><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//全局变量int g_a = 10;int g_b = 10;//全局常量const int c_g_a = 10;const int c_g_b = 10;int main() {//局部变量  (函数体内)int a = 10;int b = 10;//打印地址cout &lt;&lt; "局部变量a地址为： " &lt;&lt; (int)&amp;a &lt;&lt; endl;cout &lt;&lt; "局部变量b地址为： " &lt;&lt; (int)&amp;b &lt;&lt; endl;cout &lt;&lt; "全局变量g_a地址为： " &lt;&lt;  (int)&amp;g_a &lt;&lt; endl;cout &lt;&lt; "全局变量g_b地址为： " &lt;&lt;  (int)&amp;g_b &lt;&lt; endl;//静态变量static int s_a = 10;static int s_b = 10;cout &lt;&lt; "静态变量s_a地址为： " &lt;&lt; (int)&amp;s_a &lt;&lt; endl;cout &lt;&lt; "静态变量s_b地址为： " &lt;&lt; (int)&amp;s_b &lt;&lt; endl;cout &lt;&lt; "字符串常量地址为： " &lt;&lt; (int)&amp;"hello world" &lt;&lt; endl;cout &lt;&lt; "字符串常量地址为： " &lt;&lt; (int)&amp;"hello world1" &lt;&lt; endl;cout &lt;&lt; "全局常量c_g_a地址为： " &lt;&lt; (int)&amp;c_g_a &lt;&lt; endl;cout &lt;&lt; "全局常量c_g_b地址为： " &lt;&lt; (int)&amp;c_g_b &lt;&lt; endl;const int c_l_a = 10;const int c_l_b = 10;cout &lt;&lt; "局部常量c_l_a地址为： " &lt;&lt; (int)&amp;c_l_a &lt;&lt; endl;cout &lt;&lt; "局部常量c_l_b地址为： " &lt;&lt; (int)&amp;c_l_b &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果：</p><p><img src="https://i.loli.net/2021/11/26/hGE61WPBtbFgleM.png" alt="1545017602518"></p><p>总结：</p><ul><li>C++中在程序运行前分为全局区和代码区</li><li>代码区特点是共享和只读</li><li>全局区中存放全局变量、静态变量、常量</li><li>常量区中存放 const 修饰的全局常量  和 字符串常量</li></ul><h3 id="1-2-程序运行后"><a href="#1-2-程序运行后" class="headerlink" title="1.2 程序运行后"></a>1.2 程序运行后</h3><p>​<strong>栈区：</strong></p><p>​由编译器自动分配释放, 存放函数的参数值,局部变量等</p><p>​注意事项：<strong>不要返回局部变量的地址</strong>，栈区开辟的数据由编译器自动释放</p><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int * func(){int a = 10;return &amp;a;}int main() {int *p = func();cout &lt;&lt; *p &lt;&lt; endl;  // 第一次可以打印正确的数字,是因为编译器做了保留cout &lt;&lt; *p &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​<strong>堆区：</strong></p><p>​由程序员分配释放,若程序员不释放,程序结束时由操作系统回收</p><p>​在C++中主要利用<strong>new</strong>在堆区开辟内存</p><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int* func(){int* a = new int(10);return a;}int main() {int *p = func();cout &lt;&lt; *p &lt;&lt; endl;cout &lt;&lt; *p &lt;&lt; endl;    system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><p>堆区数据由程序员管理开辟和释放</p><p>堆区数据利用new关键字进行开辟内存</p><h3 id="1-3-new操作符"><a href="#1-3-new操作符" class="headerlink" title="1.3 new操作符"></a>1.3 new操作符</h3><p>​C++中利用==new==操作符在堆区开辟数据</p><p>​堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 ==delete==</p><p>​语法：<code> new 数据类型</code></p><p>​利用new创建的数据，会返回该数据对应的类型的指针</p><p><strong>示例1： 基本语法</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int* func(){int* a = new int(10);return a;}int main() {int *p = func();cout &lt;&lt; *p &lt;&lt; endl;cout &lt;&lt; *p &lt;&lt; endl;//利用delete释放堆区数据delete p;//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例2：开辟数组</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//堆区开辟数组int main() {int* arr = new int[10];for (int i = 0; i &lt; 10; i++){arr[i] = i + 100;}for (int i = 0; i &lt; 10; i++){cout &lt;&lt; arr[i] &lt;&lt; endl;}//释放数组 delete 后加 []delete[] arr;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-引用"><a href="#2-引用" class="headerlink" title="2 引用"></a>2 引用</h2><h3 id="2-1-引用的基本使用"><a href="#2-1-引用的基本使用" class="headerlink" title="2.1 引用的基本使用"></a>2.1 引用的基本使用</h3><p>**作用： **给变量起别名</p><p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int a = 10;int &amp;b = a;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;b = 100;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-引用注意事项"><a href="#2-2-引用注意事项" class="headerlink" title="2.2 引用注意事项"></a>2.2 引用注意事项</h3><ul><li>引用必须<strong>初始化</strong></li><li>引用在<strong>初始化</strong>后，<strong>不</strong>可以改变</li></ul><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int a = 10;int b = 20;//int &amp;c; //错误，引用必须初始化int &amp;c = a; //一旦初始化后，就不可以更改c = b; //这是赋值操作，不是更改引用cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;cout &lt;&lt; "c = " &lt;&lt; c &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-引用做函数参数"><a href="#2-3-引用做函数参数" class="headerlink" title="2.3 引用做函数参数"></a>2.3 引用做函数参数</h3><p><strong>作用：</strong>函数传参时，可以利用引用的技术让形参修饰实参</p><p><strong>优点：</strong>可以简化指针修改实参</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//1. 值传递void mySwap01(int a, int b) {int temp = a;a = b;b = temp;}//2. 地址传递void mySwap02(int* a, int* b) {int temp = *a;*a = *b;*b = temp;}//3. 引用传递void mySwap03(int&amp; a, int&amp; b) {int temp = a;a = b;b = temp;}int main() {int a = 10;int b = 20;mySwap01(a, b);cout &lt;&lt; "a:" &lt;&lt; a &lt;&lt; " b:" &lt;&lt; b &lt;&lt; endl;mySwap02(&amp;a, &amp;b);cout &lt;&lt; "a:" &lt;&lt; a &lt;&lt; " b:" &lt;&lt; b &lt;&lt; endl;mySwap03(a, b);cout &lt;&lt; "a:" &lt;&lt; a &lt;&lt; " b:" &lt;&lt; b &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p></blockquote><h3 id="2-4-引用做函数返回值"><a href="#2-4-引用做函数返回值" class="headerlink" title="2.4 引用做函数返回值"></a>2.4 引用做函数返回值</h3><p>作用：引用是可以作为函数的返回值存在的</p><p>注意：<strong>不要返回局部变量引用</strong></p><p>用法：函数调用作为左值</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//返回局部变量引用int&amp; test01() {int a = 10; //局部变量return a;}//返回静态变量引用int&amp; test02() {static int a = 20;return a;}int main() {//不能返回局部变量的引用int&amp; ref = test01();cout &lt;&lt; "ref = " &lt;&lt; ref &lt;&lt; endl;cout &lt;&lt; "ref = " &lt;&lt; ref &lt;&lt; endl;//如果函数做左值，那么必须返回引用int&amp; ref2 = test02();cout &lt;&lt; "ref2 = " &lt;&lt; ref2 &lt;&lt; endl;cout &lt;&lt; "ref2 = " &lt;&lt; ref2 &lt;&lt; endl;test02() = 1000;cout &lt;&lt; "ref2 = " &lt;&lt; ref2 &lt;&lt; endl;cout &lt;&lt; "ref2 = " &lt;&lt; ref2 &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><h3 id="2-5-引用的本质"><a href="#2-5-引用的本质" class="headerlink" title="2.5 引用的本质"></a>2.5 引用的本质</h3><p>本质：<strong>引用的本质在c++内部实现是一个指针常量.</strong></p><p>讲解示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//发现是引用，转换为 int* const ref = &amp;a;void func(int&amp; ref){ref = 100; // ref是引用，转换为*ref = 100}int main(){int a = 10;        //自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改int&amp; ref = a; ref = 20; //内部发现ref是引用，自动帮我们转换为: *ref = 20;    cout &lt;&lt; "a:" &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "ref:" &lt;&lt; ref &lt;&lt; endl;    func(a);return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p><h3 id="2-6-常量引用"><a href="#2-6-常量引用" class="headerlink" title="2.6 常量引用"></a>2.6 常量引用</h3><p><strong>作用：</strong>常量引用主要用来修饰形参，防止误操作</p><p>在函数形参列表中，可以加==<strong>const修饰形参</strong>==，防止形参改变实参</p><p><strong>示例：</strong> </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//引用使用的场景，通常用来修饰形参void showValue(const int&amp; v) {//v += 10;cout &lt;&lt; v &lt;&lt; endl;}int main() {//int &amp; ref = 10;  引用本身需要一个合法的内存空间，因此这行错误//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;const int &amp; ref = 10;//ref = 100;  //加入const后不可以修改变量cout &lt;&lt; ref &lt;&lt; endl;//函数中利用常量引用防止误操作修改实参int a = 10;showValue(a);system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-函数提高"><a href="#3-函数提高" class="headerlink" title="3 函数提高"></a>3 函数提高</h2><h3 id="3-1-函数默认参数"><a href="#3-1-函数默认参数" class="headerlink" title="3.1 函数默认参数"></a>3.1 函数默认参数</h3><p>在C++中，函数的形参列表中的形参是可以有默认值的。</p><p>语法：<code> 返回值类型  函数名 （参数= 默认值）{}</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int func(int a, int b = 10, int c = 10) {return a + b + c;}//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数int func2(int a = 10, int b = 10);int func2(int a, int b) {return a + b;} int main() {cout &lt;&lt; "ret = " &lt;&lt; func(20, 20) &lt;&lt; endl;cout &lt;&lt; "ret = " &lt;&lt; func(100) &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-函数占位参数"><a href="#3-2-函数占位参数" class="headerlink" title="3.2 函数占位参数"></a>3.2 函数占位参数</h3><p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p><p><strong>语法：</strong> <code>返回值类型 函数名 (数据类型){}</code></p><p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//函数占位参数 ，占位参数也可以有默认参数void func(int a, int) {cout &lt;&lt; "this is func" &lt;&lt; endl;}int main() {func(10,10); //占位参数必须填补system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-函数重载"><a href="#3-3-函数重载" class="headerlink" title="3.3 函数重载"></a>3.3 函数重载</h3><h4 id="3-3-1-函数重载概述"><a href="#3-3-1-函数重载概述" class="headerlink" title="3.3.1 函数重载概述"></a>3.3.1 函数重载概述</h4><p><strong>作用：</strong>函数名可以相同，提高复用性</p><p><strong>函数重载满足条件：</strong></p><ul><li>同一个作用域下</li><li>函数名称相同</li><li>函数参数<strong>类型不同</strong>  或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li></ul><p><strong>注意:</strong>  函数的返回值不可以作为函数重载的条件</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//函数重载需要函数都在同一个作用域下void func(){cout &lt;&lt; "func 的调用！" &lt;&lt; endl;}void func(int a){cout &lt;&lt; "func (int a) 的调用！" &lt;&lt; endl;}void func(double a){cout &lt;&lt; "func (double a)的调用！" &lt;&lt; endl;}void func(int a ,double b){cout &lt;&lt; "func (int a ,double b) 的调用！" &lt;&lt; endl;}void func(double a ,int b){cout &lt;&lt; "func (double a ,int b)的调用！" &lt;&lt; endl;}//函数返回值不可以作为函数重载条件//int func(double a, int b)//{//cout &lt;&lt; "func (double a ,int b)的调用！" &lt;&lt; endl;//}int main() {func();func(10);func(3.14);func(10,3.14);func(3.14 , 10);system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-2-函数重载注意事项"><a href="#3-3-2-函数重载注意事项" class="headerlink" title="3.3.2 函数重载注意事项"></a>3.3.2 函数重载注意事项</h4><ul><li>引用作为重载条件</li><li>函数重载碰到函数默认参数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//函数重载注意事项//1、引用作为重载条件void func(int &amp;a){cout &lt;&lt; "func (int &amp;a) 调用 " &lt;&lt; endl;}void func(const int &amp;a){cout &lt;&lt; "func (const int &amp;a) 调用 " &lt;&lt; endl;}//2、函数重载碰到函数默认参数void func2(int a, int b = 10){cout &lt;&lt; "func2(int a, int b = 10) 调用" &lt;&lt; endl;}void func2(int a){cout &lt;&lt; "func2(int a) 调用" &lt;&lt; endl;}int main() {int a = 10;func(a); //调用无constfunc(10);//调用有const//func2(10); //碰到默认参数产生歧义，需要避免system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-类和对象"><a href="#4-类和对象" class="headerlink" title="4 类和对象"></a><strong>4</strong> 类和对象</h2><p>C++面向对象的三大特性为：==封装、继承、多态==</p><p>C++认为==万事万物都皆为对象==，对象上有其属性和行为</p><p><strong>例如：</strong></p><p>​人可以作为对象，属性有姓名、年龄、身高、体重…，行为有走、跑、跳、吃饭、唱歌…</p><p>​车也可以作为对象，属性有轮胎、方向盘、车灯…,行为有载人、放音乐、放空调…</p><p>​具有相同性质的==对象==，我们可以抽象称为==类==，人属于人类，车属于车类</p><h3 id="4-1-封装"><a href="#4-1-封装" class="headerlink" title="4.1 封装"></a>4.1 封装</h3><h4 id="4-1-1-封装的意义"><a href="#4-1-1-封装的意义" class="headerlink" title="4.1.1  封装的意义"></a>4.1.1  封装的意义</h4><p>封装是C++面向对象三大特性之一</p><p>封装的意义：</p><ul><li>将属性和行为作为一个整体，表现生活中的事物</li><li>将属性和行为加以权限控制</li></ul><p><strong>封装意义一：</strong></p><p>​在设计类的时候，属性和行为写在一起，表现事物</p><p><strong>语法：</strong> <code>class 类名{   访问权限： 属性  / 行为  };</code></p><p><strong>示例1：</strong>设计一个圆类，求圆的周长</p><p><strong>示例代码：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//圆周率const double PI = 3.14;//1、封装的意义//将属性和行为作为一个整体，用来表现生活中的事物//封装一个圆类，求圆的周长//class代表设计一个类，后面跟着的是类名class Circle{public:  //访问权限  公共的权限//属性int m_r;//半径//行为//获取到圆的周长double calculateZC(){//2 * pi  * r//获取圆的周长return  2 * PI * m_r;}};int main() {//通过圆类，创建圆的对象// c1就是一个具体的圆Circle c1;c1.m_r = 10; //给圆对象的半径 进行赋值操作//2 * pi * 10 = = 62.8cout &lt;&lt; "圆的周长为： " &lt;&lt; c1.calculateZC() &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例2：</strong>设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p><p><strong>示例2代码：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//学生类class Student {public:void setName(string name) {m_name = name;}void setID(int id) {m_id = id;}void showStudent() {cout &lt;&lt; "name:" &lt;&lt; m_name &lt;&lt; " ID:" &lt;&lt; m_id &lt;&lt; endl;}public:string m_name;int m_id;};int main() {Student stu;stu.setName("德玛西亚");stu.setID(250);stu.showStudent();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>封装意义二：</strong></p><p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p><p>访问权限有三种：</p><ol><li><code>public</code>     公共权限  成员在类内可以访问, 类外也可以访问</li><li><code>protected</code> 保护权限  仅有类内可以访问 子类也可以访问保护的内容</li><li><code>private</code>    私有权限 仅有类内可以访问 子类也不可访问</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//三种权限//公共权限  public     类内可以访问  类外可以访问//保护权限  protected  类内可以访问  类外不可以访问//私有权限  private    类内可以访问  类外不可以访问class Person{//姓名  公共权限public:string m_Name;//汽车  保护权限protected:string m_Car;//银行卡密码  私有权限private:int m_Password;public:void func(){m_Name = "张三";m_Car = "拖拉机";m_Password = 123456;}};int main() {Person p;p.m_Name = "李四";//p.m_Car = "奔驰";  //保护权限类外访问不到//p.m_Password = 123; //私有权限类外访问不到system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-2-struct和class区别"><a href="#4-1-2-struct和class区别" class="headerlink" title="4.1.2 struct和class区别"></a>4.1.2 struct和class区别</h4><p>在C++中 struct和class唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p><p>区别：</p><ul><li>struct 默认权限为公共</li><li>class   默认权限为私有</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class C1{int  m_A; //默认是私有权限};struct C2{int m_A;  //默认是公共权限};int main() {C1 c1;c1.m_A = 10; //错误，访问权限是私有C2 c2;c2.m_A = 10; //正确，访问权限是公共system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-3-成员属性设置为私有"><a href="#4-1-3-成员属性设置为私有" class="headerlink" title="4.1.3 成员属性设置为私有"></a>4.1.3 成员属性设置为私有</h4><p><strong>优点1：</strong>将所有成员属性设置为私有，可以自己控制读写权限</p><p><strong>优点2：</strong>对于写权限，我们可以检测数据的有效性</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {public://姓名设置可读可写void setName(string name) {m_Name = name;}string getName(){return m_Name;}//获取年龄 int getAge() {return m_Age;}//设置年龄void setAge(int age) {if (age &lt; 0 || age &gt; 150) {cout &lt;&lt; "你个老妖精!" &lt;&lt; endl;return;}m_Age = age;}//情人设置为只写void setLover(string lover) {m_Lover = lover;}private:string m_Name; //可读可写  姓名int m_Age; //只读  年龄string m_Lover; //只写  情人};int main() {Person p;//姓名设置p.setName("张三");cout &lt;&lt; "姓名： " &lt;&lt; p.getName() &lt;&lt; endl;//年龄设置p.setAge(50);cout &lt;&lt; "年龄： " &lt;&lt; p.getAge() &lt;&lt; endl;//情人设置p.setLover("苍井");//cout &lt;&lt; "情人： " &lt;&lt; p.m_Lover &lt;&lt; endl;  //只写属性，不可以读取system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>练习案例1：设计立方体类</strong></p><p>设计立方体类(Cube)</p><p>求出立方体的面积和体积</p><p>分别用全局函数和成员函数判断两个立方体是否相等。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/1545533548532.png" alt="1545533548532"></p><p><strong>练习案例2：点和圆的关系</strong></p><p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/1545533829184.png" alt="1545533829184"></p><h3 id="4-2-对象的初始化和清理"><a href="#4-2-对象的初始化和清理" class="headerlink" title="4.2 对象的初始化和清理"></a>4.2 对象的初始化和清理</h3><ul><li>生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全</li><li>C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。</li></ul><h4 id="4-2-1-构造函数和析构函数"><a href="#4-2-1-构造函数和析构函数" class="headerlink" title="4.2.1 构造函数和析构函数"></a>4.2.1 构造函数和析构函数</h4><p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p><p>​一个对象或者变量没有初始状态，对其使用后果是未知</p><p>​同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</p><p>c++利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p><p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果<strong>我们不提供构造和析构，编译器会提供</strong></p><p><strong>编译器提供的构造函数和析构函数是空实现。</strong></p><ul><li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li><li>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用，执行一些清理工作。</li></ul><p><strong>构造函数语法：</strong><code>类名(){}</code></p><ol><li>构造函数，没有返回值也不写void</li><li>函数名称与类名相同</li><li>构造函数可以有参数，因此可以发生重载</li><li>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次</li></ol><p><strong>析构函数语法：</strong> <code>~类名(){}</code></p><ol><li>析构函数，没有返回值也不写void</li><li>函数名称与类名相同,在名称前加上符号  ~</li><li>析构函数不可以有参数，因此不可以发生重载</li><li>程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次</li></ol><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person{public://构造函数Person(){cout &lt;&lt; "Person的构造函数调用" &lt;&lt; endl;}//析构函数~Person(){cout &lt;&lt; "Person的析构函数调用" &lt;&lt; endl;}};void test01(){Person p;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-2-构造函数的分类及调用"><a href="#4-2-2-构造函数的分类及调用" class="headerlink" title="4.2.2 构造函数的分类及调用"></a>4.2.2 构造函数的分类及调用</h4><p>两种分类方式：</p><p>​按参数分为： 有参构造和无参构造</p><p>​按类型分为： 普通构造和拷贝构造</p><p>三种调用方式：</p><p>​括号法</p><p>​显示法</p><p>​隐式转换法</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//1、构造函数分类// 按照参数分类分为 有参和无参构造   无参又称为默认构造函数// 按照类型分类分为 普通构造和拷贝构造class Person {public://无参（默认）构造函数Person() {cout &lt;&lt; "无参构造函数!" &lt;&lt; endl;}//有参构造函数Person(int a) {age = a;cout &lt;&lt; "有参构造函数!" &lt;&lt; endl;}//拷贝构造函数Person(const Person&amp; p) {age = p.age;cout &lt;&lt; "拷贝构造函数!" &lt;&lt; endl;}//析构函数~Person() {cout &lt;&lt; "析构函数!" &lt;&lt; endl;}public:int age;};//2、构造函数的调用//调用无参构造函数void test01() {Person p; //调用无参构造函数}//调用有参的构造函数void test02() {//2.1  括号法，常用Person p1(10);//注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明//Person p2();//2.2 显式法Person p2 = Person(10); Person p3 = Person(p2);//Person(10)单独写就是匿名对象  当前行结束之后，马上析构//2.3 隐式转换法Person p4 = 10; // Person p4 = Person(10); Person p5 = p4; // Person p5 = Person(p4); //注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明//Person p5(p4);}int main() {test01();//test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-3-拷贝构造函数调用时机"><a href="#4-2-3-拷贝构造函数调用时机" class="headerlink" title="4.2.3 拷贝构造函数调用时机"></a>4.2.3 拷贝构造函数调用时机</h4><p>C++中拷贝构造函数调用时机通常有三种情况</p><ul><li>使用一个已经创建完毕的对象来初始化一个新对象</li><li>值传递的方式给函数参数传值</li><li>以值方式返回局部对象</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {public:Person() {cout &lt;&lt; "无参构造函数!" &lt;&lt; endl;mAge = 0;}Person(int age) {cout &lt;&lt; "有参构造函数!" &lt;&lt; endl;mAge = age;}Person(const Person&amp; p) {cout &lt;&lt; "拷贝构造函数!" &lt;&lt; endl;mAge = p.mAge;}//析构函数在释放内存之前调用~Person() {cout &lt;&lt; "析构函数!" &lt;&lt; endl;}public:int mAge;};//1. 使用一个已经创建完毕的对象来初始化一个新对象void test01() {Person man(100); //p对象已经创建完毕Person newman(man); //调用拷贝构造函数Person newman2 = man; //拷贝构造//Person newman3;//newman3 = man; //不是调用拷贝构造函数，赋值操作}//2. 值传递的方式给函数参数传值//相当于Person p1 = p;void doWork(Person p1) {}void test02() {Person p; //无参构造函数doWork(p);}//3. 以值方式返回局部对象Person doWork2(){Person p1;cout &lt;&lt; (int *)&amp;p1 &lt;&lt; endl;return p1;}void test03(){Person p = doWork2();cout &lt;&lt; (int *)&amp;p &lt;&lt; endl;}int main() {//test01();//test02();test03();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-4-构造函数调用规则"><a href="#4-2-4-构造函数调用规则" class="headerlink" title="4.2.4 构造函数调用规则"></a>4.2.4 构造函数调用规则</h4><p>默认情况下，c++编译器至少给一个类添加3个函数</p><p>1．默认构造函数(无参，函数体为空)</p><p>2．默认析构函数(无参，函数体为空)</p><p>3．默认拷贝构造函数，对属性进行值拷贝</p><p>构造函数调用规则如下：</p><ul><li><p>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</p></li><li><p>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</p></li></ul><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {public://无参（默认）构造函数Person() {cout &lt;&lt; "无参构造函数!" &lt;&lt; endl;}//有参构造函数Person(int a) {age = a;cout &lt;&lt; "有参构造函数!" &lt;&lt; endl;}//拷贝构造函数Person(const Person&amp; p) {age = p.age;cout &lt;&lt; "拷贝构造函数!" &lt;&lt; endl;}//析构函数~Person() {cout &lt;&lt; "析构函数!" &lt;&lt; endl;}public:int age;};void test01(){Person p1(18);//如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作Person p2(p1);cout &lt;&lt; "p2的年龄为： " &lt;&lt; p2.age &lt;&lt; endl;}void test02(){//如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造Person p1; //此时如果用户自己没有提供默认构造，会出错Person p2(10); //用户提供的有参Person p3(p2); //此时如果用户没有提供拷贝构造，编译器会提供//如果用户提供拷贝构造，编译器不会提供其他构造函数Person p4; //此时如果用户自己没有提供默认构造，会出错Person p5(10); //此时如果用户自己没有提供有参，会出错Person p6(p5); //用户自己提供拷贝构造}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-5-深拷贝与浅拷贝"><a href="#4-2-5-深拷贝与浅拷贝" class="headerlink" title="4.2.5 深拷贝与浅拷贝"></a>4.2.5 深拷贝与浅拷贝</h4><p>深浅拷贝是面试经典问题，也是常见的一个坑</p><p>浅拷贝：简单的赋值拷贝操作</p><p>深拷贝：在堆区重新申请空间，进行拷贝操作</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {public://无参（默认）构造函数Person() {cout &lt;&lt; "无参构造函数!" &lt;&lt; endl;}//有参构造函数Person(int age ,int height) {cout &lt;&lt; "有参构造函数!" &lt;&lt; endl;m_age = age;m_height = new int(height);}//拷贝构造函数  Person(const Person&amp; p) {cout &lt;&lt; "拷贝构造函数!" &lt;&lt; endl;//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题m_age = p.m_age;m_height = new int(*p.m_height);}//析构函数~Person() {cout &lt;&lt; "析构函数!" &lt;&lt; endl;if (m_height != NULL){delete m_height;}}public:int m_age;int* m_height;};void test01(){Person p1(18, 180);Person p2(p1);cout &lt;&lt; "p1的年龄： " &lt;&lt; p1.m_age &lt;&lt; " 身高： " &lt;&lt; *p1.m_height &lt;&lt; endl;cout &lt;&lt; "p2的年龄： " &lt;&lt; p2.m_age &lt;&lt; " 身高： " &lt;&lt; *p2.m_height &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p></blockquote><h4 id="4-2-6-初始化列表"><a href="#4-2-6-初始化列表" class="headerlink" title="4.2.6 初始化列表"></a>4.2.6 初始化列表</h4><p><strong>作用：</strong></p><p>C++提供了初始化列表语法，用来初始化属性</p><p><strong>语法：</strong><code>构造函数()：属性1(值1),属性2（值2）... {}</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {public:////传统方式初始化//Person(int a, int b, int c) {//m_A = a;//m_B = b;//m_C = c;//}//初始化列表方式初始化Person(int a, int b, int c) :m_A(a), m_B(b), m_C(c) {}void PrintPerson() {cout &lt;&lt; "mA:" &lt;&lt; m_A &lt;&lt; endl;cout &lt;&lt; "mB:" &lt;&lt; m_B &lt;&lt; endl;cout &lt;&lt; "mC:" &lt;&lt; m_C &lt;&lt; endl;}private:int m_A;int m_B;int m_C;};int main() {Person p(1, 2, 3);p.PrintPerson();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-7-类对象作为类成员"><a href="#4-2-7-类对象作为类成员" class="headerlink" title="4.2.7 类对象作为类成员"></a>4.2.7 类对象作为类成员</h4><p>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p><p>例如：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class A {}class B{    A a；}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>B类中有对象A作为成员，A为对象成员</p><p>那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Phone{public:Phone(string name){m_PhoneName = name;cout &lt;&lt; "Phone构造" &lt;&lt; endl;}~Phone(){cout &lt;&lt; "Phone析构" &lt;&lt; endl;}string m_PhoneName;};class Person{public://初始化列表可以告诉编译器调用哪一个构造函数Person(string name, string pName) :m_Name(name), m_Phone(pName){cout &lt;&lt; "Person构造" &lt;&lt; endl;}~Person(){cout &lt;&lt; "Person析构" &lt;&lt; endl;}void playGame(){cout &lt;&lt; m_Name &lt;&lt; " 使用" &lt;&lt; m_Phone.m_PhoneName &lt;&lt; " 牌手机! " &lt;&lt; endl;}string m_Name;Phone m_Phone;};void test01(){//当类中成员是其他类对象时，我们称该成员为 对象成员//构造的顺序是 ：先调用对象成员的构造，再调用本类构造//析构顺序与构造相反Person p("张三" , "苹果X");p.playGame();}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-8-静态成员"><a href="#4-2-8-静态成员" class="headerlink" title="4.2.8 静态成员"></a>4.2.8 静态成员</h4><p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p><p>静态成员分为：</p><ul><li>静态成员变量<ul><li>所有对象共享同一份数据</li><li>在编译阶段分配内存</li><li>类内声明，类外初始化</li></ul></li><li>静态成员函数<ul><li>所有对象共享同一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul></li></ul><p><strong>示例1 ：</strong>静态成员变量</p><ul><li>初始化要在类外进行</li><li>类中非静态常量不能在外部定义</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person{public:static int m_A; //静态成员变量//静态成员变量特点：//1 在编译阶段分配内存//2 类内声明，类外初始化//3 所有对象共享同一份数据private:static int m_B; //静态成员变量也是有访问权限的};int Person::m_A = 10;int Person::m_B = 10;void test01(){//静态成员变量两种访问方式//1、通过对象Person p1;p1.m_A = 100;cout &lt;&lt; "p1.m_A = " &lt;&lt; p1.m_A &lt;&lt; endl;Person p2;p2.m_A = 200;cout &lt;&lt; "p1.m_A = " &lt;&lt; p1.m_A &lt;&lt; endl; //共享同一份数据cout &lt;&lt; "p2.m_A = " &lt;&lt; p2.m_A &lt;&lt; endl;//2、通过类名cout &lt;&lt; "m_A = " &lt;&lt; Person::m_A &lt;&lt; endl;//cout &lt;&lt; "m_B = " &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例2：</strong>静态成员函数</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person{public://静态成员函数特点：//1 程序共享一个函数//2 静态成员函数只能访问静态成员变量static void func(){cout &lt;&lt; "func调用" &lt;&lt; endl;m_A = 100;//m_B = 100; //错误，不可以访问非静态成员变量}static int m_A; //静态成员变量int m_B; // private://静态成员函数也是有访问权限的static void func2(){cout &lt;&lt; "func2调用" &lt;&lt; endl;}};int Person::m_A = 10;void test01(){//静态成员变量两种访问方式//1、通过对象Person p1;p1.func();//2、通过类名Person::func();//Person::func2(); //私有权限访问不到}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-C-对象模型和this指针"><a href="#4-3-C-对象模型和this指针" class="headerlink" title="4.3 C++对象模型和this指针"></a>4.3 C++对象模型和this指针</h3><h4 id="4-3-1-成员变量和成员函数分开存储"><a href="#4-3-1-成员变量和成员函数分开存储" class="headerlink" title="4.3.1 成员变量和成员函数分开存储"></a>4.3.1 成员变量和成员函数分开存储</h4><p>在C++中，类内的成员变量和成员函数分开存储</p><p>只有非静态成员变量才属于类的对象上</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {public:Person() {mA = 0;}//非静态成员变量占对象空间int mA;  /(4 bytes)//静态成员变量不占对象空间static int mB; //函数也不占对象空间，所有函数共享一个函数实例void func() {cout &lt;&lt; "mA:" &lt;&lt; this-&gt;mA &lt;&lt; endl;}//静态成员函数也不占对象空间static void sfunc() {}};int main() {cout &lt;&lt; sizeof(Person) &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-2-this指针概念"><a href="#4-3-2-this指针概念" class="headerlink" title="4.3.2 this指针概念"></a>4.3.2 this指针概念</h4><p>通过4.3.1我们知道在C++中成员变量和成员函数是分开存储的</p><p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p><p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p><p>c++通过提供特殊的对象指针，this指针，解决上述问题。<strong>this指针指向被调用的成员函数所属的对象</strong></p><p>this指针是隐含每一个非静态成员函数内的一种指针</p><p>this指针不需要定义，直接使用即可</p><p>this指针的用途：</p><ul><li>当形参和成员变量同名时，可用this指针来区分</li><li>在类的非静态成员函数中返回对象本身，可使用return *this</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person{public:Person(int age){//1、当形参和成员变量同名时，可用this指针来区分this-&gt;age = age;}Person&amp; PersonAddPerson(Person p){this-&gt;age += p.age;//返回对象本身return *this;}int age;};void test01(){Person p1(10);cout &lt;&lt; "p1.age = " &lt;&lt; p1.age &lt;&lt; endl;Person p2(10);p2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1);cout &lt;&lt; "p2.age = " &lt;&lt; p2.age &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-3-空指针访问成员函数"><a href="#4-3-3-空指针访问成员函数" class="headerlink" title="4.3.3 空指针访问成员函数"></a>4.3.3 空指针访问成员函数</h4><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p><p>如果用到this指针，需要加以判断保证代码的健壮性</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//空指针访问成员函数class Person {public:void ShowClassName() {cout &lt;&lt; "我是Person类!" &lt;&lt; endl;}void ShowPerson() {if (this == NULL) {return;}cout &lt;&lt; mAge &lt;&lt; endl;}public:int mAge;};void test01(){Person * p = NULL;p-&gt;ShowClassName(); //空指针，可以调用成员函数p-&gt;ShowPerson();  //但是如果成员函数中用到了this指针，就不可以了}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-4-const修饰成员函数"><a href="#4-3-4-const修饰成员函数" class="headerlink" title="4.3.4 const修饰成员函数"></a>4.3.4 const修饰成员函数</h4><p><strong>常函数：</strong></p><ul><li>成员函数后加const后我们称为这个函数为<strong>常函数</strong></li><li>常函数内不可以修改成员属性</li><li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li></ul><p><strong>常对象：</strong></p><ul><li>声明对象前加const称该对象为常对象</li><li>常对象只能调用常函数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {public:Person() {m_A = 0;m_B = 0;}//this指针的本质是一个指针常量，指针的指向不可修改//如果想让指针指向的值也不可以修改，需要声明常函数void ShowPerson() const {//const Type* const pointer;//this = NULL; //不能修改指针的指向 Person* const this;//this-&gt;mA = 100; //但是this指针指向的对象的数据是可以修改的//const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量this-&gt;m_B = 100;}void MyFunc() const {//mA = 10000;}public:int m_A;mutable int m_B; //可修改 可变的};//const修饰对象  常对象void test01() {const Person person; //常量对象  cout &lt;&lt; person.m_A &lt;&lt; endl;//person.mA = 100; //常对象不能修改成员变量的值,但是可以访问person.m_B = 100; //但是常对象可以修改mutable修饰成员变量//常对象访问成员函数person.MyFunc(); //常对象不能调用const的函数}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-友元"><a href="#4-4-友元" class="headerlink" title="4.4 友元"></a>4.4 友元</h3><p>生活中你的家有客厅(Public)，有你的卧室(Private)</p><p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p><p>但是呢，你也可以允许你的好闺蜜好基友进去。</p><p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p><p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p><p>友元的关键字为  ==friend==</p><p>友元的三种实现</p><ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul><h4 id="4-4-1-全局函数做友元"><a href="#4-4-1-全局函数做友元" class="headerlink" title="4.4.1 全局函数做友元"></a>4.4.1 全局函数做友元</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Building{//告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容friend void goodGay(Building * building);public:Building(){this-&gt;m_SittingRoom = "客厅";this-&gt;m_BedRoom = "卧室";}public:string m_SittingRoom; //客厅private:string m_BedRoom; //卧室};void goodGay(Building * building){cout &lt;&lt; "好基友正在访问： " &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;cout &lt;&lt; "好基友正在访问： " &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;}void test01(){Building b;goodGay(&amp;b);}int main(){test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-2-类做友元"><a href="#4-4-2-类做友元" class="headerlink" title="4.4.2 类做友元"></a>4.4.2 类做友元</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Building;class goodGay{public:goodGay();void visit();private:Building *building;};class Building{//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容friend class goodGay;public:Building();public:string m_SittingRoom; //客厅private:string m_BedRoom;//卧室};Building::Building(){this-&gt;m_SittingRoom = "客厅";this-&gt;m_BedRoom = "卧室";}goodGay::goodGay(){building = new Building;}void goodGay::visit(){cout &lt;&lt; "好基友正在访问" &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;cout &lt;&lt; "好基友正在访问" &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;}void test01(){goodGay gg;gg.visit();}int main(){test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-3-成员函数做友元"><a href="#4-4-3-成员函数做友元" class="headerlink" title="4.4.3 成员函数做友元"></a>4.4.3 成员函数做友元</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Building;class goodGay{public:goodGay();void visit(); //只让visit函数作为Building的好朋友，可以发访问Building中私有内容void visit2(); private:Building *building;};class Building{//告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容friend void goodGay::visit();public:Building();public:string m_SittingRoom; //客厅private:string m_BedRoom;//卧室};Building::Building(){this-&gt;m_SittingRoom = "客厅";this-&gt;m_BedRoom = "卧室";}goodGay::goodGay(){building = new Building;}void goodGay::visit(){cout &lt;&lt; "好基友正在访问" &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;cout &lt;&lt; "好基友正在访问" &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;}void goodGay::visit2(){cout &lt;&lt; "好基友正在访问" &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;//cout &lt;&lt; "好基友正在访问" &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;}void test01(){goodGay  gg;gg.visit();}int main(){    test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-运算符重载"><a href="#4-5-运算符重载" class="headerlink" title="4.5 运算符重载"></a>4.5 运算符重载</h3><p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p><h4 id="4-5-1-加号运算符重载"><a href="#4-5-1-加号运算符重载" class="headerlink" title="4.5.1 加号运算符重载"></a>4.5.1 加号运算符重载</h4><p>作用：实现两个自定义数据类型相加的运算</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {public:Person() {};Person(int a, int b){this-&gt;m_A = a;this-&gt;m_B = b;}//成员函数实现 + 号运算符重载Person operator+(const Person&amp; p) {Person temp;temp.m_A = this-&gt;m_A + p.m_A;temp.m_B = this-&gt;m_B + p.m_B;return temp;}public:int m_A;int m_B;};//全局函数实现 + 号运算符重载//Person operator+(const Person&amp; p1, const Person&amp; p2) {//Person temp(0, 0);//temp.m_A = p1.m_A + p2.m_A;//temp.m_B = p1.m_B + p2.m_B;//return temp;//}//运算符重载 可以发生函数重载 Person operator+(const Person&amp; p2, int val)  {Person temp;temp.m_A = p2.m_A + val;temp.m_B = p2.m_B + val;return temp;}void test() {Person p1(10, 10);Person p2(20, 20);//成员函数方式Person p3 = p2 + p1;  //相当于 p2.operaor+(p1)cout &lt;&lt; "mA:" &lt;&lt; p3.m_A &lt;&lt; " mB:" &lt;&lt; p3.m_B &lt;&lt; endl;Person p4 = p3 + 10; //相当于 operator+(p3,10)cout &lt;&lt; "mA:" &lt;&lt; p4.m_A &lt;&lt; " mB:" &lt;&lt; p4.m_B &lt;&lt; endl;}int main() {test();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结1：对于<strong>内置的数据类型</strong>的表达式的的运算符是不可能改变的(只能改变自定义的数据类型)</p></blockquote><blockquote><p>总结2：不要滥用运算符重载</p></blockquote><h4 id="4-5-2-左移运算符重载"><a href="#4-5-2-左移运算符重载" class="headerlink" title="4.5.2 左移运算符重载"></a>4.5.2 左移运算符重载</h4><p>作用：可以输出自定义数据类型</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person {friend ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p);public:Person(int a, int b){this-&gt;m_A = a;this-&gt;m_B = b;}//成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果//void operator&lt;&lt;(Person&amp; p){//}private:int m_A;int m_B;};//全局函数实现左移重载//ostream对象只能有一个ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p) {out &lt;&lt; "a:" &lt;&lt; p.m_A &lt;&lt; " b:" &lt;&lt; p.m_B;return out;}void test() {Person p1(10, 20);cout &lt;&lt; p1 &lt;&lt; "hello world" &lt;&lt; endl; //链式编程}int main() {test();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：重载左移运算符配合友元可以实现输出自定义数据类型</p></blockquote><h4 id="4-5-3-递增运算符重载"><a href="#4-5-3-递增运算符重载" class="headerlink" title="4.5.3 递增运算符重载"></a>4.5.3 递增运算符重载</h4><p>作用： 通过重载递增运算符，实现自己的整型数据</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class MyInteger {friend ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint);public:MyInteger() {m_Num = 0;}//前置++MyInteger&amp; operator++() {//先++m_Num++;//再返回return *this;}//后置++MyInteger operator++(int) {//先返回MyInteger temp = *this; //记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；m_Num++;return temp;}private:int m_Num;};ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint) {out &lt;&lt; myint.m_Num;return out;}//前置++ 先++ 再返回void test01() {MyInteger myInt;cout &lt;&lt; ++myInt &lt;&lt; endl;cout &lt;&lt; myInt &lt;&lt; endl;}//后置++ 先返回 再++void test02() {MyInteger myInt;cout &lt;&lt; myInt++ &lt;&lt; endl;cout &lt;&lt; myInt &lt;&lt; endl;}int main() {test01();//test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结： 前置递增返回引用，后置递增返回值</p></blockquote><h4 id="4-5-4-赋值运算符重载"><a href="#4-5-4-赋值运算符重载" class="headerlink" title="4.5.4 赋值运算符重载"></a>4.5.4 赋值运算符重载</h4><p>c++编译器至少给一个类添加4个函数</p><ol><li>默认构造函数(无参，函数体为空)</li><li>默认析构函数(无参，函数体为空)</li><li>默认拷贝构造函数，对属性进行值拷贝</li><li>赋值运算符 operator=, 对属性进行值拷贝</li></ol><p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person{public:Person(int age){//将年龄数据开辟到堆区m_Age = new int(age);}//重载赋值运算符 Person&amp; operator=(Person &amp;p){if (m_Age != NULL){delete m_Age;m_Age = NULL;}//编译器提供的代码是浅拷贝//m_Age = p.m_Age;//提供深拷贝 解决浅拷贝的问题m_Age = new int(*p.m_Age);//返回自身return *this;}~Person(){if (m_Age != NULL){delete m_Age;m_Age = NULL;}}//年龄的指针int *m_Age;};void test01(){Person p1(18);Person p2(20);Person p3(30);p3 = p2 = p1; //赋值操作cout &lt;&lt; "p1的年龄为：" &lt;&lt; *p1.m_Age &lt;&lt; endl;cout &lt;&lt; "p2的年龄为：" &lt;&lt; *p2.m_Age &lt;&lt; endl;cout &lt;&lt; "p3的年龄为：" &lt;&lt; *p3.m_Age &lt;&lt; endl;}int main() {test01();//int a = 10;//int b = 20;//int c = 30;//c = b = a;//cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;//cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;//cout &lt;&lt; "c = " &lt;&lt; c &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-5-关系运算符重载"><a href="#4-5-5-关系运算符重载" class="headerlink" title="4.5.5 关系运算符重载"></a>4.5.5 关系运算符重载</h4><p><strong>作用：</strong>重载关系运算符，可以让两个自定义类型对象进行对比操作</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person{public:Person(string name, int age){this-&gt;m_Name = name;this-&gt;m_Age = age;};bool operator==(Person &amp; p){if (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age){return true;}else{return false;}}bool operator!=(Person &amp; p){if (this-&gt;m_Name == p.m_Name &amp;&amp; this-&gt;m_Age == p.m_Age){return false;}else{return true;}}string m_Name;int m_Age;};void test01(){//int a = 0;//int b = 0;Person a("孙悟空", 18);Person b("孙悟空", 18);if (a == b){cout &lt;&lt; "a和b相等" &lt;&lt; endl;}else{cout &lt;&lt; "a和b不相等" &lt;&lt; endl;}if (a != b){cout &lt;&lt; "a和b不相等" &lt;&lt; endl;}else{cout &lt;&lt; "a和b相等" &lt;&lt; endl;}}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-6-函数调用运算符重载"><a href="#4-5-6-函数调用运算符重载" class="headerlink" title="4.5.6 函数调用运算符重载"></a>4.5.6 函数调用运算符重载</h4><ul><li>函数调用运算符 ()  也可以重载</li><li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li><li>仿函数没有固定写法，非常灵活</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class MyPrint{public:void operator()(string text){cout &lt;&lt; text &lt;&lt; endl;}};void test01(){//重载的（）操作符 也称为仿函数MyPrint myFunc;myFunc("hello world");}class MyAdd{public:int operator()(int v1, int v2){return v1 + v2;}};void test02(){MyAdd add;int ret = add(10, 10);cout &lt;&lt; "ret = " &lt;&lt; ret &lt;&lt; endl;//匿名对象调用  cout &lt;&lt; "MyAdd()(100,100) = " &lt;&lt; MyAdd()(100, 100) &lt;&lt; endl;}int main() {test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-继承"><a href="#4-6-继承" class="headerlink" title="4.6  继承"></a>4.6  继承</h3><p><strong>继承是面向对象三大特性之一</strong></p><p>有些类与类之间存在特殊的关系，例如下图中：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/1544861202252.png" alt="1544861202252"></p><p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p><p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p><h4 id="4-6-1-继承的基本语法"><a href="#4-6-1-继承的基本语法" class="headerlink" title="4.6.1 继承的基本语法"></a>4.6.1 继承的基本语法</h4><p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p><p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p><p><strong>普通实现：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//Java页面class Java {public:void header(){cout &lt;&lt; "首页、公开课、登录、注册...（公共头部）" &lt;&lt; endl;}void footer(){cout &lt;&lt; "帮助中心、交流合作、站内地图...(公共底部)" &lt;&lt; endl;}void left(){cout &lt;&lt; "Java,Python,C++...(公共分类列表)" &lt;&lt; endl;}void content(){cout &lt;&lt; "JAVA学科视频" &lt;&lt; endl;}};//Python页面class Python{public:void header(){cout &lt;&lt; "首页、公开课、登录、注册...（公共头部）" &lt;&lt; endl;}void footer(){cout &lt;&lt; "帮助中心、交流合作、站内地图...(公共底部)" &lt;&lt; endl;}void left(){cout &lt;&lt; "Java,Python,C++...(公共分类列表)" &lt;&lt; endl;}void content(){cout &lt;&lt; "Python学科视频" &lt;&lt; endl;}};//C++页面class CPP {public:void header(){cout &lt;&lt; "首页、公开课、登录、注册...（公共头部）" &lt;&lt; endl;}void footer(){cout &lt;&lt; "帮助中心、交流合作、站内地图...(公共底部)" &lt;&lt; endl;}void left(){cout &lt;&lt; "Java,Python,C++...(公共分类列表)" &lt;&lt; endl;}void content(){cout &lt;&lt; "C++学科视频" &lt;&lt; endl;}};void test01(){//Java页面cout &lt;&lt; "Java下载视频页面如下： " &lt;&lt; endl;Java ja;ja.header();ja.footer();ja.left();ja.content();cout &lt;&lt; "--------------------" &lt;&lt; endl;//Python页面cout &lt;&lt; "Python下载视频页面如下： " &lt;&lt; endl;Python py;py.header();py.footer();py.left();py.content();cout &lt;&lt; "--------------------" &lt;&lt; endl;//C++页面cout &lt;&lt; "C++下载视频页面如下： " &lt;&lt; endl;CPP cp;cp.header();cp.footer();cp.left();cp.content();}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>继承实现：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//公共页面class BasePage{public:void header(){cout &lt;&lt; "首页、公开课、登录、注册...（公共头部）" &lt;&lt; endl;}void footer(){cout &lt;&lt; "帮助中心、交流合作、站内地图...(公共底部)" &lt;&lt; endl;}void left(){cout &lt;&lt; "Java,Python,C++...(公共分类列表)" &lt;&lt; endl;}};//Java页面class Java : public BasePage{public:void content(){cout &lt;&lt; "JAVA学科视频" &lt;&lt; endl;}};//Python页面class Python : public BasePage{public:void content(){cout &lt;&lt; "Python学科视频" &lt;&lt; endl;}};//C++页面class CPP : public BasePage{public:void content(){cout &lt;&lt; "C++学科视频" &lt;&lt; endl;}};void test01(){//Java页面cout &lt;&lt; "Java下载视频页面如下： " &lt;&lt; endl;Java ja;ja.header();ja.footer();ja.left();ja.content();cout &lt;&lt; "--------------------" &lt;&lt; endl;//Python页面cout &lt;&lt; "Python下载视频页面如下： " &lt;&lt; endl;Python py;py.header();py.footer();py.left();py.content();cout &lt;&lt; "--------------------" &lt;&lt; endl;//C++页面cout &lt;&lt; "C++下载视频页面如下： " &lt;&lt; endl;CPP cp;cp.header();cp.footer();cp.left();cp.content();}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><p>继承的好处：==可以减少重复的代码==</p><p>class A : public B; </p><p>A 类称为子类 或 派生类</p><p>B 类称为父类 或 基类</p><p><strong>派生类中的成员，包含两大部分</strong>：</p><p>一类是从基类继承过来的，一类是自己增加的成员。</p><p>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</p><h4 id="4-6-2-继承方式"><a href="#4-6-2-继承方式" class="headerlink" title="4.6.2 继承方式"></a>4.6.2 继承方式</h4><p>继承的语法：<code>class 子类 : 继承方式  父类</code></p><p><strong>继承方式一共有三种：</strong></p><ul><li>公共继承</li><li>保护继承</li><li>私有继承</li></ul><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image002.png" alt="img"></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base1{public: int m_A;protected:int m_B;private:int m_C;};//公共继承class Son1 :public Base1{public:void func(){m_A; //可访问 public权限m_B; //可访问 protected权限//m_C; //不可访问}};void myClass(){Son1 s1;s1.m_A; //其他类只能访问到公共权限}//保护继承class Base2{public:int m_A;protected:int m_B;private:int m_C;};class Son2:protected Base2{public:void func(){m_A; //可访问 protected权限m_B; //可访问 protected权限//m_C; //不可访问}};void myClass2(){Son2 s;//s.m_A; //不可访问}//私有继承class Base3{public:int m_A;protected:int m_B;private:int m_C;};class Son3:private Base3{public:void func(){m_A; //可访问 private权限m_B; //可访问 private权限//m_C; //不可访问}};class GrandSon3 :public Son3{public:void func(){//Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到//m_A;//m_B;//m_C;}};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-6-3-继承中的对象模型"><a href="#4-6-3-继承中的对象模型" class="headerlink" title="4.6.3 继承中的对象模型"></a>4.6.3 继承中的对象模型</h4><p><strong>问题：</strong>从父类继承过来的成员，哪些属于子类对象中？</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base{public:int m_A;protected:int m_B;private:int m_C; //私有成员只是被隐藏了，但是还是会继承下去};//公共继承class Son :public Base{public:int m_D;};void test01(){cout &lt;&lt; "sizeof Son = " &lt;&lt; sizeof(Son) &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用工具查看：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/1545881904150.png" alt="1545881904150"></p><p>打开工具窗口后，定位到当前CPP文件的盘符</p><p>然后输入： cl /d1 reportSingleClassLayout查看的类名   所属文件名</p><p>效果如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/1545882158050.png" alt="1545882158050"></p><blockquote><p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p></blockquote><h4 id="4-6-4-继承中构造和析构顺序"><a href="#4-6-4-继承中构造和析构顺序" class="headerlink" title="4.6.4 继承中构造和析构顺序"></a>4.6.4 继承中构造和析构顺序</h4><p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p><p>问题：父类和子类的构造和析构顺序是谁先谁后？</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base {public:Base(){cout &lt;&lt; "Base构造函数!" &lt;&lt; endl;}~Base(){cout &lt;&lt; "Base析构函数!" &lt;&lt; endl;}};class Son : public Base{public:Son(){cout &lt;&lt; "Son构造函数!" &lt;&lt; endl;}~Son(){cout &lt;&lt; "Son析构函数!" &lt;&lt; endl;}};void test01(){//继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反Son s;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</p></blockquote><h4 id="4-6-5-继承同名成员处理方式"><a href="#4-6-5-继承同名成员处理方式" class="headerlink" title="4.6.5 继承同名成员处理方式"></a>4.6.5 继承同名成员处理方式</h4><p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p><ul><li>访问子类同名成员   直接访问即可</li><li>访问父类同名成员   需要加作用域</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base {public:Base(){m_A = 100;}void func(){cout &lt;&lt; "Base - func()调用" &lt;&lt; endl;}void func(int a){cout &lt;&lt; "Base - func(int a)调用" &lt;&lt; endl;}public:int m_A;};class Son : public Base {public:Son(){m_A = 200;}//当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数//如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域void func(){cout &lt;&lt; "Son - func()调用" &lt;&lt; endl;}public:int m_A;};void test01(){Son s;cout &lt;&lt; "Son下的m_A = " &lt;&lt; s.m_A &lt;&lt; endl;cout &lt;&lt; "Base下的m_A = " &lt;&lt; s.Base::m_A &lt;&lt; endl;s.func();s.Base::func();s.Base::func(10);}int main() {test01();system("pause");return EXIT_SUCCESS;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ol><li>子类对象可以直接访问到子类中同名成员</li><li>子类对象加作用域可以访问到父类同名成员</li><li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</li></ol><h4 id="4-6-6-继承同名静态成员处理方式"><a href="#4-6-6-继承同名静态成员处理方式" class="headerlink" title="4.6.6 继承同名静态成员处理方式"></a>4.6.6 继承同名静态成员处理方式</h4><p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p><p>静态成员和非静态成员出现同名，处理方式一致</p><ul><li>访问子类同名成员   直接访问即可</li><li>访问父类同名成员   需要加作用域</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base {public:static void func(){cout &lt;&lt; "Base - static void func()" &lt;&lt; endl;}static void func(int a){cout &lt;&lt; "Base - static void func(int a)" &lt;&lt; endl;}static int m_A;};int Base::m_A = 100;class Son : public Base {public:static void func(){cout &lt;&lt; "Son - static void func()" &lt;&lt; endl;}static int m_A;};int Son::m_A = 200;//同名成员属性void test01(){//通过对象访问cout &lt;&lt; "通过对象访问： " &lt;&lt; endl;Son s;cout &lt;&lt; "Son  下 m_A = " &lt;&lt; s.m_A &lt;&lt; endl;cout &lt;&lt; "Base 下 m_A = " &lt;&lt; s.Base::m_A &lt;&lt; endl;//通过类名访问cout &lt;&lt; "通过类名访问： " &lt;&lt; endl;cout &lt;&lt; "Son  下 m_A = " &lt;&lt; Son::m_A &lt;&lt; endl;cout &lt;&lt; "Base 下 m_A = " &lt;&lt; Son::Base::m_A &lt;&lt; endl;}//同名成员函数void test02(){//通过对象访问cout &lt;&lt; "通过对象访问： " &lt;&lt; endl;Son s;s.func();s.Base::func();cout &lt;&lt; "通过类名访问： " &lt;&lt; endl;Son::func();Son::Base::func();//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问Son::Base::func(100);}int main() {//test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p></blockquote><h4 id="4-6-7-多继承语法"><a href="#4-6-7-多继承语法" class="headerlink" title="4.6.7 多继承语法"></a>4.6.7 多继承语法</h4><p>C++允许<strong>一个类继承多个类</strong></p><p>语法：<code> class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p><p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p><p><strong>C++实际开发中不建议用多继承</strong></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base1 {public:Base1(){m_A = 100;}public:int m_A;};class Base2 {public:Base2(){m_A = 200;  //开始是m_B 不会出问题，但是改为mA就会出现不明确}public:int m_A;};//语法：class 子类：继承方式 父类1 ，继承方式 父类2 class Son : public Base2, public Base1 {public:Son(){m_C = 300;m_D = 400;}public:int m_C;int m_D;};//多继承容易产生成员同名的情况//通过使用类名作用域可以区分调用哪一个基类的成员void test01(){Son s;cout &lt;&lt; "sizeof Son = " &lt;&lt; sizeof(s) &lt;&lt; endl;cout &lt;&lt; s.Base1::m_A &lt;&lt; endl;cout &lt;&lt; s.Base2::m_A &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p></blockquote><h4 id="4-6-8-菱形继承"><a href="#4-6-8-菱形继承" class="headerlink" title="4.6.8 菱形继承"></a>4.6.8 菱形继承</h4><p><strong>菱形继承概念：</strong></p><p>​两个派生类继承同一个基类</p><p>​又有某个类同时继承者两个派生类</p><p>​这种继承被称为菱形继承，或者钻石继承</p><p><strong>典型的菱形继承案例：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/clip_image002.jpg" alt="IMG_256"></p><p><strong>菱形继承问题：</strong></p><ol><li><pre><code>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。</code></pre></li><li><pre><code>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。</code></pre></li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Animal{public:int m_Age;};//继承前加virtual关键字后，变为虚继承//此时公共的父类Animal称为虚基类class Sheep : virtual public Animal {};class Tuo   : virtual public Animal {};class SheepTuo : public Sheep, public Tuo {};void test01(){SheepTuo st;st.Sheep::m_Age = 100;st.Tuo::m_Age = 200;cout &lt;&lt; "st.Sheep::m_Age = " &lt;&lt; st.Sheep::m_Age &lt;&lt; endl;cout &lt;&lt; "st.Tuo::m_Age = " &lt;&lt;  st.Tuo::m_Age &lt;&lt; endl;cout &lt;&lt; "st.m_Age = " &lt;&lt; st.m_Age &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</li><li>利用虚继承可以解决菱形继承问题</li></ul><h3 id="4-7-多态"><a href="#4-7-多态" class="headerlink" title="4.7  多态"></a>4.7  多态</h3><h4 id="4-7-1-多态的基本概念"><a href="#4-7-1-多态的基本概念" class="headerlink" title="4.7.1 多态的基本概念"></a>4.7.1 多态的基本概念</h4><p><strong>多态是C++面向对象三大特性之一</strong></p><p>多态分为两类</p><ul><li>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名</li><li>动态多态: 派生类和虚函数实现运行时多态</li></ul><p>静态多态和动态多态区别：</p><ul><li>静态多态的函数地址早绑定  -  编译阶段确定函数地址</li><li>动态多态的函数地址晚绑定  -  运行阶段确定函数地址</li></ul><p>下面通过案例进行讲解多态</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Animal{public://Speak函数就是虚函数//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。virtual void speak(){cout &lt;&lt; "动物在说话" &lt;&lt; endl;}};class Cat :public Animal{public:void speak(){cout &lt;&lt; "小猫在说话" &lt;&lt; endl;}};class Dog :public Animal{public:void speak(){cout &lt;&lt; "小狗在说话" &lt;&lt; endl;}};//我们希望传入什么对象，那么就调用什么对象的函数//如果函数地址在编译阶段就能确定，那么静态联编//如果函数地址在运行阶段才能确定，就是动态联编void DoSpeak(Animal &amp; animal){animal.speak();}////多态满足条件： //1、有继承关系//2、子类重写父类中的虚函数//多态使用：//父类指针或引用指向子类对象void test01(){Cat cat;DoSpeak(cat);Dog dog;DoSpeak(dog);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>多态满足条件</p><ul><li>有继承关系</li><li>子类重写父类中的虚函数</li></ul><p>多态使用条件</p><ul><li>父类指针或引用指向子类对象</li></ul><p>重写：函数返回值类型  函数名 参数列表 完全一致称为重写</p><h4 id="4-7-2-多态案例一-计算器类"><a href="#4-7-2-多态案例一-计算器类" class="headerlink" title="4.7.2 多态案例一-计算器类"></a>4.7.2 多态案例一-计算器类</h4><p>案例描述：</p><p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p><p>多态的优点：</p><ul><li>代码组织结构清晰</li><li>可读性强</li><li>利于前期和后期的扩展以及维护</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//普通实现class Calculator {public:int getResult(string oper){if (oper == "+") {return m_Num1 + m_Num2;}else if (oper == "-") {return m_Num1 - m_Num2;}else if (oper == "*") {return m_Num1 * m_Num2;}//如果要提供新的运算，需要修改源码}public:int m_Num1;int m_Num2;};void test01(){//普通实现测试Calculator c;c.m_Num1 = 10;c.m_Num2 = 10;cout &lt;&lt; c.m_Num1 &lt;&lt; " + " &lt;&lt; c.m_Num2 &lt;&lt; " = " &lt;&lt; c.getResult("+") &lt;&lt; endl;cout &lt;&lt; c.m_Num1 &lt;&lt; " - " &lt;&lt; c.m_Num2 &lt;&lt; " = " &lt;&lt; c.getResult("-") &lt;&lt; endl;cout &lt;&lt; c.m_Num1 &lt;&lt; " * " &lt;&lt; c.m_Num2 &lt;&lt; " = " &lt;&lt; c.getResult("*") &lt;&lt; endl;}//多态实现//抽象计算器类//多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护class AbstractCalculator{public :virtual int getResult(){return 0;}int m_Num1;int m_Num2;};//加法计算器class AddCalculator :public AbstractCalculator{public:int getResult(){return m_Num1 + m_Num2;}};//减法计算器class SubCalculator :public AbstractCalculator{public:int getResult(){return m_Num1 - m_Num2;}};//乘法计算器class MulCalculator :public AbstractCalculator{public:int getResult(){return m_Num1 * m_Num2;}};void test02(){//创建加法计算器AbstractCalculator *abc = new AddCalculator;abc-&gt;m_Num1 = 10;abc-&gt;m_Num2 = 10;cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; " + " &lt;&lt; abc-&gt;m_Num2 &lt;&lt; " = " &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;delete abc;  //用完了记得销毁//创建减法计算器abc = new SubCalculator;abc-&gt;m_Num1 = 10;abc-&gt;m_Num2 = 10;cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; " - " &lt;&lt; abc-&gt;m_Num2 &lt;&lt; " = " &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;delete abc;  //创建乘法计算器abc = new MulCalculator;abc-&gt;m_Num1 = 10;abc-&gt;m_Num2 = 10;cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; " * " &lt;&lt; abc-&gt;m_Num2 &lt;&lt; " = " &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;delete abc;}int main() {//test01();test02();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：C++开发提倡利用多态设计程序架构，因为多态优点很多</p></blockquote><h4 id="4-7-3-纯虚函数和抽象类"><a href="#4-7-3-纯虚函数和抽象类" class="headerlink" title="4.7.3 纯虚函数和抽象类"></a>4.7.3 纯虚函数和抽象类</h4><p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p><p>因此可以将虚函数改为<strong>纯虚函数</strong></p><p>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p><p>当类中有了纯虚函数，这个类也称为==抽象类==</p><p><strong>抽象类特点</strong>：</p><ul><li>无法实例化对象</li><li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base{public://纯虚函数//类中只要有一个纯虚函数就称为抽象类//抽象类无法实例化对象//子类必须重写父类中的纯虚函数，否则也属于抽象类virtual void func() = 0;};class Son :public Base{public:virtual void func() {cout &lt;&lt; "func调用" &lt;&lt; endl;};};void test01(){Base * base = NULL;//base = new Base; // 错误，抽象类无法实例化对象base = new Son;base-&gt;func();delete base;//记得销毁}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-7-4-多态案例二-制作饮品"><a href="#4-7-4-多态案例二-制作饮品" class="headerlink" title="4.7.4 多态案例二-制作饮品"></a>4.7.4 多态案例二-制作饮品</h4><p><strong>案例描述：</strong></p><p>制作饮品的大致流程为：煮水 -  冲泡 - 倒入杯中 - 加入辅料</p><p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p><p><img src="https://cdn.jsdelivr.net/gh/roranrui/img_bed/img/1545985945198.png" alt="1545985945198"></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//抽象制作饮品class AbstractDrinking {public://烧水virtual void Boil() = 0;//冲泡virtual void Brew() = 0;//倒入杯中virtual void PourInCup() = 0;//加入辅料virtual void PutSomething() = 0;//规定流程void MakeDrink() {Boil();Brew();PourInCup();PutSomething();}};//制作咖啡class Coffee : public AbstractDrinking {public://烧水virtual void Boil() {cout &lt;&lt; "煮农夫山泉!" &lt;&lt; endl;}//冲泡virtual void Brew() {cout &lt;&lt; "冲泡咖啡!" &lt;&lt; endl;}//倒入杯中virtual void PourInCup() {cout &lt;&lt; "将咖啡倒入杯中!" &lt;&lt; endl;}//加入辅料virtual void PutSomething() {cout &lt;&lt; "加入牛奶!" &lt;&lt; endl;}};//制作茶水class Tea : public AbstractDrinking {public://烧水virtual void Boil() {cout &lt;&lt; "煮自来水!" &lt;&lt; endl;}//冲泡virtual void Brew() {cout &lt;&lt; "冲泡茶叶!" &lt;&lt; endl;}//倒入杯中virtual void PourInCup() {cout &lt;&lt; "将茶水倒入杯中!" &lt;&lt; endl;}//加入辅料virtual void PutSomething() {cout &lt;&lt; "加入枸杞!" &lt;&lt; endl;}};//业务函数void DoWork(AbstractDrinking* drink) {drink-&gt;MakeDrink();delete drink;}void test01() {DoWork(new Coffee);cout &lt;&lt; "--------------" &lt;&lt; endl;DoWork(new Tea);}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-7-5-虚析构和纯虚析构"><a href="#4-7-5-虚析构和纯虚析构" class="headerlink" title="4.7.5 虚析构和纯虚析构"></a>4.7.5 虚析构和纯虚析构</h4><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p><p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p><p>虚析构和纯虚析构共性：</p><ul><li>可以解决父类指针释放子类对象</li><li>都需要有具体的函数实现</li></ul><p>虚析构和纯虚析构区别：</p><ul><li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li></ul><p>虚析构语法：</p><p><code>virtual ~类名(){}</code></p><p>纯虚析构语法：</p><p><code> virtual ~类名() = 0;</code></p><p><code>类名::~类名(){}</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Animal {public:Animal(){cout &lt;&lt; "Animal 构造函数调用！" &lt;&lt; endl;}virtual void Speak() = 0;//析构函数加上virtual关键字，变成虚析构函数//virtual ~Animal()//{//cout &lt;&lt; "Animal虚析构函数调用！" &lt;&lt; endl;//}virtual ~Animal() = 0;};Animal::~Animal(){cout &lt;&lt; "Animal 纯虚析构函数调用！" &lt;&lt; endl;}//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。class Cat : public Animal {public:Cat(string name){cout &lt;&lt; "Cat构造函数调用！" &lt;&lt; endl;m_Name = new string(name);}virtual void Speak(){cout &lt;&lt; *m_Name &lt;&lt;  "小猫在说话!" &lt;&lt; endl;}~Cat(){cout &lt;&lt; "Cat析构函数调用!" &lt;&lt; endl;if (this-&gt;m_Name != NULL) {delete m_Name;m_Name = NULL;}}public:string *m_Name;};void test01(){Animal *animal = new Cat("Tom");animal-&gt;Speak();//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏//怎么解决？给基类增加一个虚析构函数//虚析构函数就是用来解决通过父类指针释放子类对象delete animal;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>​1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</p><p>​2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</p><p>​3. 拥有纯虚析构函数的类也属于抽象类</p><h4 id="4-7-6-多态案例三-电脑组装"><a href="#4-7-6-多态案例三-电脑组装" class="headerlink" title="4.7.6 多态案例三-电脑组装"></a>4.7.6 多态案例三-电脑组装</h4><p><strong>案例描述：</strong></p><p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p><p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商</p><p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p><p>测试时组装三台不同的电脑进行工作</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;//抽象CPU类class CPU{public://抽象的计算函数virtual void calculate() = 0;};//抽象显卡类class VideoCard{public://抽象的显示函数virtual void display() = 0;};//抽象内存条类class Memory{public://抽象的存储函数virtual void storage() = 0;};//电脑类class Computer{public:Computer(CPU * cpu, VideoCard * vc, Memory * mem){m_cpu = cpu;m_vc = vc;m_mem = mem;}//提供工作的函数void work(){//让零件工作起来，调用接口m_cpu-&gt;calculate();m_vc-&gt;display();m_mem-&gt;storage();}//提供析构函数 释放3个电脑零件~Computer(){//释放CPU零件if (m_cpu != NULL){delete m_cpu;m_cpu = NULL;}//释放显卡零件if (m_vc != NULL){delete m_vc;m_vc = NULL;}//释放内存条零件if (m_mem != NULL){delete m_mem;m_mem = NULL;}}private:CPU * m_cpu; //CPU的零件指针VideoCard * m_vc; //显卡零件指针Memory * m_mem; //内存条零件指针};//具体厂商//Intel厂商class IntelCPU :public CPU{public:virtual void calculate(){cout &lt;&lt; "Intel的CPU开始计算了！" &lt;&lt; endl;}};class IntelVideoCard :public VideoCard{public:virtual void display(){cout &lt;&lt; "Intel的显卡开始显示了！" &lt;&lt; endl;}};class IntelMemory :public Memory{public:virtual void storage(){cout &lt;&lt; "Intel的内存条开始存储了！" &lt;&lt; endl;}};//Lenovo厂商class LenovoCPU :public CPU{public:virtual void calculate(){cout &lt;&lt; "Lenovo的CPU开始计算了！" &lt;&lt; endl;}};class LenovoVideoCard :public VideoCard{public:virtual void display(){cout &lt;&lt; "Lenovo的显卡开始显示了！" &lt;&lt; endl;}};class LenovoMemory :public Memory{public:virtual void storage(){cout &lt;&lt; "Lenovo的内存条开始存储了！" &lt;&lt; endl;}};void test01(){//第一台电脑零件CPU * intelCpu = new IntelCPU;VideoCard * intelCard = new IntelVideoCard;Memory * intelMem = new IntelMemory;cout &lt;&lt; "第一台电脑开始工作：" &lt;&lt; endl;//创建第一台电脑Computer * computer1 = new Computer(intelCpu, intelCard, intelMem);computer1-&gt;work();delete computer1;cout &lt;&lt; "-----------------------" &lt;&lt; endl;cout &lt;&lt; "第二台电脑开始工作：" &lt;&lt; endl;//第二台电脑组装Computer * computer2 = new Computer(new LenovoCPU, new LenovoVideoCard, new LenovoMemory);;computer2-&gt;work();delete computer2;cout &lt;&lt; "-----------------------" &lt;&lt; endl;cout &lt;&lt; "第三台电脑开始工作：" &lt;&lt; endl;//第三台电脑组装Computer * computer3 = new Computer(new LenovoCPU, new IntelVideoCard, new LenovoMemory);;computer3-&gt;work();delete computer3;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-文件操作"><a href="#5-文件操作" class="headerlink" title="5 文件操作"></a>5 文件操作</h2><p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p><p>通过<strong>文件可以将数据持久化</strong></p><p>C++中对文件操作需要包含头文件 ==&lt; fstream &gt;==</p><p>文件类型分为两种：</p><ol><li><strong>文本文件</strong>     -  文件以文本的<strong>ASCII码</strong>形式存储在计算机中</li><li><strong>二进制文件</strong> -  文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li></ol><p>操作文件的三大类:</p><ol><li>ofstream：写操作</li><li>ifstream： 读操作</li><li>fstream ： 读写操作</li></ol><h3 id="5-1文本文件"><a href="#5-1文本文件" class="headerlink" title="5.1文本文件"></a>5.1文本文件</h3><h4 id="5-1-1写文件"><a href="#5-1-1写文件" class="headerlink" title="5.1.1写文件"></a>5.1.1写文件</h4><p>   写文件步骤如下：</p><ol><li><p>包含头文件   </p><p>#include &lt;fstream&gt;</p></li><li><p>创建流对象  </p><p>ofstream ofs;</p></li><li><p>打开文件</p><p>ofs.open(“文件路径”,打开方式);</p></li><li><p>写数据</p><p>ofs &lt;&lt; “写入的数据”;</p></li><li><p>关闭文件</p><p>ofs.close();</p></li></ol><p>文件打开方式：</p><table><thead><tr><th>打开方式</th><th>解释</th></tr></thead><tbody><tr><td>ios::in</td><td>为读文件而打开文件</td></tr><tr><td>ios::out</td><td>为写文件而打开文件</td></tr><tr><td>ios::ate</td><td>初始位置：文件尾</td></tr><tr><td>ios::app</td><td>追加方式写文件</td></tr><tr><td>ios::trunc</td><td>如果文件存在先删除，再创建</td></tr><tr><td>ios::binary</td><td>二进制方式</td></tr></tbody></table><p><strong>注意：</strong> 文件打开方式可以配合使用，利用<code>|</code>操作符</p><p><strong>例如：</strong>用二进制方式写文件 <code>ios::binary |  ios:: out</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;void test01(){ofstream ofs;ofs.open("test.txt", ios::out);ofs &lt;&lt; "姓名：张三" &lt;&lt; endl;ofs &lt;&lt; "性别：男" &lt;&lt; endl;ofs &lt;&lt; "年龄：18" &lt;&lt; endl;ofs.close();}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>文件操作必须包含头文件 fstream</li><li>读文件可以利用 ofstream  ，或者fstream类</li><li>打开文件时候需要指定操作文件的路径，以及打开方式</li><li>利用&lt;&lt;可以向文件中写数据</li><li>操作完毕，要关闭文件</li></ul><h4 id="5-1-2读文件"><a href="#5-1-2读文件" class="headerlink" title="5.1.2读文件"></a>5.1.2读文件</h4><p>读文件与写文件步骤相似，但是读取方式相对于比较多</p><p>读文件步骤如下：</p><ol><li><p>包含头文件   </p><p>#include &lt;fstream&gt;</p></li><li><p>创建流对象  </p><p>ifstream ifs;</p></li><li><p>打开文件并判断文件是否打开成功</p><p>ifs.open(“文件路径”,打开方式);</p></li><li><p>读数据</p><p>四种方式读取</p></li><li><p>关闭文件</p><p>ifs.close();</p></li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;#include &lt;string&gt;void test01(){ifstream ifs;ifs.open("test.txt", ios::in);if (!ifs.is_open()){cout &lt;&lt; "文件打开失败" &lt;&lt; endl;return;}//第一种方式//char buf[1024] = { 0 };//while (ifs &gt;&gt; buf)//{//cout &lt;&lt; buf &lt;&lt; endl;//}//第二种//char buf[1024] = { 0 };//while (ifs.getline(buf,sizeof(buf)))//{//cout &lt;&lt; buf &lt;&lt; endl;//}//第三种//string buf;//while (getline(ifs, buf))//{//cout &lt;&lt; buf &lt;&lt; endl;//}char c;while ((c = ifs.get()) != EOF){cout &lt;&lt; c;}ifs.close();}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>读文件可以利用 ifstream  ，或者fstream类</li><li>利用is_open函数可以判断文件是否打开成功</li><li>close 关闭文件</li></ul><h3 id="5-2-二进制文件"><a href="#5-2-二进制文件" class="headerlink" title="5.2 二进制文件"></a>5.2 二进制文件</h3><p>以二进制的方式对文件进行读写操作</p><p>打开方式要指定为 ==ios::binary==</p><h4 id="5-2-1-写文件"><a href="#5-2-1-写文件" class="headerlink" title="5.2.1 写文件"></a>5.2.1 写文件</h4><p>二进制方式写文件主要利用流对象调用成员函数write</p><p>函数原型 ：<code>ostream&amp; write(const char * buffer,int len);</code></p><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;#include &lt;string&gt;class Person{public:char m_Name[64];int m_Age;};//二进制文件  写文件void test01(){//1、包含头文件//2、创建输出流对象ofstream ofs("person.txt", ios::out | ios::binary);//3、打开文件//ofs.open("person.txt", ios::out | ios::binary);Person p = {"张三"  , 18};//4、写文件ofs.write((const char *)&amp;p, sizeof(p));//5、关闭文件ofs.close();}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>文件输出流对象 可以通过write函数，以二进制方式写数据</li></ul><h4 id="5-2-2-读文件"><a href="#5-2-2-读文件" class="headerlink" title="5.2.2 读文件"></a>5.2.2 读文件</h4><p>二进制方式读文件主要利用流对象调用成员函数read</p><p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;#include &lt;string&gt;class Person{public:char m_Name[64];int m_Age;};void test01(){ifstream ifs("person.txt", ios::in | ios::binary);if (!ifs.is_open()){cout &lt;&lt; "文件打开失败" &lt;&lt; endl;}Person p;ifs.read((char *)&amp;p, sizeof(p));cout &lt;&lt; "姓名： " &lt;&lt; p.m_Name &lt;&lt; " 年龄： " &lt;&lt; p.m_Age &lt;&lt; endl;}int main() {test01();system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>文件输入流对象 可以通过read函数，以二进制方式读数据</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-核心编程&quot;&gt;&lt;a href=&quot;#C-核心编程&quot; class=&quot;headerlink&quot; title=&quot;C++核心编程&quot;&gt;&lt;/a&gt;C++核心编程&lt;/h1&gt;&lt;p&gt;本阶段主要针对C++==面向对象==编程技术做详细讲解，探讨C++中的核心和精髓。&lt;/p&gt;
&lt;h2 id</summary>
      
    
    
    
    <category term="语言学习" scheme="https://roranrui.github.io/categories/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="C++" scheme="https://roranrui.github.io/tags/C/"/>
    
    <category term="Programming" scheme="https://roranrui.github.io/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>CMake入门</title>
    <link href="https://roranrui.github.io/2022/04/20/cmake-ru-men/"/>
    <id>https://roranrui.github.io/2022/04/20/cmake-ru-men/</id>
    <published>2022-04-20T14:21:10.000Z</published>
    <updated>2022-04-20T14:21:49.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CMake入门"><a href="#CMake入门" class="headerlink" title="CMake入门"></a>CMake入门</h1><h2 id="1-简单配置CMakeLists-txt"><a href="#1-简单配置CMakeLists-txt" class="headerlink" title="1. 简单配置CMakeLists.txt"></a>1. 简单配置CMakeLists.txt</h2><blockquote><p> 指定最低版本:</p></blockquote><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake">cmake_minimum_required(VERSION 3.20)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>指定项目名字:</p></blockquote><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake">project(opencv)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>构建可执行文件:</p></blockquote><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake">add_executable(opencv main.cpp)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>添加C++11标准支持:</p></blockquote> <pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake">set(CMAKE_CXX_STANDARD 11)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="2-复杂工程配置CMakeLists-txt"><a href="#2-复杂工程配置CMakeLists-txt" class="headerlink" title="2. 复杂工程配置CMakeLists.txt"></a>2. 复杂工程配置CMakeLists.txt</h2><blockquote><p>设置库的路径(以opencv为例):</p></blockquote><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake">set(OpenCV_DIR "E:\\Programming\\opencv\\mingw_build\\install")set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>寻找第三方库:</p></blockquote><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake">find_pacakage(OpenCv REQUIRED)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>添加头文件:</p></blockquote><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake">include_directories(${OpenCV_INCLUDE_DIRS})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>在添加的可执行文件后链接OpenCv库:</p></blockquote><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake">target_link_libraries(main ${OpenCV_LIBS})<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="3-其他操作"><a href="#3-其他操作" class="headerlink" title="3. 其他操作"></a>3. 其他操作</h2><blockquote><p>添加子目录:</p></blockquote><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake">add_subdirectory(OpenCV_Learning)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CMake入门&quot;&gt;&lt;a href=&quot;#CMake入门&quot; class=&quot;headerlink&quot; title=&quot;CMake入门&quot;&gt;&lt;/a&gt;CMake入门&lt;/h1&gt;&lt;h2 id=&quot;1-简单配置CMakeLists-txt&quot;&gt;&lt;a href=&quot;#1-简单配置CMakeLi</summary>
      
    
    
    
    <category term="环境配置" scheme="https://roranrui.github.io/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="Programming" scheme="https://roranrui.github.io/tags/Programming/"/>
    
    <category term="环境配置" scheme="https://roranrui.github.io/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>CLion环境配置</title>
    <link href="https://roranrui.github.io/2022/04/20/clion-huan-jing-pei-zhi/"/>
    <id>https://roranrui.github.io/2022/04/20/clion-huan-jing-pei-zhi/</id>
    <published>2022-04-20T14:17:16.000Z</published>
    <updated>2022-04-20T14:20:09.360Z</updated>
    
    
    
    
    <category term="环境配置" scheme="https://roranrui.github.io/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="C++" scheme="https://roranrui.github.io/tags/C/"/>
    
    <category term="Programming" scheme="https://roranrui.github.io/tags/Programming/"/>
    
    <category term="环境配置" scheme="https://roranrui.github.io/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV在CLion下的环境配置</title>
    <link href="https://roranrui.github.io/2022/04/20/opencv-clion-huan-jing-pei-zhi/"/>
    <id>https://roranrui.github.io/2022/04/20/opencv-clion-huan-jing-pei-zhi/</id>
    <published>2022-04-20T09:43:15.000Z</published>
    <updated>2022-04-20T14:19:42.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenCv环境配置"><a href="#OpenCv环境配置" class="headerlink" title="OpenCv环境配置"></a>OpenCv环境配置</h1><h2 id="1-配置前的准备"><a href="#1-配置前的准备" class="headerlink" title="1. 配置前的准备"></a>1. 配置前的准备</h2><ul><li><a href="https://opencv.org/releases/">OpenCv源码</a></li></ul><p><img src="https://s2.loli.net/2021/12/20/VnxUYgGlpaTySNA.png" alt="image-20211220191844237"></p><ul><li><p><a href="https://github.com/opencv/opencv_contrib">OpenCV拓展库</a></p></li><li><p><a href="https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/">MinGW编译器(posix)</a></p></li><li><p><a href="https://cmake.org/download/">CMake</a></p></li></ul><p><img src="https://s2.loli.net/2021/12/20/AnvfKMpHGIo5SuN.png" alt="image-20211220191750473"></p><ul><li><a href="https://git-scm.com/download/win">git</a></li></ul><p><img src="https://s2.loli.net/2021/12/20/JTsiWQ9FcINyXAh.png" alt="image-20211220192028646"></p><hr><h2 id="2-执行CMake"><a href="#2-执行CMake" class="headerlink" title="2. 执行CMake"></a>2. 执行CMake</h2><p>​将OpenCv源码解压完后, 将拓展库==opencv_contrib==文件夹放到同目录下, 并创建一个==migw_build==的文件夹, 如下图所示</p><p><img src="https://s2.loli.net/2021/12/20/OHo2qvb1ydRauV6.png" alt="image-20211220192228022"></p><p>完成后, 打开CMake-gui软件, 准备cmake.<br>先配置好源文件路径和编译输出文件夹的路径，分别如下：</p><p><img src="https://s2.loli.net/2021/12/20/JKYeqo9SCNnyIh4.png" alt="image-20211220192748002"></p><p>然后，点击下面的config按钮，就会让你选择编译器，选择==Specify native compilers==, 填入编译器指定路径:</p><p><img src="https://s2.loli.net/2021/12/20/qyD4EGkpR9oVNZJ.png" alt="image-20211220192905442"></p><p>点击finish之后，就开始cmake的config了，config完后，结果如下：</p><p><img src="https://s2.loli.net/2021/12/20/FmzToHKYbkxsSGv.png" alt="image-20211220192924762"></p><p>出现Configuring done之后，需要再次点击一下config，让这片红色消失：<img src="https://s2.loli.net/2021/12/20/xUiFsvW7kwQIhHD.png" alt="image-20211220193023639"></p><p>再次Configuring done之后，就点击generate，开始生成makefile文件:</p><p><img src="https://s2.loli.net/2021/12/20/YrF2diyxIn4LhSX.png" alt="image-20211220193004838"></p><p>在Configuring done的基础上看到了Generating done，说明generate完成了</p><p>添加扩展包的路径的方法如下，再cmake_gui的窗口中找到OPENCV_EXTRA_MODULES_PATH这一项，可以看到是空白的，我们将OpenCV_contrib的modules文件夹路径添加进来，如下所示：</p><p><img src="https://s2.loli.net/2021/12/20/dHBiEvahRU7erAJ.png" alt="image-20211220193229291"></p><p>然后再次点击configure,跟之前一样，也会出现红色，然后再次点击configure,红色消失，说明config完成，<br>然后就点击generate,出现generating done 就说明Opencv3.2的扩展包也cmake完了，扩展包cmake的图片就不贴出来了，反正跟上面三幅图是一样的。</p><p>当扩展包的cmake也出现Generating done之后，我们就可以开始执行cmake生产的makefile文件了，即开始编译链接的工作</p><hr><h2 id="3-编译makefile文件"><a href="#3-编译makefile文件" class="headerlink" title="3. 编译makefile文件"></a>3. 编译makefile文件</h2><p>在cmake的目标文件夹中，单击右键，选择Git Bash Here，前提是你要已经安装了git<br>然后就打开了git bash的命令行窗口, 输入指令mingw32-make -j8(以8个线程进行)，开始执行编译链接工作，如下所示：</p><p><img src="https://s2.loli.net/2021/12/20/aLZnviNMxEc2DVf.png" alt="img"></p><p>然后需要苦苦等待，看着编译进度从0%开始一点一点往上加，如果出现100%不报错，那么就成功了，如下所示：</p><p><img src="https://s2.loli.net/2021/12/20/9B6HZbSIjpXxTqf.png" alt="image-20211220193425249"></p><p>如果出现错误, 很正常想办法解决就彳亍, 结尾会总结我出现的错误以及解决方法</p><hr><h2 id="4-配置环境变量"><a href="#4-配置环境变量" class="headerlink" title="4. 配置环境变量"></a>4. 配置环境变量</h2><p>配置相关路径到<strong>用户环境变量</strong>:</p><p><img src="https://s2.loli.net/2021/12/20/8BVG9cXesjQNf2R.png" alt="image-20211220193658690"></p><hr><h2 id="5-CMakeLists-txt的配置"><a href="#5-CMakeLists-txt的配置" class="headerlink" title="5. CMakeLists.txt的配置"></a>5. CMakeLists.txt的配置</h2><p><img src="https://s2.loli.net/2021/12/20/wWJEsc5NTmY8dKC.png" alt="image-20211220193814066"></p><hr><h2 id="6-测试"><a href="#6-测试" class="headerlink" title="6. 测试"></a>6. 测试</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;opencv2/opencv.hpp&gt;using namespace std;using namespace cv;int main(){    Mat img = imread("E:\\Programming\\C++\\OpenCv\\A_Soul.jpg", (1920, 1080));    imshow("A_Soul", img);    waitKey();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下:</p><p><img src="https://s2.loli.net/2021/12/20/F6l4NiEyCULQIxW.png" alt="image-20211220194020709"></p><p>结束!</p><hr><h2 id="附录-遇到的问题-本人遇到的"><a href="#附录-遇到的问题-本人遇到的" class="headerlink" title="附录: 遇到的问题(本人遇到的)"></a>附录: 遇到的问题(本人遇到的)</h2><h3 id="1-MinGW编译OpenCV到vs-version-rc-obj处出错-我愿称之为究极折磨"><a href="#1-MinGW编译OpenCV到vs-version-rc-obj处出错-我愿称之为究极折磨" class="headerlink" title="1. MinGW编译OpenCV到vs_version.rc.obj处出错, 我愿称之为究极折磨"></a>1. <strong>MinGW编译OpenCV到vs_version.rc.obj处出错</strong>, <strong>我愿称之为究极折磨</strong></h3><p><img src="https://s2.loli.net/2021/12/20/lvyBfxcD8pPOzdH.png" alt="image-20211220194307607"></p><p>各种编译过程中总是出现各种模块的==vs_version.rc.obj==这个文件缺失的问题, 而且还非常规律(气死!)</p><p>解决: 自行生成==vs_version.rc.obj==文件</p><p><a href="%E6%8A%98%E7%A3%A8!!!.txt">折磨</a></p><pre class="line-numbers language-none"><code class="language-none">F:\ProgramFlies\C++\tdm64-gcc\bin\windres.exe E:\Programming\opencv\mingw_build\modules\xxxx\vs_version.rc -O coff E:\Programming\opencv\mingw_build\modules\xxxx\CMakeFiles\opencv_xxxx.dir\vs_version.rc.obj<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个路径是编译器==windres.exe==的路径, 第二个路径是对应模块的路径</p><p>只需要把出错的模块名字替换==xxxx==, 复制到cmd中执行, 就能生成对应的文件</p><hr><h3 id="2-mingw编译OpenCV-error-‘mutex’-in-namespace-‘std’-does-not-name-a-type"><a href="#2-mingw编译OpenCV-error-‘mutex’-in-namespace-‘std’-does-not-name-a-type" class="headerlink" title="2. mingw编译OpenCV error: ‘mutex’ in namespace ‘std’ does not name a type"></a>2. mingw编译OpenCV error: ‘mutex’ in namespace ‘std’ does not name a type</h3><p>​<strong>解决: 在mingw构建工具链的“线程模型:win32”中不支持互斥。必须选择任何具有“线程模型:posix”的工具链。</strong><br><strong>选择 -posix的免安装包。作为编译器</strong></p><hr><h3 id="3-opencv报错Process-finished-with-exit-code-1073741515-0xC0000135"><a href="#3-opencv报错Process-finished-with-exit-code-1073741515-0xC0000135" class="headerlink" title="3. opencv报错Process finished with exit code -1073741515 (0xC0000135)"></a>3. opencv报错Process finished with exit code -1073741515 (0xC0000135)</h3><p>解决: 在配置中添加环境变量</p><p><img src="https://s2.loli.net/2021/12/20/Jjkfg9iN2dC6eWY.png" alt="image-20211220195434564"></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;OpenCv环境配置&quot;&gt;&lt;a href=&quot;#OpenCv环境配置&quot; class=&quot;headerlink&quot; title=&quot;OpenCv环境配置&quot;&gt;&lt;/a&gt;OpenCv环境配置&lt;/h1&gt;&lt;h2 id=&quot;1-配置前的准备&quot;&gt;&lt;a href=&quot;#1-配置前的准备&quot; cla</summary>
      
    
    
    
    <category term="环境配置" scheme="https://roranrui.github.io/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="C++" scheme="https://roranrui.github.io/tags/C/"/>
    
    <category term="Programming" scheme="https://roranrui.github.io/tags/Programming/"/>
    
    <category term="环境配置" scheme="https://roranrui.github.io/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>C++基础入门</title>
    <link href="https://roranrui.github.io/2022/04/20/c-ji-chu-ru-men/"/>
    <id>https://roranrui.github.io/2022/04/20/c-ji-chu-ru-men/</id>
    <published>2022-04-20T09:42:36.000Z</published>
    <updated>2022-04-20T14:20:40.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-基础入门"><a href="#C-基础入门" class="headerlink" title="C++基础入门"></a>C++基础入门</h1><h2 id="1-C-初识"><a href="#1-C-初识" class="headerlink" title="1 C++初识"></a>1 C++初识</h2><h3 id="1-1-第一个C-程序"><a href="#1-1-第一个C-程序" class="headerlink" title="1.1  第一个C++程序"></a>1.1  第一个C++程序</h3><p>编写一个C++程序总共分为4个步骤</p><ul><li>创建项目</li><li>创建文件</li><li>编写代码</li><li>运行程序</li></ul><h4 id="1-1-1-创建项目"><a href="#1-1-1-创建项目" class="headerlink" title="1.1.1 创建项目"></a>1.1.1 创建项目</h4><p>​Visual Studio是我们用来编写C++程序的主要工具，我们先将它打开</p><p><img src="https://s2.loli.net/2022/04/20/LUQnvD89l51JTXH.png" alt="1541383178746"></p><p><img src="https://s2.loli.net/2022/04/20/dw1e8WaYvub2xN7.png" alt="1541384366413"></p><h4 id="1-1-2-创建文件"><a href="#1-1-2-创建文件" class="headerlink" title="1.1.2 创建文件"></a>1.1.2 创建文件</h4><p>右键源文件，选择添加-&gt;新建项</p><p><img src="https://s2.loli.net/2022/04/20/sNH8xkjO1wftLzV.png" alt="1541383817248"></p><p>给C++文件起个名称，然后点击添加即可。</p><p><img src="https://s2.loli.net/2022/04/20/vc6urROKqitYn9y.png" alt="1541384140042"></p><h4 id="1-1-3-编写代码"><a href="#1-1-3-编写代码" class="headerlink" title="1.1.3 编写代码"></a>1.1.3 编写代码</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;int main() {cout &lt;&lt; "Hello world" &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-1-4-运行程序"><a href="#1-1-4-运行程序" class="headerlink" title="1.1.4 运行程序"></a>1.1.4 运行程序</h4><p><img src="https://s2.loli.net/2022/04/20/njXi2wsM6FCO5mg.png" alt="1541384818688"></p><h3 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h3><p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p><p><strong>两种格式</strong></p><ol><li><strong>单行注释</strong>：<code>// 描述信息</code> <ul><li>通常放在一行代码的上方，或者一条语句的末尾，==对该行代码说明==</li></ul></li><li><strong>多行注释</strong>： <code>/* 描述信息 */</code><ul><li>通常放在一段代码的上方，==对该段代码做整体说明==</li></ul></li></ol><blockquote><p>提示：编译器在编译代码时，会忽略注释的内容</p></blockquote><h3 id="1-3-变量"><a href="#1-3-变量" class="headerlink" title="1.3 变量"></a>1.3 变量</h3><p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p><p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main() {//变量的定义//语法：数据类型  变量名 = 初始值int a = 10;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p></blockquote><h3 id="1-4-常量"><a href="#1-4-常量" class="headerlink" title="1.4  常量"></a>1.4  常量</h3><p><strong>作用</strong>：用于记录程序中不可更改的数据</p><p>C++定义常量两种方式</p><ol><li><p><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code></p><ul><li>==通常在文件上方定义==，表示一个常量</li></ul></li><li><p><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code></p><ul><li>==通常在变量定义前加关键字const==，修饰该变量为常量，不可修改</li></ul></li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//1、宏常量#define day 7int main() {cout &lt;&lt; "一周里总共有 " &lt;&lt; day &lt;&lt; " 天" &lt;&lt; endl;//day = 8;  //报错，宏常量不可以修改//2、const修饰变量const int month = 12;cout &lt;&lt; "一年里总共有 " &lt;&lt; month &lt;&lt; " 个月份" &lt;&lt; endl;//month = 24; //报错，常量是不可以修改的system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-关键字"><a href="#1-5-关键字" class="headerlink" title="1.5 关键字"></a>1.5 关键字</h3><p><strong>作用：</strong>关键字是C++中预先保留的单词（标识符）</p><ul><li><strong>在定义变量或者常量时候，不要用关键字</strong></li></ul><p>C++关键字如下：</p><table><thead><tr><th>asm</th><th>do</th><th>if</th><th>return</th><th>typedef</th></tr></thead><tbody><tr><td>auto</td><td>double</td><td>inline</td><td>short</td><td>typeid</td></tr><tr><td>bool</td><td>dynamic_cast</td><td>int</td><td>signed</td><td>typename</td></tr><tr><td>break</td><td>else</td><td>long</td><td>sizeof</td><td>union</td></tr><tr><td>case</td><td>enum</td><td>mutable</td><td>static</td><td>unsigned</td></tr><tr><td>catch</td><td>explicit</td><td>namespace</td><td>static_cast</td><td>using</td></tr><tr><td>char</td><td>export</td><td>new</td><td>struct</td><td>virtual</td></tr><tr><td>class</td><td>extern</td><td>operator</td><td>switch</td><td>void</td></tr><tr><td>const</td><td>false</td><td>private</td><td>template</td><td>volatile</td></tr><tr><td>const_cast</td><td>float</td><td>protected</td><td>this</td><td>wchar_t</td></tr><tr><td>continue</td><td>for</td><td>public</td><td>throw</td><td>while</td></tr><tr><td>default</td><td>friend</td><td>register</td><td>true</td><td></td></tr><tr><td>delete</td><td>goto</td><td>reinterpret_cast</td><td>try</td><td></td></tr></tbody></table><p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p><h3 id="1-6-标识符命名规则"><a href="#1-6-标识符命名规则" class="headerlink" title="1.6 标识符命名规则"></a>1.6 标识符命名规则</h3><p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或下划线</li><li>标识符中字母区分大小写</li></ul><blockquote><p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p></blockquote><h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2 数据类型"></a>2 数据类型</h2><p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p><h3 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h3><p><strong>作用</strong>：整型变量表示的是==整数类型==的数据</p><p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th>取值范围</th></tr></thead><tbody><tr><td>short(短整型)</td><td>2字节</td><td>(-2^15 ~ 2^15-1)</td></tr><tr><td>int(整型)</td><td>4字节</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long(长整形)</td><td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long long(长长整形)</td><td>8字节</td><td>(-2^63 ~ 2^63-1)</td></tr></tbody></table><h3 id="2-2-sizeof关键字"><a href="#2-2-sizeof关键字" class="headerlink" title="2.2 sizeof关键字"></a>2.2 sizeof关键字</h3><p><strong>作用：</strong>利用sizeof关键字可以==统计数据类型所占内存大小==</p><p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {cout &lt;&lt; "short 类型所占内存空间为： " &lt;&lt; sizeof(short) &lt;&lt; endl;cout &lt;&lt; "int 类型所占内存空间为： " &lt;&lt; sizeof(int) &lt;&lt; endl;cout &lt;&lt; "long 类型所占内存空间为： " &lt;&lt; sizeof(long) &lt;&lt; endl;cout &lt;&lt; "long long 类型所占内存空间为： " &lt;&lt; sizeof(long long) &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>整型结论</strong>：==short &lt; int &lt;= long &lt;= long long==</p></blockquote><h3 id="2-3-实型（浮点型）"><a href="#2-3-实型（浮点型）" class="headerlink" title="2.3 实型（浮点型）"></a>2.3 实型（浮点型）</h3><p><strong>作用</strong>：用于==表示小数==</p><p>浮点型变量分为两种：</p><ol><li>单精度float </li><li>双精度double</li></ol><p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th><strong>有效数字范围</strong></th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>7位有效数字</td></tr><tr><td>double</td><td>8字节</td><td>15～16位有效数字</td></tr></tbody></table><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {float f1 = 3.14f;double d1 = 3.14;cout &lt;&lt; f1 &lt;&lt; endl;cout &lt;&lt; d1&lt;&lt; endl;cout &lt;&lt; "float  sizeof = " &lt;&lt; sizeof(f1) &lt;&lt; endl;cout &lt;&lt; "double sizeof = " &lt;&lt; sizeof(d1) &lt;&lt; endl;//科学计数法float f2 = 3e2; // 3 * 10 ^ 2 cout &lt;&lt; "f2 = " &lt;&lt; f2 &lt;&lt; endl;float f3 = 3e-2;  // 3 * 0.1 ^ 2cout &lt;&lt; "f3 = " &lt;&lt; f3 &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-字符型"><a href="#2-4-字符型" class="headerlink" title="2.4 字符型"></a>2.4 字符型</h3><p><strong>作用：</strong>字符型变量用于显示单个字符</p><p><strong>语法：</strong><code>char ch = 'a';</code></p><blockquote><p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p></blockquote><blockquote><p>注意2：单引号内只能有一个字符，不可以是字符串</p></blockquote><ul><li>C和C++中字符型变量只占用==1个字节==。</li><li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</li></ul><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {char ch = 'a';cout &lt;&lt; ch &lt;&lt; endl;cout &lt;&lt; sizeof(char) &lt;&lt; endl;//ch = "abcde"; //错误，不可以用双引号//ch = 'abcde'; //错误，单引号内只能引用一个字符cout &lt;&lt; (int)ch &lt;&lt; endl;  //查看字符a对应的ASCII码ch = 97; //可以直接用ASCII给字符型变量赋值cout &lt;&lt; ch &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ASCII码表格：</p><table><thead><tr><th><strong>ASCII</strong>值</th><th><strong>控制字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th></tr></thead><tbody><tr><td>0</td><td>NUT</td><td>32</td><td>(space)</td><td>64</td><td>@</td><td>96</td><td>、</td></tr><tr><td>1</td><td>SOH</td><td>33</td><td>!</td><td>65</td><td>A</td><td>97</td><td>a</td></tr><tr><td>2</td><td>STX</td><td>34</td><td>“</td><td>66</td><td>B</td><td>98</td><td>b</td></tr><tr><td>3</td><td>ETX</td><td>35</td><td>#</td><td>67</td><td>C</td><td>99</td><td>c</td></tr><tr><td>4</td><td>EOT</td><td>36</td><td>$</td><td>68</td><td>D</td><td>100</td><td>d</td></tr><tr><td>5</td><td>ENQ</td><td>37</td><td>%</td><td>69</td><td>E</td><td>101</td><td>e</td></tr><tr><td>6</td><td>ACK</td><td>38</td><td>&amp;</td><td>70</td><td>F</td><td>102</td><td>f</td></tr><tr><td>7</td><td>BEL</td><td>39</td><td>,</td><td>71</td><td>G</td><td>103</td><td>g</td></tr><tr><td>8</td><td>BS</td><td>40</td><td>(</td><td>72</td><td>H</td><td>104</td><td>h</td></tr><tr><td>9</td><td>HT</td><td>41</td><td>)</td><td>73</td><td>I</td><td>105</td><td>i</td></tr><tr><td>10</td><td>LF</td><td>42</td><td>*</td><td>74</td><td>J</td><td>106</td><td>j</td></tr><tr><td>11</td><td>VT</td><td>43</td><td>+</td><td>75</td><td>K</td><td>107</td><td>k</td></tr><tr><td>12</td><td>FF</td><td>44</td><td>,</td><td>76</td><td>L</td><td>108</td><td>l</td></tr><tr><td>13</td><td>CR</td><td>45</td><td>-</td><td>77</td><td>M</td><td>109</td><td>m</td></tr><tr><td>14</td><td>SO</td><td>46</td><td>.</td><td>78</td><td>N</td><td>110</td><td>n</td></tr><tr><td>15</td><td>SI</td><td>47</td><td>/</td><td>79</td><td>O</td><td>111</td><td>o</td></tr><tr><td>16</td><td>DLE</td><td>48</td><td>0</td><td>80</td><td>P</td><td>112</td><td>p</td></tr><tr><td>17</td><td>DCI</td><td>49</td><td>1</td><td>81</td><td>Q</td><td>113</td><td>q</td></tr><tr><td>18</td><td>DC2</td><td>50</td><td>2</td><td>82</td><td>R</td><td>114</td><td>r</td></tr><tr><td>19</td><td>DC3</td><td>51</td><td>3</td><td>83</td><td>S</td><td>115</td><td>s</td></tr><tr><td>20</td><td>DC4</td><td>52</td><td>4</td><td>84</td><td>T</td><td>116</td><td>t</td></tr><tr><td>21</td><td>NAK</td><td>53</td><td>5</td><td>85</td><td>U</td><td>117</td><td>u</td></tr><tr><td>22</td><td>SYN</td><td>54</td><td>6</td><td>86</td><td>V</td><td>118</td><td>v</td></tr><tr><td>23</td><td>TB</td><td>55</td><td>7</td><td>87</td><td>W</td><td>119</td><td>w</td></tr><tr><td>24</td><td>CAN</td><td>56</td><td>8</td><td>88</td><td>X</td><td>120</td><td>x</td></tr><tr><td>25</td><td>EM</td><td>57</td><td>9</td><td>89</td><td>Y</td><td>121</td><td>y</td></tr><tr><td>26</td><td>SUB</td><td>58</td><td>:</td><td>90</td><td>Z</td><td>122</td><td>z</td></tr><tr><td>27</td><td>ESC</td><td>59</td><td>;</td><td>91</td><td>[</td><td>123</td><td>{</td></tr><tr><td>28</td><td>FS</td><td>60</td><td>&lt;</td><td>92</td><td>/</td><td>124</td><td>|</td></tr><tr><td>29</td><td>GS</td><td>61</td><td>=</td><td>93</td><td>]</td><td>125</td><td>}</td></tr><tr><td>30</td><td>RS</td><td>62</td><td>&gt;</td><td>94</td><td>^</td><td>126</td><td>`</td></tr><tr><td>31</td><td>US</td><td>63</td><td>?</td><td>95</td><td>_</td><td>127</td><td>DEL</td></tr></tbody></table><p>ASCII 码大致由以下<strong>两部分组</strong>成：</p><ul><li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li><li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li></ul><h3 id="2-5-转义字符"><a href="#2-5-转义字符" class="headerlink" title="2.5 转义字符"></a>2.5 转义字符</h3><p><strong>作用：</strong>用于表示一些==不能显示出来的ASCII字符==</p><p>现阶段我们常用的转义字符有：<code> \n  \\  \t</code></p><table><thead><tr><th><strong>转义字符</strong></th><th><strong>含义</strong></th><th><strong>ASCII</strong>码值（十进制）</th></tr></thead><tbody><tr><td>\a</td><td>警报</td><td>007</td></tr><tr><td>\b</td><td>退格(BS) ，将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页(FF)，将当前位置移到下页开头</td><td>012</td></tr><tr><td><strong>\n</strong></td><td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td><td><strong>010</strong></td></tr><tr><td>\r</td><td>回车(CR) ，将当前位置移到本行开头</td><td>013</td></tr><tr><td><strong>\t</strong></td><td><strong>水平制表(HT)  （跳到下一个TAB位置）</strong></td><td><strong>009</strong></td></tr><tr><td>\v</td><td>垂直制表(VT)</td><td>011</td></tr><tr><td>*<em>\\*</em></td><td><strong>代表一个反斜线字符”"</strong></td><td><strong>092</strong></td></tr><tr><td>'</td><td>代表一个单引号（撇号）字符</td><td>039</td></tr><tr><td>"</td><td>代表一个双引号字符</td><td>034</td></tr><tr><td>?</td><td>代表一个问号</td><td>063</td></tr><tr><td>\0</td><td>数字0</td><td>000</td></tr><tr><td>\ddd</td><td>8进制转义字符，d范围0~7</td><td>3位8进制</td></tr><tr><td>\xhh</td><td>16进制转义字符，h范围0<del>9，a</del>f，A~F</td><td>3位16进制</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {cout &lt;&lt; "\\" &lt;&lt; endl;cout &lt;&lt; "\tHello" &lt;&lt; endl;cout &lt;&lt; "\n" &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-字符串型"><a href="#2-6-字符串型" class="headerlink" title="2.6 字符串型"></a>2.6 字符串型</h3><p><strong>作用</strong>：用于表示一串字符</p><p><strong>两种风格</strong></p><ol><li><p><strong>C风格字符串</strong>： <code>char 变量名[] = "字符串值"</code></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {char str1[] = "hello world";cout &lt;&lt; str1 &lt;&lt; endl;    system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>注意：C风格的字符串要用双引号括起来</p></blockquote><ol><li><p><strong>C++风格字符串</strong>：  <code>string  变量名 = "字符串值"</code></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {string str = "hello world";cout &lt;&lt; str &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>注意：C++风格字符串，需要加入头文件==#include&lt;string&gt;==</p></blockquote><h3 id="2-7-布尔类型-bool"><a href="#2-7-布尔类型-bool" class="headerlink" title="2.7 布尔类型 bool"></a>2.7 布尔类型 bool</h3><p><strong>作用：</strong>布尔数据类型代表真或假的值 </p><p>bool类型只有两个值：</p><ul><li>true  — 真（本质是1）</li><li>false — 假（本质是0）</li></ul><p><strong>bool类型占==1个字节==大小</strong></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {bool flag = true;cout &lt;&lt; flag &lt;&lt; endl; // 1flag = false;cout &lt;&lt; flag &lt;&lt; endl; // 0cout &lt;&lt; "size of bool = " &lt;&lt; sizeof(bool) &lt;&lt; endl; //1system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-8-数据的输入"><a href="#2-8-数据的输入" class="headerlink" title="2.8 数据的输入"></a>2.8 数据的输入</h3><p><strong>作用：用于从键盘获取数据</strong></p><p><strong>关键字：</strong>cin</p><p><strong>语法：</strong> <code>cin &gt;&gt; 变量 </code></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main(){//整型输入int a = 0;cout &lt;&lt; "请输入整型变量：" &lt;&lt; endl;cin &gt;&gt; a;cout &lt;&lt; a &lt;&lt; endl;//浮点型输入double d = 0;cout &lt;&lt; "请输入浮点型变量：" &lt;&lt; endl;cin &gt;&gt; d;cout &lt;&lt; d &lt;&lt; endl;//字符型输入char ch = 0;cout &lt;&lt; "请输入字符型变量：" &lt;&lt; endl;cin &gt;&gt; ch;cout &lt;&lt; ch &lt;&lt; endl;//字符串型输入string str;cout &lt;&lt; "请输入字符串型变量：" &lt;&lt; endl;cin &gt;&gt; str;cout &lt;&lt; str &lt;&lt; endl;//布尔类型输入bool flag = true;cout &lt;&lt; "请输入布尔型变量：" &lt;&lt; endl;cin &gt;&gt; flag;cout &lt;&lt; flag &lt;&lt; endl;system("pause");return EXIT_SUCCESS;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h2><p><strong>作用：</strong>用于执行代码的运算</p><p>本章我们主要讲解以下几类运算符：</p><table><thead><tr><th><strong>运算符类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>算术运算符</td><td>用于处理四则运算</td></tr><tr><td>赋值运算符</td><td>用于将表达式的值赋给变量</td></tr><tr><td>比较运算符</td><td>用于表达式的比较，并返回一个真值或假值</td></tr><tr><td>逻辑运算符</td><td>用于根据表达式的值返回真值或假值</td></tr></tbody></table><h3 id="3-1-算术运算符"><a href="#3-1-算术运算符" class="headerlink" title="3.1 算术运算符"></a>3.1 算术运算符</h3><p><strong>作用</strong>：用于处理四则运算 </p><p>算术运算符包括以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>-3</td><td>-3</td></tr><tr><td>+</td><td>加</td><td>10 + 5</td><td>15</td></tr><tr><td>-</td><td>减</td><td>10 - 5</td><td>5</td></tr><tr><td>*</td><td>乘</td><td>10 * 5</td><td>50</td></tr><tr><td>/</td><td>除</td><td>10 / 5</td><td>2</td></tr><tr><td>%</td><td>取模(取余)</td><td>10 % 3</td><td>1</td></tr><tr><td>++</td><td>前置递增</td><td>a=2; b=++a;</td><td>a=3; b=3;</td></tr><tr><td>++</td><td>后置递增</td><td>a=2; b=a++;</td><td>a=3; b=2;</td></tr><tr><td>–</td><td>前置递减</td><td>a=2; b=–a;</td><td>a=1; b=1;</td></tr><tr><td>–</td><td>后置递减</td><td>a=2; b=a–;</td><td>a=1; b=2;</td></tr></tbody></table><p><strong>示例1：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//加减乘除int main() {int a1 = 10;int b1 = 3;cout &lt;&lt; a1 + b1 &lt;&lt; endl;cout &lt;&lt; a1 - b1 &lt;&lt; endl;cout &lt;&lt; a1 * b1 &lt;&lt; endl;cout &lt;&lt; a1 / b1 &lt;&lt; endl;  //两个整数相除结果依然是整数int a2 = 10;int b2 = 20;cout &lt;&lt; a2 / b2 &lt;&lt; endl; int a3 = 10;int b3 = 0;//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0//两个小数可以相除double d1 = 0.5;double d2 = 0.25;cout &lt;&lt; d1 / d2 &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：在除法运算中，除数不能为0</p></blockquote><p><strong>示例2：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//取模int main() {int a1 = 10;int b1 = 3;cout &lt;&lt; 10 % 3 &lt;&lt; endl;int a2 = 10;int b2 = 20;cout &lt;&lt; a2 % b2 &lt;&lt; endl;int a3 = 10;int b3 = 0;//cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0//两个小数不可以取模double d1 = 3.14;double d2 = 1.1;//cout &lt;&lt; d1 % d2 &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：只有整型变量可以进行取模运算</p></blockquote><p><strong>示例3：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//递增int main() {//后置递增int a = 10;a++; //等价于a = a + 1cout &lt;&lt; a &lt;&lt; endl; // 11//前置递增int b = 10;++b;cout &lt;&lt; b &lt;&lt; endl; // 11//区别//前置递增先对变量进行++，再计算表达式int a2 = 10;int b2 = ++a2 * 10;cout &lt;&lt; b2 &lt;&lt; endl;//后置递增先计算表达式，后对变量进行++int a3 = 10;int b3 = a3++ * 10;cout &lt;&lt; b3 &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：前置递增先对变量进行++，再计算表达式，后置递增相反</p></blockquote><h3 id="3-2-赋值运算符"><a href="#3-2-赋值运算符" class="headerlink" title="3.2 赋值运算符"></a>3.2 赋值运算符</h3><p><strong>作用：</strong>用于将表达式的值赋给变量</p><p>赋值运算符包括以下几个符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>a=2; b=3;</td><td>a=2; b=3;</td></tr><tr><td>+=</td><td>加等于</td><td>a=0; a+=2;</td><td>a=2;</td></tr><tr><td>-=</td><td>减等于</td><td>a=5; a-=3;</td><td>a=2;</td></tr><tr><td>*=</td><td>乘等于</td><td>a=2; a*=2;</td><td>a=4;</td></tr><tr><td>/=</td><td>除等于</td><td>a=4; a/=2;</td><td>a=2;</td></tr><tr><td>%=</td><td>模等于</td><td>a=3; a%2;</td><td>a=1;</td></tr></tbody></table><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//赋值运算符// =int a = 10;a = 100;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;// +=a = 10;a += 2; // a = a + 2;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;// -=a = 10;a -= 2; // a = a - 2cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;// *=a = 10;a *= 2; // a = a * 2cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;// /=a = 10;a /= 2;  // a = a / 2;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;// %=a = 10;a %= 2;  // a = a % 2;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-比较运算符"><a href="#3-3-比较运算符" class="headerlink" title="3.3 比较运算符"></a>3.3 比较运算符</h3><p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值</p><p>比较运算符有以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>==</td><td>相等于</td><td>4 == 3</td><td>0</td></tr><tr><td>!=</td><td>不等于</td><td>4 != 3</td><td>1</td></tr><tr><td>&lt;</td><td>小于</td><td>4 &lt; 3</td><td>0</td></tr><tr><td>&gt;</td><td>大于</td><td>4 &gt; 3</td><td>1</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>4 &lt;= 3</td><td>0</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>4 &gt;= 1</td><td>1</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int a = 10;int b = 20;cout &lt;&lt; (a == b) &lt;&lt; endl; // 0 cout &lt;&lt; (a != b) &lt;&lt; endl; // 1cout &lt;&lt; (a &gt; b) &lt;&lt; endl; // 0cout &lt;&lt; (a &lt; b) &lt;&lt; endl; // 1cout &lt;&lt; (a &gt;= b) &lt;&lt; endl; // 0cout &lt;&lt; (a &lt;= b) &lt;&lt; endl; // 1system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：C和C++ 语言的比较运算中， ==“真”用数字“1”来表示， “假”用数字“0”来表示。== </p></blockquote><h3 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4 逻辑运算符"></a>3.4 逻辑运算符</h3><p><strong>作用：</strong>用于根据表达式的值返回真值或假值</p><p>逻辑运算符有以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>!</td><td>非</td><td>!a</td><td>如果a为假，则!a为真；  如果a为真，则!a为假。</td></tr><tr><td>&amp;&amp;</td><td>与</td><td>a &amp;&amp; b</td><td>如果a和b都为真，则结果为真，否则为假。</td></tr><tr><td>||</td><td>或</td><td>a || b</td><td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td></tr></tbody></table><p><strong>示例1：</strong>逻辑非</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//逻辑运算符  --- 非int main() {int a = 10;cout &lt;&lt; !a &lt;&lt; endl; // 0cout &lt;&lt; !!a &lt;&lt; endl; // 1system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结： 真变假，假变真</p></blockquote><p><strong>示例2：</strong>逻辑与</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//逻辑运算符  --- 与int main() {int a = 10;int b = 10;cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 1a = 10;b = 0;cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 0 a = 0;b = 0;cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;// 0system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：逻辑==与==运算符总结： ==同真为真，其余为假==</p></blockquote><p><strong>示例3：</strong>逻辑或</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//逻辑运算符  --- 或int main() {int a = 10;int b = 10;cout &lt;&lt; (a || b) &lt;&lt; endl;// 1a = 10;b = 0;cout &lt;&lt; (a || b) &lt;&lt; endl;// 1 a = 0;b = 0;cout &lt;&lt; (a || b) &lt;&lt; endl;// 0system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>逻辑==或==运算符总结： ==同假为假，其余为真==</p></blockquote><h2 id="4-程序流程结构"><a href="#4-程序流程结构" class="headerlink" title="4 程序流程结构"></a>4 程序流程结构</h2><p>C/C++支持最基本的三种程序运行结构：==顺序结构、选择结构、循环结构==</p><ul><li>顺序结构：程序按顺序执行，不发生跳转</li><li>选择结构：依据条件是否满足，有选择的执行相应功能</li><li>循环结构：依据条件是否满足，循环多次执行某段代码</li></ul><h3 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h3><h4 id="4-1-1-if语句"><a href="#4-1-1-if语句" class="headerlink" title="4.1.1 if语句"></a>4.1.1 if语句</h4><p><strong>作用：</strong>执行满足条件的语句</p><p>if语句的三种形式</p><ul><li><p>单行格式if语句</p></li><li><p>多行格式if语句</p></li><li><p>多条件的if语句</p></li></ul><ol><li><p>单行格式if语句：<code>if(条件){ 条件满足执行的语句 }</code></p><p><img src="https://s2.loli.net/2022/04/20/CML8qSyFdsl6NjE.png" alt="img"></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//选择结构-单行if语句//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印int score = 0;cout &lt;&lt; "请输入一个分数：" &lt;&lt; endl;cin &gt;&gt; score;cout &lt;&lt; "您输入的分数为： " &lt;&lt; score &lt;&lt; endl;//if语句//注意事项，在if判断语句后面，不要加分号if (score &gt; 600){cout &lt;&lt; "我考上了一本大学！！！" &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>注意：if条件表达式后不要加分号</p></blockquote><ol start="2"><li>多行格式if语句：<code>if(条件){ 条件满足执行的语句 }else{ 条件不满足执行的语句 };</code></li></ol><p><img src="https://s2.loli.net/2022/04/20/E8uJW5dfe74Ppos.png" alt="img"></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int score = 0;cout &lt;&lt; "请输入考试分数：" &lt;&lt; endl;cin &gt;&gt; score;if (score &gt; 600){cout &lt;&lt; "我考上了一本大学" &lt;&lt; endl;}else{cout &lt;&lt; "我未考上一本大学" &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>多条件的if语句：<code>if(条件1){ 条件1满足执行的语句 }else if(条件2){条件2满足执行的语句}... else{ 都不满足执行的语句}</code></li></ol><p><img src="https://s2.loli.net/2022/04/20/U3AmyERGBOvxzTi.png" alt="img"></p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int score = 0;cout &lt;&lt; "请输入考试分数：" &lt;&lt; endl;cin &gt;&gt; score;if (score &gt; 600){cout &lt;&lt; "我考上了一本大学" &lt;&lt; endl;}else if (score &gt; 500){cout &lt;&lt; "我考上了二本大学" &lt;&lt; endl;}else if (score &gt; 400){cout &lt;&lt; "我考上了三本大学" &lt;&lt; endl;}else{cout &lt;&lt; "我未考上本科" &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>嵌套if语句</strong>：在if语句中，可以嵌套使用if语句，达到更精确的条件判断</p><p>案例需求：</p><ul><li>提示用户输入一个高考考试分数，根据分数做如下判断</li><li>分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；</li><li>在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main() {int score = 0;cout &lt;&lt; "请输入考试分数：" &lt;&lt; endl;cin &gt;&gt; score;if (score &gt; 600){cout &lt;&lt; "我考上了一本大学" &lt;&lt; endl;if (score &gt; 700){cout &lt;&lt; "我考上了北大" &lt;&lt; endl;}else if (score &gt; 650){cout &lt;&lt; "我考上了清华" &lt;&lt; endl;}else{cout &lt;&lt; "我考上了人大" &lt;&lt; endl;}}else if (score &gt; 500){cout &lt;&lt; "我考上了二本大学" &lt;&lt; endl;}else if (score &gt; 400){cout &lt;&lt; "我考上了三本大学" &lt;&lt; endl;}else{cout &lt;&lt; "我未考上本科" &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>练习案例：</strong> 三只小猪称体重</p><p>有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？<img src="https://s2.loli.net/2022/04/20/ujUhZx9DGf5dyRY.jpg" alt="三只小猪"></p><h4 id="4-1-2-三目运算符"><a href="#4-1-2-三目运算符" class="headerlink" title="4.1.2 三目运算符"></a>4.1.2 三目运算符</h4><p><strong>作用：</strong> 通过三目运算符实现简单的判断</p><p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p><p><strong>解释：</strong></p><p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p><p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int a = 10;int b = 20;int c = 0;c = a &gt; b ? a : b;cout &lt;&lt; "c = " &lt;&lt; c &lt;&lt; endl;//C++中三目运算符返回的是变量,可以继续赋值(a &gt; b ? a : b) = 100;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;cout &lt;&lt; "c = " &lt;&lt; c &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p></blockquote><h4 id="4-1-3-switch语句"><a href="#4-1-3-switch语句" class="headerlink" title="4.1.3 switch语句"></a>4.1.3 switch语句</h4><p><strong>作用：</strong>执行多条件分支语句</p><p><strong>语法：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">switch(表达式){case 结果1：执行语句;break;case 结果2：执行语句;break;...default:执行语句;break;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//请给电影评分 //10 ~ 9   经典   // 8 ~ 7   非常好// 6 ~ 5   一般// 5分以下 烂片int score = 0;cout &lt;&lt; "请给电影打分" &lt;&lt; endl;cin &gt;&gt; score;switch (score){case 10:case 9:cout &lt;&lt; "经典" &lt;&lt; endl;break;case 8:cout &lt;&lt; "非常好" &lt;&lt; endl;break;case 7:case 6:cout &lt;&lt; "一般" &lt;&lt; endl;break;default:cout &lt;&lt; "烂片" &lt;&lt; endl;break;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意1：switch语句中表达式类型只能是整型或者字符型</p></blockquote><blockquote><p>注意2：case里如果没有break，那么程序会一直向下执行</p></blockquote><blockquote><p>总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</p></blockquote><h3 id="4-2-循环结构"><a href="#4-2-循环结构" class="headerlink" title="4.2 循环结构"></a>4.2 循环结构</h3><h4 id="4-2-1-while循环语句"><a href="#4-2-1-while循环语句" class="headerlink" title="4.2.1 while循环语句"></a>4.2.1 while循环语句</h4><p><strong>作用：</strong>满足循环条件，执行循环语句</p><p><strong>语法：</strong><code> while(循环条件){ 循环语句 }</code></p><p><strong>解释：</strong>==只要循环条件的结果为真，就执行循环语句==</p><p><img src="https://s2.loli.net/2022/04/20/sT1h5Ci9vgSnH4X.png" alt="img"></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int num = 0;while (num &lt; 10){cout &lt;&lt; "num = " &lt;&lt; num &lt;&lt; endl;num++;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p></blockquote><p><strong>while循环练习案例：</strong>==猜数字==</p><p><strong>案例描述：</strong>系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p><p><img src="https://s2.loli.net/2022/04/20/sjhfl8i4rqwKDM3.jpg" alt="猜数字"></p><h4 id="4-2-2-do…while循环语句"><a href="#4-2-2-do…while循环语句" class="headerlink" title="4.2.2 do…while循环语句"></a>4.2.2 do…while循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p><p><strong>语法：</strong> <code>do{ 循环语句 } while(循环条件);</code></p><p><strong>注意：</strong>与while的区别在于==do…while会先执行一次循环语句==，再判断循环条件</p><p><img src="https://s2.loli.net/2022/04/20/oAPrWfUlk2ijxvD.png" alt="img"></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int num = 0;do{cout &lt;&lt; num &lt;&lt; endl;num++;} while (num &lt; 10);system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：与while循环区别在于，do…while先执行一次循环语句，再判断循环条件</p></blockquote><p><strong>练习案例：水仙花数</strong></p><p><strong>案例描述：</strong>水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身</p><p>例如：1^3 + 5^3+ 3^3 = 153</p><p>请利用do…while语句，求出所有3位数中的水仙花数</p><h4 id="4-2-3-for循环语句"><a href="#4-2-3-for循环语句" class="headerlink" title="4.2.3 for循环语句"></a>4.2.3 for循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p><p><strong>语法：</strong><code> for(起始表达式;条件表达式;末尾循环体) { 循环语句; }</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {for (int i = 0; i &lt; 10; i++){cout &lt;&lt; i &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>详解：</strong></p><p><img src="https://s2.loli.net/2022/04/20/49FCaixJsnLYURD.png" alt="1541673704101"></p><blockquote><p>注意：for循环中的表达式，要用分号进行分隔</p></blockquote><blockquote><p>总结：while , do…while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用</p></blockquote><p><strong>练习案例：敲桌子</strong></p><p>案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。</p><p><img src="https://s2.loli.net/2022/04/20/vOl3fAnHpT7r1YB.gif" alt="timg"></p><h4 id="4-2-4-嵌套循环"><a href="#4-2-4-嵌套循环" class="headerlink" title="4.2.4 嵌套循环"></a>4.2.4 嵌套循环</h4><p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p><p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p><p><img src="https://s2.loli.net/2022/04/20/xsjFqmblneZ9dtk.png" alt="1541676003486"></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//外层循环执行1次，内层循环执行1轮for (int i = 0; i &lt; 10; i++){for (int j = 0; j &lt; 10; j++){cout &lt;&lt; "*" &lt;&lt; " ";}cout &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>练习案例：</strong>乘法口诀表</p><p>案例描述：利用嵌套循环，实现九九乘法表</p><p><img src="https://s2.loli.net/2022/04/20/hHJPyw6I4ajUmin.jpg" alt="0006018857256120_b"></p><h3 id="4-3-跳转语句"><a href="#4-3-跳转语句" class="headerlink" title="4.3 跳转语句"></a>4.3 跳转语句</h3><h4 id="4-3-1-break语句"><a href="#4-3-1-break语句" class="headerlink" title="4.3.1 break语句"></a>4.3.1 break语句</h4><p><strong>作用:</strong> 用于跳出==选择结构==或者==循环结构==</p><p>break使用的时机：</p><ul><li>出现在switch条件语句中，作用是终止case并跳出switch</li><li>出现在循环语句中，作用是跳出当前的循环语句</li><li>出现在嵌套循环中，跳出最近的内层循环语句</li></ul><p><strong>示例1：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//1、在switch 语句中使用breakcout &lt;&lt; "请选择您挑战副本的难度：" &lt;&lt; endl;cout &lt;&lt; "1、普通" &lt;&lt; endl;cout &lt;&lt; "2、中等" &lt;&lt; endl;cout &lt;&lt; "3、困难" &lt;&lt; endl;int num = 0;cin &gt;&gt; num;switch (num){case 1:cout &lt;&lt; "您选择的是普通难度" &lt;&lt; endl;break;case 2:cout &lt;&lt; "您选择的是中等难度" &lt;&lt; endl;break;case 3:cout &lt;&lt; "您选择的是困难难度" &lt;&lt; endl;break;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例2：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//2、在循环语句中用breakfor (int i = 0; i &lt; 10; i++){if (i == 5){break; //跳出循环语句}cout &lt;&lt; i &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例3：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//在嵌套循环语句中使用break，退出内层循环for (int i = 0; i &lt; 10; i++){for (int j = 0; j &lt; 10; j++){if (j == 5){break;}cout &lt;&lt; "*" &lt;&lt; " ";}cout &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-2-continue语句"><a href="#4-3-2-continue语句" class="headerlink" title="4.3.2 continue语句"></a>4.3.2 continue语句</h4><p><strong>作用：</strong>在==循环语句==中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {for (int i = 0; i &lt; 100; i++){if (i % 2 == 0){continue;}cout &lt;&lt; i &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：continue并没有使整个循环终止，而break会跳出循环</p></blockquote><h4 id="4-3-3-goto语句"><a href="#4-3-3-goto语句" class="headerlink" title="4.3.3 goto语句"></a>4.3.3 goto语句</h4><p><strong>作用：</strong>可以无条件跳转语句</p><p><strong>语法：</strong> <code>goto 标记;</code></p><p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {cout &lt;&lt; "1" &lt;&lt; endl;goto FLAG;cout &lt;&lt; "2" &lt;&lt; endl;cout &lt;&lt; "3" &lt;&lt; endl;cout &lt;&lt; "4" &lt;&lt; endl;FLAG:cout &lt;&lt; "5" &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：在程序中不建议使用goto语句，以免造成程序流程混乱</p></blockquote><h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5 数组"></a>5 数组</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p><p><strong>特点1：</strong>数组中的每个==数据元素都是相同的数据类型==</p><p><strong>特点2：</strong>数组是由==连续的内存==位置组成的</p><p><img src="https://s2.loli.net/2022/04/20/2nRMQeA6TBGJzVI.png" alt="1541748375356"></p><h3 id="5-2-一维数组"><a href="#5-2-一维数组" class="headerlink" title="5.2 一维数组"></a>5.2 一维数组</h3><h4 id="5-2-1-一维数组定义方式"><a href="#5-2-1-一维数组定义方式" class="headerlink" title="5.2.1 一维数组定义方式"></a>5.2.1 一维数组定义方式</h4><p>一维数组定义的三种方式：</p><ol><li><code>数据类型  数组名[ 数组长度 ];</code></li><li><code>数据类型  数组名[ 数组长度 ] = { 值1，值2 ...};</code></li><li><code>数据类型  数组名[ ] = { 值1，值2 ...};</code></li></ol><p>示例</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//定义方式1//数据类型 数组名[元素个数];int score[10];//利用下标赋值score[0] = 100;score[1] = 99;score[2] = 85;//利用下标输出cout &lt;&lt; score[0] &lt;&lt; endl;cout &lt;&lt; score[1] &lt;&lt; endl;cout &lt;&lt; score[2] &lt;&lt; endl;//第二种定义方式//数据类型 数组名[元素个数] =  {值1，值2 ，值3 ...};//如果{}内不足10个数据，剩余数据用0补全int score2[10] = { 100, 90,80,70,60,50,40,30,20,10 };//逐个输出//cout &lt;&lt; score2[0] &lt;&lt; endl;//cout &lt;&lt; score2[1] &lt;&lt; endl;//一个一个输出太麻烦，因此可以利用循环进行输出for (int i = 0; i &lt; 10; i++){cout &lt;&lt; score2[i] &lt;&lt; endl;}//定义方式3//数据类型 数组名[] =  {值1，值2 ，值3 ...};int score3[] = { 100,90,80,70,60,50,40,30,20,10 };for (int i = 0; i &lt; 10; i++){cout &lt;&lt; score3[i] &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p></blockquote><blockquote><p>总结2：数组中下标是从0开始索引</p></blockquote><h4 id="5-2-2-一维数组数组名"><a href="#5-2-2-一维数组数组名" class="headerlink" title="5.2.2 一维数组数组名"></a>5.2.2 一维数组数组名</h4><p>一维数组名称的<strong>用途</strong>：</p><ol><li>可以统计整个数组在内存中的长度</li><li>可以获取数组在内存中的首地址</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//数组名用途//1、可以获取整个数组占用内存空间大小int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };cout &lt;&lt; "整个数组所占内存空间为： " &lt;&lt; sizeof(arr) &lt;&lt; endl;cout &lt;&lt; "每个元素所占内存空间为： " &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;cout &lt;&lt; "数组的元素个数为： " &lt;&lt; sizeof(arr) / sizeof(arr[0]) &lt;&lt; endl;//2、可以通过数组名获取到数组首地址cout &lt;&lt; "数组首地址为： " &lt;&lt; (int)arr &lt;&lt; endl;cout &lt;&lt; "数组中第一个元素地址为： " &lt;&lt; (int)&amp;arr[0] &lt;&lt; endl;cout &lt;&lt; "数组中第二个元素地址为： " &lt;&lt; (int)&amp;arr[1] &lt;&lt; endl;//arr = 100; 错误，数组名是常量，因此不可以赋值system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：数组名是常量，不可以赋值</p></blockquote><blockquote><p>总结1：直接打印数组名，可以查看数组所占内存的首地址</p></blockquote><blockquote><p>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小</p></blockquote><p><strong>练习案例1</strong>：五只小猪称体重</p><p><strong>案例描述：</strong></p><p>在一个数组中记录了五只小猪的体重，如：int arr[5] = {300,350,200,400,250};</p><p>找出并打印最重的小猪体重。</p><p><strong>练习案例2：</strong>数组元素逆置</p><p><strong>案例描述：</strong>请声明一个5个元素的数组，并且将元素逆置.</p><p>(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);</p><h4 id="5-2-3-冒泡排序"><a href="#5-2-3-冒泡排序" class="headerlink" title="5.2.3 冒泡排序"></a>5.2.3 冒泡排序</h4><p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li><li>重复以上的步骤，每次比较次数-1，直到不需要比较</li></ol><p><img src="https://s2.loli.net/2022/04/20/hGDiMHjC1xVyUkB.png" alt="1541905327273"></p><p><strong>示例：</strong> 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int arr[9] = { 4,2,8,0,5,7,1,3,9 };for (int i = 0; i &lt; 9 - 1; i++){for (int j = 0; j &lt; 9 - 1 - i; j++){if (arr[j] &gt; arr[j + 1]){int temp = arr[j];arr[j] = arr[j + 1];arr[j + 1] = temp;}}}for (int i = 0; i &lt; 9; i++){cout &lt;&lt; arr[i] &lt;&lt; endl;}    system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-二维数组"><a href="#5-3-二维数组" class="headerlink" title="5.3 二维数组"></a>5.3 二维数组</h3><p>二维数组就是在一维数组上，多加一个维度。</p><p><img src="https://s2.loli.net/2022/04/20/9EXsin7Hg6CyY8U.png" alt="1541905559138"></p><h4 id="5-3-1-二维数组定义方式"><a href="#5-3-1-二维数组定义方式" class="headerlink" title="5.3.1 二维数组定义方式"></a>5.3.1 二维数组定义方式</h4><p>二维数组定义的四种方式：</p><ol><li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = { {数据1，数据2 } ，{数据3，数据4 } };</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = { 数据1，数据2，数据3，数据4};</code></li><li><code> 数据类型  数组名[  ][ 列数 ] = { 数据1，数据2，数据3，数据4};</code></li></ol><blockquote><p>建议：以上4种定义方式，利用==第二种更加直观，提高代码的可读性==</p></blockquote><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//方式1  //数组类型 数组名 [行数][列数]int arr[2][3];arr[0][0] = 1;arr[0][1] = 2;arr[0][2] = 3;arr[1][0] = 4;arr[1][1] = 5;arr[1][2] = 6;for (int i = 0; i &lt; 2; i++){for (int j = 0; j &lt; 3; j++){cout &lt;&lt; arr[i][j] &lt;&lt; " ";}cout &lt;&lt; endl;}//方式2 //数据类型 数组名[行数][列数] = { {数据1，数据2 } ，{数据3，数据4 } };int arr2[2][3] ={{1,2,3},{4,5,6}};//方式3//数据类型 数组名[行数][列数] = { 数据1，数据2 ,数据3，数据4  };int arr3[2][3] = { 1,2,3,4,5,6 }; //方式4 //数据类型 数组名[][列数] = { 数据1，数据2 ,数据3，数据4  };int arr4[][3] = { 1,2,3,4,5,6 };system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p></blockquote><h4 id="5-3-2-二维数组数组名"><a href="#5-3-2-二维数组数组名" class="headerlink" title="5.3.2 二维数组数组名"></a>5.3.2 二维数组数组名</h4><ul><li>查看二维数组所占内存空间</li><li>获取二维数组首地址</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//二维数组数组名int arr[2][3] ={{1,2,3},{4,5,6}};cout &lt;&lt; "二维数组大小： " &lt;&lt; sizeof(arr) &lt;&lt; endl;cout &lt;&lt; "二维数组一行大小： " &lt;&lt; sizeof(arr[0]) &lt;&lt; endl;cout &lt;&lt; "二维数组元素大小： " &lt;&lt; sizeof(arr[0][0]) &lt;&lt; endl;cout &lt;&lt; "二维数组行数： " &lt;&lt; sizeof(arr) / sizeof(arr[0]) &lt;&lt; endl;cout &lt;&lt; "二维数组列数： " &lt;&lt; sizeof(arr[0]) / sizeof(arr[0][0]) &lt;&lt; endl;//地址cout &lt;&lt; "二维数组首地址：" &lt;&lt; arr &lt;&lt; endl;cout &lt;&lt; "二维数组第一行地址：" &lt;&lt; arr[0] &lt;&lt; endl;cout &lt;&lt; "二维数组第二行地址：" &lt;&lt; arr[1] &lt;&lt; endl;cout &lt;&lt; "二维数组第一个元素地址：" &lt;&lt; &amp;arr[0][0] &lt;&lt; endl;cout &lt;&lt; "二维数组第二个元素地址：" &lt;&lt; &amp;arr[0][1] &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结1：二维数组名就是这个数组的首地址</p></blockquote><blockquote><p>总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</p></blockquote><h4 id="5-3-3-二维数组应用案例"><a href="#5-3-3-二维数组应用案例" class="headerlink" title="5.3.3 二维数组应用案例"></a><strong>5.3.3 二维数组应用案例</strong></h4><p><strong>考试成绩统计：</strong></p><p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p><table><thead><tr><th></th><th>语文</th><th>数学</th><th>英语</th></tr></thead><tbody><tr><td>张三</td><td>100</td><td>100</td><td>100</td></tr><tr><td>李四</td><td>90</td><td>50</td><td>100</td></tr><tr><td>王五</td><td>60</td><td>70</td><td>80</td></tr></tbody></table><p><strong>参考答案：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int scores[3][3] ={{100,100,100},{90,50,100},{60,70,80},};string names[3] = { "张三","李四","王五" };for (int i = 0; i &lt; 3; i++){int sum = 0;for (int j = 0; j &lt; 3; j++){sum += scores[i][j];}cout &lt;&lt; names[i] &lt;&lt; "同学总成绩为： " &lt;&lt; sum &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6 函数"></a>6 函数</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码</p><p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p><h3 id="6-2-函数的定义"><a href="#6-2-函数的定义" class="headerlink" title="6.2 函数的定义"></a>6.2 函数的定义</h3><p>函数的定义一般主要有5个步骤：</p><p>1、返回值类型 </p><p>2、函数名</p><p>3、参数表列</p><p>4、函数体语句 </p><p>5、return 表达式</p><p><strong>语法：</strong> </p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">返回值类型 函数名 （参数列表）{       函数体语句       return表达式}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li><li>函数名：给函数起个名称</li><li>参数列表：使用该函数时，传入的数据</li><li>函数体语句：花括号内的代码，函数内需要执行的语句</li><li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li></ul><p><strong>示例：</strong>定义一个加法函数，实现两个数相加</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//函数定义int add(int num1, int num2){int sum = num1 + num2;return sum;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-函数的调用"><a href="#6-3-函数的调用" class="headerlink" title="6.3 函数的调用"></a>6.3 函数的调用</h3><p><strong>功能：</strong>使用定义好的函数</p><p><strong>语法：</strong><code> 函数名（参数）</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//函数定义int add(int num1, int num2) //定义中的num1,num2称为形式参数，简称形参{int sum = num1 + num2;return sum;}int main() {int a = 10;int b = 10;//调用add函数int sum = add(a, b);//调用时的a，b称为实际参数，简称实参cout &lt;&lt; "sum = " &lt;&lt; sum &lt;&lt; endl;a = 100;b = 100;sum = add(a, b);cout &lt;&lt; "sum = " &lt;&lt; sum &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p></blockquote><h3 id="6-4-值传递"><a href="#6-4-值传递" class="headerlink" title="6.4 值传递"></a>6.4 值传递</h3><ul><li>所谓值传递，就是函数调用时实参将数值传入给形参</li><li>值传递时，==如果形参发生，并不会影响实参==</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void swap(int num1, int num2){cout &lt;&lt; "交换前：" &lt;&lt; endl;cout &lt;&lt; "num1 = " &lt;&lt; num1 &lt;&lt; endl;cout &lt;&lt; "num2 = " &lt;&lt; num2 &lt;&lt; endl;int temp = num1;num1 = num2;num2 = temp;cout &lt;&lt; "交换后：" &lt;&lt; endl;cout &lt;&lt; "num1 = " &lt;&lt; num1 &lt;&lt; endl;cout &lt;&lt; "num2 = " &lt;&lt; num2 &lt;&lt; endl;//return ; 当函数声明时候，不需要返回值，可以不写return}int main() {int a = 10;int b = 20;swap(a, b);cout &lt;&lt; "mian中的 a = " &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "mian中的 b = " &lt;&lt; b &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结： 值传递时，形参是修饰不了实参的</p></blockquote><h3 id="6-5-函数的常见样式"><a href="#6-5-函数的常见样式" class="headerlink" title="6.5 函数的常见样式"></a><strong>6.5 函数的常见样式</strong></h3><p>常见的函数样式有4种</p><ol><li>无参无返</li><li>有参无返</li><li>无参有返</li><li>有参有返</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//函数常见样式//1、 无参无返void test01(){//void a = 10; //无类型不可以创建变量,原因无法分配内存cout &lt;&lt; "this is test01" &lt;&lt; endl;//test01(); 函数调用}//2、 有参无返void test02(int a){cout &lt;&lt; "this is test02" &lt;&lt; endl;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;}//3、无参有返int test03(){cout &lt;&lt; "this is test03 " &lt;&lt; endl;return 10;}//4、有参有返int test04(int a, int b){cout &lt;&lt; "this is test04 " &lt;&lt; endl;int sum = a + b;return sum;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-6-函数的声明"><a href="#6-6-函数的声明" class="headerlink" title="6.6 函数的声明"></a>6.6 函数的声明</h3><p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p><ul><li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//声明可以多次，定义只能一次//声明int max(int a, int b);int max(int a, int b);//定义int max(int a, int b){return a &gt; b ? a : b;}int main() {int a = 100;int b = 200;cout &lt;&lt; max(a, b) &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-7-函数的分文件编写"><a href="#6-7-函数的分文件编写" class="headerlink" title="6.7 函数的分文件编写"></a>6.7 函数的分文件编写</h3><p><strong>作用：</strong>让代码结构更加清晰</p><p>函数分文件编写一般有4个步骤</p><ol><li>创建后缀名为.h的头文件  </li><li>创建后缀名为.cpp的源文件</li><li>在头文件中写函数的声明</li><li>在源文件中写函数的定义</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//swap.h文件#include&lt;iostream&gt;using namespace std;//实现两个数字交换的函数声明void swap(int a, int b);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//swap.cpp文件#include "swap.h"void swap(int a, int b){int temp = a;a = b;b = temp;cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//main函数文件#include "swap.h"int main() {int a = 100;int b = 200;swap(a, b);system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-指针"><a href="#7-指针" class="headerlink" title="7 指针"></a>7 指针</h2><h3 id="7-1-指针的基本概念"><a href="#7-1-指针的基本概念" class="headerlink" title="7.1 指针的基本概念"></a>7.1 指针的基本概念</h3><p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p><ul><li><p>内存编号是从0开始记录的，一般用十六进制数字表示</p></li><li><p>可以利用指针变量保存地址</p></li></ul><h3 id="7-2-指针变量的定义和使用"><a href="#7-2-指针变量的定义和使用" class="headerlink" title="7.2 指针变量的定义和使用"></a>7.2 指针变量的定义和使用</h3><p>指针变量定义语法： <code>数据类型 * 变量名；</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//1、指针的定义int a = 10; //定义整型变量a//指针定义语法： 数据类型 * 变量名 ;int * p;//指针变量赋值p = &amp;a; //指针指向变量a的地址cout &lt;&lt; &amp;a &lt;&lt; endl; //打印数据a的地址cout &lt;&lt; p &lt;&lt; endl;  //打印指针变量p//2、指针的使用//通过*操作指针变量指向的内存cout &lt;&lt; "*p = " &lt;&lt; *p &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指针变量和普通变量的区别</p><ul><li>普通变量存放的是数据,指针变量存放的是地址</li><li>指针变量可以通过” * “操作符，操作指针变量指向的内存空间，这个过程称为解引用</li></ul><blockquote><p>总结1： 我们可以通过 &amp; 符号 获取变量的地址</p></blockquote><blockquote><p>总结2：利用指针可以记录地址</p></blockquote><blockquote><p>总结3：对指针变量解引用，可以操作指针指向的内存</p></blockquote><h3 id="7-3-指针所占内存空间"><a href="#7-3-指针所占内存空间" class="headerlink" title="7.3 指针所占内存空间"></a>7.3 指针所占内存空间</h3><p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int a = 10;int * p;p = &amp;a; //指针指向数据a的地址cout &lt;&lt; *p &lt;&lt; endl; //* 解引用cout &lt;&lt; sizeof(p) &lt;&lt; endl;cout &lt;&lt; sizeof(char *) &lt;&lt; endl;cout &lt;&lt; sizeof(float *) &lt;&lt; endl;cout &lt;&lt; sizeof(double *) &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：所有指针类型在32位操作系统下是4个字节</p></blockquote><h3 id="7-4-空指针和野指针"><a href="#7-4-空指针和野指针" class="headerlink" title="7.4 空指针和野指针"></a>7.4 空指针和野指针</h3><p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p><p><strong>用途：</strong>初始化指针变量</p><p><strong>注意：</strong>空指针指向的内存是不可以访问的</p><p><strong>示例1：空指针</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//指针变量p指向内存地址编号为0的空间int * p = NULL;//访问空指针报错 //内存编号0 ~255为系统占用内存，不允许用户访问cout &lt;&lt; *p &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>野指针</strong>：指针变量指向非法的内存空间</p><p><strong>示例2：野指针</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {//指针变量p指向内存地址编号为0x1100的空间int * p = (int *)0x1100;//访问野指针报错 cout &lt;&lt; *p &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p></blockquote><h3 id="7-5-const修饰指针"><a href="#7-5-const修饰指针" class="headerlink" title="7.5 const修饰指针"></a>7.5 const修饰指针</h3><p>const修饰指针有三种情况</p><ol><li>const修饰指针   — 常量指针</li><li>const修饰常量   — 指针常量</li><li>const即修饰指针，又修饰常量</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main() {int a = 10;int b = 10;//const修饰的是指针，指针指向可以改，指针指向的值不可以更改const int * p1 = &amp;a; p1 = &amp;b; //正确//*p1 = 100;  报错//const修饰的是常量，指针指向不可以改，指针指向的值可以更改int * const p2 = &amp;a;//p2 = &amp;b; //错误*p2 = 100; //正确    //const既修饰指针又修饰常量const int * const p3 = &amp;a;//p3 = &amp;b; //错误//*p3 = 100; //错误system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</p></blockquote><h3 id="7-6-指针和数组"><a href="#7-6-指针和数组" class="headerlink" title="7.6 指针和数组"></a>7.6 指针和数组</h3><p><strong>作用：</strong>利用指针访问数组中元素</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() {int arr[] = { 1,2,3,4,5,6,7,8,9,10 };int * p = arr;  //指向数组的指针cout &lt;&lt; "第一个元素： " &lt;&lt; arr[0] &lt;&lt; endl;cout &lt;&lt; "指针访问第一个元素： " &lt;&lt; *p &lt;&lt; endl;for (int i = 0; i &lt; 10; i++){//利用指针遍历数组cout &lt;&lt; *p &lt;&lt; endl;p++;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-7-指针和函数"><a href="#7-7-指针和函数" class="headerlink" title="7.7 指针和函数"></a>7.7 指针和函数</h3><p><strong>作用：</strong>利用指针作函数参数，可以修改实参的值</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//值传递void swap1(int a ,int b){int temp = a;a = b; b = temp;}//地址传递void swap2(int * p1, int *p2){int temp = *p1;*p1 = *p2;*p2 = temp;}int main() {int a = 10;int b = 20;swap1(a, b); // 值传递不会改变实参swap2(&amp;a, &amp;b); //地址传递会改变实参cout &lt;&lt; "a = " &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; "b = " &lt;&lt; b &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p></blockquote><h3 id="7-8-指针、数组、函数"><a href="#7-8-指针、数组、函数" class="headerlink" title="7.8 指针、数组、函数"></a>7.8 指针、数组、函数</h3><p><strong>案例描述：</strong>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p><p>例如数组：int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };</p><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//冒泡排序函数void bubbleSort(int * arr, int len)  //int * arr 也可以写为int arr[]{for (int i = 0; i &lt; len - 1; i++){for (int j = 0; j &lt; len - 1 - i; j++){if (arr[j] &gt; arr[j + 1]){int temp = arr[j];arr[j] = arr[j + 1];arr[j + 1] = temp;}}}}//打印数组函数void printArray(int arr[], int len){for (int i = 0; i &lt; len; i++){cout &lt;&lt; arr[i] &lt;&lt; endl;}}int main() {int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };int len = sizeof(arr) / sizeof(int);bubbleSort(arr, len);printArray(arr, len);system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p></blockquote><h2 id="8-结构体"><a href="#8-结构体" class="headerlink" title="8 结构体"></a>8 结构体</h2><h3 id="8-1-结构体基本概念"><a href="#8-1-结构体基本概念" class="headerlink" title="8.1 结构体基本概念"></a>8.1 结构体基本概念</h3><p>结构体属于用户==自定义的数据类型==，允许用户存储不同的数据类型</p><h3 id="8-2-结构体定义和使用"><a href="#8-2-结构体定义和使用" class="headerlink" title="8.2 结构体定义和使用"></a>8.2 结构体定义和使用</h3><p><strong>语法：</strong><code>struct 结构体名 { 结构体成员列表 }；</code></p><p>通过结构体创建变量的方式有三种：</p><ul><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 = { 成员1值 ， 成员2值…}</li><li>定义结构体时顺便创建变量</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//结构体定义struct student{//成员列表string name;  //姓名int age;      //年龄int score;    //分数}stu3; //结构体变量创建方式3 int main() {//结构体变量创建方式1struct student stu1; //struct 关键字可以省略stu1.name = "张三";stu1.age = 18;stu1.score = 100;cout &lt;&lt; "姓名：" &lt;&lt; stu1.name &lt;&lt; " 年龄：" &lt;&lt; stu1.age  &lt;&lt; " 分数：" &lt;&lt; stu1.score &lt;&lt; endl;//结构体变量创建方式2struct student stu2 = { "李四",19,60 };cout &lt;&lt; "姓名：" &lt;&lt; stu2.name &lt;&lt; " 年龄：" &lt;&lt; stu2.age  &lt;&lt; " 分数：" &lt;&lt; stu2.score &lt;&lt; endl;stu3.name = "王五";stu3.age = 18;stu3.score = 80;cout &lt;&lt; "姓名：" &lt;&lt; stu3.name &lt;&lt; " 年龄：" &lt;&lt; stu3.age  &lt;&lt; " 分数：" &lt;&lt; stu3.score &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结1：定义结构体时的关键字是struct，不可省略</p></blockquote><blockquote><p>总结2：创建结构体变量时，关键字struct可以省略</p></blockquote><blockquote><p>总结3：结构体变量利用操作符 ‘’.’’  访问成员</p></blockquote><h3 id="8-3-结构体数组"><a href="#8-3-结构体数组" class="headerlink" title="8.3 结构体数组"></a>8.3 结构体数组</h3><p><strong>作用：</strong>将自定义的结构体放入到数组中方便维护</p><p><strong>语法：</strong><code> struct  结构体名 数组名[元素个数] = {  {} , {} , ... {} }</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//结构体定义struct student{//成员列表string name;  //姓名int age;      //年龄int score;    //分数}int main() {//结构体数组struct student arr[3]={{"张三",18,80 },{"李四",19,60 },{"王五",20,70 }};for (int i = 0; i &lt; 3; i++){cout &lt;&lt; "姓名：" &lt;&lt; arr[i].name &lt;&lt; " 年龄：" &lt;&lt; arr[i].age &lt;&lt; " 分数：" &lt;&lt; arr[i].score &lt;&lt; endl;}system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-结构体指针"><a href="#8-4-结构体指针" class="headerlink" title="8.4 结构体指针"></a>8.4 结构体指针</h3><p><strong>作用：</strong>通过指针访问结构体中的成员</p><ul><li>利用操作符 <code>-&gt; </code>可以通过结构体指针访问结构体属性</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//结构体定义struct student{//成员列表string name;  //姓名int age;      //年龄int score;    //分数};int main() {struct student stu = { "张三",18,100, };struct student * p = &amp;stu;p-&gt;score = 80; //指针通过 -&gt; 操作符可以访问成员cout &lt;&lt; "姓名：" &lt;&lt; p-&gt;name &lt;&lt; " 年龄：" &lt;&lt; p-&gt;age &lt;&lt; " 分数：" &lt;&lt; p-&gt;score &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p></blockquote><h3 id="8-5-结构体嵌套结构体"><a href="#8-5-结构体嵌套结构体" class="headerlink" title="8.5 结构体嵌套结构体"></a>8.5 结构体嵌套结构体</h3><p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p><p><strong>例如：</strong>每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//学生结构体定义struct student{//成员列表string name;  //姓名int age;      //年龄int score;    //分数};//教师结构体定义struct teacher{    //成员列表int id; //职工编号string name;  //教师姓名int age;   //教师年龄struct student stu; //子结构体 学生};int main() {struct teacher t1;t1.id = 10000;t1.name = "老王";t1.age = 40;t1.stu.name = "张三";t1.stu.age = 18;t1.stu.score = 100;cout &lt;&lt; "教师 职工编号： " &lt;&lt; t1.id &lt;&lt; " 姓名： " &lt;&lt; t1.name &lt;&lt; " 年龄： " &lt;&lt; t1.age &lt;&lt; endl;cout &lt;&lt; "辅导学员 姓名： " &lt;&lt; t1.stu.name &lt;&lt; " 年龄：" &lt;&lt; t1.stu.age &lt;&lt; " 考试分数： " &lt;&lt; t1.stu.score &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong>在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p><h3 id="8-6-结构体做函数参数"><a href="#8-6-结构体做函数参数" class="headerlink" title="8.6 结构体做函数参数"></a>8.6 结构体做函数参数</h3><p><strong>作用：</strong>将结构体作为参数向函数中传递</p><p>传递方式有两种：</p><ul><li>值传递</li><li>地址传递</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//学生结构体定义struct student{//成员列表string name;  //姓名int age;      //年龄int score;    //分数};//值传递void printStudent(student stu ){stu.age = 28;cout &lt;&lt; "子函数中 姓名：" &lt;&lt; stu.name &lt;&lt; " 年龄： " &lt;&lt; stu.age  &lt;&lt; " 分数：" &lt;&lt; stu.score &lt;&lt; endl;}//地址传递void printStudent2(student *stu){stu-&gt;age = 28;cout &lt;&lt; "子函数中 姓名：" &lt;&lt; stu-&gt;name &lt;&lt; " 年龄： " &lt;&lt; stu-&gt;age  &lt;&lt; " 分数：" &lt;&lt; stu-&gt;score &lt;&lt; endl;}int main() {student stu = { "张三",18,100};//值传递printStudent(stu);cout &lt;&lt; "主函数中 姓名：" &lt;&lt; stu.name &lt;&lt; " 年龄： " &lt;&lt; stu.age &lt;&lt; " 分数：" &lt;&lt; stu.score &lt;&lt; endl;cout &lt;&lt; endl;//地址传递printStudent2(&amp;stu);cout &lt;&lt; "主函数中 姓名：" &lt;&lt; stu.name &lt;&lt; " 年龄： " &lt;&lt; stu.age  &lt;&lt; " 分数：" &lt;&lt; stu.score &lt;&lt; endl;system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p></blockquote><h3 id="8-7-结构体中-const使用场景"><a href="#8-7-结构体中-const使用场景" class="headerlink" title="8.7 结构体中 const使用场景"></a>8.7 结构体中 const使用场景</h3><p><strong>作用：</strong>用const来防止误操作</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//学生结构体定义struct student{//成员列表string name;  //姓名int age;      //年龄int score;    //分数};//const使用场景void printStudent(const student *stu) //加const防止函数体中的误操作{//stu-&gt;age = 100; //操作失败，因为加了const修饰cout &lt;&lt; "姓名：" &lt;&lt; stu-&gt;name &lt;&lt; " 年龄：" &lt;&lt; stu-&gt;age &lt;&lt; " 分数：" &lt;&lt; stu-&gt;score &lt;&lt; endl;}int main() {student stu = { "张三",18,100 };printStudent(&amp;stu);system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-8-结构体案例"><a href="#8-8-结构体案例" class="headerlink" title="8.8 结构体案例"></a>8.8 结构体案例</h3><h4 id="8-8-1-案例1"><a href="#8-8-1-案例1" class="headerlink" title="8.8.1 案例1"></a>8.8.1 案例1</h4><p><strong>案例描述：</strong></p><p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下</p><p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p><p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p><p>最终打印出老师数据以及老师所带的学生数据。</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">struct Student{string name;int score;};struct Teacher{string name;Student sArray[5];};void allocateSpace(Teacher tArray[] , int len){string tName = "教师";string sName = "学生";string nameSeed = "ABCDE";for (int i = 0; i &lt; len; i++){tArray[i].name = tName + nameSeed[i];for (int j = 0; j &lt; 5; j++){tArray[i].sArray[j].name = sName + nameSeed[j];tArray[i].sArray[j].score = rand() % 61 + 40;}}}void printTeachers(Teacher tArray[], int len){for (int i = 0; i &lt; len; i++){cout &lt;&lt; tArray[i].name &lt;&lt; endl;for (int j = 0; j &lt; 5; j++){cout &lt;&lt; "\t姓名：" &lt;&lt; tArray[i].sArray[j].name &lt;&lt; " 分数：" &lt;&lt; tArray[i].sArray[j].score &lt;&lt; endl;}}}int main() {srand((unsigned int)time(NULL)); //随机数种子 头文件 #include &lt;ctime&gt;Teacher tArray[3]; //老师数组int len = sizeof(tArray) / sizeof(Teacher);allocateSpace(tArray, len); //创建数据printTeachers(tArray, len); //打印数据system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-8-2-案例2"><a href="#8-8-2-案例2" class="headerlink" title="8.8.2 案例2"></a>8.8.2 案例2</h4><p><strong>案例描述：</strong></p><p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p><p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p><p>五名英雄信息如下：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">{"刘备",23,"男"},{"关羽",22,"男"},{"张飞",20,"男"},{"赵云",21,"男"},{"貂蝉",19,"女"},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//英雄结构体struct hero{string name;int age;string sex;};//冒泡排序void bubbleSort(hero arr[] , int len){for (int i = 0; i &lt; len - 1; i++){for (int j = 0; j &lt; len - 1 - i; j++){if (arr[j].age &gt; arr[j + 1].age){hero temp = arr[j];arr[j] = arr[j + 1];arr[j + 1] = temp;}}}}//打印数组void printHeros(hero arr[], int len){for (int i = 0; i &lt; len; i++){cout &lt;&lt; "姓名： " &lt;&lt; arr[i].name &lt;&lt; " 性别： " &lt;&lt; arr[i].sex &lt;&lt; " 年龄： " &lt;&lt; arr[i].age &lt;&lt; endl;}}int main() {struct hero arr[5] ={{"刘备",23,"男"},{"关羽",22,"男"},{"张飞",20,"男"},{"赵云",21,"男"},{"貂蝉",19,"女"},};int len = sizeof(arr) / sizeof(hero); //获取数组元素个数bubbleSort(arr, len); //排序printHeros(arr, len); //打印system("pause");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-基础入门&quot;&gt;&lt;a href=&quot;#C-基础入门&quot; class=&quot;headerlink&quot; title=&quot;C++基础入门&quot;&gt;&lt;/a&gt;C++基础入门&lt;/h1&gt;&lt;h2 id=&quot;1-C-初识&quot;&gt;&lt;a href=&quot;#1-C-初识&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="语言学习" scheme="https://roranrui.github.io/categories/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="C++" scheme="https://roranrui.github.io/tags/C/"/>
    
    <category term="Programming" scheme="https://roranrui.github.io/tags/Programming/"/>
    
  </entry>
  
</feed>
