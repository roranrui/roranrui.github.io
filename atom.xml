<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>若然无亦的Blog</title>
  
  <subtitle>长日终有时, 长梦终有逝</subtitle>
  <link href="https://roranrui.cn/atom.xml" rel="self"/>
  
  <link href="https://roranrui.cn/"/>
  <updated>2022-05-26T12:23:59.028Z</updated>
  <id>https://roranrui.cn/</id>
  
  <author>
    <name>若然无亦</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数组</title>
    <link href="https://roranrui.cn/posts/340249a9/"/>
    <id>https://roranrui.cn/posts/340249a9/</id>
    <published>2022-05-26T12:22:57.000Z</published>
    <updated>2022-05-26T12:23:59.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="算法学习-字符串匹配-KMP"><a href="#算法学习-字符串匹配-KMP" class="headerlink" title="算法学习: 字符串匹配-KMP"></a>算法学习: 字符串匹配-KMP</h2><blockquote><p>  参考文章: <a href="https://blog.csdn.net/yyzsir/article/details/89462339">https://blog.csdn.net/yyzsir/article/details/89462339</a></p><p>   <a href="https://leetcode.cn/leetbook/read/array-and-string/cpoo6/">https://leetcode.cn/leetbook/read/array-and-string/cpoo6/</a></p></blockquote><iframe src="//player.bilibili.com/player.html?aid=49930100&amp;bvid=BV1jb411V78H&amp;cid=119839716&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>相较于普通的回溯比较, KMP算法采用每当从某个起始位置开始一趟比较后，在匹配过程中出现失配，不回溯i，而是利用已经得到的部分匹配结果，将一种<strong>假想的位置定位“指针”</strong>在模式上向右滑动尽可能远的一段距离到某个位置后，继续按规则进行下一次的比较。</p><h3 id="next数组"><a href="#next数组" class="headerlink" title="next数组"></a>next数组</h3><p>一个用于记录<strong>最长公共前后缀</strong>长度的数组, <strong>且最长公共前后缀要小于已匹配子串长度</strong></p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1653562485684-a1de7006-16d2-415d-aa09-6c8aa93e2ca8.png" alt="img"></p><p><strong>将模式串的公共前缀移动到原来公共后缀位置</strong></p><h3 id="求next数组"><a href="#求next数组" class="headerlink" title="求next数组"></a>求next数组</h3><p>造方法为：next[i] 对应的下标，为 P[0…i - 1] 的最长公共前缀后缀的长度，令 P[0] = -1。 具体解释如下：</p><p>例如对于字符串 abcba：</p><p>前缀：它的前缀包括：a, ab, abc, abcb，不包括本身；</p><p>后缀：它的后缀包括：bcba, cba, ba, a，不包括本身；</p><p>最长公共前缀后缀：abcba 的前缀和后缀中只有 a 是公共部分，字符串 a 的长度为 1。</p><p>所以，我们将 P[0…i - 1] 的最长公共前后缀的长度作为 next[i] 的下标，就得到了 next 数组。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28457545/1653563121057-00690361-912e-4758-bc75-f2391dbbb60e.png" alt="img"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">buildNext</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> P<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 构造模式串 P 的 next 表</span>    size_t m <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// “主”串指针</span>    <span class="token keyword">int</span><span class="token operator">*</span> N <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// next 表</span>    <span class="token keyword">int</span>  t <span class="token operator">=</span> N<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 模式串指针</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token number">0</span> <span class="token operator">></span> t <span class="token operator">||</span> P<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> P<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 匹配</span>        <span class="token punctuation">{</span>              j<span class="token operator">++</span><span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">;</span>            N<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>P<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> P<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">?</span> t <span class="token operator">:</span> N<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> N<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">match</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> P<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> S<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// KMP 算法</span>    <span class="token keyword">int</span><span class="token operator">*</span> next <span class="token operator">=</span> <span class="token function">buildNext</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 构造 next 表</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">strlen</span> <span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 文本串指针</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">strlen</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//模式串指针</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 自左向右逐个比对字符</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> j <span class="token operator">||</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> P<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 若匹配，或 P 已移除最左侧</span>            <span class="token punctuation">{</span>i<span class="token operator">++</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 则转到下一字符</span>        <span class="token keyword">else</span>            j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 模式串右移（注意：文本串不用回退）</span>    <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 释放 next 表</span>    <span class="token keyword">return</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题目-实现-strStr"><a href="#题目-实现-strStr" class="headerlink" title="题目: 实现 strStr()"></a>题目: 实现 strStr()</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1653564567428-1b6f74d6-5f42-4a3a-a4b3-24501b0a11ef.png" alt="img"></p><p><strong>实现:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">strStr</span><span class="token punctuation">(</span>string haystack<span class="token punctuation">,</span> string needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>needle<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">buildNext</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 指向主串</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> haystack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 指向模式串</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> needle<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// j &lt; 0 说明 j==-1要从头开始匹配了</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> haystack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> needle<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// haystack[i] 和 needle[j]不匹配，要从模式串下标为next[j]的继续匹配，也就是最长公共前缀后缀的长度</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果j == m证明模式串匹配完毕，在主串中找到了模式串，范围模式串在主串中出现的第一个下标，i - j</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> next<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">buildNext</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">int</span> m <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        next<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 因为第一个字母没有前缀，所以next[0] = -1</span>        next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// t &lt; 0 也就是 t == -1,要从模式串的第一位开始匹配，然后主串也要向后移一下</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>                t<span class="token operator">++</span><span class="token punctuation">;</span>                next<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                t <span class="token operator">=</span> next<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h2><h2 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a>最长回文子串</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28457545/1653527850827-cb927baf-b581-4475-93cf-c463b7d33737.png" alt="img"></p><p><strong>解题思路:</strong></p><p>采用动态规划</p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token keyword">int</span> maxLen <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 所有长度为1的子串都是回文串</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始递推</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> L <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> L <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span> L<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> L <span class="token operator">+</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 右边界</span>                <span class="token comment" spellcheck="true">//越界处理</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> len<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> L <span class="token operator">></span> maxLen<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    maxLen <span class="token operator">=</span> L<span class="token punctuation">;</span>                    begin <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> maxLen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h1&gt;&lt;h2 id=&quot;算法学习-字符串匹配-KMP&quot;&gt;&lt;a href=&quot;#算法学习-字符串匹配-KMP&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://roranrui.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
    <category term="算法" scheme="https://roranrui.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>图解数据结构与算法-刷题笔记</title>
    <link href="https://roranrui.cn/posts/6a5d9715/"/>
    <id>https://roranrui.cn/posts/6a5d9715/</id>
    <published>2022-05-25T13:14:57.000Z</published>
    <updated>2022-05-26T12:18:55.895Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一天-栈与队列（简单）"><a href="#第一天-栈与队列（简单）" class="headerlink" title="第一天_栈与队列（简单）"></a>第一天_栈与队列（简单）</h1><h2 id="一-知识学习"><a href="#一-知识学习" class="headerlink" title="一.知识学习"></a>一.知识学习</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><blockquote><p>  栈是一种具有 「先入后出」 特点的抽象数据结构，可使用数组或链表实现。</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp">stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stk<span class="token punctuation">;</span>stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 元素 1 入栈</span>stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 元素 2 入栈</span>stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 出栈 -> 元素 2</span>stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 出栈 -> 元素 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图所示，通过常用操作「入栈 <code>push()</code>」,「出栈 <code>pop()</code>」，展示)</p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1599578767-ZifMEX-Picture4.png"></p><hr><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><blockquote><p>  队列是一种具有 「先入先出」 特点的抽象数据结构，可使用链表实现。</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp">queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> que<span class="token punctuation">;</span>que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 元素 1 入队</span>que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 元素 2 入队</span>que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 出队 -> 元素 1</span>que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 出队 -> 元素 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1599588416-Majmwh-Picture5.png" alt="Picture5.png" style="zoom:150%;"><hr><h2 id="二-题目练习"><a href="#二-题目练习" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-用两个栈实现队列"><a href="#1-用两个栈实现队列" class="headerlink" title="1. 用两个栈实现队列"></a>1. 用两个栈实现队列</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220424211735242.png" alt="image-20220424211735242"></p><p><strong>解决方案：</strong></p><ul><li>栈的特点是先进后出，队列的特点是先进先出，这里我们可以使用两个栈（栈A和栈B）模拟队列，具体如下：</li><li>初始时，栈A和栈B都为空，当需要压入元素时，全部压入栈A；当想要元素出栈时，将栈A中的元素依次出栈并压入栈B；例如：我们将元素a，b，c依次压入栈A，要出栈时，将栈A元素出栈并压入栈B，则栈B中的元素为c,b,a；这时再进行出栈，元素为a，符合队列先进先出的特点；<img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/20200819084611888.png" alt="用两个栈实现队列" style="zoom:150%;"></li></ul><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CQueue</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> A<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> B<span class="token punctuation">;</span>    <span class="token function">CQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">appendTail</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        A<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">deleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>A<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 将栈A中的值逆序保存到B</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            A<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            B<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        B<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>B<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 又将B中的值逆序送回A(这样一来就满足先进先出)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            B<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            A<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Your CQueue object will be instantiated and called as such: * CQueue* obj = new CQueue(); * obj->appendTail(value); * int param_2 = obj->deleteHead(); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220424213830541.png" alt="image-20220424213830541"></p><p>执行用时为 252 ms 的范例:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CQueue</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st1<span class="token punctuation">,</span> st2<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">CQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">appendTail</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        st1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">deleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>st1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> st2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>st2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>st1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                st2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>st1<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                st1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> st2<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  只用了一次循环, 耗时少了近180毫秒</p></blockquote><hr><h3 id="2-包含-min-函数的栈"><a href="#2-包含-min-函数的栈" class="headerlink" title="2. 包含 min 函数的栈"></a>2. 包含 min 函数的栈</h3><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220424214313949.png" alt="image-20220424214313949" style="zoom:150%;"><p><strong>解题思路</strong>:</p><blockquote><p>  使用两个stack，一个为数据栈，另一个为辅助栈。数据栈用于存储所有数据，辅助栈用于存储最小值。</p><p>  普通栈的 push() 和 pop() 函数的复杂度为 O(1) ；而获取栈最小值 min() 函数需要遍历整个栈，复杂度为 O(N) 。</p><p>  本题难点： 将 min() 函数复杂度降为 O(1)O(1) ，可通过建立辅助栈实现；</p></blockquote><ul><li>数据栈 A ： 栈 A 用于存储所有元素，保证入栈 push() 函数、出栈 pop() 函数、获取栈顶 top() 函数的正常逻辑。</li><li>辅助栈 B ： 栈 B中存储栈 A 中所有 非严格降序 的元素，则栈 A 中的最小元素始终对应栈 B 的栈顶元素，即 min() 函数只需返回栈 B 的栈顶元素即可。</li><li>因此，只需设法维护好 栈 B 的元素，使其保持非严格降序，即可实现 min() 函数的 O(1)复杂度。</li></ul><ol><li><p>push()–入栈的时候：首先将数值x压入数据栈A中，若辅助栈B为空或者辅助栈B的栈顶元素大于等于数值x时，则将数值x压入辅助栈中。</p></li><li><p>pop()—出栈的时候：当数据栈A和辅助栈的栈顶元素相同的时候，辅助栈的栈顶元素出栈。否则，数据栈的栈顶元素出栈。</p></li><li><p>top()函数–获得栈顶元素的时候：直接返回数据栈A的栈顶元素。</p></li><li><p>min()函数—栈最小元素：直接返回辅助栈B的栈顶元素。</p></li></ol><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> main<span class="token punctuation">,</span> help<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/** initialize your data structure here. */</span>    <span class="token function">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>help<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> help<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> x<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            help<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        main<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> help<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            help<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        main<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> main<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> help<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Your MinStack object will be instantiated and called as such: * MinStack* obj = new MinStack(); * obj->push(x); * obj->pop(); * int param_3 = obj->top(); * int param_4 = obj->min(); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220424220317281.png" alt="image-20220424220317281"></p><p>执行用时为 12 ms 的范例:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/** initialize your data structure here. */</span>    <span class="token function">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        m_min<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>            <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        m_data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> m_min<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            m_min<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            m_min<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>m_min<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               m_min<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_data<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>  m_data<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> m_min<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> m_data<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> m_min<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Your MinStack object will be instantiated and called as such: * MinStack* obj = new MinStack(); * obj->push(x); * obj->pop(); * int param_3 = obj->top(); * int param_4 = obj->min(); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  pop()时, 没有比较, 而是将两个栈的top()元素一起出栈了</p></blockquote><hr><h1 id="第二天-链表-简单"><a href="#第二天-链表-简单" class="headerlink" title="第二天_链表(简单)"></a>第二天_链表(简单)</h1><blockquote><p>  刷题日程指引: <a href="https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/px2ds5/">行百里者半九十。坚持一个月刷完，一起加油！</a></p></blockquote><h2 id="一-知识学习-1"><a href="#一-知识学习-1" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><blockquote><p>  链表以节点为单位，每个元素都是一个独立对象，在内存空间的存储是非连续的。链表的节点对象具有两个成员变量：「值 <code>val</code>」，「后继节点引用 <code>next</code>」 。</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> ListNode <span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 节点值</span>    ListNode <span class="token operator">*</span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 后继节点引用</span>    <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">val</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图所示，建立此链表需要实例化每个节点，并构建各节点的引用指向。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 实例化节点</span>ListNode <span class="token operator">*</span>n1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 节点 head</span>ListNode <span class="token operator">*</span>n2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ListNode <span class="token operator">*</span>n3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 构建引用指向</span>n1<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> n2<span class="token punctuation">;</span>n2<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> n3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/1599578767-zgLjYw-Picture3.png" alt="Picture3.png"></p><hr><h2 id="二-题目练习-1"><a href="#二-题目练习-1" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-从尾到头打印链表"><a href="#1-从尾到头打印链表" class="headerlink" title="1. 从尾到头打印链表"></a>1. 从尾到头打印链表</h3><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220425082308455.png" alt="image-20220425082308455" style="zoom:150%;"><p>**解题思路: **</p><blockquote><p>  题目要求逆序输出, 满足栈的先进后出特性, 可以用栈来模拟输出</p></blockquote><p>实现</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">reversePrint</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>           stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> output<span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            output<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>output<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            output<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220425093925129.png" alt="image-20220425093925129"></p><blockquote><p>  本题用栈模拟已是优解</p></blockquote><hr><h3 id="2-反转链表"><a href="#2-反转链表" class="headerlink" title="2. 反转链表"></a>2. 反转链表</h3><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220425085321953.png" alt="image-20220425085321953" style="zoom:150%;"><p><strong>解题思路:</strong></p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/20200510214622321.gif" alt="在这里插入图片描述" style="zoom:150%;"><p>用一个 <code>pre</code> 指针和一个 <code>cur</code> 指针，顾名思义，<code>curr</code> 从头开始，指向每个当前的结点，<code>pre</code> 就是 <code>cur</code> 的前一个结点。所谓反转，就是要让每个结点指向其前一个结点。每次移动，我们用 <code>cur</code> 记录当下的<code>node</code>，用 <code>pre</code> 记录前一个<code>node</code>，然后让 <code>cur.next = pre</code></p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode<span class="token operator">*</span> curr <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> pre <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>curr <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ListNode<span class="token operator">*</span> temp <span class="token operator">=</span>  curr<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 记录下一位</span>            <span class="token comment" spellcheck="true">// 反转</span>            curr<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 后移</span>            pre <span class="token operator">=</span> curr<span class="token punctuation">;</span>            curr <span class="token operator">=</span> temp<span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220425093805387.png" alt="image-20220425093805387"></p><p>还有最普通的栈方式:</p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/20200510214932541.gif" alt="栈实现" style="zoom:150%;"><pre class="line-numbers language-cpp"><code class="language-cpp"> <span class="token keyword">public</span> ListNode <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>       Stack<span class="token operator">&lt;</span>ListNode<span class="token operator">></span> stack <span class="token operator">=</span>  <span class="token keyword">new</span> Stack<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ListNode temp <span class="token operator">=</span> node<span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ListNode head <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ListNode temp1 <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ListNode temp2 <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp1<span class="token punctuation">.</span>next <span class="token operator">=</span> temp2<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>temp2 <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp2<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  思想其实就是利用栈先进后出的原理，把这些node逆序排起来，然后一个一个拿出来，连起来，</p></blockquote><hr><h3 id="3-复杂链表的复制"><a href="#3-复杂链表的复制" class="headerlink" title="3. 复杂链表的复制"></a>3. 复杂链表的复制</h3><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220425091240411.png" alt="image-20220425091240411"></p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220425091252478.png" alt="image-20220425091252478"></p><p><strong>解题思路:</strong></p><blockquote><p>  第一步：创建新链表时，将原链表的每一个节点复制，并连接在原节点的后面，相当于在原链表的每一个节点后面插入一个val值相等的新节点。</p><p>  以例一为例：</p>  <img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/20210321153137291.png" alt="第一次复制过的链表" style="zoom:150%;"><p>  第二步：通过原链表的<code>random</code>找到新链表的<code>random</code>。新复制的节点的<code>random</code>由原节点的<code>random</code>决定，如果原节点的<code>random == NULL</code>，则新节点的<code>random == NULL</code>，否则，由于新节点还在原链表中，所以新节点的<code>random =</code> 原节点的<code>random-&gt;next</code>。</p><p>  第三步：把新节点从原链表中分离出，返回新链表。</p></blockquote><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*// Definition for a Node.class Node {public:    int val;    Node* next;    Node* random;        Node(int _val) {        val = _val;        next = NULL;        random = NULL;    }};*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    Node<span class="token operator">*</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node<span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 拷贝原链表每一个节点并将新节点链到原节点后面</span>        <span class="token punctuation">{</span>            Node <span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            newNode<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            cur<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            cur <span class="token operator">=</span> newNode<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 通过原节点为新节点的random域赋值</span>        <span class="token punctuation">{</span>            Node <span class="token operator">*</span> newcur <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>random <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                newcur<span class="token operator">-</span><span class="token operator">></span>random <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                newcur<span class="token operator">-</span><span class="token operator">></span>random <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>random<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cur <span class="token operator">=</span> newcur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        Node<span class="token operator">*</span> newList <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 将新链表从原链表中分离出来</span>        <span class="token punctuation">{</span>            Node <span class="token operator">*</span> newcur <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            cur<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> newcur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                newcur<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                newcur<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> newList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220425093943577.png" alt="image-20220425093943577"></p><p>执行用时为 8 ms 的范例:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*// Definition for a Node.class Node {public:    int val;    Node* next;    Node* random;        Node(int _val) {        val = _val;        next = NULL;        random = NULL;    }};*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    Node<span class="token operator">*</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span> node <span class="token operator">=</span> head<span class="token punctuation">;</span> node <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> node <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">*</span> nodeNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            nodeNew<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            node<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> nodeNew<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span> node <span class="token operator">=</span> head<span class="token punctuation">;</span> node <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> node <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">*</span> nodeNew <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            nodeNew<span class="token operator">-</span><span class="token operator">></span>random <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>random <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">?</span> node<span class="token operator">-</span><span class="token operator">></span>random<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">:</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node<span class="token operator">*</span> headNew <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span> node <span class="token operator">=</span> head<span class="token punctuation">;</span> node <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> node <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">*</span> nodeNew <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            node<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            nodeNew<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token punctuation">(</span>nodeNew<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">?</span> nodeNew<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">:</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> headNew<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  使用for循环 + 三目运算符, 思想基本一样</p></blockquote><hr><h1 id="第三天-字符串（简单"><a href="#第三天-字符串（简单" class="headerlink" title="第三天_字符串（简单)"></a>第三天_字符串（简单)</h1><blockquote><p>  <img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/898646.jpg"></p></blockquote><h2 id="一-知识学习-2"><a href="#一-知识学习-2" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><blockquote><p>  字符串就是由字符组成的数组</p></blockquote><blockquote><p>  <strong>本质：</strong></p><ul><li>string是C++风格的字符串，而string本质上是一个类</li></ul><p>  <strong>string和char * 区别：</strong></p><ul><li>char * 是一个指针</li><li>string是一个类，类内部封装了char<em>，管理这个字符串，是一个char</em>型的容器。</li></ul></blockquote><hr><h2 id="二-题目练习-2"><a href="#二-题目练习-2" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-替换空格"><a href="#1-替换空格" class="headerlink" title="1. 替换空格"></a>1. 替换空格</h3><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426123725224.png" alt="image-20220426123725224"></p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">replaceSpace</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        string res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                res <span class="token operator">+</span><span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                res <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"%20"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426123828786.png" alt="image-20220426123828786"></p><hr><h3 id="2-左旋转字符串"><a href="#2-左旋转字符串" class="headerlink" title="2. 左旋转字符串"></a>2. 左旋转字符串</h3><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426123856996.png" alt="image-20220426123856996"></p><p><strong>解题思路:</strong></p><p>读取字符串到指定位数, 然后存储, 删除从0到指定位数的字符, 再将存储的字符串加到原字符串末尾.</p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        string temp<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            temp <span class="token operator">+</span><span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        s <span class="token operator">+</span><span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220426124351559.png" alt="image-20220426124351559"></p><p><strong>执行用时为 0 ms 的范例:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  reverse(first, end)函数，包含在#include&lt;**algorithm**&gt;里，<a href="https://so.csdn.net/so/search?q=%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4&amp;spm=1001.2101.3001.7020">命名空间</a>std, 可以反转顺序</p></blockquote><p>使用三次<code>reverse()函数</code>, </p><ul><li><p>第一次反转从开始到指定位数的字符, 如: in: <code>abcde, 2</code></p><p>out :<strong>bacde</strong>;</p></li><li><p>第二次反转指定位数后面的字符, out: <strong>baedc</strong></p></li><li><p>第三次再反转整个字符串, 从而达到目的</p></li></ul><hr><h1 id="第四天-查找算法（简单）"><a href="#第四天-查找算法（简单）" class="headerlink" title="第四天_查找算法（简单）"></a>第四天_查找算法（简单）</h1><h2 id="一-知识学习-3"><a href="#一-知识学习-3" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h3 id="散列表-HashSet"><a href="#散列表-HashSet" class="headerlink" title="散列表(HashSet)"></a>散列表(HashSet)</h3><p>散列表是一种非线性数据结构，通过利用 Hash 函数将指定的「键 <code>key</code>」映射至对应的「值 <code>value</code>」，以实现高效的元素查找。</p><blockquote><p>  设想一个简单场景：小力、小特、小扣的学号分别为 10001, 10002, 10003 。<br>  现需求从「姓名」查找「学号」。</p></blockquote><p>则可通过建立姓名为 key ，学号为 value 的散列表实现此需求，代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 初始化散列表</span>unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> dic<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加 key -> value 键值对</span>dic<span class="token punctuation">[</span><span class="token string">"小力"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10001</span><span class="token punctuation">;</span>dic<span class="token punctuation">[</span><span class="token string">"小特"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10002</span><span class="token punctuation">;</span>dic<span class="token punctuation">[</span><span class="token string">"小扣"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10003</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 从姓名查找学号</span>dic<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"小力"</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> 10001</span>dic<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"小特"</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> 10002</span>dic<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"小扣"</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -> 10003</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/1599811794-ruXMOV-Picture8.png" alt="Picture8.png"></p><h4 id="Hash-函数设计-Demo"><a href="#Hash-函数设计-Demo" class="headerlink" title="Hash 函数设计 Demo"></a>Hash 函数设计 Demo</h4><p>将三人的姓名存储至以下数组中，则各姓名在数组中的索引分别为 0, 1, 2 。</p><p>string names[] = { “小力”, “小特”, “小扣” };</p><p>此时，我们构造一个简单的 Hash 函数（ %% 为取余符号 ），公式和封装函数如下所示：</p><p><code>hash(key) = (key - 1) \% 10000</code><br><code>hash(key)=(key−1)%10000</code></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span>id <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10000</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> index<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>则我们构建了以学号为 key 、姓名对应的数组索引为 value 的散列表。利用此 Hash 函数，则可在 O(1)O(1) 时间复杂度下通过学号查找到对应姓名，即：</p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/1599811794-NfbpfW-Picture8-1.png" alt="Picture8-1.png"></p><blockquote><p>  以上设计只适用于此示例，实际的 Hash 函数需保证低碰撞率、 高鲁棒性等，以适用于各类数据和场景。</p></blockquote><hr><h3 id="七大查找算法"><a href="#七大查找算法" class="headerlink" title="七大查找算法"></a>七大查找算法</h3><ul><li><strong>1. 顺序查找</strong></li><li><a href="http://www.cnblogs.com/maybe2030/p/4715035.html#_label1"><strong>2. 二分查找</strong></a></li><li><a href="http://www.cnblogs.com/maybe2030/p/4715035.html#_label2"><strong>3. 插值查找</strong></a></li><li><a href="http://www.cnblogs.com/maybe2030/p/4715035.html#_label3"><strong>4. 斐波那契查找</strong></a></li><li><a href="http://www.cnblogs.com/maybe2030/p/4715035.html#_label4"><strong>5. 树表查找</strong></a></li><li><a href="http://www.cnblogs.com/maybe2030/p/4715035.html#_label5"><strong>6. 分块查找</strong></a></li><li><a href="http://www.cnblogs.com/maybe2030/p/4715035.html#_label6"><strong>7. 哈希查找</strong></a></li></ul><blockquote><p>  查找是在大量的信息中寻找一个特定的信息元素，在计算机应用中，查找是常用的基本运算，例如编译程序中符号表的查找。本文简单概括性的介绍了常见的七种查找算法，说是七种，其实二分查找、插值查找以及斐波那契查找都可以归为一类——插值查找。插值查找和斐波那契查找是在二分查找的基础上的优化查找算法。树表查找和哈希查找会在后续的博文中进行详细介绍。</p></blockquote><p>  <strong>查找定义</strong>：根据给定的某个值，在查找表中确定一个其关键字等于给定值的数据元素（或记录）。</p><h3 id="查找算法分类"><a href="#查找算法分类" class="headerlink" title="查找算法分类"></a><strong>查找算法分类</strong></h3><ol><li><p>静态查找和动态查找；</p><p>注：静态或者动态都是针对查找表而言的。<strong>动态表指查找表中有删除和插入操作的表。</strong></p></li><li><p>无序查找和有序查找。</p><p><strong>无序查找</strong>：被查找数列有序无序均可；</p><p>有序查找：被查找数列必须为有序数列。</p></li></ol><blockquote><p>  <strong>平均查找长度（Average Search Length，ASL）</strong>：需和指定key进行比较的关键字的个数的期望值，称为查找算法在查找成功时的平均查找长度。</p><p>  　　对于含有n个数据元素的查找表，查找成功的平均查找长度为：<code>ASL = Pi*Ci</code>的和。<br>  　　<strong>Pi</strong>：查找表中第i个数据元素的概率。<br>  　　<strong>Ci</strong>：找到第i个数据元素时已经比较过的次数。</p></blockquote><h4 id="1-顺序查找"><a href="#1-顺序查找" class="headerlink" title="1. 顺序查找"></a>1. 顺序查找</h4><blockquote><p>  说明：顺序查找适合于存储结构为顺序存储或链接存储的线性表。</p></blockquote><p><strong>基本思想</strong>：顺序查找也称为线形查找，属于无序查找算法。从数据结构线形表的一端开始，顺序扫描，依次将扫描到的结点关键字与给定值k相比较，若相等则表示查找成功；若扫描结束仍没有找到关键字等于k的结点，表示查找失败。</p><p><strong>复杂度分析</strong>：　</p><p>　　查找成功时的平均查找长度为：（假设每个数据元素的概率相等） <code>ASL = 1/n(1+2+3+…+n) = (n+1)/2 ;</code><br>　　当查找不成功时，需要n+1次比较，时间复杂度为O(n);</p><p>　　所以，顺序查找的时间复杂度为O(n)。</p><h4 id="2-二分查找"><a href="#2-二分查找" class="headerlink" title="2. 二分查找"></a>2. 二分查找</h4><p>　　<strong>说明：元素必须是有序的，如果是无序的则要先进行排序操作。</strong></p><p>　　<strong>基本思想：</strong>也称为是折半查找，属于有序查找算法。用给定值k先与中间结点的关键字比较，中间结点把线形表分成两个子表，若相等则查找成功；若不相等，再根据k与该中间结点关键字的比较结果确定下一步查找哪个子表，这样递归进行，直到查找到或查找结束发现表中没有这样的结点。</p><p>　　<strong>复杂度分析：</strong>最坏情况下，关键词比较次数为log2(n+1)，且**期望时间复杂度为O(log2n)**；</p><p>　　注：<strong>折半查找的前提条件是需要有序表顺序存储，对于静态查找表，一次排序后不再变化，折半查找能得到不错的效率。但对于需要频繁执行插入或删除操作的数据集来说，维护有序的排序会带来不小的工作量，那就不建议使用。——《大话数据结构》</strong></p><p><strong>其他查找算法后面补充</strong></p><hr><h2 id="二-题目练习-3"><a href="#二-题目练习-3" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-数组中重复的数字"><a href="#1-数组中重复的数字" class="headerlink" title="1. 数组中重复的数字"></a>1. 数组中重复的数字</h3><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220427081435148.png" alt="image-20220427081435148"></p><p><strong>解题思路:</strong></p><p>1.<strong>原地交换</strong><br>题目说明尚未被充分使用，即 在一个长度为 n 的数组 nums 里的所有数字都在 0 ~ n-1 的范围内 。 此说明含义：数组元素的 索引 和 值 是 一对多 的关系。<br>因此，可遍历数组并通过交换操作，使元素的 索引 与 值 一一对应（即 `nums[i] = i ）。因而，就能通过索引映射对应的值，起到与字典等价的作用。</p><p>遍历中，第一次遇到数字 x 时，将其交换至索引 x 处；而当第二次遇到数字 x 时，一定有 <code>nums[x] = x</code> ，此时即可得到一组重复数字。</p><blockquote><p>  <strong>算法流程：</strong><br>  遍历数组 <code>numsnums</code> ，设索引初始值为 i = 0 :</p><p>  若 <code>nums[i] = i</code>： 说明此数字已在对应索引位置，无需交换，因此跳过；<br>  若 <code>nums[nums[i]] = nums[i]</code>： 代表索引 <code>nums[i]</code> 处和索引 <code>i</code> 处的元素值都为 <code>nums[i]</code> ，即找到一组重复值，返回此值 <code>nums[i]</code> ；<br>  否则： 交换索引为 <code>i</code> 和 <code>nums[i]</code> 的元素值，将此数字交换至对应索引位置。<br>  若遍历完毕尚未返回，则返回 −1 。</p></blockquote><p><strong>复杂度分析：</strong><br>时间复杂度 O(N) ： 遍历数组使用 O(N) ，每轮遍历的判断和交换操作使用 O(1) 。<br>空间复杂度 O(1)： 使用常数复杂度的额外空间。</p><p><strong>2.利用HashSet</strong></p><p>利用数据结构特点，容易想到使用哈希表（Set）记录数组的各个数字，当查找到重复数字则直接返回。</p><blockquote><p>  <strong>算法流程：</strong><br>  初始化： 新建 HashSet ，记为 dic ；<br>  遍历数组 nums 中的每个数字 num ：<br>  当 num 在 dic中，说明重复，直接返回 num ；<br>  将 num 添加至 dic 中；<br>  返回 -1 。本题中一定有重复数字，因此这里返回多少都可以。</p></blockquote><p><strong>复杂度分析：</strong><br>时间复杂度 O(N)： 遍历数组使用 O(N) ，HashSet 添加与查找元素皆为 O(1) 。<br>空间复杂度 O(N)： HashSet 占用O(N) 大小的额外空间。</p><p><strong>实现:</strong></p><ol><li>原地交换</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 数据与下标相同</span>            <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220427084044831.png" alt="image-20220427084044831"></p><ol start="2"><li>HashSet</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> dic<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span>                     <span class="token keyword">if</span> <span class="token punctuation">(</span>dic<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> num<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            dic<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220427084019040.png" alt="image-20220427084019040"></p><p>其他范例参考:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>           <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  先让数组有序, 然后比较前后</p></blockquote><hr><h3 id="2-在排序数组中查找数字-I"><a href="#2-在排序数组中查找数字-I" class="headerlink" title="2.  在排序数组中查找数字 I"></a>2.  在排序数组中查找数字 I</h3><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220427084923052.png" alt="image-20220427084923052"></p><p><strong>解题思路:</strong></p><p>1.遍历求解</p><p>遍历<code>nums</code>并用<code>count</code>记录下<code>target</code>的次数</p><p><strong>复杂度分析：</strong><br>时间复杂度 O(N)： 遍历数组使用 O(N) ，count计数为O(1)<br>空间复杂度 O(1);</p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> iterator <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iterator <span class="token operator">!=</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iterator<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>iterator <span class="token operator">==</span> target<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220427085427712.png" alt="image-20220427085427712"></p><p>2.二分查找</p><p>排序数组 nums 中的所有数字 target 形成一个窗口，记窗口的 左 / 右边界 索引分别为 left和 right ，分别对应窗口左边 / 右边的首个元素。</p><p>本题要求统计数字 target 的出现次数，可转化为：使用二分法分别找到 左边界 leftleft 和 右边界 rightright ，易得数字 target 的数量为 right - left - 1。</p><blockquote><p>  <strong>算法解析：</strong><br>  初始化： 左边界 i = 0 ，右边界 j = len(nums) - 1 。<br>  循环二分： 当闭区间 [i, j] 无元素时跳出；<br>  计算中点 m = (i + j) / 2（向下取整）；<br>  若 nums[m] &lt; target ，则 target 在闭区间 [m + 1, j]中，因此执行 i = m + 1；<br>  若 nums[m] &gt; target ，则 target 在闭区间 [i, m - 1]中，因此执行 j = m - 1；<br>  若 nums[m] = target ，则右边界 right在闭区间 [m+1, j]中；左边界 left在闭区间 [i, m-1] 中。因此分为以下两种情况：<br>  若查找 右边界 right ，则执行 i = m + 1 ；（跳出时 i 指向右边界）<br>  若查找 左边界 left ，则执行 j = m - 1 ；（跳出时 j指向左边界）<br>  返回值： 应用两次二分，分别查找 right 和 left ，最终返回 right - left - 1right−left−1 即可。</p></blockquote><blockquote><p>  效率优化：<br>  以下优化基于：查找完右边界 right = i 后，则 nums[j]指向最右边的 target （若存在）。</p></blockquote><ol><li>查找完右边界后，可用 nums[j] = target判断数组中是否包含 target，若不包含则直接提前返回 0 ，无需后续查找左边界。</li><li>查找完右边界后，左边界 left一定在闭区间 [0, j] 中，因此直接从此区间开始二分查找即可。</li></ol><p><strong>复杂度分析：</strong><br>时间复杂度 O(logN) ： 二分法为对数级别复杂度。<br>空间复杂度 O(1)： 几个变量使用常数大小的额外空间。<br>代码：<br>可将 nums[m] = target情况合并至其他两种情况中。</p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 搜索右边界 right */</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span> i <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> j <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 若数组中无 target ，则提前返回 */</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 搜索左边界 right */</span>        i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> i <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> j <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> right <span class="token operator">-</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-0～n-1-中缺失的数字"><a href="#3-0～n-1-中缺失的数字" class="headerlink" title="3. 0～n-1 中缺失的数字"></a>3. 0～n-1 中缺失的数字</h3><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220427204205526.png" alt="image-20220427204205526"></p><p><strong>解题思路</strong><br>1.二分查找到某个值(最优解)，满足：</p><p>左子数组： <code>nums[i] = i</code><br>右子数组： <code>nums[i] != i</code></p><p>时间复杂度O(logN)</p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//使用(left + right)/2 也可以 但是要注意 left + right 可能会超过 int 表示范围</span>            <span class="token comment" spellcheck="true">//left + (right - left )/2 可以有效的 防止溢出;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             left <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                right <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220427205126432.png" alt="image-20220427205126432"></p><p>2.顺序查找</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220427205223931.png" alt="image-20220427205223931"></p><p>其他方法参考:</p><p><strong>位运算处理</strong></p><ul><li>我们知道异或具有交换律</li><li>令0~n的数与<strong>nums</strong>中的数异或，运算中除了缺失值只出现一次外，其他数都出现两次等同于与自身异或。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span>     <span class="token punctuation">{</span>          <span class="token keyword">int</span> res <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res <span class="token operator">^</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>              res <span class="token operator">^</span><span class="token operator">=</span> i<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//其是就是 比较 数组下标 和 对应的元素 是否相等，不相等即为miss的数</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220427210015051.png" alt="image-20220427210015051"></p><hr><h1 id="第五天-查找算法-中等"><a href="#第五天-查找算法-中等" class="headerlink" title="第五天_查找算法(中等)"></a>第五天_查找算法(中等)</h1><blockquote><p>  刷题日程指引: <a href="https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/px2ds5/">行百里者半九十。坚持一个月刷完，一起加油！</a></p></blockquote><h2 id="一-知识学习-4"><a href="#一-知识学习-4" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><blockquote><p>  树是一种非线性数据结构，根据子节点数量可分为 「二叉树」 和 「多叉树」，最顶层的节点称为「根节点 root」。以二叉树为例，每个节点包含三个成员变量：「值 val」、「左子节点 left」、「右子节点 right」 。</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> TreeNode <span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 节点值</span>    TreeNode <span class="token operator">*</span>left<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 左子节点</span>    TreeNode <span class="token operator">*</span>right<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 右子节点</span>    <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">val</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图所示，建立此二叉树需要实例化每个节点，并构建各节点的引用指向。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 初始化节点</span>TreeNode <span class="token operator">*</span>n1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 根节点 root</span>TreeNode <span class="token operator">*</span>n2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>TreeNode <span class="token operator">*</span>n3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>TreeNode <span class="token operator">*</span>n4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>TreeNode <span class="token operator">*</span>n5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 构建引用指向</span>n1<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> n2<span class="token punctuation">;</span>n1<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> n3<span class="token punctuation">;</span>n2<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> n4<span class="token punctuation">;</span>n2<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> n5<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1599579136-bBARpC-Picture6.png" alt="Picture6.png"></p><h3 id="二叉树查找算法"><a href="#二叉树查找算法" class="headerlink" title="二叉树查找算法"></a>二叉树查找算法</h3><blockquote><p>  ​       二叉查找树是先对待查找的数据进行生成树，确保树的左分支的值小于右分支的值，然后在就行和每个节点的父节点比较大小，查找最适合的范围。 这个算法的查找效率很高，但是如果使用这种查找方法要首先创建树。</p></blockquote><p>原理：<br>    二叉查找树（BinarySearch Tree，也叫二叉搜索树 BST，或称二叉排序树Binary Sort Tree）或者是一棵空树，或者是具有下列性质的二叉树：</p><p>   　1. 若任意节点的左子树不空，则左子树上所有结点的值均小于它的根结点的值；<br>      　2. 若任意节点的右子树不空，则右子树上所有结点的值均大于它的根结点的值；<br>  　3. 任意节点的左、右子树也分别为二叉查找树；</p><p> 　4. 没有键值相等的节点（no duplicate nodes)。</p><p>BST 中实现查找元素：<br>根据BST的特性，对于每个节点：</p><ol><li>如果目标值等于节点的值，则返回节点</li><li>如果目标值小于节点的值，则继续在左子树中搜索</li><li>如果目标值大于节点的值，则继续在右子树中搜索</li></ol><p>在上面的二叉搜索树中搜索目标值为 4 的节点<br><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/bst_search-a1.png" alt="img"></p><hr><h2 id="二-题目练习-4"><a href="#二-题目练习-4" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-二维数组中的查找"><a href="#1-二维数组中的查找" class="headerlink" title="1. 二维数组中的查找"></a>1. 二维数组中的查找</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220429133221263.png" alt="image-20220429133221263"></p><p><strong>解题思路:</strong></p><p>1.暴力遍历</p><p><strong>时间复杂度: O(NM)</strong></p><p>2.二叉树查找</p><p>如下图所示，我们将矩阵逆时针旋转 45° ，并将其转化为图形式，发现其类似于 二叉搜索树 ，即对于每个元素，其左分支元素更小、右分支元素更大。因此，通过从 “根节点” 开始搜索，遇到比 <code>target</code> 大的元素就向左，反之向右，即可找到目标值 <code>target</code> 。</p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/6584ea93812d27112043d203ea90e4b0950117d45e0452d0c630fcb247fbc4af-Picture1.png" alt="Picture1.png"></p><blockquote><p>  “根节点” 对应的是矩阵的 “左下角” 和 “右上角” 元素，本文称之为 标志数 ，以 matrix 中的 左下角元素 为标志数 flag ，则有:</p><p>  若 flag &gt; target ，则 target 一定在 flag 所在 行的上方 ，即 flag 所在行可被消去。<br>  若 flag &lt; target ，则 target 一定在 flag 所在 列的右方 ，即 flag 所在列可被消去。</p></blockquote><blockquote><p>  算法流程：<br>  从矩阵 matrix 左下角元素（索引设为 (i, j) ）开始遍历，并与目标值对比：<br>  当 matrix[i][j] &gt; target 时，执行 i– ，即消去第 i 行元素；<br>  当 matrix[i][j] &lt; target 时，执行 j++ ，即消去第 j 列元素；<br>  当 matrix[i][j] = target 时，返回 true ，代表找到目标值。</p></blockquote><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">findNumberIn2DArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220429165026207.png" alt="image-20220429165026207"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">findNumberIn2DArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">int</span> i <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span>           <span class="token punctuation">{</span>               j<span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span>            <span class="token punctuation">{</span>               i<span class="token operator">--</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:/Users/13993/AppData/Roaming/Typora/typora-user-images/image-20220429165645971.png" alt="image-20220429165645971"></p><hr><h3 id="2-旋转数组的最小数字"><a href="#2-旋转数组的最小数字" class="headerlink" title="2.  旋转数组的最小数字"></a>2.  旋转数组的最小数字</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220429170934614.png" alt="image-20220429170934614"></p><p><strong>解题思路</strong>:</p><p>1.暴力查找</p><p><strong>时间复杂度</strong>: O(N)</p><p>2.二分查找</p><p>如下图所示，寻找旋转数组的最小元素即为寻找 <strong>右排序数组</strong> 的首个元素 nums[x] ，称 x 为 <strong>旋转点</strong> 。</p><blockquote><p>  排序数组的查找问题首先考虑使用 <strong>二分法</strong> 解决，其可将 <strong>遍历法</strong> 的 <strong>线性级别</strong> 时间复杂度降低至 <strong>对数级别</strong> 。</p></blockquote><blockquote><p>  算法流程：<br>  初始化： 声明 i, j 双指针分别指向 nums 数组左右两端；<br>  循环二分： 设 m = (i + j) / 2为每次二分的中点（ “/“ 代表向下取整除法，因此恒有 i≤m&lt;j ），可分为以下三种情况：</p><ol><li>当 nums[m] &gt; nums[j] 时： m 一定在 左排序数组 中，即旋转点 x 一定在 [m + 1, j] 闭区间内，因此执行 i=m+1；</li><li>当 nums[m] &lt; nums[j] 时： m 一定在 右排序数组 中，即旋转点 x 一定在[i, m] 闭区间内，因此执行 j=m；</li><li>当 nums[m] = nums[j] 时： 无法判断 m 在哪个排序数组中，即无法判断旋转点 x 在 [i, m] 还是 [m + 1, j]区间中。解决方案： 执行 j = j - 1 缩小判断范围，分析见下文。<br>返回值： 当 i = j时跳出二分循环，并返回 旋转点的值 nums[i]即可。</li></ol></blockquote><p>复杂度分析：<br>时间复杂度 O(log 2N) ： 在特例情况下（例如 [1, 1, 1, 1]），会退化到 O(N)。<br>空间复杂度 O(1) ： i , j , m 变量使用常数大小的额外空间。</p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>num <span class="token operator">:</span> numbers<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> res<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                res <span class="token operator">=</span> num<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 低级写法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                res <span class="token operator">=</span> numbers<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220429174629219.png" alt="image-20220429174629219"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> numbers<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> numbers<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                r <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> r<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> numbers<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220429174611872.png" alt="image-20220429174611872"></p><hr><h3 id="3-第一个只出现一次的字符"><a href="#3-第一个只出现一次的字符" class="headerlink" title="3. 第一个只出现一次的字符"></a>3. 第一个只出现一次的字符</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220429174721949.png" alt="image-20220429174721949"></p><p><strong>解题思路</strong>:</p><p>1.哈希表</p><ol><li>遍历字符串 <code>s</code> ，使用哈希表统“各字符数量是否 &gt; 1&gt;1 ”。</li><li>再遍历字符串 <code>s</code> ，在哈希表中找到首个 “数量为 11 的字符”，并返回。</li></ol><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/ed093aabc9195caff6d088454eaebe3cad875e8ca4a643c004ef25e4e5e9e174-Picture1.png" alt="Picture1.png"></p><blockquote><p>  算法流程：<br>  初始化： map，记为 dic ；<br>  字符统计： 遍历字符串 s 中的每个字符 c ；<br>  若 dic 中 不包含 键(key) c ：则向 dic 中添加键值对 (c, True) ，代表字符 c 的数量为 1 ；<br>  若 dic 中 包含 键(key) c ：则修改键 c 的键值对为 (c, False) ，代表字符 c 的数量 &gt; 1。<br>  查找数量为 1 的字符： 遍历字符串 s 中的每个字符 c ；<br>  若 dic中键 c 对应的值为 True ：，则返回 c 。<br>  返回 ‘ ‘ ，代表字符串无数量为 1 的字符。</p></blockquote><p><strong>时间复杂度</strong>: O(N) ： N 为字符串 s 的长度；需遍历 s 两轮，使用 O(N)；HashMap 查找操作的复杂度为 O(1) ；<br><strong>空间复杂度</strong> O(1) ： 由于题目指出 s 只包含小写字母，因此最多有 26 个不同字符，HashMap 存储需占用 O(26) = O(1)的额外空间。</p><p>2.<strong>有序哈希表</strong></p><p>在哈希表的基础上，有序哈希表中的键值对是 按照插入顺序排序 的。基于此，可通过遍历有序哈希表，实现搜索首个 “数量为 11 的字符”。</p><p>哈希表是 去重 的，即哈希表中键值对数量 \leq≤ 字符串 s 的长度。因此，相比于方法一，方法二减少了第二轮遍历的循环次数。当字符串很长（重复字符很多）时，方法二则效率更高。</p><p>复杂度分析：<br>时间和空间复杂度均与 “方法一” 相同，而具体分析：方法一 需遍历 s 两轮；方法二 遍历 s 一轮，遍历 dic 一轮（ dic 的长度不大于 26 ）。</p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">char</span> <span class="token function">firstUniqChar</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> dic<span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> s<span class="token punctuation">)</span>       <span class="token punctuation">{</span>            dic<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> dic<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> dic<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 向dic中添加键值对(c, True)，代表字符c的数量为 1 , 若 dic 中 包含 键(key) c ：则修改键 c 的键值对为 (c, False) ，代表字符 c 的数量 > 1。</span>       <span class="token punctuation">}</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> s<span class="token punctuation">)</span>       <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>dic<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> c<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 若 dic中键 c 对应的值为 True ：，则返回 c 。</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220429180019234.png" alt="image-20220429180019234"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">char</span> <span class="token function">firstUniqChar</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> dic<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> vec<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> s<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dic<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> dic<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 未找到, 可能是target</span>            <span class="token punctuation">{</span>                vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            dic<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> dic<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> dic<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> vec<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dic<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> c<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 若 dic中键 c 对应的值为 True ：，则返回 c 。</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220429180917945.png" alt="image-20220429180917945"></p><hr><h1 id="第六天-搜索与回溯算法（简单）"><a href="#第六天-搜索与回溯算法（简单）" class="headerlink" title="第六天_搜索与回溯算法（简单）"></a>第六天_搜索与回溯算法（简单）</h1><h2 id="一-知识学习-5"><a href="#一-知识学习-5" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h3 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h3><blockquote><p>  广度优先搜索算法（Breadth-First Search，BFS）是一种盲目搜寻法，目的是系统地展开并检查图中的所有节点，以找寻结果。换句话说，它并不考虑结果的可能位置，彻底地搜索整张图，直到找到结果为止。BFS并不使用经验法则算法。</p></blockquote><p>广度优先搜索让你能够找出两样东西之间的最短距离，不过最短距离的含义有很多！使用广度优先搜索可以：</p><ol><li>编写国际跳棋AI，计算最少走多少步就可获胜；</li><li>编写拼写检查器，计算最少编辑多少个地方就可将错拼的单词改成正确的单词，如将READED改为READER需要编辑一个地方；</li><li>根据你的人际关系网络找到关系最近的医生。</li></ol><p>你经常要找出最短路径，这可能是前往朋友家的最短路径，也可能是国际象棋中把对方将死的最少步数。解决最短路径问题的算法被称为<strong>广度优先搜索</strong>。要确定如何从双子峰前往金门大桥，需要两个步骤。</p><ol><li>使用图来建立问题模型。</li><li>使用广度优先搜索解决问题。</li></ol><blockquote><p>  例子:<br>  假设你经营着一个芒果农场，需要寻找芒果销售商，以便将芒果卖给他。在Facebook，你与芒果销售商有联系吗？为此，你可在朋友中查找。</p><p>  <img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/20190425130541285.png" alt="img"></p><p>  这种查找很简单。首先，创建一个朋友名单。</p><p>  <img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/20190425130557936.png"></p><p>  然后，依次检查名单中的每个人，看看他是否是芒果销售商。</p><p>  <img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/20190425130627134.png" alt="img"></p><p>  假设你没有朋友是芒果销售商，那么你就必须在朋友的朋友中查找。</p><p>  <img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/20190425130708732.png" alt="img"></p><p>  检查名单中的每个人时，你都将其朋友加入名单。</p><p>  <img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/20190425130746766.png" alt="img"></p><p>  这样一来，你不仅在朋友中查找，还在朋友的朋友中查找。别忘了，你的目标是在你的人际关系网中找到一位芒果销售商。因此，如果Alice不是芒果销售商，就将其朋友也加入到名单中。这意味着你将在她的朋友、朋友的朋友等中查找。使用这种算法将搜遍你的整个人际关系网，直到找到芒果销售商。这就是广度优先搜索算法。</p></blockquote><hr><h2 id="二-题目练习-5"><a href="#二-题目练习-5" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-从上到下打印二叉树"><a href="#1-从上到下打印二叉树" class="headerlink" title="1. 从上到下打印二叉树"></a>1. 从上到下打印二叉树</h3><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220429203424978.png" alt="image-20220429203424978"></p><p><strong>解题思路</strong>：</p><p>题目要求的二叉树的 <strong>从上至下</strong> 打印（即按层打印），又称为二叉树的 <strong>广度优先搜索</strong>（BFS）。<br>BFS 通常借助 <strong>队列</strong> 的先入先出特性来实现。</p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/a872b50fa42011748437ec9123d8f77a104b3d528880efca8b212f91d115f835-Picture1.png" alt="Picture1.png"></p><blockquote><p>  <strong>算法流程：</strong><br>  特例处理： 当树的根节点为空，则直接返回空列表 [] ；<br>  初始化： 打印结果列表 res = [] ，包含根节点的队列 queue = [root] ；<br>  BFS 循环： 当队列 queue 为空时跳出；<br>  出队： 队首元素出队，记为 node；<br>  打印： 将 node.val 添加至列表 tmp 尾部；<br>  添加子节点： 若 node 的左（右）子节点不为空，则将左（右）子节点加入队列 queue ；<br>  返回值： 返回打印结果列表 res 即可。</p></blockquote><p><strong>复杂度分析：</strong><br>时间复杂度 O(N)： N 为二叉树的节点数量，即 BFS 需循环 N次。<br>空间复杂度 O(N) ： 最差情况下，即当树为平衡二叉树时，最多有 N/2 个树节点同时在 queue 中，使用 O(N)大小的额外空间。</p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> que<span class="token punctuation">;</span>        que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            TreeNode<span class="token operator">*</span> node <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span> que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span> que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220429205407937.png" alt="image-20220429205407937"></p><hr><h3 id="2-从上到下打印二叉树-II"><a href="#2-从上到下打印二叉树-II" class="headerlink" title="2. 从上到下打印二叉树 II"></a>2. 从上到下打印二叉树 II</h3><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220429205019586.png" alt="image-20220429205019586"></p><p><strong>解题思路:</strong></p><p>本题与上一题仅有微小区别: 即本题需将 <strong>每一层打印到一行</strong> 。</p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/a58477c74c96779c265ce3028def7625d16042895d2c21f7fb0293df7b213276-Picture1.png" alt="Picture1.png"></p><p><strong>每层打印到一行：</strong> 将本层全部节点打印到一行，并将下一层全部节点加入队列，以此类推，即可分为多行打印。</p><blockquote><p>  算法流程：<br>  特例处理： 当根节点为空，则返回空列表 [] ；<br>  初始化： 打印结果列表 res = [] ，包含根节点的队列 queue = [root] ；<br>  BFS 循环： 当队列 queue 为空时跳出；<br>  新建一个临时列表 tmp ，用于存储当前层打印结果；<br>  当前层打印循环： 循环次数为当前层节点数（即队列 queue 长度）；<br>  出队： 队首元素出队，记为 node；<br>  打印： 将 node.val 添加至 tmp 尾部；<br>  添加子节点： 若 node 的左（右）子节点不为空，则将左（右）子节点加入队列 queue ；<br>  将当前层结果 tmp 添加入 res 。</p><p>  <strong>返回值：</strong> 返回打印结果列表 <code>res</code> 即可。</p></blockquote><p>复杂度分析：<br>时间复杂度 O(N) ： N 为二叉树的节点数量，即 BFS 需循环 N 次。<br>空间复杂度 O(N) ： 最差情况下，即当树为平衡二叉树时，最多有 N/2个树节点同时在 queue 中，使用 O(N)大小的额外空间。</p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> que<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> temp<span class="token punctuation">;</span>        que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                TreeNode<span class="token operator">*</span> node <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> temp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  如果写成for(int i = 0;i&lt;queue.size();i++),则每次进行for循环时，条件判断都会算一下queue.size()，但是每次for循环后queue长度可能会发生变化（添加左右节点），queue.size()一直在变化；</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220429210627203.png" alt="image-20220429210627203"></p><hr><h3 id="3-从上到下打印二叉树-III"><a href="#3-从上到下打印二叉树-III" class="headerlink" title="3. 从上到下打印二叉树 III"></a>3. 从上到下打印二叉树 III</h3><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220429210759722.png" alt="image-20220429210759722"></p><p><strong>解题思路:</strong></p><p>本题额外要求 <strong>打印顺序交替变化</strong></p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/9513dcb034f5dcdea947a2f667b3d380df4f8732da6397778e00718b77584010-Picture1.png" alt="Picture1.png"></p><p>层序遍历 + 双端队列</p><ul><li>利用双端队列的两端皆可添加元素的特性，设打印列表（双端队列）temp，并规定：<ul><li>奇数层 则添加至 <code>tmp</code> <strong>尾部</strong> ，</li><li>偶数层 则添加至 <code>tmp</code> <strong>头部</strong> 。</li></ul></li></ul><blockquote><p>  算法流程：<br>  特例处理： 当树的根节点为空，则直接返回空列表 [] ；<br>  初始化： 打印结果空列表 res ，包含根节点的双端队列 deque ；<br>  BFS 循环： 当 deque 为空时跳出；<br>  新建列表 tmp ，用于临时存储当前层打印结果；<br>  当前层打印循环： 循环次数为当前层节点数（即 deque 长度）；<br>  出队： 队首元素出队，记为 node；<br>  打印： 若为奇数层，将 node.val 添加至 tmp 尾部；否则，添加至 tmp 头部；<br>  添加子节点： 若 node 的左（右）子节点不为空，则加入 deque ；<br>  将当前层结果 tmp 转化为 list 并添加入 res ；<br>  返回值： 返回打印结果列表 res 即可；</p></blockquote><p><strong>复杂度分析：</strong><br>时间复杂度 O(N) ： N 为二叉树的节点数量，即 BFS 需循环 N 次，占用 O(N) ；双端队列的队首和队尾的添加和删除操作的时间复杂度均为 O(1) 。<br>空间复杂度 O(N) ： 最差情况下，即当树为满二叉树时，最多有 N/2 个树节点 同时 在 deque 中，使用 O(N) 大小的额外空间。</p><blockquote><p>  需要判断每个节点的所在层奇偶性，即冗余了 N 次判断。</p><p>  优化: 通过将奇偶层逻辑拆分，可以消除冗余的判断。</p></blockquote><blockquote><p>  <strong>算法流程(优化)：</strong><br>  与方法一对比，仅 BFS 循环不同。</p><p>  BFS 循环： 循环打印奇 / 偶数层，当 deque 为空时跳出；<br>  打印奇数层： 从左向右 打印，先左后右 加入下层节点；<br>  若 deque 为空，说明向下无偶数层，则跳出；<br>  打印偶数层： 从右向左 打印，先右后左 加入下层节点；</p></blockquote><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>        deque <span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> dque<span class="token punctuation">;</span>        vector <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> temp<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dque<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>dque<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 打印奇数层</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> dque<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 左到y</span>                TreeNode <span class="token operator">*</span> node <span class="token operator">=</span> dque<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dque<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span> dque<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span> dque<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dque<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 打印偶数层</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> dque<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 右到左</span>                TreeNode <span class="token operator">*</span> node <span class="token operator">=</span> dque<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dque<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span> dque<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span> dque<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="第七天-搜索与回溯算法（简单）"><a href="#第七天-搜索与回溯算法（简单）" class="headerlink" title="第七天_搜索与回溯算法（简单）"></a>第七天_搜索与回溯算法（简单）</h1><blockquote><p>  刷题日程指引: <a href="https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/px2ds5/">行百里者半九十。坚持一个月刷完，一起加油！</a></p></blockquote><h2 id="一-知识学习-6"><a href="#一-知识学习-6" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h3 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h3><blockquote><p>  <strong>深度优先搜索算法</strong>（Depth First Search，简称<a href="https://so.csdn.net/so/search?q=DFS&amp;spm=1001.2101.3001.7020">DFS</a>）：一种用于遍历或搜索树或图的算法。 沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点v的所在边都己被探寻过或者在搜寻时结点不满足条件，搜索将回溯到发现节点v的那条边的起始节点。整个进程反复进行直到所有节点都被访问为止。属于盲目搜索,最糟糕的情况算法时间复杂度为O(N!)。</p><p>  <strong>所谓DFS就是指：优先考虑深度，换句话说就是一条路走到黑，直到无路可走的情况下，才会选择回头，然后重新选择一条路</strong></p></blockquote><p>例子:</p><p>全排列: 输入一个数n，输出n的全排列</p><p>假如有编号为1,2,3的3张扑克牌和编号为1,2,3的3个盒子。将这3张扑克牌分别放入3个盒子一共有几种不同的放法呢？</p><p>约定：每次到一个盒子面前时，都先放1号，2号，最后放3号</p><p><strong>1.第一种：</strong></p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/20200815181435796.png" alt="首先呢，小明手中有3张扑克牌"></p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/20200815181540751.png" alt="先到第1个盒子，将1号扑克牌放在第1个盒子。"></p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/20200815181625696.png" alt="放好后，小明继续向前走一步，来到了2号盒子，按照之前的约定放2号扑克牌。"></p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/20200815181745240.png" alt="放好后，小明又继续向前一步，把3号扑克牌放入3号盒子。此时就已经完成了一种排列。"></p><p>完成第一种后,还没有结束！小明便要回头了，开始重新选择（DFS的思想），这里要注意的，不是把所有的牌都取出来重新放，这样就不符合<strong>DFS</strong>的思想了。</p><p><strong>2.第2种</strong><br>好的！按照上面的逻辑。小明将3号盒子的3号扑克牌取出，但手上仍然只有3号扑克牌。<br>所以小明只好回到2号盒子，收回2号扑克牌，此时手中有2,3号扑克牌。<br>按照之前的约定，往2号盒子放3号扑克牌，然后小明又继续往前走，此时手里只有2号扑克牌，把2号扑克牌放入3号盒子里，此时完成了第二种排序。*<br>按照这种逻辑，我们不难求出所有排列“123”，“132”，“213”，“231”，“312”，“321”;</p><blockquote><p>  BFS是按照层来遍历，“ 如果你愿意一层一层一层的剥开我的心”对！就像洋葱，一层层地遍历。那还有其他的遍历方式吗？当然还有，就是<strong>递归遍历</strong></p></blockquote><p><strong>DFS—深度优先遍历</strong><br>二叉树的深度优先遍历方式有三个：</p><ul><li>前序遍历<br>PreOrder(T) = T的根结点+PreOrder（T的左子树）+PreOrder（T的右子树）</li><li>-中序遍历<br>InOrder(T) = InOrder（T的左子树）+ T的根结点 + InOrder（T的右子树）</li><li>-后序遍历<br>PostOrder(T) =PostOrder（T的左子树）+ PostOrder（T的右子树）+ T的根结点</li></ul><p><strong>可见这些遍历的方式都运用了递归的方式。</strong></p><p><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">LeetCode144. 二叉树的前序遍历链接入口</a></p><p><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">LeetCode94. 二叉树的中序遍历链接入口</a></p><p><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/">LeetCode145. 二叉树的后序遍历链接入口</a></p><h3 id="二叉树镜像"><a href="#二叉树镜像" class="headerlink" title="二叉树镜像"></a><strong>二叉树镜像</strong></h3><blockquote><p>  二叉树镜像定义： 对于二叉树中任意节点 root，设其左 / 右子节点分别为 left, right；则在二叉树的镜像中的对应 root节点，其左 / 右子节点分别为 right, left。</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/20717714d97fa04d509e4f0525a3089efefc2ea02cc08ce92b77978e9b51f15f-Picture1.png" alt="Picture1.png"></p><h3 id="对称二叉树"><a href="#对称二叉树" class="headerlink" title="对称二叉树"></a>对称二叉树</h3><blockquote><p>  <strong>对称二叉树定义：</strong> 对于树中 任意两个对称节点 L 和 R ，一定有：</p><p>  L.val = R.val ：即此两对称节点值相等。<br>  L.left.val = R.right.val ：即 L 的 左子节点 和 R 的 右子节点 对称；<br>  L.right.val = R.left.val ：即 L 的 右子节点 和 R 的 左子节点 对称。</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/1599398062-PbkpuX-Picture1.png" alt="Picture1.png"></p><hr><h2 id="二-题目练习-6"><a href="#二-题目练习-6" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-树的子结构"><a href="#1-树的子结构" class="headerlink" title="1. 树的子结构"></a>1. 树的子结构</h3><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220430155705066.png" alt="image-20220430155705066"></p><p><strong>解题思路:</strong></p><p>若树 B 是树 A 的子结构，则子结构的根节点可能为树 A 的任意一个节点。因此，判断树 B 是否是树 A 的子结构，需完成以下两步工作：</p><p>先序遍历树 A 中的每个节点 n_A；（对应函数 <code>isSubStructure(A, B)</code>）<br>判断树<strong>以 n_A为根节点的子树</strong> 是否包含树 <code>B</code> 。（对应函数 <code>recur(A, B)</code>）</p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/1599290566-VhWsiQ-Picture1.png" alt="Picture1.png"></p><blockquote><p>  <strong>算法流程：</strong></p><p>  recur(A, B) 函数：</p><ol><li>终止条件：<ol><li>当节点 B 为空：说明树 B 已匹配完成（越过叶子节点），因此返回 true ；</li><li>当节点 A 为空：说明已经越过树 A 的叶节点，即匹配失败，返回 false ；</li><li>当节点 A 和 B 的值不同：说明匹配失败，返回 false ；</li></ol></li><li>返回值：<ol><li>判断 A 和 B 的 左子节点 是否相等，即 recur(A.left, B.left) ；</li><li>判断 A 和 B 的 右子节点 是否相等，即 recur(A.right, B.right) ；</li></ol></li></ol><p>  isSubStructure(A, B) 函数：</p><ol><li>特例处理： 当 树 A 为空 或 树 B 为空 时，直接返回 false ；</li><li>返回值： 若树 B 是树 A 的子结构，则必满足以下三种情况之一，因此用或 || 连接；<ol><li>以 节点 A 为根节点的子树 包含树 B ，对应 recur(A, B)；</li><li>树 B 是 树 A 左子树 的子结构，对应 isSubStructure(A.left, B)；</li><li>树 B 是 树 A 右子树 的子结构，对应 isSubStructure(A.right, B)；</li></ol></li></ol><blockquote><p>  以上 2. 3. 实质上是在对树 A 做 先序遍历 。</p></blockquote></blockquote><p><strong>复杂度分析：</strong><br>时间复杂度 O(MN) ： 其中 M, N 分别为树 A 和 树 B 的节点数量；先序遍历树 A 占用 O(M) ，每次调用 recur(A, B) 判断占用 O(N) 。<br>空间复杂度 O(M) ： 当树 A 和树 B 都退化为链表时，递归调用深度最大。当 M≤N 时，遍历树 A 与递归判断的总递归深度为 M ；当 M&gt;N时，最差情况为遍历至树 A 的叶节点，此时总递归深度为 M。</p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isSubStructure</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> A<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> B<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> B <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isSubStructure</span><span class="token punctuation">(</span>A<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isSubStructure</span><span class="token punctuation">(</span>A<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">recur</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> A<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> B<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>B <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> A<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">!=</span> B<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// return (A->left == B->left &amp;&amp; A->right == B->right) ? true : false;</span>        <span class="token comment" spellcheck="true">// 以下是高级写法</span>        <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span>A<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> B<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">recur</span><span class="token punctuation">(</span>A<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> B<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220430162344187.png" alt="image-20220430162344187"></p><hr><h3 id="2-二叉树的镜像"><a href="#2-二叉树的镜像" class="headerlink" title="2. 二叉树的镜像"></a>2. 二叉树的镜像</h3><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220430162543617.png" alt="image-20220430162543617"></p><p><strong>解题思路:</strong></p><p><strong>1.递归法</strong></p><ul><li>根据二叉树镜像的定义，考虑递归遍历（dfs）二叉树，交换每个节点的左 / 右子节点，即可生成二叉树的镜像。</li></ul><blockquote><p>  递归解析：</p><ol><li>终止条件： 当节点 root为空时（即越过叶节点），则返回 null；</li><li>递推工作：<ol><li>初始化节点 tmp，用于暂存 root的左子节点；</li><li>开启递归 右子节点 mirrorTree(root.right)，并将返回值作为 root的 左子节点 。</li><li>开启递归 左子节点 mirrorTree(tmp)，并将返回值作为 root的 右子节点 。</li></ol></li><li>返回值： 返回当前节点 root；</li></ol><blockquote><p>  Q： 为何需要暂存 root 的左子节点？<br>  A： 在递归右子节点 “root.left = mirrorTree(root.right);” 执行完毕后， root.left 的值已经发生改变，此时递归左子节点 mirrorTree(root.left)则会出问题。</p></blockquote></blockquote><p>复杂度分析：<br>时间复杂度 O(N)： 其中 N 为二叉树的节点数量，建立二叉树镜像需要遍历树的所有节点，占用 O(N)时间。<br>空间复杂度 O(N)： 最差情况下（当二叉树退化为链表），递归时系统需使用 O(N)大小的栈空间。</p><p><strong>2.辅助栈（或队列）</strong></p><ul><li>利用栈（或队列）遍历树的所有节点 node，并交换每个 node的左 / 右子节点。</li></ul><blockquote><p>  <strong>算法流程：</strong></p><ol><li>特例处理： 当 root 为空时，直接返回 null ；</li><li>初始化： 栈（或队列），本文用栈，并加入根节点 root 。</li><li>循环交换： 当栈 stack 为空时跳出；<ol><li>出栈： 记为 node；</li><li>添加子节点： 将 node 左和右子节点入栈；</li><li>交换： 交换 node 的左 / 右子节点。</li></ol></li><li>返回值： 返回根节点 root 。</li></ol></blockquote><p>复杂度分析：<br>时间复杂度 O(N) ： 其中 N 为二叉树的节点数量，建立二叉树镜像需要遍历树的所有节点，占用 O(N) 时间。<br>空间复杂度 O(N) ： 如下图所示，最差情况下，栈 stack 最多同时存储 (N+1)/2个节点，占用 O(N)额外空间。</p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/1614450330-bTAcyj-Picture0.png" alt="Picture0.png"></p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">mirrorTree</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        TreeNode<span class="token operator">*</span> temp <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span>        root<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> <span class="token function">mirrorTree</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> <span class="token function">mirrorTree</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220430165722375.png" alt="image-20220430165722375"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">mirrorTree</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span> <span class="token operator">></span> stk<span class="token punctuation">;</span>        stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            TreeNode<span class="token operator">*</span> node <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            TreeNode<span class="token operator">*</span> temp <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span>            node<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">;</span>            node<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220430170935957.png" alt="image-20220430170935957"></p><hr><h3 id="3-对称的二叉树"><a href="#3-对称的二叉树" class="headerlink" title="3. 对称的二叉树"></a>3. 对称的二叉树</h3><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220430171015514.png" alt="image-20220430171015514"></p><p><strong>解题思路:</strong></p><p>根据对称二叉树的规律，考虑从顶至底递归，判断每对左右节点是否对称，从而判断树是否为对称二叉树。</p><blockquote><p>  算法流程：<br>  isSymmetric(root) ：</p><ul><li>特例处理： 若根节点 root 为空，则直接返回 true 。</li><li>返回值： 即 recur(root.left, root.right) ;</li></ul><p>  recur(L, R) ：</p><ul><li>终止条件：<ul><li>当 L 和 R 同时越过叶节点： 此树从顶至底的节点都对称，因此返回 true ；</li><li>当 L 或 R 中只有一个越过叶节点： 此树不对称，因此返回 false ；</li><li>当节点 L 值 != 节点 R 值： 此树不对称，因此返回 false ；</li></ul></li><li>递推工作：<ul><li>判断两节点 L.left 和 R.right 是否对称，即 recur(L.left, R.right) ；</li><li>判断两节点 L.right 和 R.left 是否对称，即 recur(L.right, R.left) ；</li></ul></li><li>返回值： 两对节点都对称时，才是对称树，因此用与逻辑符 &amp;&amp; 连接。</li></ul></blockquote><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">recur</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> L<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> R<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> R <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> R <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> L<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">!=</span> R<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span>L<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> R<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">recur</span><span class="token punctuation">(</span>L<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> R<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220430172100882.png" alt="image-20220430172100882"></p><hr><h1 id="第八天-动态规划（简单）"><a href="#第八天-动态规划（简单）" class="headerlink" title="第八天_动态规划（简单）"></a>第八天_动态规划（简单）</h1><blockquote><p>  <img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/1232514.png"></p></blockquote><h2 id="一-知识学习-7"><a href="#一-知识学习-7" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><blockquote><p>  动态规划是算法与数据结构的重难点之一，其包含了「分治思想」、「空间换时间」、「最优解」等多种基石算法思想</p></blockquote><p><strong>动态规划特点</strong><br>「分治」是算法中的一种基本思想，其通过将<strong>原问题分解为子问题</strong>，不断递归地将子问题分解为更小的子问题，并通过<strong>组合子问题的解</strong>来得到原问题的解。</p><p>类似于分治算法，「动态规划」也通过组合子问题的解得到原问题的解。不同的是，适合用动态规划解决的问题具有「重叠子问题」和「最优子结构」两大特性。</p><p><strong>重叠子问题</strong><br>动态规划的子问题是有重叠的，即各个子问题中包含重复的更小子问题。若使用暴力法穷举，求解这些相同子问题会产生大量的重复计算，效率低下。</p><h4 id="重叠子问题示例：斐波那契数列"><a href="#重叠子问题示例：斐波那契数列" class="headerlink" title="重叠子问题示例：斐波那契数列"></a><strong>重叠子问题示例：斐波那契数列</strong></h4><blockquote><p>  斐波那契数形成的数列为 [0,1,1,2,3,5,8,13,⋯] ，数学定义如下：</p><p>  F_0 = 0  </p><p>  F_1 = 1 </p><p>  F_n = F{n-1} + F{n-2} </p></blockquote><p><strong>解题思路:</strong></p><p><strong>1.暴力递归</strong></p><p>设斐波那契数列第 n 个数字为 f(n) 。根据数列定义，可得 f(n) = f(n - 1) + f(n - 2)，且第 0 , 1 个斐波那契数分别为 f(0) = 0, f(1) = 1 。</p><p>我们很容易联想到使用分治思想来求取 f(n)f(n) ，即将求原问题 f(n) 分解为求子问题 f(n-1)和 f(n-2)，向下递归直至已知的 f(0) 和 f(1) ，最终组合这些子问题求取原问题 f(n)</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回 f(0)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回 f(1)</span>    <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 分解为两个子问题求解</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 超时</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/1635075778-GADtbi-Picture1.png" alt="Picture1.png"></p><p>如上图所示，为暴力递归求斐波那契数 f(5)形成的二叉树，树中的每个节点代表着执行了一次 fibonacci() 函数，且有：</p><ul><li>执行一次 fibonacci() 函数的时间复杂度为 O(1) ；</li></ul><p>二叉树节点数为指数级 O(2^n)<br>因此，暴力递归的总体时间复杂度为 O(2^n) 。此方法效率低下，随着 nn的增长产生指数级爆炸。</p><p><strong>2.记忆化递归</strong></p><p>观察发现，暴力递归中的子问题多数都是重叠子问题，即：</p><blockquote><p>  f(n)=f(n−1)+f(n−2)<br>  f(n−1)=f(n−2)+f(n−3)<br>  f(n−2)=f(n−3)+f(n−4)<br>  ⋯<br>  以此类推</p></blockquote><p>这些重叠子问题产生了大量的递归树节点，其不应被重复计算。实际上，可以在递归中第一次求解子问题时，就将它们保存；后续递归中再次遇到相同子问题时，直接访问内存赋值即可。</p><pre><code>int fibonacci(int n, vector&lt;int&gt; dp) {    if (n == 0) return 0;           // 返回 f(0)    if (n == 1) return 1;           // 返回 f(1)    if (dp[n] != 0) return dp[n];   // 若 f(n) 以前已经计算过，则直接返回记录的解    dp[n] = fibonacci(n - 1, dp) + fibonacci(n - 2, dp); // 将 f(n) 则记录至 dp    return dp[n];}// 求第 n 个斐波那契数int fibonacciMemorized(int n) {    vector&lt;int&gt; dp(n + 1, 0); // 用于保存 f(0) 至 f(n) 问题的解    return fibonacci(n, dp);}</code></pre><p>如下图所示，应用记忆化递归方法后，递归树中绝大部分节点被剪枝。此时，fibonacci() 函数的调用次数从 O(2^n)指数级别降低至 O(n) 线性级别，时间复杂度大大降低。</p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/1635075778-pJXkPc-Picture2.png" alt="Picture2.png"></p><p>3.动态规划</p><p>递归本质上是基于分治思想的从顶至底的解法。借助记忆化递归思想，可应用动态规划从底至顶求取 f(n)，代码如下所示。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 求第 n 个斐波那契数</span><span class="token keyword">int</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 若求 f(0) 则直接返回 0</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 初始化 dp 列表</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 初始化 f(0), f(1)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 状态转移求取 f(2), f(3), ..., f(n) </span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 返回 f(n)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>动态规划在第一次求解某子问题时，会将子问题的解保存；后续遇到重叠子问题时，则直接通过查表获取解，保证每个<strong>独立子问题只被计算一次</strong>，从而降低算法的时间复杂度。</p><hr><p><strong>最优子结构</strong><br>如果一个问题的最优解可以由其子问题的最优解组合构成，并且这些子问题可以独立求解，那么称此问题具有最优子结构。</p><p>动态规划从基础问题的解开始，不断迭代<strong>组合、选择子问题的最优解</strong>，最终得到原问题最优解。</p><h2 id="二-题目练习-7"><a href="#二-题目练习-7" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-斐波那契数列"><a href="#1-斐波那契数列" class="headerlink" title="1. 斐波那契数列"></a>1. 斐波那契数列</h3><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220501102703899.png" alt="image-20220501102703899"></p><p>解题思路:</p><p>采用<strong>动态规划</strong></p><p>循环求余法：<br>大数越界： 随着 n 增大, f(n) 会超过 Int32 甚至 Int64 的取值范围，导致最终的返回值错误。</p><p>求余运算规则： 设正整数 x, y, p，求余符号为⊙ ，则有 (x+y)⊙p=(x⊙p+y⊙p)⊙p 。</p><p>解析： 根据以上规则，可推出f(n)⊙p=[f(n−1)⊙p+f(n−2)⊙p]⊙p ，从而可以在循环过程中每次计算 sum=(a+b)⊙1000000007 ，此操作与最终返回前取余等价。</p><p>复杂度分析：</p><p>时间复杂度 O(n) ： 计算 f(n) 需循环 n 次，每轮循环内计算操作使用 O(1) 。<br>空间复杂度 O(N) ： 数组dp使用N的空间;</p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 若求 f(0) 则直接返回 0</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 初始化 dp 列表</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 初始化 f(0), f(1)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 状态转移求取 f(2), f(3), ..., f(n) </span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220501110203286.png" alt="image-20220501110203286"></p><p><strong>空间内存优化版本:</strong></p><p>空间复杂度 O(1) ： 几个标志变量使用常数大小的额外空间。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> sum<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sum <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> b<span class="token punctuation">;</span>            b <span class="token operator">=</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220501110420369.png" alt="image-20220501110420369"></p><hr><h3 id="2-青蛙跳台阶问题"><a href="#2-青蛙跳台阶问题" class="headerlink" title="2. 青蛙跳台阶问题"></a>2. 青蛙跳台阶问题</h3><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220501110605583.png" alt="image-20220501110605583"></p><p><strong>解题思路:</strong><br>设跳上 n 级台阶有 f(n) 种跳法。在所有跳法中，青蛙的最后一步只有两种情况： 跳上 1 级或 2 级台阶。</p><p>当为 1 级台阶： 剩 n-1 个台阶，此情况共有 f(n-1) 种跳法；<br>当为 2 级台阶： 剩 n-2 个台阶，此情况共有 f(n-2)种跳法。</p><p>由此, 可转化为<strong>斐波那契数列问题</strong></p><blockquote><p>  区别:</p><ul><li>青蛙跳台阶问题： f(0)=1 f(1)=1 , f(2)=2 ；</li><li>斐波那契数列问题： f(0)=0 , f(1)=1 , f(2)=1 。</li></ul></blockquote><p>复杂度分析：</p><p>时间复杂度 O(n) ： 计算 f(n) 需循环 n 次，每轮循环内计算操作使用 O(1) 。<br>空间复杂度 O(N) ： 数组dp使用N的空间;</p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/1599883153-UckfTw-Picture1.png" alt="Picture1.png"></p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numWays</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220501114501605.png" alt="image-20220501114501605"></p><p><strong>空间内存优化版本:</strong></p><p>空间复杂度 O(1) ： 几个标志变量使用常数大小的额外空间。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numWays</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> sum<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sum <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> b<span class="token punctuation">;</span>            b <span class="token operator">=</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-股票的最大利润"><a href="#3-股票的最大利润" class="headerlink" title="3. 股票的最大利润"></a>3. 股票的最大利润</h3><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220501111755367.png" alt="image-20220501111755367"></p><p><strong>解题思路:</strong></p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220501112220955.png" alt="image-20220501112220955"></p><blockquote><p>  动态规划解析：</p><p>  状态定义： 设动态规划列表 dp ，dp[i]代表以 prices[i]为结尾的子数组的最大利润（以下简称为 前 i 日的最大利润 ）。<br>  转移方程： 由于题目限定 “买卖该股票一次” ，因此前 i日最大利润 dp[i]等于前 i - 1日最大利润 dp[i-1] 和第 i日卖出的最大利润中的最大值。<br>  dp[i] = max(dp[i - 1], prices[i] - min(prices[0:i])) </p><p>  前 i 日最大利润 = max(前 (i-1) 日最大利润, 第 i 日价格 - 前 i 日最低价格)</p><p>  初始状态： dp[0] = 0，即首日利润为 0 ；<br>  返回值： dp[n - 1]，其中 n 为 dp列表长度。</p></blockquote><p>复杂度分析：</p><p>时间复杂度 O(n) ： 计算 f(n) 需循环 n 次，每轮循环内计算操作使用 O(1) 。<br>空间复杂度 O(N) ： 数组dp使用N的空间;</p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 只有1天怎么买卖?</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> dp<span class="token punctuation">;</span>        dp<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span>prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cost <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cost <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>cost<span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> cost<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220501114517412.png" alt="image-20220501114517412"></p><p><strong>空间内存优化版本:</strong></p><p>空间复杂度 O(1) ： 几个标志变量使用常数大小的额外空间。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> cost <span class="token operator">=</span> INT_MAX<span class="token punctuation">,</span> profit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> price <span class="token operator">:</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cost <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>cost<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>            profit <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>profit<span class="token punctuation">,</span> price <span class="token operator">-</span> cost<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> profit<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220501114529197.png" alt="image-20220501114529197"></p><hr><h1 id="第九天-动态规划-中等"><a href="#第九天-动态规划-中等" class="headerlink" title="第九天_动态规划(中等)"></a>第九天_动态规划(中等)</h1><blockquote><p>  <img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/1212395.png"></p></blockquote><h2 id="一-知识学习-8"><a href="#一-知识学习-8" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/Diana.png" alt="没什么要学的"></p><h2 id="二-题目练习-8"><a href="#二-题目练习-8" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-连续子数组的最大和"><a href="#1-连续子数组的最大和" class="headerlink" title="1. 连续子数组的最大和"></a>1. 连续子数组的最大和</h3><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220502150950334.png" alt="image-20220502150950334"></p><p><strong>解题思路:</strong></p><p>动态规划是本题的最优解法，以下按照标准流程解题。</p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220502151330317.png" alt="解题流程"></p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/77d1aa6a444743d3c8606ac951cd7fc38faf68a62064fd2639df517cd666a4d0-Picture1.png" alt="Picture1.png"></p><p>实现</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> dp<span class="token punctuation">;</span>        dp<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;</span> temp<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                res <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220502153026571.png" alt="image-20220502153026571"></p><p><strong>空间内存优化版本:</strong></p><p>空间复杂度 O(1) ： 几个标志变量使用常数大小的额外空间。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> res<span class="token punctuation">)</span> res <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220502153702191.png" alt="image-20220502153702191"></p><hr><h3 id="2-礼物的最大价值"><a href="#2-礼物的最大价值" class="headerlink" title="2. 礼物的最大价值"></a>2. 礼物的最大价值</h3><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/1662cdf7aafd8c9ed6e1eadc41bfc9adf58ea808e11f1a3dd2e8ba4632b9d1ac-Picture1.png" alt="Picture1.png"></p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220502154533328.png" alt="image-20220502154533328"></p><p>实现: </p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxValue</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> i <span class="token operator">&amp;&amp;</span> <span class="token number">0</span> <span class="token operator">==</span> j<span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> grid<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                        grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> grid<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220502164846692.png" alt="image-20220502164846692"></p><p>使dp数组比grid数组多一行一列，初始化为0，这样既可避免判断是不是在边界的问题:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxValue</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                         <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220502165012493.png" alt="image-20220502165012493"></p><hr><h1 id="第十天-动态规划-中等"><a href="#第十天-动态规划-中等" class="headerlink" title="第十天_动态规划(中等)"></a>第十天_动态规划(中等)</h1><blockquote><p>  <img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/1216499.jpg"></p></blockquote><h2 id="一-知识学习-9"><a href="#一-知识学习-9" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h3 id="lt-algorithm-gt-中的最大值最小值"><a href="#lt-algorithm-gt-中的最大值最小值" class="headerlink" title="<algorithm>中的最大值最小值"></a>&lt;algorithm&gt;中的最大值最小值</h3><ul><li>max() : 返回最大值</li><li>min(): 返回最小值</li><li>max_element()返回最大值的地址, 对容器就是<code>iterator</code></li><li>min_element()返回最小值的地址, 对容器就是<code>iterator</code></li></ul><h3 id="string字符串比较"><a href="#string字符串比较" class="headerlink" title="string字符串比较"></a>string字符串比较</h3><ul><li>字符串之间的比较</li></ul><p><strong>比较方式：</strong></p><ul><li>字符串比较是按字符的ASCII码进行对比</li></ul><p>= 返回   0</p><p>&gt; 返回   1 </p><p>&lt; 返回  -1</p><p><strong>函数原型：</strong></p><ul><li><code>int compare(const string &amp;s) const; </code>  //与字符串s比较</li><li><code>int compare(const char *s) const;</code>      //与字符串s比较</li></ul><h2 id="二-题目练习-9"><a href="#二-题目练习-9" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-把数字翻译成字符串"><a href="#1-把数字翻译成字符串" class="headerlink" title="1. 把数字翻译成字符串"></a>1. 把数字翻译成字符串</h3><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220503080557064.png" alt="image-20220503080557064"></p><p>解题思路:</p><p><strong>1.动态规划</strong></p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/1603462412-iUcKzA-Picture1.png" alt="Picture1.png"></p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/1603461843-qyOiIi-Picture8.png" alt="img"></p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">translateNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        string s <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string tmp <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> tmp<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token string">"25"</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220503082321077.png" alt="image-20220503082321077"></p><p><strong>空间优化版本</strong></p><p>由于 dp[i] 只与 dp[i - 1] 有关，因此可使用两个变量 a, b 分别记录 dp[i] , dp[i - 1]，两变量交替前进即可。此方法可省去 dp 列表使用的 O(N) 的额外空间。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">translateNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        string s <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            string tmp <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> tmp<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token string">"25"</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">?</span> a <span class="token operator">+</span> b <span class="token operator">:</span> a<span class="token punctuation">;</span>            b <span class="token operator">=</span> a<span class="token punctuation">;</span>            a <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.数字求余</strong></p><blockquote><p>  上述方法虽然已经节省了 dp列表的空间占用，但字符串 s仍使用了 O(N)大小的额外空间。</p><p>  <strong>空间复杂度优化：</strong><br>  利用求余运算 num%10 和求整运算 num // 10 ，可获取数字 num 的各位数字（获取顺序为个位、十位、百位…）。<br>  运用 求余 和 求整 运算实现，可实现 从右向左 的动态规划计算。而根据上述动态规划 “对称性” ，可知从右向左计算是正确的。<br>  自此，字符串 s 的空间占用也被省去，空间复杂度从 O(N)降至 O(1) 。</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">translateNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            num <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            x <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>tmp <span class="token operator">>=</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> tmp <span class="token operator">&lt;=</span> <span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">+</span> b <span class="token operator">:</span> a<span class="token punctuation">;</span>            b <span class="token operator">=</span> a<span class="token punctuation">;</span>            a <span class="token operator">=</span> c<span class="token punctuation">;</span>            y <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="2-最长不含重复字符的子字符串"><a href="#2-最长不含重复字符的子字符串" class="headerlink" title="2. 最长不含重复字符的子字符串"></a>2. 最长不含重复字符的子字符串</h3><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220503083055523.png" alt="image-20220503083055523"></p><p><strong>解题思路</strong>:</p><p>1.动态规划</p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220503083340522.png" alt="image-20220503083340522"></p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/1599287290-mTdFye-Picture1.png" alt="Picture1.png"></p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span>  <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> i<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> j <span class="token operator">-</span> i <span class="token operator">?</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> j <span class="token operator">-</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">max_element</span><span class="token punctuation">(</span>dp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220503085923960.png" alt="image-20220503085923960"></p><p>2.结合Hashmap</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">;</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> dic<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span>  <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dic<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> dic<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 未找到相同元素 </span>            <span class="token keyword">else</span> i <span class="token operator">=</span> dic<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> second<span class="token punctuation">;</span>            dic<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> j <span class="token operator">-</span> i <span class="token operator">?</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> j <span class="token operator">-</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">max_element</span><span class="token punctuation">(</span>dp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220503091249798.png" alt="image-20220503091249798"></p><blockquote><p>  我们学习这些东西的目的并不是，要把他们都用到实际开发中。</p><blockquote><blockquote><p>  相反，如果我们能够用最少的东西写出一个稳定的，高效的多线程程序，更值得赞赏。</p></blockquote><blockquote><blockquote><p>   我们为了成长必须阅读一些高手写的代码，从而实现自己代码的积累</p></blockquote></blockquote></blockquote></blockquote><hr><h1 id="第十一天-双指针-简单"><a href="#第十一天-双指针-简单" class="headerlink" title="第十一天_双指针(简单)"></a>第十一天_双指针(简单)</h1><blockquote><p>  <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1204690.jpg"></p></blockquote><h2 id="一-知识学习-10"><a href="#一-知识学习-10" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h3 id="双指针算法"><a href="#双指针算法" class="headerlink" title="双指针算法"></a>双指针算法</h3><p>严格的来说，双指针只能说是是算法中的一种技巧。</p><blockquote><p>  双指针指的是在<a href="https://so.csdn.net/so/search?q=%E9%81%8D%E5%8E%86&amp;spm=1001.2101.3001.7020">遍历</a>对象的过程中，不是普通的使用单个指针进行访问，而是使用两个相同方向（<strong>快慢指针</strong>）或者相反方向（<strong>对撞指针</strong>）的指针进行扫描，从而达到相应的目的。</p></blockquote><h3 id="对撞指针"><a href="#对撞指针" class="headerlink" title="对撞指针"></a>对撞指针</h3><p><strong>对撞指针</strong>是指在数组中，将指向最左侧的索引定义为<code>左指针（left）</code>，最右侧的定义为<code>右指针（right）</code>，然后从两头向中间进行数组遍历。快速排序就是典型的双指针问题。</p><p>我们假设数组名字为 nums，数组长度为 n，数组首元素对应的位置为 0。</p><p><strong>细节:</strong></p><ul><li>指针初始位置<ul><li>左指针（left)一般指向数组的第一个元素。即 left = 0。</li><li>右指针（right)一般指向数组的第一个元素。即 right = n-1。</li></ul></li></ul><p>​</p><ul><li><p><strong>指针移动方法</strong></p><ul><li>左指针(left）向右边👉移动，一般每次移动一个位置，即 left++。</li><li>右指针(right）向左边👈移动，一般每次移动一个位置，即 right–。</li></ul></li><li><p><strong>结束条件</strong></p><ul><li>左指针（left）位置和右指针（right）位置逆序。</li></ul></li></ul><p>从上面的描述可知，开始的时候，right &gt;= left。因此结束的条件就是 right &lt; left。</p><h3 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h3><p>快慢指针是两个指针从同一侧开始遍历数组，将这两个指针分别定义为快指针（fast）和慢指针（slow），两个指针以不同的策略移动，直到两个指针的值相等（或其他特殊条件）为止，如快指针（fast）每次增长两个，慢指针（slow）每次增长一个。</p><p>一般来说，快慢指针常用于判断链表等数据结构中是否有环。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/aHR0cHM6Ly9hc3NldHMubGVldGNvZGUtY24uY29tL2FsaXl1bi1sYy11cGxvYWQvdXBsb2Fkcy8yMDE4LzEyLzA3L2NpcmN1bGFybGlua2VkbGlzdC5wbmc" alt="img"></p><p><strong>细节</strong>:</p><ul><li><p>指针初始位置</p><ul><li>慢指针（slow）一般指向数组的第一个元素。即 slow = 0。</li><li>快指针（fast）一般指向数组的第一个元素。即 fast = 1。</li></ul></li><li><p>指针移动方法</p><ul><li><p>慢指针（slow）向右边👉移动，一般每次移动一个位置，即 slow++。</p></li><li><p>快指针（fast）向右边👉移动，一般每次移动两个个位置，即 fast += 2。</p></li></ul></li><li><p>结束条件</p><ul><li>慢指针（slow）位置和快指针（fast）位置重合；快指针（fast）达到数组的最后一个元素。</li></ul></li></ul><h2 id="二-题目练习-10"><a href="#二-题目练习-10" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-删除链表的节点"><a href="#1-删除链表的节点" class="headerlink" title="1. 删除链表的节点"></a>1. 删除链表的节点</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220504180845519.png" alt="image-20220504180845519"></p><p><strong>解题思路:</strong></p><p>本题删除值为 val 的节点分需为两步：定位节点、修改引用。</p><p>定位节点： 遍历链表，直到 head.val == val 时跳出，即可定位目标节点。<br>修改引用： 设节点 cur 的前驱节点为 pre ，后继节点为 cur.next ；则执行 pre.next = cur.next ，即可实现删除 cur 节点。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1613757478-NBOvjn-Picture1.png" alt="Picture1.png"></p><blockquote><p>  算法流程：<br>  特例处理： 当应删除头节点 head 时，直接返回 head.next 即可。<br>  初始化： pre = head , cur = head.next 。<br>  定位节点： 当 cur 为空 或 cur 节点值等于 val 时跳出。<br>  保存当前节点索引，即 pre = cur 。<br>  遍历下一节点，即 cur = cur.next 。<br>  删除节点： 若 cur 指向某节点，则执行 pre.next = cur.next ；若 cur 指向 null ，代表链表中不包含值为 val 的节点。<br>  返回值： 返回链表头部节点 head 即可。</p></blockquote><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode <span class="token operator">*</span>pre <span class="token operator">=</span> head<span class="token punctuation">,</span> <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> cur<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">!=</span> val<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> pre<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220504181829187.png" alt="image-20220504181829187"></p><hr><h3 id="2-链表中倒数第-k-个节点"><a href="#2-链表中倒数第-k-个节点" class="headerlink" title="2. 链表中倒数第 k 个节点"></a>2. 链表中倒数第 k 个节点</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220504181656331.png" alt="image-20220504181656331"></p><p><strong>解题思路：</strong></p><p>先遍历统计链表长度，记为 n ；<br>设置一个指针走 (n-k)步，即可找到链表倒数第 k 个节点；<br>使用双指针则可以不用统计链表长度。</p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1600794523-AAMvoP-Picture1.png" alt="Picture1.png"></p><p><strong>算法流程简单, 略</strong></p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">getKthFromEnd</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode <span class="token operator">*</span>former<span class="token punctuation">,</span> <span class="token operator">*</span>latter<span class="token punctuation">;</span>        former <span class="token operator">=</span> latter <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            former <span class="token operator">=</span> former<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>former <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            former <span class="token operator">=</span> former<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            latter <span class="token operator">=</span> latter<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> latter<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220504181816417.png" alt="image-20220504181816417"></p><hr><h1 id="第十二天-双指针-简单"><a href="#第十二天-双指针-简单" class="headerlink" title="第十二天_双指针(简单)"></a>第十二天_双指针(简单)</h1><blockquote><p>  <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1.jpg"></p></blockquote><h2 id="一-知识学习-11"><a href="#一-知识学习-11" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/2.jpg" alt="没什么要学的"></p><h2 id="二-题目练习-11"><a href="#二-题目练习-11" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-合并两个排序的链表"><a href="#1-合并两个排序的链表" class="headerlink" title="1. 合并两个排序的链表"></a>1. 合并两个排序的链表</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220505080833945.png" alt="image-20220505080833945"></p><p><strong>解题思路</strong>:</p><p><strong>1.双指针</strong></p><p>根据题目描述， 链表 l_1, l_2是 递增 的，因此容易想到使用双指针 l_1和 l_2遍历两链表，根据 l_1.val</p><p>和 l_2.val 的大小关系确定节点添加顺序，两节点指针交替前进，直至遍历完毕。</p><p>引入伪头节点： 由于初始状态合并链表中无节点，因此循环第一轮时无法将节点添加到合并链表中。解决方案：初始化一个辅助节点 dum 作为合并链表的伪头节点，将各节点添加至 dum 之后</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode <span class="token operator">*</span>dum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>cur <span class="token operator">=</span> dum<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;</span> l2<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cur<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>                l1 <span class="token operator">=</span> l1<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                cur<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>                l2 <span class="token operator">=</span> l2<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cur <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 合并剩下的尾部</span>        cur<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> l1 <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">?</span> l1 <span class="token operator">:</span> l2<span class="token punctuation">;</span>        <span class="token keyword">return</span> dum<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220505081837195.png" alt="image-20220505081837195"></p><p><strong>2.递归求解</strong></p><p>此方法较耗时</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> l2<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>l2 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> l1<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;</span> l2<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            l1<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                     <span class="token keyword">else</span>         <span class="token punctuation">{</span>            l2<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220505082252207.png" alt="image-20220505082252207"></p><hr><h3 id="2-两个链表的第一个公共节点"><a href="#2-两个链表的第一个公共节点" class="headerlink" title="2.两个链表的第一个公共节点"></a>2.两个链表的第一个公共节点</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220505082342886.png" alt="image-20220505082342886"></p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220505082547330.png" alt="image-20220505082547330"></p><p><strong>解题思路</strong>:</p><p>1.差值法：</p><ul><li>先对两条链表进行遍历，分别得到两条链表的长度，并计算差值 d。</li><li>让长度较长的链表先走 d 步，然后两条链表同时走，第一个相同的节点即是节点。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span><span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>headA<span class="token punctuation">,</span> ListNode <span class="token operator">*</span>headB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode<span class="token operator">*</span> p <span class="token operator">=</span> headA<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> q <span class="token operator">=</span> headB<span class="token punctuation">;</span>        <span class="token keyword">int</span> la_len <span class="token operator">=</span> <span class="token function">getNodeLength</span><span class="token punctuation">(</span>headA<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lb_len <span class="token operator">=</span> <span class="token function">getNodeLength</span><span class="token punctuation">(</span>headB<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span>la_len <span class="token operator">-</span> lb_len<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>la_len <span class="token operator">-</span> lb_len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>  p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>lb_len <span class="token operator">-</span> la_len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> q <span class="token operator">=</span> q<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">==</span> q<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> p <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> p<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            q <span class="token operator">=</span> q<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">getNodeLength</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> anyNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>anyNode <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        ListNode <span class="token operator">*</span> p <span class="token operator">=</span> anyNode<span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>            p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            length <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> length<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220505084816737.png" alt="image-20220505084816737"></p><p>优化解法:</p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220505085406152.png" alt="image-20220505085406152"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span><span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>headA<span class="token punctuation">,</span> ListNode <span class="token operator">*</span>headB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode <span class="token operator">*</span>A <span class="token operator">=</span> headA<span class="token punctuation">,</span> <span class="token operator">*</span>B <span class="token operator">=</span> headB<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>A <span class="token operator">!=</span> B<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            A <span class="token operator">=</span> A <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">?</span> A<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">:</span> headB<span class="token punctuation">;</span>            B <span class="token operator">=</span> B <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">?</span> B<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">:</span> headA<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> A<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220505085541742.png" alt="image-20220505085541742"></p><blockquote><p>  无需考虑链表长度, 当两链表有相交时, <code>A  = headA = headB = B</code>即为交点, 若无交点, 则A, B都指向nullptr</p></blockquote><hr><h1 id="第十三天-双指针-简单"><a href="#第十三天-双指针-简单" class="headerlink" title="第十三天_双指针(简单)"></a>第十三天_双指针(简单)</h1><blockquote><p>  <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/2.jpg"></p></blockquote><h2 id="一-知识学习-12"><a href="#一-知识学习-12" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h3 id="位运算详解"><a href="#位运算详解" class="headerlink" title="位运算详解"></a>位运算详解</h3><blockquote><p>  计算机中的数在内存中都是以<strong>二进制</strong>形式进行存储的 ，而位运算就是直接对整数在内存中的二进制位进行操作，因此其执行效率非常高，在程序中尽量使用位运算进行操作，这会大大提高程序的性能。</p></blockquote><table><thead><tr><th>符号</th><th>描述</th><th><strong>运算规则</strong></th></tr></thead><tbody><tr><td>&amp;</td><td>与</td><td>两个位都为1时，结果才为1。</td></tr><tr><td>|</td><td>或</td><td>两个位都为0时，结果才为0。</td></tr><tr><td>^</td><td>异或</td><td>两个位相同为0，相异为1。</td></tr><tr><td>~</td><td>取反</td><td>0变1，1变0。</td></tr><tr><td>&lt;&lt;</td><td>左移</td><td>各二进位全部左移若干位，高位丢弃，低位补0。</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td>各二进位全部右移若干位，对无符号数，高位补0，有符号数，右移补1 11。</td></tr></tbody></table><blockquote><p>  对于运算符优先级, 个人认为没有必要记, 按自己的需求添加括号保证顺序即可</p></blockquote><h4 id="负数的位运算"><a href="#负数的位运算" class="headerlink" title="负数的位运算"></a>负数的位运算</h4><p>首先，我们要知道，在计算机中，运算是使用的二进制补码，而正数的补码是它本身，负数的补码则是符号位不变，其余按位取反，最后再+ 1 +1+1得到的， 例如：</p><ul><li><p>15 ,原码:00001111 补码:00001111</p></li><li><p>− 15 ,原码:10001111  补码:11110001</p></li></ul><p>​那么对于负数的位运算而言，它们的操作都是建立在补码上的，得到的运算结果是补码，最后将补码结果转化成一个普通的十进制数结果。但需要注意的是，符号位是需要参与运算的，而在左移右移操作中，负数右移补1 ，左移右边补0 。例如对于− 15 ，其补码为11110001 , 右移一位( − 15 &gt; &gt; 1 ) 得到的是11111000 ，即− 8 ，其他的同理。</p><p><strong>关于负数位运算的运用:</strong></p><ul><li>快速判断是否为− 1</li></ul><p>​在链式前向星中，我们初始化head数组为- 1,最后判断是否遍历完u的所有边时，即判断是否为- -1, 我们直接用~即可。原因就在于- 1的补码是11111111,按位取反就变为00000000，这实际上就是0。</p><ul><li><strong>取最低位的1 ，lowbit函数</strong></li></ul><p>也就是:x&amp;(- x), 这在树状数组中起着巨大作用，我们来证明一下，这里取x= 15,对于15&amp;(-15), 我们知道,在补码上进行运算得到的00000001要注意元运算的符号位我们需要进行运算。</p><h3 id="位运算的一些应用"><a href="#位运算的一些应用" class="headerlink" title="位运算的一些应用"></a>位运算的一些应用</h3><ol><li><strong>位运算实现乘除法</strong></li></ol><pre class="line-numbers language-cpp"><code class="language-cpp">a <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">==</span> a <span class="token operator">*</span> <span class="token number">2</span>a <span class="token operator">>></span> <span class="token number">1</span> <span class="token operator">==</span> a <span class="token operator">/</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li><strong>位运算交换两整数</strong></li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    a <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">^</span><span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>位运算判断奇偶数</strong></li></ol><blockquote><p>  我们知道,在二进制中,最低位决定了是奇数还是偶数,所以我们可以提取出最低位的值</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp">a <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true">// 判断a是不是偶数</span>a <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true">// 判断a是不是奇数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li><strong>位运算改变正负性和求绝对值</strong></li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">~</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="二-题目练习-12"><a href="#二-题目练习-12" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-调整数组顺序使奇数位于偶数前面"><a href="#1-调整数组顺序使奇数位于偶数前面" class="headerlink" title="1. 调整数组顺序使奇数位于偶数前面"></a>1. 调整数组顺序使奇数位于偶数前面</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220506125755717.png" alt="image-20220506125755717"></p><p><strong>解题思路：</strong><br>考虑定义双指针 i , j 分列数组左右两端，循环执行：</p><ol><li>指针 i 从左向右寻找偶数；</li><li>指针 j 从右向左寻找奇数；</li><li>将 偶数 nums[i] 和 奇数 nums[j] 交换。</li></ol><p><strong>可始终保证：</strong> 指针 i 左边都是奇数，指针 j 右边都是偶数 。</p><p><strong>实现:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">exchange</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> l<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> r<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220506130314711.png" alt="image-20220506130314711"></p><hr><h3 id="2-和为-s-的两个数字"><a href="#2-和为-s-的两个数字" class="headerlink" title="2. 和为 s 的两个数字"></a>2. 和为 s 的两个数字</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220506132804781.png" alt="image-20220506132804781"></p><p><strong>解题思路：</strong></p><ul><li>利用 <strong>HashMap</strong> 可以通过遍历数组找到数字组合，时间和空间复杂度均为 O(N)；</li><li>注意本题的 nums 是 排序数组 ，因此可使用 <strong>双指针法</strong> 将空间复杂度降低至 O(1) 。</li></ul><p><strong>算法流程：</strong><br>初始化： 双指针 i, j 分别指向数组 nums 的左右两端 （俗称对撞双指针）。<br>循环搜索： 当双指针相遇时跳出；<br>计算和 s = nums[i] + nums[j]；<br>若 s &gt; target ，则指针 j 向左移动，即执行 j = j - 1；<br>若 s &lt; target ，则指针 i 向右移动，即执行 i = i + 1；<br>若 s = target ，立即返回数组 [nums[i],nums[j]] ；</p><p><strong>实现:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">twoSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">!=</span> r<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> l<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">></span> target<span class="token punctuation">)</span> r<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token punctuation">{</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220506133726971.png" alt="image-20220506133726971"></p><hr><h3 id="3-翻转单词顺序"><a href="#3-翻转单词顺序" class="headerlink" title="3. 翻转单词顺序"></a>3. 翻转单词顺序</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220506133951807.png" alt="image-20220506133951807"></p><p><strong>解题思路</strong>:</p><ul><li>倒序遍历字符串 s ，记录单词左右索引边界 i , j ；</li><li>每确定一个单词的边界，则将其添加至单词列表 res ；</li><li>最终，将单词列表拼接为字符串，并返回即可。</li></ul><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">reverseWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// 去除首尾空格</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> l<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> r<span class="token operator">--</span><span class="token punctuation">;</span>        stack<span class="token operator">&lt;</span>string<span class="token operator">></span> dp<span class="token punctuation">;</span>        string tmp<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">' '</span> <span class="token operator">&amp;&amp;</span> tmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                dp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>                 tmp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span> tmp <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">;</span>            l<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        dp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        string res<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>dp<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res <span class="token operator">+</span><span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dp<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220506135746451.png" alt="image-20220506135746451"></p><hr><h1 id="第十四天-搜索与回溯-中等"><a href="#第十四天-搜索与回溯-中等" class="headerlink" title="第十四天_搜索与回溯(中等)"></a>第十四天_搜索与回溯(中等)</h1><blockquote><p>  <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/3.png"></p></blockquote><h2 id="一-知识学习-13"><a href="#一-知识学习-13" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h3 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a><strong>剪枝</strong></h3><p>一：剪枝策略的寻找的方法</p><p>微观方法：从问题本身出发，发现剪枝条件</p><p>宏观方法：从整体出发，发现剪枝条件。</p><p>注意提高效率，这是关键，最重要的。</p><blockquote><p>   总之，剪枝策略，属于算法优化范畴；通常应用在DFS 和 BFS 搜索算法中；剪枝策略就是寻找过滤条件，提前减少不必要的搜索路径。</p></blockquote><p>二：剪枝算法(算法优化)</p><ol><li><p>简介</p><p> 在搜索算法中优化中，剪枝，就是通过某种判断，避免一些不必要的遍历过程，形象的说，就是剪去了搜索树中的某些“枝条”，故称剪枝。应用剪枝优化的核心问题是设计剪枝判断方法，即确定哪些枝条应当舍弃，哪些枝条应当保留的方法。</p></li><li><p>剪枝优化三原则: 正确、准确、高效.原则</p><p>搜索算法,绝大部分需要用到剪枝.然而,不是所有的枝条都可以剪掉,这就需要通过设计出合理的判断方法,以决定某一分支的取舍. 在设计判断方法的时候,需要遵循一定的原则.</p><ul><li><p>剪枝的原则</p><ul><li><pre><code>正确性</code></pre></li></ul><p>正如上文所述,枝条不是爱剪就能剪的. 如果随便剪枝,把带有最优解的那一分支也剪掉了的话,剪枝也就失去了意义. 所以,剪枝的前提是一定要保证不丢失正确的结果.</p><ul><li><p>准确性</p><p>在保证了正确性的基础上,我们应该根据具体问题具体分析,采用合适的判断手段,使不包含最优解的枝条尽可能多的被剪去,以达到程序“最优化”的目的. 可以说,剪枝的准确性,是衡量一个优化算法好坏的标准.</p></li><li><p>高效性</p><p>设计优化程序的根本目的,是要减少搜索的次数,使程序运行的时间减少. 但为了使搜索次数尽可能的减少,我们又必须花工夫设计出一个准确性较高的优化算法,而当算法的准确性升高,其判断的次数必定增多,从而又导致耗时的增多,这便引出了矛盾. 因此,如何在优化与效率之间寻找一个平衡点,使得程序的时间复杂度尽可能降低,同样是非常重要的. 倘若一个剪枝的判断效果非常好,但是它却需要耗费大量的时间来判断、比较,结果整个程序运行起来也跟没有优化过的没什么区别,这样就太得不偿失了.</p></li></ul></li></ul></li><li><p>分类</p><p> 剪枝算法按照其判断思路可大致分成两类:可行性剪枝及最优性剪枝.</p><ul><li><p>可行性剪枝 —— 该方法判断继续搜索能否得出答案，如果不能直接回溯。</p></li><li><p>最优性剪枝——又称为上下界剪枝，是一种重要的搜索剪枝策略。它记录当前得到的最优值，如果当前结点已经无法产生比当前最优解更优的解时，可以提前回溯。</p></li></ul></li></ol><hr><h2 id="二-题目练习-13"><a href="#二-题目练习-13" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-矩阵中的路径"><a href="#1-矩阵中的路径" class="headerlink" title="1. 矩阵中的路径"></a>1. 矩阵中的路径</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220507130945157.png" alt="img "></p><p><strong>解题思路：</strong><br>本问题是典型的矩阵搜索问题，可使用 <strong>深度优先搜索（DFS）</strong>+ <strong>剪枝</strong> 解决。</p><p>深度优先搜索： 可以理解为暴力法遍历矩阵中所有字符串可能性。DFS 通过递归，先朝一个方向搜到底，再回溯至上个节点，沿另一个方向搜索，以此类推。<br>剪枝： 在搜索中，遇到 这条路不可能和目标字符串匹配成功 的情况（例如：此矩阵元素和目标字符不同、此元素已被访问），则应立即返回，称之为 可行性剪枝 。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1604944042-glmqJO-Picture0.png" alt="Picture0.png"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507131414911.png" alt="img"></p><p><strong>实现:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">exist</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">,</span> string word<span class="token punctuation">)</span> <span class="token punctuation">{</span>        rows <span class="token operator">=</span> board<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cols <span class="token operator">=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cols<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">,</span> string word<span class="token punctuation">,</span> <span class="token keyword">int</span> i <span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/// 越界处理</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> rows <span class="token operator">||</span> j <span class="token operator">>=</span> cols <span class="token operator">||</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> word<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// index == 0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> word<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// 将匹配的标记为空字符 防止重复访问</span>        board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// 在相邻区域寻找匹配的 </span>        <span class="token keyword">bool</span> res <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span>         <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> word<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220507134821863.png" alt="img"></p><hr><h3 id="2-机器人的运动范围"><a href="#2-机器人的运动范围" class="headerlink" title="2. 机器人的运动范围"></a>2. 机器人的运动范围</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220507140210236.png" alt="image-20220507140210236"></p><p><strong>解题思路:</strong></p><h4 id="数位之和计算"><a href="#数位之和计算" class="headerlink" title="数位之和计算"></a>数位之和计算</h4><p><strong>封装函数:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">sums</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        s <span class="token operator">+</span><span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220507141046291.png" alt="image-20220507141046291"></p><h4 id="可达解分析"><a href="#可达解分析" class="headerlink" title="可达解分析"></a>可达解分析</h4><blockquote><p>  根据数位和增量公式得知，数位和每逢 进位 突变一次。根据此特点，矩阵中 满足数位和的解 构成的几何形状形如多个 等腰直角三角形 ，每个三角形的直角顶点位于 0, 10, 20, …等数位和突变的矩阵索引处 。</p><p>  三角形内的解虽然都满足数位和要求，但由于机器人每步只能走一个单元格，而三角形间不一定是连通的，因此机器人不一定能到达，称之为 不可达解 ；同理，可到达的解称为 可达解 （本题求此解） 。</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1603026306-OdpwLi-Picture1.png" alt="1"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1603026306-daxIuh-Picture4.png" alt="2"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507141819402.png" alt="image-20220507141819402"></p><p>1.深度优先遍历 DFS<br>深度优先搜索： 可以理解为暴力法模拟机器人在矩阵中的所有路径。DFS 通过递归，先朝一个方向搜到底，再回溯至上个节点，沿另一个方向搜索，以此类推。<br>剪枝： 在搜索中，遇到数位和超出目标值、此元素已访问，则应立即返回，称之为 可行性剪枝 。</p><blockquote><p>  <img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220507142324877.png" alt="image-20220507142324877"></p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507142120913.png" alt="image-20220507142120913"></p><p><strong>实现:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">movingCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">>></span> <span class="token function">visited</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> visited<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j <span class="token punctuation">,</span> <span class="token keyword">int</span> si<span class="token punctuation">,</span> <span class="token keyword">int</span> sj<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">>></span> <span class="token operator">&amp;</span>visited<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/// 越界处理 </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> m <span class="token operator">||</span> j <span class="token operator">>=</span> n <span class="token operator">||</span> k <span class="token operator">&lt;</span> si <span class="token operator">+</span> sj <span class="token operator">||</span> visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// visited[i][j]代表当前元素已访问过</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// 向右下方搜索</span>        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> si <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> si <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">,</span> sj<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">+</span>         <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> si<span class="token punctuation">,</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> sj <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> sj <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">,</span> visited<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220507143549919.png" alt="image-20220507143549919"></p><p>2.广度优先遍历 BFS</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507143613569.png" alt="image-20220507143613569"></p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220507143620435.png" alt="image-20220507143620435"></p><p><strong>实现:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">movingCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">>></span> <span class="token function">visited</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> que<span class="token punctuation">;</span>        que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/// 弹出队首元素作为搜索单元格</span>            vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> tmp <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> j <span class="token operator">=</span> tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> si <span class="token operator">=</span> tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sj <span class="token operator">=</span> tmp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/// 越界处理 </span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> m <span class="token operator">||</span> j <span class="token operator">>=</span> n <span class="token operator">||</span> k <span class="token operator">&lt;</span> si <span class="token operator">+</span> sj <span class="token operator">||</span> visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            res<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/// 向右下方搜索</span>            que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> si <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> si <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">,</span> sj<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> si<span class="token punctuation">,</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> sj <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> sj <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220507144808324.png" alt="image-20220507144808324"></p><hr><h1 id="第十五天-搜索与回溯算法-中等"><a href="#第十五天-搜索与回溯算法-中等" class="headerlink" title="第十五天_搜索与回溯算法(中等)"></a>第十五天_搜索与回溯算法(中等)</h1><blockquote><p>  <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/881808.jpg"></p></blockquote><h2 id="一-知识学习-14"><a href="#一-知识学习-14" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><p>二叉搜索树（BST，Binary Search Tree），也称<a href="https://so.csdn.net/so/search?q=%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91&amp;spm=1001.2101.3001.7020">二叉排序树</a>或二叉查找树。</p><blockquote><p>  二叉搜索树：一棵二叉树，可以为空；如果不为空，满足以下性质： </p><ol><li>非空<strong>左子树</strong>的所有键值<strong>小于</strong>其根结点的键值。</li><li>非空<strong>右子树</strong>的所有键值<strong>大于</strong>其根结点的键值。</li><li>左、右子树都是二叉搜索树。</li></ol></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/20200904165827405.png"></p><p>上图值为10的结点的右子树为7，比10小，不满足条件2，所以这棵树不是二叉搜索树。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/20200904165842348.png"></p><p>上图各个结点都满足条件，所以这棵树是二叉搜索树。</p><h2 id="二-题目练习-14"><a href="#二-题目练习-14" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-二叉树中和为某一值的路径"><a href="#1-二叉树中和为某一值的路径" class="headerlink" title="1. 二叉树中和为某一值的路径"></a>1. 二叉树中和为某一值的路径</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220508120213318.png"></p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220508120222440.png"></p><p><strong>解题思路:</strong></p><p>本题是典型的二叉树方案搜索问题，使用回溯法解决，其包含 <strong>先序遍历 + 路径记录</strong> 两部分。</p><p><strong>先序遍历</strong>： 按照 “根、左、右” 的顺序，遍历树的所有节点。<br><strong>路径记录</strong>： 在先序遍历中，记录从根节点到当前节点的路径。当路径满足 ① 根节点到叶节点形成的路径 且 ② 各节点值的和等于目标值 sum 时，将此路径加入结果列表。</p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220508120806381.png" alt="image-20220508120806381"></p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) {} *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">pathSum</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">recur</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// 减法匹配</span>        target <span class="token operator">-</span><span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// 遍历到底, 添加路径</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> root<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> root<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220508121836942.png"></p><h3 id="2-二叉搜索树与双向链表"><a href="#2-二叉搜索树与双向链表" class="headerlink" title="2. 二叉搜索树与双向链表"></a>2. 二叉搜索树与双向链表</h3><p><img src="C:/Users/13993/AppData/Roaming/Typora/typora-user-images/image-20220508122807095.png"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220508122856579.png"></p><p>解题思路：<br>本文解法基于性质：二叉搜索树的<a href="https://roranrui.cn/posts/1c3cffbc/"><strong>中序遍历</strong></a>为 递增序列 。<br>将 二叉搜索树 转换成一个 “排序的循环双向链表” ，其中包含三个要素：</p><ol><li><strong>排序链表</strong>： 节点应从小到大排序，因此应使用 中序遍历 “从小到大”访问树的节点。</li><li><strong>双向链表</strong>： 在构建相邻节点的引用关系时，设前驱节点 pre 和当前节点 cur ，不仅应构建 pre.right = cur ，也应构建 cur.left = pre 。</li><li><strong>循环链表</strong>： 设链表头节点 head 和尾节点 tail ，则应构建 head.left = tail 和 tail.right = head 。</li></ol><p><strong>中序遍历</strong> 为对二叉树作 “左、根、右” 顺序遍历，递归实现如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 打印中序遍历</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 左</span>    cout <span class="token operator">&lt;&lt;</span> root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 根</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 右</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1599401091-PKIjds-Picture1.png"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220508123649382.png"></p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220508124012133.png"></p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*// Definition for a Node.class Node {public:    int val;    Node* left;    Node* right;    Node() {}    Node(int _val) {        val = _val;        left = NULL;        right = NULL;    }    Node(int _val, Node* _left, Node* _right) {        val = _val;        left = _left;        right = _right;    }};*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    Node<span class="token operator">*</span> <span class="token function">treeToDoublyList</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// 形成双向链表</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// 形成循环链表</span>        head<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> pre<span class="token punctuation">;</span>        pre<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    Node <span class="token operator">*</span>pre<span class="token punctuation">,</span> <span class="token operator">*</span>head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// 递归中序遍历 </span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>Node <span class="token operator">*</span>cur<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> pre<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token keyword">else</span> head <span class="token operator">=</span> cur<span class="token punctuation">;</span>        cur<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> pre<span class="token punctuation">;</span>        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220508130427936.png"></p><h3 id="3-二叉搜索树的第-k-大节点"><a href="#3-二叉搜索树的第-k-大节点" class="headerlink" title="3. 二叉搜索树的第 k 大节点"></a>3. 二叉搜索树的第 k 大节点</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220508130515215.png"></p><p><strong>解题思路：</strong><br>本文解法基于性质：二叉搜索树的中序遍历为递增序列。根据此性质，易得二叉搜索树的 <strong>中序遍历倒序</strong> 为 递减序列 。<br>因此，求 “二叉搜索树第 k 大的节点” 可转化为求 “此树的<strong>中序遍历倒序</strong>的第 k 个节点”。</p><p><strong>中序遍历倒序</strong>:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为求第 k 个节点，需要实现以下三项工作：</p><ul><li>递归遍历时计数，统计当前节点的序号；</li><li>递归到第 k 个节点时，应记录结果 res；</li><li>记录结果后，后续的遍历即失去意义，应提前终止（即返回）；</li></ul><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">kthLargest</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>k <span class="token operator">=</span> k<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> res<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// 中序遍历得到倒序序列</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> res <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220508131717851.png"></p><hr><h1 id="第十六天-排序-简单"><a href="#第十六天-排序-简单" class="headerlink" title="第十六天_排序(简单)"></a>第十六天_排序(简单)</h1><blockquote><p>  <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1235535.jpg"></p></blockquote><h2 id="一-知识学习-15"><a href="#一-知识学习-15" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><p><strong>排序算法</strong><br>排序算法用作实现列表的排序，列表元素可以是整数，也可以是浮点数、字符串等其他数据类型。生活中有许多需要排序算法的场景，例如：</p><ul><li>整数排序： 对于一个整数数组，我们希望将所有数字从小到大排序；</li><li>字符串排序： 对于一个姓名列表，我们希望将所有单词按照字符先后排序；</li><li>自定义排序： 对于任意一个 已定义比较规则 的集合，我们希望将其按规则排序；</li></ul><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1629483616-HHvvqY-Picture1.png"></p><p>同时，某些算法需要在排序算法的基础上使用（即在排序数组上运行），例如：</p><ul><li>二分查找： 根据数组已排序的特性，才能每轮确定排除两部分中的哪一部分；</li><li>双指针： 例如合并两个排序链表，根据已排序特性，才能通过双指针移动在线性时间内将其合并为一个排序链表。</li></ul><h2 id="二-题目练习-15"><a href="#二-题目练习-15" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-把数组排成最小的数"><a href="#1-把数组排成最小的数" class="headerlink" title="1. 把数组排成最小的数"></a>1. 把数组排成最小的数</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220509130020373.png"></p><p><strong>解题思路：</strong><br>此题求拼接起来的最小数字，本质上是一个排序问题。设数组 nums 中任意两数字的字符串为 xx 和 y ，则规定 排序判断规则 为：</p><ul><li>若拼接字符串 x + y &gt; y + x ，则 xx “大于” y ；</li><li>反之，若 x + y &lt; y + x ，则 xx “小于” y ；</li></ul><blockquote><p>  x “小于” y 代表：排序完成后，数组中 x 应在 y 左边；“大于” 则反之。</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/95e81dbccc44f26292d88c509afd68204a86b37d342f83d109fa7aa0cd4a6049-Picture1.png"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220509130834666.png"></p><p><strong>实现:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">minNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> str<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            str<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">to_string</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sort</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> string <span class="token operator">&amp;</span>s2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> s1 <span class="token operator">+</span> s2 <span class="token operator">&lt;</span> s2 <span class="token operator">+</span> s1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string res<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res <span class="token operator">+</span><span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220509131444790.png"></p><hr><h3 id="2-扑克牌中的顺子"><a href="#2-扑克牌中的顺子" class="headerlink" title="2. 扑克牌中的顺子"></a>2. 扑克牌中的顺子</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220509130326115.png"></p><p><strong>解题思路：</strong><br>根据题意，此 5 张牌是顺子的 充分条件 如下：</p><p>除大小王外，所有牌 无重复 ；<br>设此 55 张牌中最大的牌为 max ，最小的牌为 min （大小王除外），则需满足：<br>                                <code>max - min &lt; 5</code></p><p>​<code>max − min &lt; 5</code></p><p>因此可将问题转化为：此 5 张牌是否满足以上两个条件？</p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1599885716-MGMODX-Picture1.png"></p><p>1.排序遍历</p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220509130859184.png"></p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isStraight</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> joker <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> joker<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>joker<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220509131420819.png"></p><p>2.set遍历</p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220509132334415.png"></p><p><strong>实现:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isStraight</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> repeat<span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>repeat<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">!=</span> repeat<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            repeat<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a <span class="token operator">-</span> b <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220509132354690.png"></p><hr><h1 id="第十七天-排序-中等"><a href="#第十七天-排序-中等" class="headerlink" title="第十七天_排序(中等)"></a>第十七天_排序(中等)</h1><blockquote><p>  <img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1235534.png"></p></blockquote><h2 id="一-知识学习-16"><a href="#一-知识学习-16" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1133891.jpg" alt="また晴れだね"></p><h3 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h3><blockquote><p>  <strong>优先队列</strong>具有队列的所有特性，包括基本操作，只是在这基础上添加了内部的一个排序，它本质是一个堆实现的</p></blockquote><p>和队列基本操作相同:</p><ul><li>top 访问队头元素</li><li>empty 队列是否为空</li><li>size 返回队列内元素个数</li><li>push 插入元素到队尾 (并排序)</li><li>emplace 原地构造一个元素并插入队列</li><li>pop 弹出队头元素</li><li>swap 交换内容</li></ul><p>定义：<code>priority_queue&lt;Type, Container, Functional&gt;</code><br>Type 就是数据类型，Container 就是容器类型（Container必须是用数组实现的容器，比如vector,deque等等，但不能用 list。STL里面默认用的是vector），Functional 就是比较的方式，当需要用自定义的数据类型时才需要传入这三个参数，使用基本数据类型时，只需要传入数据类型，默认是<strong>大顶堆</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//升序队列大顶堆</span>priority_queue <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> q<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//降序队列小顶堆</span>priority_queue <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>less<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span>q<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-题目练习-16"><a href="#二-题目练习-16" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-最小的-k-个数"><a href="#1-最小的-k-个数" class="headerlink" title="1. 最小的 k 个数"></a>1. 最小的 k 个数</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220510130344094.png"></p><p><strong>解题思路:</strong></p><p>先排序在找对应个数的解即可</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">getLeastNumbers</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-数据流中的中位数"><a href="#2-数据流中的中位数" class="headerlink" title="2. 数据流中的中位数"></a>2. 数据流中的中位数</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220510132437080.png"></p><p><strong>解题思路：</strong><br>给定一长度为 N 的无序数组，其中位数的计算方法：首先对数组执行排序（使用O(NlogN) 时间），然后返回中间元素即可（使用 O(1)时间）。</p><p>针对本题，根据以上思路，可以将数据流保存在一个列表中，并在添加元素时 保持数组有序 。此方 法的时间复杂度为 O(N)，其中包括： 查找元素插入位置 O(log N)（二分查找）、向数组某位置插入元素 O(N)（插入位置之后的元素都需要向后移动一位）。</p><p>借助 堆 可进一步优化时间复杂度。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220510132536061.png"></p><p>随后，中位数可仅根据 A, B的堆顶元素计算得到。</p><p>实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MedianFinder</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">/** initialize your data structure here. */</span>    <span class="token function">MedianFinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> A<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 小顶堆 保存较大的一半</span>    priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> less<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> B<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 大顶堆 保存较小的一半</span>    <span class="token keyword">void</span> <span class="token function">addNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            A<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            B<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            A<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            B<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            A<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            B<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">double</span> <span class="token function">findMedian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> A<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> B<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Your MedianFinder object will be instantiated and called as such: * MedianFinder* obj = new MedianFinder(); * obj->addNum(num); * double param_2 = obj->findMedian(); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="第十八天-搜索与回溯算法（中等）"><a href="#第十八天-搜索与回溯算法（中等）" class="headerlink" title="第十八天_搜索与回溯算法（中等）"></a>第十八天_搜索与回溯算法（中等）</h1><blockquote><p>  <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1235446.jpg"></p></blockquote><h2 id="一-知识学习-17"><a href="#一-知识学习-17" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1080593.png" alt="この町はたくさんの思い出が作った"></p><h2 id="二-题目练习-17"><a href="#二-题目练习-17" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-二叉树的深度"><a href="#1-二叉树的深度" class="headerlink" title="1. 二叉树的深度"></a>1. 二叉树的深度</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220511083225547.png"></p><p><strong>解题思路</strong>:</p><p>遍历树的所有结点</p><p>1.<strong>后序遍历(dfs)</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1603024336-lXVRDd-Picture1.png"></p><blockquote><p>   <strong>关键点：</strong> 此树的深度和其左（右）子树的深度之间的关系。显然，<strong>此树的深度</strong> 等于 <strong>左子树的深度</strong> 与 <strong>右子树的深度</strong> 中的 <strong>最大值</strong> +1+1 。</p></blockquote><p>用递归实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220511083913601.png"></p><p>2.<strong>层序遍历（bfs）</strong></p><ul><li>树的层序遍历 / 广度优先搜索往往利用 <strong>队列</strong> 实现。</li><li><strong>关键点：</strong> 每遍历一层，则计数器 +1+1 ，直到遍历完成，则可得到树的深度。</li></ul><p>实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> qu<span class="token punctuation">;</span>        qu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>qu<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> qu<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                TreeNode<span class="token operator">*</span> node <span class="token operator">=</span> qu<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span> qu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span> qu<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                qu<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>           <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220511085242263.png"></p><hr><h3 id="2-平衡二叉树"><a href="#2-平衡二叉树" class="headerlink" title="2.平衡二叉树"></a>2.平衡二叉树</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511085349239.png"></p><p><strong>解题思路：</strong></p><p>1.从顶至底</p><p>此方法容易想到，但会产生大量重复计算，时间复杂度较高。</p><p>思路是构造一个获取当前子树的深度的函数 depth(root) ，通过比较某子树的左右子树的深度差 abs(depth(root.left) - depth(root.right)) &lt;= 1 是否成立，来判断某子树是否是二叉平衡树。若所有子树都平衡，则此树平衡。</p><p>实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">depth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220511091313594.png"></p><p>2.从底至顶（后序遍历+剪枝）</p><blockquote><p>  此方法为本题的最优解法，但剪枝的方法不易第一时间想到。</p></blockquote><p>思路是对二叉树做后序遍历，从底至顶返回子树深度，若判定某子树不是平衡树则 “剪枝” ，直接向上返回。</p><p>实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">recur</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">abs</span><span class="token punctuation">(</span>left <span class="token operator">-</span> right<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220511092207143.png"></p><hr><h1 id="第十九天-搜索与回溯算法（中等）"><a href="#第十九天-搜索与回溯算法（中等）" class="headerlink" title="第十九天_搜索与回溯算法（中等）"></a>第十九天_搜索与回溯算法（中等）</h1><blockquote><p>  <img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1234495.jpg"></p></blockquote><h2 id="一-知识学习-18"><a href="#一-知识学习-18" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1081204.jpg" alt="静かな消えてゆく"></p><h3 id="逻辑运算符的短路效应"><a href="#逻辑运算符的短路效应" class="headerlink" title="逻辑运算符的短路效应"></a>逻辑运算符的短路效应</h3><p>常见的逻辑运算符有三种，即 “与 &amp;&amp; ”，“或 ||”，“非 !! ”；而其有重要的短路效应，如下所示：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>A <span class="token operator">&amp;&amp;</span> B<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 若 A 为 false ，则 B 的判断不会执行（即短路），直接判定 A &amp;&amp; B 为 false</span><span class="token keyword">if</span><span class="token punctuation">(</span>A <span class="token operator">||</span> B<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 若 A 为 true ，则 B 的判断不会执行（即短路），直接判定 A || B 为 true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="二叉树的祖先"><a href="#二叉树的祖先" class="headerlink" title="二叉树的祖先"></a>二叉树的祖先</h3><p><strong>祖先的定义</strong>： 若节点 pp 在节点 root 的左（右）子树中，或 p = root，则称 root是 p 的祖先。</p><p><strong>最近公共祖先的定义</strong>： 设节点 root 为节点 p,q的某公共祖先，若其左子节点 root.left和右子节点 root.right都不是 p,q的公共祖先，则称 root 是 “最近的公共祖先” 。</p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1599885085-LbAmPd-Picture1.png" alt="Picture1.png"></p><p>若 root是 p,q的 最近公共祖先 ，则只可能为以下三种情况之一：</p><p>p 和 q 在 root的子树中，且分列 root 的 异侧（即分别在左、右子树中）；<br>p = root 且 q 在 root的左或右子树中；<br>q = root 且 p 在 root 的左或右子树中；</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1599885085-mTpblH-Picture2.png"></p><h2 id="二-题目练习-18"><a href="#二-题目练习-18" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-求-1-2-…-n"><a href="#1-求-1-2-…-n" class="headerlink" title="1. 求 1 + 2 + … + n"></a>1. 求 1 + 2 + … + n</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220512131628421.png"></p><p><strong>解题思路：</strong></p><p>1.平均计算</p><p>此计算必须使用 <strong>乘除法</strong> ，因此本方法不可取，直接排除</p><p>2.迭代</p><p>循环必须使用 while或 for，因此本方法不可取，直接排除。</p><p>3.递归</p><p>终止条件需要使用 if，因此本方法不可取。</p><p>4.逻辑运算符代替if</p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1603023621-WFZwzS-Picture1.png"></p><p>实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">sumNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        n <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">sumNums</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220512132223869.png"></p><p><strong>其他解法</strong>：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">sumNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">bool</span> arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  暂时未看懂</p></blockquote><h3 id="2-二叉搜索树的最近公共祖先"><a href="#2-二叉搜索树的最近公共祖先" class="headerlink" title="2.二叉搜索树的最近公共祖先"></a>2.二叉搜索树的最近公共祖先</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220512132844192.png"></p><p><strong>解题思路：</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220512133316273.png"></p><p>1.迭代</p><ul><li>循环搜索： 当节点 root 为空时跳出；</li><li>当 p, q 都在 root 的 右子树 中，则遍历至 root.right；</li><li>否则，当 p, q 都在 root 的 左子树 中，则遍历至 root.left；</li><li>否则，说明找到了 最近公共祖先 ，跳出；</li></ul><p><strong>实现</strong>：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;</span> p<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&amp;&amp;</span> root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;</span> q<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// p,q 都在 root 的右子树中</span>                root <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 遍历至右子节点</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">></span> p<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&amp;&amp;</span> root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">></span> q<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// p,q 都在 root 的左子树中</span>                root <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 遍历至左子节点</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220512134540298.png"></p><p>代码优化：若可保证 p.val &lt; q.val，则在循环中可减少判断条件，提升计算效率。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">></span> q<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span>            <span class="token function">swap</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;</span> p<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// p,q 都在 root 的右子树中</span>                root <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 遍历至右子节点</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">></span> q<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// p,q 都在 root 的左子树中</span>                root <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 遍历至左子节点</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.递归</p><p>递推工作：</p><ul><li>当 p, q 都在 root 的 右子树 中，则开启递归 root.right 并返回；</li><li>否则，当 p, q都在 root的 左子树 中，则开启递归 root.left 并返回；</li><li>返回值： 最近公共祖先 root ；</li></ul><p><strong>实现</strong>：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;</span> p<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&amp;&amp;</span> root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;</span> q<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// p,q 都在 root 的右子树中</span>            <span class="token keyword">return</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">></span> p<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&amp;&amp;</span> root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">></span> q<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// p,q都在 root 左子树中</span>            <span class="token keyword">return</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220512134402787.png"></p><h3 id="3-二叉树的最近公共祖先"><a href="#3-二叉树的最近公共祖先" class="headerlink" title="3. 二叉树的最近公共祖先"></a>3. 二叉树的最近公共祖先</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220512134725529.png"></p><p><strong>解题思路：</strong></p><p>若 root 是 p, q 的 最近公共祖先 ，则只可能为以下情况之一：</p><ul><li>p 和 q 在 root 的子树中，且分列 root 的 异侧（即分别在左、右子树中）；</li><li>p = root ，且 q 在 root 的左或右子树中；</li><li>q = root ，且 p 在 root的左或右子树中；</li></ul><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1599885247-mgYjRv-Picture2.png"></p><p>考虑采用dfs遍历</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> root <span class="token operator">==</span> p <span class="token operator">||</span> root <span class="token operator">==</span> q<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>        TreeNode<span class="token operator">*</span> left <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode<span class="token operator">*</span> right <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> right<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> left<span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220512135221394.png"></p><hr><h1 id="第二十天-分治算法-中等"><a href="#第二十天-分治算法-中等" class="headerlink" title="第二十天_分治算法(中等)"></a>第二十天_分治算法(中等)</h1><blockquote><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1234494.jpg"></p></blockquote><h2 id="一-知识学习-19"><a href="#一-知识学习-19" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h3 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h3><p>归并排序体现了 “分而治之” 的算法思想，具体为：</p><p><strong>「分」：</strong> 不断将数组从 中点位置 划分开，将原数组的排序问题转化为子数组的排序问题；<br><strong>「治」：</strong> 划分到子数组长度为 1 时，开始向上合并，不断将 左右两个较短排序数组 合并为 一个较长排序数组，直至合并至原数组时完成排序；<br>如下图所示，为数组 [7,3,2,6,0,1,5,4] 的归并排序过程。</p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/1632675739-CNHaOu-Picture1.png"></p><h2 id="二-题目练习-19"><a href="#二-题目练习-19" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-重建二叉树"><a href="#1-重建二叉树" class="headerlink" title="1. *重建二叉树"></a>1. *重建二叉树</h3><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513120324436.png"></p><p><strong>解题思路：</strong></p><p>前序遍历性质： 节点按照 <code>[ 根节点 | 左子树 | 右子树 ]</code> 排序。<br>中序遍历性质： 节点按照 <code>[ 左子树 | 根节点 | 右子树 ]</code> 排序。</p><p>根据以上性质，可得出以下推论：</p><ul><li>前序遍历的首元素 为 树的根节点 node 的值。</li><li>在中序遍历中搜索根节点 node 的索引 ，可将 中序遍历 划分为 <code>[ 左子树 | 根节点 | 右子树 ]</code> 。</li><li>根据中序遍历中的左（右）子树的节点数量，可将 前序遍历 划分为 <code>[ 根节点 | 左子树 | 右子树 ]</code> 。</li></ul><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/1629825510-roByLr-Picture1.png"></p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513122020000.png"></p><p><strong>实现</strong>:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> preorder<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> inorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>preorder <span class="token operator">=</span> preorder<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dic<span class="token punctuation">[</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> preorder<span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> dic<span class="token punctuation">;</span>    TreeNode<span class="token operator">*</span> <span class="token function">recur</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> right<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        TreeNode<span class="token operator">*</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> dic<span class="token punctuation">[</span>preorder<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        node<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> <span class="token function">recur</span><span class="token punctuation">(</span>root <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> <span class="token function">recur</span><span class="token punctuation">(</span>i <span class="token operator">-</span> left <span class="token operator">+</span> root <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513123110737.png"></p><h3 id="2-数值的整数次方"><a href="#2-数值的整数次方" class="headerlink" title="2. 数值的整数次方"></a>2. 数值的整数次方</h3><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513123509840.png"></p><p><strong>解题思路:</strong></p><p>除了n个x<strong>相乘</strong>, 还可以用<strong>快速幂法</strong>可将时间复杂度降低至 O(NlogN) ，以下从 「分治法」 和 「二进制」 两个角度解析快速幂法。</p><p>1.分治法</p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513123721987.png"></p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/1599885604-YzlkAN-Picture2.png"></p><blockquote><p>  转化为位运算：<br>  向下整除 n // 2 等价于 右移一位 n &gt;&gt; 1；<br>  取余数 n % 2 等价于 判断二进制最右位 n &amp; 1；</p></blockquote><p>2.二进制</p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513123843252.png"></p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/1599885604-yDzVYK-Picture1.png"></p><p><strong>实现:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token function">myPow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token operator">-</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token function">myPow</span><span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">,</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">myPow</span><span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">,</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513125324781.png"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0.0f</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> res <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            x <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> x<span class="token punctuation">;</span>            n <span class="token operator">=</span> <span class="token operator">-</span>n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">*</span><span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// n为奇数</span>            x <span class="token operator">*</span><span class="token operator">=</span> x<span class="token punctuation">;</span>            n <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513124509093.png"></p><h3 id="3-二叉搜索树的后序遍历序列"><a href="#3-二叉搜索树的后序遍历序列" class="headerlink" title="3.  二叉搜索树的后序遍历序列"></a>3.  二叉搜索树的后序遍历序列</h3><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513125719563.png"></p><p>解题思路：<br>后序遍历定义： <code>[ 左子树 | 右子树 | 根节点 ]</code> ，即遍历顺序为 “左、右、根” 。</p><p>二叉搜索树定义： 左子树中所有节点的值 &lt; 根节点的值；右子树中所有节点的值 &gt; 根节点的值；其左、右子树也分别为二叉搜索树。</p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/1599753507-JrFBjm-Picture1.png"></p><p>1.递归</p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513131353240.png"></p><p><strong>实现</strong>:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">verifyPostorder</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> postorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span>postorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> postorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">recur</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> postorder<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> j<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>postorder<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">&lt;</span> postorder<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> p<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> p<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 第一个大于根节点的节点</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>postorder<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">></span> postorder<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> p<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 继续寻找</span>        <span class="token keyword">return</span> p <span class="token operator">==</span> j <span class="token operator">&amp;&amp;</span> <span class="token function">recur</span><span class="token punctuation">(</span>postorder<span class="token punctuation">,</span> i<span class="token punctuation">,</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">recur</span><span class="token punctuation">(</span>postorder<span class="token punctuation">,</span> m<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513131847608.png"></p><p>2.辅助栈</p><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513132029095.png"></p><p><strong>实现</strong>:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">verifyPostorder</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> postorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stk<span class="token punctuation">;</span>        <span class="token keyword">int</span> root <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> postorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>postorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> postorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                root <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>postorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://fastly.jsdelivr.net/gh/roranrui/img_bed/img/image-20220513132328576.png"></p><hr><h1 id="第二十一天-位运算-简单"><a href="#第二十一天-位运算-简单" class="headerlink" title="第二十一天_位运算(简单)"></a>第二十一天_位运算(简单)</h1><blockquote><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1233630.jpg"></p></blockquote><h2 id="一-知识学习-20"><a href="#一-知识学习-20" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><p>传送门: <a href="https://roranrui.cn/posts/a2d105e0/">第十三天_双指针(简单) | 若然无亦的Blog (roranrui.cn)</a></p><h2 id="二-题目练习-20"><a href="#二-题目练习-20" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="二进制中-1-的个数"><a href="#二进制中-1-的个数" class="headerlink" title="二进制中 1 的个数"></a>二进制中 1 的个数</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220514094744918.png"></p><p><strong>解题思路：</strong></p><p>1.逐位判断</p><p>利用与运算符， 判断最后一位</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span>uint32_t n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res <span class="token operator">+</span><span class="token operator">=</span> n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>            n <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220514100345123.png"></p><p>2.巧用 n &amp; (n - 1)</p><ul><li>(n−1) 解析： 二进制数字 n <strong>最右边</strong> 的 1 变成 0 ，此 1 右边的 0 都变成 1 。</li><li>n &amp; (n - 1) 解析： 二进制数字 n <strong>最右边</strong> 的 1 变成 0 ，其余不变。</li></ul><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/f23d9ef4fcfd65d7fbe29e477cbf36110b2f34558020e8cff09a1e13c0275c43-Picture1.png"></p><p><strong>实现：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span>uint32_t n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res <span class="token operator">++</span><span class="token punctuation">;</span>            n <span class="token operator">&amp;</span><span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220514100835432.png"></p><h3 id="2-不用加减乘除做加法"><a href="#2-不用加减乘除做加法" class="headerlink" title="2. 不用加减乘除做加法"></a>2. 不用加减乘除做加法</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220514100924582.png"></p><p><strong>解题思路：</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220514101940510.png"></p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/9716b1a1ead21824b8216c7d54910bee4d838c011581f4e3d82a14f71cb392a1-Picture1.png"></p><p><strong>实现</strong>:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>            a <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">;</span>            b <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="第二十二天-位运算-中等"><a href="#第二十二天-位运算-中等" class="headerlink" title="第二十二天_位运算(中等)"></a>第二十二天_位运算(中等)</h1><h2 id="一-知识学习-21"><a href="#一-知识学习-21" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h2 id="二-题目练习-21"><a href="#二-题目练习-21" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="1-数组中数字出现的次数-I"><a href="#1-数组中数字出现的次数-I" class="headerlink" title="1. 数组中数字出现的次数 I"></a>1. 数组中数字出现的次数 I</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220515133802999.png"></p><p><strong>解题思路</strong></p><p>题目要求时间复杂度 O(N)，空间复杂度 O(1)，因此首先排除 <strong>暴力法</strong> 和 <strong>哈希表统计法</strong> 。</p><blockquote><p>  异或运算有个重要的性质，两个相同数字异或为 0 ，即对于任意整数 a 有a ^ a=0 。因此，若将 nums中所有数字执行异或运算，留下的结果则为 出现一次的数字 x</p></blockquote><p><strong>本题难点：</strong> 数组 nums有 <strong>两个</strong> 只出现一次的数字，因此无法通过异或直接得到这两个数字。</p><p>设两个只出现一次的数字为x,y,由于x ≠ y,则x和y二进制至少有一位不同(即分别为0和1) ,根据此位<br>可以将nums拆分为分别包含x和y的两个子数组。<br>易知两子数组都满足「除-一个数字之外，其他数字都出现了两次」。因此，仿照以上简化问题的思路,分别对两<br>子数组遍历执行异或操作，即可得到两个只出现一次的数字x, y。.</p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1614836837-oygHyk-Picture2.png"></p><p><strong>实现:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">singleNumbers</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            n <span class="token operator">^</span><span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> m<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> m <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">&amp;</span> m<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> x <span class="token operator">^</span><span class="token operator">=</span> num<span class="token punctuation">;</span>            <span class="token keyword">else</span> y <span class="token operator">^</span><span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token punctuation">{</span>x<span class="token punctuation">,</span> y<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220515140939165.png"></p><h3 id="2-数组中数字出现的次数-II"><a href="#2-数组中数字出现的次数-II" class="headerlink" title="2. 数组中数字出现的次数 II"></a>2. 数组中数字出现的次数 II</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220515140931286.png" alt="image-20220515140931286"></p><p><strong>解题思路</strong>：</p><p>如下图所示，考虑数字的二进制形式，对于出现三次的数字，各 二进制位 出现的次数都是 3 的倍数。<br>因此，统计所有数字的各二进制位中 1 的出现次数，并对 3 求余，结果则为只出现一次的数字。</p><p><strong>暂时只想到遍历统计</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">int</span> counts<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// C++ 初始化数组需要写明初始值 0</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> num <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 更新第 i 位 1 的个数之和</span>                num <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 第 i 位 --> 第 i 位</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>            res <span class="token operator">|</span><span class="token operator">=</span> counts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> m<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 恢复第 i 位</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220515142732000.png"></p><hr><h1 id="第二十三天-数学-简单"><a href="#第二十三天-数学-简单" class="headerlink" title="第二十三天_数学(简单)"></a>第二十三天_数学(简单)</h1><blockquote><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1234713.jpg"></p></blockquote><h2 id="一-知识学习-22"><a href="#一-知识学习-22" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h2 id="二-题目练习-22"><a href="#二-题目练习-22" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="数组中出现次数超过一半的数字"><a href="#数组中出现次数超过一半的数字" class="headerlink" title="数组中出现次数超过一半的数字"></a>数组中出现次数超过一半的数字</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220516083856792.png"></p><p><strong>解题思路:</strong></p><p><strong>1.hashmap</strong></p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> dic<span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            count <span class="token operator">=</span> <span class="token operator">++</span>dic<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220516084222132.png"></p><p><strong>2.先排序, 中点必是众数</strong></p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220516084156944.png"></p><p><strong>3.摩尔投票法</strong></p><p> 核心理念为 <strong>票数正负抵消</strong> </p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220516084358825.png"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1603612327-bOQxzq-Picture1.png"></p><p>每轮发生 票数和 = 0 都可以 缩小剩余数组区间</p><p>当遍历完成时，最后一轮假设的数字即为众数</p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> votes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>votes <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> x <span class="token operator">=</span> num<span class="token punctuation">;</span>            votes <span class="token operator">+</span><span class="token operator">=</span> num <span class="token operator">==</span> x <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 验证 x 是否为众数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> x<span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count <span class="token operator">></span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">?</span> x <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当无众数时返回 0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构建乘积数组"><a href="#构建乘积数组" class="headerlink" title="构建乘积数组"></a>构建乘积数组</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220516085056079.png"></p><p><strong>解题思路:</strong></p><p>本题的难点在于 <strong>不能使用除法</strong> ，即需要 <strong>只用乘法</strong> 生成数组 B。根据题目对 B[i]的定义，可列表格，如下图所示。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1624619180-vpyyqh-Picture1.png" alt="Picture1.png"></p><p>实现</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">constructArr</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>  <span class="token function">b</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            tmp <span class="token operator">*</span><span class="token operator">=</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span><span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220516090047075.png"></p><hr><h1 id="第二十四天-数学-中等"><a href="#第二十四天-数学-中等" class="headerlink" title="第二十四天_数学(中等)"></a>第二十四天_数学(中等)</h1><blockquote><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1237250.jpg"></p></blockquote><h2 id="一-知识学习-23"><a href="#一-知识学习-23" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><blockquote><p>  滑动窗口法，也叫尺取法，可以用来解决一些查找满足一定条件的连续区间的性质（长度等）的问题。由于区间连续，因此当区间发生变化时，可以通过旧有的计算结果对搜索空间进行剪枝，这样便减少了重复计算，降低了时间复杂度。往往类似于“请找到满足 xx 的最 x 的区间(子串、子数组)的 xx”这类问题都可以使用该方法进行解决。</p></blockquote><p><strong>滑动窗口算法的思路是这样：</strong></p><p>1、我们在字符串 S 中使用双指针中的左右指针技巧，初始化 left = right = 0，把索引闭区间 [left, right] 称为一个「窗口」。</p><p>2、我们先不断地增加 right 指针扩大窗口 [left, right]，直到窗口中的字符串符合要求（包含了 T 中的所有字符）。</p><p>3、此时，我们停止增加 right，转而不断增加 left 指针缩小窗口 [left, right]，直到窗口中的字符串不再符合要求（不包含 T 中的所有字符了）。同时，每次增加 left，我们都要更新一轮结果。</p><p>4、重复第 2 和第 3 步，直到 right 到达字符串 S 的尽头。</p><p>这个思路其实也不难，第 2 步相当于在寻找一个「可行解」，然后第 3 步在优化这个「可行解」，最终找到最优解。左右指针轮流前进，窗口大小增增减减，窗口不断向右滑动。</p><p>下面画图理解一下，needs 和 window 相当于计数器，分别记录 T 中字符出现次数和窗口中的相应字符的出现次数。</p><h2 id="二-题目练习-23"><a href="#二-题目练习-23" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="剪绳子"><a href="#剪绳子" class="headerlink" title="剪绳子"></a>剪绳子</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220517081449093.png"></p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220517081900780.png"></p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220517082139286.png"></p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1f9adeaa7b9fff0ab19c9d29e3a8f98749011d22dc162d67bdbe223f1a38119f-Picture1.png"></p><p><strong>实现:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">cuttingRope</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220517082530630.png"></p><h3 id="和为-s-的连续正数序列"><a href="#和为-s-的连续正数序列" class="headerlink" title="和为 s 的连续正数序列"></a>和为 s 的连续正数序列</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220517082827936.png"></p><p><strong>解题思路:</strong></p><p>1.求和公式</p><p>求解target右边界公式</p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220517083238396.png"></p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1611494538-VUzxtS-Picture1.png"></p><p><strong>实现:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">findContinuousSequence</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> j <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            j <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> target <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> i <span class="token operator">*</span> i <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> j<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> tmp<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    tmp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220517083831762.png"></p><p>2.双指针</p><p>使用滑动窗口解决</p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1611495306-LsrxgS-Picture2.png"></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">findContinuousSequence</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> target<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> tmp<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    tmp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">>=</span> target<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                sum <span class="token operator">-</span><span class="token operator">=</span> i<span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>                sum <span class="token operator">+</span><span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220517084739507.png"></p><h3 id="圆圈中最后剩下的数字"><a href="#圆圈中最后剩下的数字" class="headerlink" title="圆圈中最后剩下的数字"></a>圆圈中最后剩下的数字</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220517085019581.png"></p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220517085230888.png"></p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1615096532-kUoKUe-Picture1.png"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1613584667-AQpTlK-Picture2.png"></p><p>使用<strong>动态规划</strong>:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">lastRemaining</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">+</span> m<span class="token punctuation">)</span> <span class="token operator">%</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220517090115805.png"></p><hr><h1 id="第二十五天-模拟（中等）"><a href="#第二十五天-模拟（中等）" class="headerlink" title="第二十五天_模拟（中等）"></a>第二十五天_模拟（中等）</h1><blockquote><p>刷题日程指引: <a href="https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/px2ds5/">行百里者半九十。坚持一个月刷完，一起加油！</a></p></blockquote><h2 id="一-知识学习-24"><a href="#一-知识学习-24" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h2 id="二-题目练习-24"><a href="#二-题目练习-24" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="顺时针打印矩阵"><a href="#顺时针打印矩阵" class="headerlink" title="顺时针打印矩阵"></a>顺时针打印矩阵</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220517214819719.png"></p><p><strong>解题思路:</strong></p><p>顺时针打印矩阵的顺序是 <strong>“从左向右、从上向下、从右向左、从下向上”</strong> 循环。</p><p>因此，考虑设定矩阵的 “左、上、右、下” 四个边界，模拟以上矩阵遍历顺序。</p><p><strong>实现</strong>:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 定义边界</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 从左往右</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>t <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 推进</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> t<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 从上往下</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">></span> <span class="token operator">--</span>r<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> r<span class="token punctuation">;</span> i <span class="token operator">>=</span> l<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 从右向左</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">></span> <span class="token operator">--</span>b<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> b<span class="token punctuation">;</span> i <span class="token operator">>=</span> t<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 从下向上</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>l <span class="token operator">></span> r<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220517221529429.png"></p><h3 id="栈的压入、弹出序列"><a href="#栈的压入、弹出序列" class="headerlink" title="栈的压入、弹出序列"></a>栈的压入、弹出序列</h3><p>解题思路：<br>如下图所示，给定一个压入序列 pushed 和弹出序列 popped ，则压入 / 弹出操作的顺序（即排列）是 <strong>唯一确定</strong> 的。</p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1188474dc6a377fc258004bca84e5a130b663eeb24bf22c4fa4eb998a0249f97-Picture1.png"></p><p>如下图所示，栈的数据操作具有 <strong>先入后出</strong> 的特性，因此某些弹出序列是无法实现的。</p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/3f43b224553bf3a37f9758dbb41655e547795e293524a148380c6f335af315e4-Picture2.png"></p><p><strong>实现</strong>:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">validateStackSequences</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> pushed<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> popped<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stk<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> pushed<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> popped<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="第二十六天-字符串-中等"><a href="#第二十六天-字符串-中等" class="headerlink" title="第二十六天_字符串(中等)"></a>第二十六天_字符串(中等)</h1><blockquote><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1237228.png"></p></blockquote><h2 id="一-知识学习-25"><a href="#一-知识学习-25" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h2 id="二-题目练习-25"><a href="#二-题目练习-25" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="表示数值的字符串"><a href="#表示数值的字符串" class="headerlink" title="表示数值的字符串"></a>表示数值的字符串</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220518082848376.png"></p><p><strong>解题思路</strong>:</p><p>暴力模拟遍历过程</p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//     ① 只有 e 前后需要有数字</span>    <span class="token comment" spellcheck="true">//     ② 小数点需要增加一个 flag 控制，因为它可能出现在任何地方</span>    <span class="token comment" spellcheck="true">//     ③ 其他情况用 if 和 while 读取即可</span>    <span class="token keyword">bool</span> <span class="token function">isNumber</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> dot_flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 记录小数点</span>        <span class="token comment" spellcheck="true">// ********** 前缀空格和符号 ********** //</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ********** 整数和小数 ********** //</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            dot_flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>             index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'9'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 小数点后没有数字, 错误</span>             <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dot_flag<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 之前读到小数</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// ********** E 及其整数尾缀 ********** //</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'e'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'E'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> index<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 读 符号</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'9'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ① E 后面需要有数字</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span><span class="token punctuation">)</span> index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// ********** 后缀空格 ********** //</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\0'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// End</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220518085307952.png"></p><h3 id="把字符串转换成整数"><a href="#把字符串转换成整数" class="headerlink" title="把字符串转换成整数"></a>把字符串转换成整数</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220518085553528.png"></p><p><strong>解题思路</strong>：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220518085705591.png"></p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1600793383-jCgsGU-Picture1.png"></p><p><strong>实现:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">strToInt</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bndry <span class="token operator">=</span> INT_MAX <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sign <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> length <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>i <span class="token operator">==</span> length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> sign <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">></span> bndry <span class="token operator">||</span> res <span class="token operator">==</span> bndry <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'7'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> sign <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> INT_MAX <span class="token operator">:</span> INT_MIN<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sign <span class="token operator">*</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220518091720279.png"></p><h1 id="第二十七天-栈与队列（困难）"><a href="#第二十七天-栈与队列（困难）" class="headerlink" title="第二十七天_栈与队列（困难）"></a>第二十七天_栈与队列（困难）</h1><blockquote><p>刷题日程指引: <a href="https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/px2ds5/">行百里者半九十。坚持一个月刷完，一起加油！</a></p></blockquote><h2 id="一-知识学习-26"><a href="#一-知识学习-26" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h2 id="二-题目练习-26"><a href="#二-题目练习-26" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="滑动窗口的最大值"><a href="#滑动窗口的最大值" class="headerlink" title="滑动窗口的最大值"></a>滑动窗口的最大值</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220519121819333.png"></p><p><strong>解题思路:</strong></p><p><strong>窗口对应的数据结构为 双端队列 ，本题使用 单调队列 即可解决以上问题。遍历数组时，每轮保证单调队列 deque ：</strong></p><ul><li>deque 内 仅包含窗口内的元素 ⇒ 每轮窗口滑动移除了元素 nums[i - 1] ，需将 deque内的对应元素一起删除。</li><li>deque内的元素 非严格递减 ⇒ 每轮窗口滑动添加了元素 nums[j + 1] ，需将 deque 内所有 &lt; nums[j + 1]的元素删除。</li></ul><p><strong>实现:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> d<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> k<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> d<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> d<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 形成窗口时开始遍历 </span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>d<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> d<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> d<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 寻找最大值</span>            d<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="队列的最大值"><a href="#队列的最大值" class="headerlink" title="队列的最大值"></a>队列的最大值</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220519123759612.png"></p><p><strong>解题思路:</strong></p><p><strong>额外构建一个递减列表保存所有递减的元素, 并实时更新, 这样队列最大元素就始终对应递减列表的首元素</strong></p><p><strong>实现</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MaxQueue</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">MaxQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">max_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> deq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> deq<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>deq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> deq<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> deq<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// xun'zha</span>        deq<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> deq<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> deq<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> que<span class="token punctuation">;</span>    deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> deq<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Your MaxQueue object will be instantiated and called as such: * MaxQueue* obj = new MaxQueue(); * int param_1 = obj->max_value(); * obj->push_back(value); * int param_3 = obj->pop_front(); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="第二十八天-搜索与回溯算法-困难"><a href="#第二十八天-搜索与回溯算法-困难" class="headerlink" title="第二十八天_搜索与回溯算法(困难)"></a>第二十八天_搜索与回溯算法(困难)</h1><blockquote><p>刷题日程指引: <a href="https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/px2ds5/">行百里者半九十。坚持一个月刷完，一起加油！</a></p></blockquote><h2 id="一-知识学习-27"><a href="#一-知识学习-27" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h2 id="二-题目练习-27"><a href="#二-题目练习-27" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="序列化二叉树"><a href="#序列化二叉树" class="headerlink" title="序列化二叉树*"></a>序列化二叉树*</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220520193728883.png"></p><p><strong>解题思路:</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220520194120635.png"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1603117385-ehAGsP-Picture1.png"></p><p><strong>实现：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Codec</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">// Encodes a tree to a single string.</span>    string <span class="token function">serialize</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"[]"</span><span class="token punctuation">;</span>        string res <span class="token operator">=</span> <span class="token string">"["</span><span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> que<span class="token punctuation">;</span>        que<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            TreeNode<span class="token operator">*</span> node <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">to_string</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                que<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                que<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> res <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"null,"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        res<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"]"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Decodes your encoded data to tree.</span>    TreeNode<span class="token operator">*</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>string data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token string">"[]"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> list <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">stoi</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> que<span class="token punctuation">;</span>        que<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            TreeNode <span class="token operator">*</span>node <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"null"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                node<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">stoi</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                que<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"null"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                node<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">stoi</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                que<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">// Split a str by a delim</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">split</span><span class="token punctuation">(</span>string str<span class="token punctuation">,</span> string delim<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> list<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">','</span><span class="token punctuation">)</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> <span class="token operator">++</span>j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串的排列"><a href="#字符串的排列" class="headerlink" title="字符串的排列"></a>字符串的排列</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220520193352544.png"></p><p><strong>解题思路:</strong></p><p><strong>排列方案的生成：</strong></p><p>根据字符串排列的特点，考虑深度优先搜索所有排列方案。即通过字符交换，先固定第 1 位字符（ n 种情况）、再固定第 2 位字符（ n-1 种情况）、… 、最后固定第 n 位字符（ 1种情况）。</p><p><strong>重复排列方案与剪枝：</strong></p><p>当字符串存在重复字符时，排列方案中也存在重复的排列方案。为排除重复方案，需在固定某位字符时，保证 “每种字符只在此位固定一次” ，即遇到重复字符时不交换，直接跳过。从 DFS 角度看，此操作称为 “剪枝” 。</p><p><strong>实现:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">permutation</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> res<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> dic<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dic<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> dic<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 剪枝</span>            dic<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 恢复</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220520193548700.png"></p><hr><h1 id="第二十九天-动态规划-困难"><a href="#第二十九天-动态规划-困难" class="headerlink" title="第二十九天_动态规划(困难)"></a>第二十九天_动态规划(困难)</h1><blockquote><p>刷题日程指引: <a href="https://leetcode-cn.com/leetbook/read/illustration-of-algorithm/px2ds5/">行百里者半九十。坚持一个月刷完，一起加油！</a></p></blockquote><h2 id="一-知识学习-28"><a href="#一-知识学习-28" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h2 id="二-题目练习-28"><a href="#二-题目练习-28" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配*"></a>正则表达式匹配*</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220521114232007.png"></p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220521114504963.png"></p><p><strong>实现</strong>:</p><pre><code></code></pre><h3 id="丑数"><a href="#丑数" class="headerlink" title="丑数"></a>丑数</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220521112747064.png"></p><p><strong>解题思路:</strong></p><blockquote><p>  丑数的递推性质:丑数只包含因子2,3,5,因此有“丑数=某较小丑数x某因子”(例如: 10= 5 x 2)</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1613651468-icTuYo-Picture1.png"></p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">nthUglyNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>         dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> n2 <span class="token operator">=</span> dp<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> n3 <span class="token operator">=</span> dp<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> n5 <span class="token operator">=</span> dp<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> n3<span class="token punctuation">)</span><span class="token punctuation">,</span> n5<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> n2<span class="token punctuation">)</span> a<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> n3<span class="token punctuation">)</span> b<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> n5<span class="token punctuation">)</span> c<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220521114103735.png"></p><h3 id="n-个骰子的点数"><a href="#n-个骰子的点数" class="headerlink" title="n 个骰子的点数"></a>n 个骰子的点数</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220521120213271.png"></p><p><strong>解题思路</strong></p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1640656604-dOxceW-%E5%9B%BE%E7%89%87.png"></p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1640656626-FdLtoM-%E5%9B%BE%E7%89%87.png"></p><p><img src="https://pic.leetcode-cn.com/1640656641-TKoTqi-%E5%9B%BE%E7%89%87.png"></p><p><strong>实现</strong>:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">dicesProbability</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">6.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 从di</span>        <span class="token punctuation">{</span>            vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">tmp</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> dp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> j <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">6.0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            dp <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="第三十天-分治算法-困难"><a href="#第三十天-分治算法-困难" class="headerlink" title="第三十天_分治算法(困难)"></a>第三十天_分治算法(困难)</h1><blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/1238486.png"></p></blockquote><h2 id="一-知识学习-29"><a href="#一-知识学习-29" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h2 id="二-题目练习-29"><a href="#二-题目练习-29" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="打印从-1-到最大的-n-位数"><a href="#打印从-1-到最大的-n-位数" class="headerlink" title="打印从 1 到最大的 n 位数"></a>打印从 1 到最大的 n 位数</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220523124238026.png"></p><p>解题思路: </p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">printNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> m <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220523124258526.png"></p><h3 id="数组中的逆序对"><a href="#数组中的逆序对" class="headerlink" title="数组中的逆序对"></a>数组中的逆序对</h3><p><strong>解题思路:</strong> 考虑在归并排序的合并阶段统计「逆序对」数量，完成归并排序时，也随之完成所有逆序对的统计。</p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">reversePairs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">tmp</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> nums<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 终止条件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 递归划分</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 合并阶段</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> l<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>            tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> l<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">||</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                res <span class="token operator">+</span><span class="token operator">=</span> m <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 统计逆序对</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="第三十一天-数学-困难"><a href="#第三十一天-数学-困难" class="headerlink" title="第三十一天_数学(困难)"></a>第三十一天_数学(困难)</h1><h2 id="一-知识学习-30"><a href="#一-知识学习-30" class="headerlink" title="一. 知识学习"></a>一. 知识学习</h2><h2 id="二-题目练习-30"><a href="#二-题目练习-30" class="headerlink" title="二. 题目练习"></a>二. 题目练习</h2><h3 id="剪绳子II"><a href="#剪绳子II" class="headerlink" title="剪绳子II"></a>剪绳子II</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220524162651674.png"></p><blockquote><p>  此题与 剑指 Offer 14- I. 剪绳子 主体等价，唯一不同在于本题目涉及 大数越界情况下的求余问题 。建议先做上一道题，在此基础上再研究此题目的大数求余方法。</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220524162721048.png"></p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">cuttingRope</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> rem <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> a <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> rem <span class="token operator">=</span> <span class="token punctuation">(</span>rem <span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>            x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>rem <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">%</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>rem <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">%</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>rem <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">%</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1～n-整数中-1-出现的次数"><a href="#1～n-整数中-1-出现的次数" class="headerlink" title="1～n 整数中 1 出现的次数*"></a>1～n 整数中 1 出现的次数*</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220524163222471.png"></p><p><strong>解题思路：</strong></p><p>将 1 ~ n 的个位、十位、百位、…的 1 出现次数相加，即为 1 出现的总次数。</p><p>当 cur = 0 时： 此位 1 的出现次数只由高位 high 决定，计算公式为: $high \times digit $</p><p>当 cur = 1 时： 此位 1 的出现次数由高位 high 和低位 low 决定，计算公式为：$high \times digit + low + 1$</p><p>当 cur=2,3,⋯,9 时： 此位 1 的出现次数只由高位 high 决定，计算公式为：$(high + 1) \times digit$</p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1599887431-cVmcVA-Picture1.png"></p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1599887431-HAAvVp-Picture2.png"></p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1599887431-djUZTe-Picture3.png"></p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">countDigitOne</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> digit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> high <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">,</span> cur <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> res <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>high <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> cur <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> res <span class="token operator">+</span><span class="token operator">=</span> high <span class="token operator">*</span> digit<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">+</span><span class="token operator">=</span> high <span class="token operator">*</span> digit <span class="token operator">+</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> res <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> digit<span class="token punctuation">;</span>            low <span class="token operator">+</span><span class="token operator">=</span> cur <span class="token operator">*</span> digit<span class="token punctuation">;</span>            cur <span class="token operator">=</span> high <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            high <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            digit <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数字序列中某一位的数字"><a href="#数字序列中某一位的数字" class="headerlink" title="数字序列中某一位的数字*"></a>数字序列中某一位的数字*</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220524172147146.png"></p><p><strong>解题思路</strong>:</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220524173541324.png"></p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1599888213-CYhLfm-Picture1.png"></p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findNthDigit</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> dight <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">></span> count<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            n <span class="token operator">-</span><span class="token operator">=</span> count<span class="token punctuation">;</span>            start <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            dight<span class="token operator">++</span><span class="token punctuation">;</span>            count <span class="token operator">=</span> dight <span class="token operator">*</span> start <span class="token operator">*</span> <span class="token number">9</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> num <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> dight<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">to_string</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> dight<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一天-栈与队列（简单）&quot;&gt;&lt;a href=&quot;#第一天-栈与队列（简单）&quot; class=&quot;headerlink&quot; title=&quot;第一天_栈与队列（简单）&quot;&gt;&lt;/a&gt;第一天_栈与队列（简单）&lt;/h1&gt;&lt;h2 id=&quot;一-知识学习&quot;&gt;&lt;a href=&quot;#一-知识学习&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数组</title>
    <link href="https://roranrui.cn/posts/340249a9/"/>
    <id>https://roranrui.cn/posts/340249a9/</id>
    <published>2022-05-25T13:13:53.000Z</published>
    <updated>2022-05-26T12:22:00.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="旋转矩阵"><a href="#旋转矩阵" class="headerlink" title="旋转矩阵"></a>旋转矩阵</h2><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1653491207900-0318c20b-e4e1-492c-89ea-c80c87b34c50.png" alt="img"></p><p><strong>解题思路</strong>:</p><p>两次翻转轻松搞定。<br>先对矩阵做<strong>沿主对角线的翻转</strong>（其实就是矩阵的转置），原地完成；接着再对操作后的矩阵进行<strong>根据列序号倒排</strong>。</p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 沿矩阵中心按列旋转</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> j <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="零矩阵"><a href="#零矩阵" class="headerlink" title="零矩阵"></a>零矩阵</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28457545/1653491584137-46ca76e0-3f94-4e21-8b62-0d87211dd2f1.png" alt="img"></p><p><strong>解题思路:</strong></p><p>使用标记数组</p><p>我们可以用两个标记数组分别记录每一行和每一列是否有零出现。</p><p>具体地，我们首先遍历该数组一次，如果某个元素为 00，那么就将该元素所在的行和列所对应标记数组的位置置为 true。最后我们再次遍历该数组，用标记数组更新原数组即可。</p><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">setZeroes</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> rows <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cols <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">row</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">col</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建两个标记数组</span>        <span class="token comment" spellcheck="true">// 第一次遍历, 标记为0的位置</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cols<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> row<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> col<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 第二次遍历, 处理数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cols<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>row<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> col<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="对角线遍历"><a href="#对角线遍历" class="headerlink" title="对角线遍历"></a>对角线遍历</h2><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/1653567265911-f43d7e9f-1b06-40d3-b1d0-c187e81bfa85.png" alt="img"></p><p>解题思路:</p><ol><li>同一对角线上的横列坐标之和是相等的</li><li>对角线序号偶数是倒序，奇数是正序</li></ol><p>实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">findDiagonalOrder</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> mat<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mat<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> rows <span class="token operator">=</span> mat<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cols <span class="token operator">=</span> mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows <span class="token operator">+</span> cols <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 对角线为偶数</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> rows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">-</span> cols <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>mat<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">-</span> cols <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> rows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>mat<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="数组拆分"><a href="#数组拆分" class="headerlink" title="数组拆分"></a>数组拆分</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28457545/1653537232547-286731b6-8044-452d-9020-08f85c5a6a13.png" alt="img"></p><p><strong>解题思路:</strong></p><p>排序后, 每两步, 就是最优的局部最小值</p><p><strong>实现:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">arrayPairSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res <span class="token operator">+</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">&lt;</span> end<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> l <span class="token operator">=</span> begin<span class="token punctuation">,</span> r <span class="token operator">=</span> end<span class="token punctuation">,</span> refer <span class="token operator">=</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> refer <span class="token operator">&amp;&amp;</span> r <span class="token operator">></span>l<span class="token punctuation">)</span> l<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">>=</span> refer <span class="token operator">&amp;&amp;</span> r <span class="token operator">></span> l<span class="token punctuation">)</span> r<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> refer<span class="token punctuation">;</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h1&gt;&lt;h2 id=&quot;旋转矩阵&quot;&gt;&lt;a href=&quot;#旋转矩阵&quot; class=&quot;headerlink&quot; title=&quot;旋转矩阵&quot;&gt;&lt;/a&gt;旋转矩阵&lt;/h</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="https://roranrui.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
    <category term="算法" scheme="https://roranrui.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>爬虫学习（二）</title>
    <link href="https://roranrui.cn/posts/320b7ec0/"/>
    <id>https://roranrui.cn/posts/320b7ec0/</id>
    <published>2022-05-14T03:45:39.000Z</published>
    <updated>2022-05-15T06:29:38.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬虫学习（二）"><a href="#爬虫学习（二）" class="headerlink" title="爬虫学习（二）"></a>爬虫学习（二）</h1><h2 id="一-数据解析"><a href="#一-数据解析" class="headerlink" title="一. 数据解析"></a>一. 数据解析</h2><blockquote><p>  通过全局爬虫获取整张页面信息, 在对数据进行提取</p></blockquote><ul><li><strong>正则匹配</strong></li><li><strong>bs4</strong></li><li><strong>xpath</strong>*</li></ul><p><strong>数据解析原理概述:</strong> </p><ul><li><p>解析的局部的文本内容都会在标签之间或者标签对应的属性中进行存储</p></li><li><ol><li>进行指定标签的定位</li><li>标签或者对应标签对应的属性中存储的数据进行提取(解析)</li></ol></li></ul><h2 id="二-正则表达式"><a href="#二-正则表达式" class="headerlink" title="二. 正则表达式"></a>二. 正则表达式</h2><p>详情可参考: </p><ul><li><a href="https://www.runoob.com/regexp/regexp-tutorial.html">正则表达式 – 教程 | 菜鸟教程 (runoob.com)</a></li><li><a href="https://www.runoob.com/python/python-reg-expressions.html">Python 正则表达式 | 菜鸟教程 (runoob.com)</a></li></ul><h3 id="案例一-图片数据爬取"><a href="#案例一-图片数据爬取" class="headerlink" title="案例一: 图片数据爬取"></a>案例一: 图片数据爬取</h3><blockquote><ul><li>text(字符串)</li><li>content(二进制)</li><li>json(对象)</li></ul></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;爬虫学习（二）&quot;&gt;&lt;a href=&quot;#爬虫学习（二）&quot; class=&quot;headerlink&quot; title=&quot;爬虫学习（二）&quot;&gt;&lt;/a&gt;爬虫学习（二）&lt;/h1&gt;&lt;h2 id=&quot;一-数据解析&quot;&gt;&lt;a href=&quot;#一-数据解析&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="爬虫笔记" scheme="https://roranrui.cn/categories/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Python" scheme="https://roranrui.cn/tags/Python/"/>
    
    <category term="爬虫" scheme="https://roranrui.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>爬虫学习（一）</title>
    <link href="https://roranrui.cn/posts/21d9218/"/>
    <id>https://roranrui.cn/posts/21d9218/</id>
    <published>2022-05-11T14:56:06.000Z</published>
    <updated>2022-05-14T03:47:10.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬虫学习（一）"><a href="#爬虫学习（一）" class="headerlink" title="爬虫学习（一）"></a>爬虫学习（一）</h1><h2 id="一-什么是爬虫"><a href="#一-什么是爬虫" class="headerlink" title="一. 什么是爬虫"></a>一. 什么是爬虫</h2><blockquote><p>  网络爬虫是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。</p></blockquote><p>网络爬虫（又称网络蜘蛛，机器人），就是模拟客户端发送网络请求，接收请求响应，一种按照一定的规则，自动地抓取互联网信息的程序。<br>只要浏览器能够做的事情，原则上，爬虫都能够做到。</p><p>简单来说，爬虫就是自动从网络上收集信息的一种程序，复杂点来说，就是一整套关于数据请求、处理、存储的程序。</p><p>原理</p><p>发送请求 -&gt; 接收响应 -&gt; 解析网页 (-&gt; 提取链接 -&gt; 发送请求) -&gt; 提取资源 -&gt; 保存资源</p><p><strong>爬虫分类</strong></p><ul><li>全局爬虫</li><li>聚焦爬虫</li><li>异步爬虫</li></ul><h2 id="二-robots-txt协议"><a href="#二-robots-txt协议" class="headerlink" title="二. robots.txt协议"></a>二. robots.txt协议</h2><blockquote><p>  <a href="http://t.csdn.cn/NLSJN">详情可以看这</a></p></blockquote><blockquote><p>  robots协议<br>          robots协议也叫robots.txt（统一小写）是一种存放于网站根目录下的ASCII编码的文本文件，它通常告诉网络搜索引擎的漫游器（又称网络蜘蛛），此网站中的哪些内容是不应被搜索引擎的漫游器获取的，哪些是可以被漫游器获取的。因为一些系统中的URL是大小写敏感的，所以robots.txt的文件名应统一为小写。</p><p>  robots.txt应放置于网站的根目录下。如果想单独定义搜索引擎的漫游器访问子目录时的行为，那么可以将自定的设置合并到根目录下的robots.txt，或者使用robots元数据（Metadata，又称元数据）。</p><p>  robots协议并不是一个规范，而只是约定俗成的，所以并不能保证网站的隐私。</p></blockquote><h2 id="三-http和https协议"><a href="#三-http和https协议" class="headerlink" title="三. http和https协议"></a>三. http和https协议</h2><p><strong>http协议</strong></p><blockquote><p>  服务器和客户端进行数据交互的一种信息</p></blockquote><h3 id="常用请求头信息"><a href="#常用请求头信息" class="headerlink" title="常用请求头信息"></a>常用请求头信息</h3><p><code>User-Agent</code>: 请求载体的身份标识(如edge浏览器, 代码)</p><p><code>Connection</code>: 请求完毕后是断开连接韩式保持连接</p><h3 id="常用响应头信息"><a href="#常用响应头信息" class="headerlink" title="常用响应头信息"></a>常用响应头信息</h3><p><code>Content-Type</code>: 服务器响应回客户端的信息</p><h3 id="加密方式"><a href="#加密方式" class="headerlink" title="加密方式"></a>加密方式</h3><ul><li><p>对称密钥加密: </p></li><li><p>非对称密钥加密</p></li><li><p>证书密钥加密</p></li></ul><p><strong>https协议</strong></p><blockquote><p>  是以安全为目标的HTTP<a href="https://so.csdn.net/so/search?q=%E9%80%9A%E9%81%93&amp;spm=1001.2101.3001.7020">通道</a>，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。HTTPS协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/7d8a6c1c8f9611c4e16d4a3d41992ef7.png"></p><p><a href="http://t.csdn.cn/f2QCk">漫画：什么是 HTTPS 协议？</a></p><h2 id="四-requests模块"><a href="#四-requests模块" class="headerlink" title="四. requests模块"></a>四. requests模块</h2><blockquote><p><strong>Requests</strong>是⽤Python语⾔编写，基于 urllib，采⽤<br>Apache2 Licensed 开源协议的 HTTP 库。<br>它⽐ urllib 更加⽅便，可以节约我们⼤量的⼯作，完全满⾜<br>HTTP 测试需求。<br><strong>⼀句话——Python实现的简单易⽤的HTTP库</strong></p></blockquote><p>使用步骤:</p><ul><li>指定url</li><li>发起请求</li><li>获取响应数据</li><li>持久化存储</li></ul><p>简单示例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests <span class="token keyword">as</span> re<span class="token comment" spellcheck="true"># 爬取搜狗首页页面数据</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    sogou <span class="token operator">=</span> <span class="token string">'https://www.sogou.com/'</span>    response <span class="token operator">=</span> re<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>sogou<span class="token punctuation">)</span>    page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true">#storge</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./sougou.html'</span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取完成"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="案例一-网页采集器"><a href="#案例一-网页采集器" class="headerlink" title="案例一: 网页采集器"></a>案例一: 网页采集器</h3><p>知识点: </p><ul><li>url携带的参数处理</li><li><code>User-Agent</code>伪装</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests <span class="token keyword">as</span> re<span class="token comment" spellcheck="true"># UA伪装 User-Agent</span><span class="token comment" spellcheck="true"># 门户网站的的服务器回检测对应请求的载体身份标识, 因此要伪装为浏览器</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 进行UA伪装: 将对应的UA封装到一个字典中</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0(Windows NT 10.0; Win64; x64) AppleWebKit/537.36(KHTML, likeGecko)Chrome/'</span>                      <span class="token string">'101.0.4951.54 Safari/537.36 Edg/101.0.1210.39'</span>    <span class="token punctuation">}</span>    url <span class="token operator">=</span> <span class="token string">'https://www.sogou.com/web'</span>    <span class="token comment" spellcheck="true"># 除了url携带的参数: 封装到字典中</span>    keyWord <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你要搜索的内容: "</span><span class="token punctuation">)</span>    param <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'query'</span><span class="token punctuation">:</span> keyWord    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 对指定的url发起的请求对应的url是带参数的,并且请求过程中处理了参数</span>    response <span class="token operator">=</span> re<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>param<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    data <span class="token operator">=</span> response<span class="token punctuation">.</span>text    fileName <span class="token operator">=</span> keyWord <span class="token operator">+</span> <span class="token string">'.html'</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"爬取成功!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="案例二-破解百度翻译"><a href="#案例二-破解百度翻译" class="headerlink" title="案例二: 破解百度翻译"></a>案例二: 破解百度翻译</h3><p>知识点:</p><ul><li>post请求(携带参数)</li><li>抓包工具使用 寻找ajax的<code>sug</code></li></ul><blockquote><p>ajax的工作原理就是通过XmlHttpRequest对象来向服务器发出异步请求，从服务器中获得数据，然后用Javascript来操作DOM从而更新局部页面。</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220513203151580.png"></p><p><strong>实现</strong>:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests <span class="token keyword">as</span> re<span class="token keyword">import</span> json<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 进行UA伪装</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0(Windows NT 10.0; Win64; x64) AppleWebKit/537.36(KHTML, likeGecko)Chrome/'</span>                      <span class="token string">'101.0.4951.54 Safari/537.36 Edg/101.0.1210.39'</span>    <span class="token punctuation">}</span>    word <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你要查询的单词: "</span><span class="token punctuation">)</span>    post_url <span class="token operator">=</span> <span class="token string">'https://fanyi.baidu.com/sug'</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'kw'</span><span class="token punctuation">:</span> word    <span class="token punctuation">}</span>    response <span class="token operator">=</span> re<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>post_url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 服务器响应数据</span>    dic_obj <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    fp <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'./word.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>dic_obj<span class="token punctuation">,</span> fp<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"查询完毕!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="案例三-爬取哔哩哔哩我的追番数据"><a href="#案例三-爬取哔哩哔哩我的追番数据" class="headerlink" title="案例三: 爬取哔哩哔哩我的追番数据"></a>案例三: 爬取哔哩哔哩我的追番数据</h3><p>实现:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests <span class="token keyword">as</span> re<span class="token keyword">import</span> json<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 进行UA伪装</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0(Windows NT 10.0; Win64; x64) AppleWebKit/537.36(KHTML, likeGecko)Chrome/'</span>                      <span class="token string">'101.0.4951.54 Safari/537.36 Edg/101.0.1210.39'</span>    <span class="token punctuation">}</span>    url <span class="token operator">=</span> <span class="token string">'https://api.bilibili.com/x/space/bangumi/follow/list'</span>    params <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>        <span class="token string">'follow_status'</span><span class="token punctuation">:</span> <span class="token string">'0'</span><span class="token punctuation">,</span>        <span class="token string">'pn'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>        <span class="token string">'ps'</span><span class="token punctuation">:</span> <span class="token string">'15'</span><span class="token punctuation">,</span>        <span class="token string">'vmid'</span><span class="token punctuation">:</span> <span class="token string">'30024259'</span><span class="token punctuation">,</span>        <span class="token string">'ts'</span><span class="token punctuation">:</span> <span class="token string">'1652447014110'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    response <span class="token operator">=</span> re<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>params<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    dic_obj <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    fp <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'./bangumi.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>dic_obj<span class="token punctuation">,</span> fp<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取成功!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;爬虫学习（一）&quot;&gt;&lt;a href=&quot;#爬虫学习（一）&quot; class=&quot;headerlink&quot; title=&quot;爬虫学习（一）&quot;&gt;&lt;/a&gt;爬虫学习（一）&lt;/h1&gt;&lt;h2 id=&quot;一-什么是爬虫&quot;&gt;&lt;a href=&quot;#一-什么是爬虫&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="爬虫笔记" scheme="https://roranrui.cn/categories/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Python" scheme="https://roranrui.cn/tags/Python/"/>
    
    <category term="爬虫" scheme="https://roranrui.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>51单片机学习（三）</title>
    <link href="https://roranrui.cn/posts/3898cff1/"/>
    <id>https://roranrui.cn/posts/3898cff1/</id>
    <published>2022-05-10T14:25:24.000Z</published>
    <updated>2022-05-11T14:14:22.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="51单片机学习笔记-三"><a href="#51单片机学习笔记-三" class="headerlink" title="51单片机学习笔记(三)"></a>51单片机学习笔记(三)</h1><h2 id="一-定时器"><a href="#一-定时器" class="headerlink" title="一. 定时器"></a>一. 定时器</h2><p>定时器在单片机内部就像一个小闹钟一样，根据时钟的输出信号，每隔“一秒”，计数单元的数值就增加一，当计数单元数值增加到“设定的闹钟提醒时间”时，计数单元就会向中断系统发出中断申请，产生“响铃提醒”，使程序跳转到中断服务函数中执行。<br>STC89C52的T0和T1均有四种工作模式：</p><ul><li>模式0：13位定时器/计数器</li><li><strong>模式1：16位定时器/计数器（常用）</strong></li><li>模式2：8位自动重装模式</li><li>模式3：两个8位计数器</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511220105004.png" alt="工作模式1"></p><p><strong>工作模式一的说明</strong>:</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511215651375.png"></p><h3 id="中断程序"><a href="#中断程序" class="headerlink" title="中断程序"></a>中断程序</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/56edfa741e154946956b5cd523603496.png"></p><h3 id="STC89C52中断资源"><a href="#STC89C52中断资源" class="headerlink" title="STC89C52中断资源"></a>STC89C52中断资源</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511215150791.png"></p><h3 id="中断配置"><a href="#中断配置" class="headerlink" title="中断配置"></a>中断配置</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511220049661.png"></p><h3 id="定时器相关寄存器"><a href="#定时器相关寄存器" class="headerlink" title="定时器相关寄存器"></a>定时器相关寄存器</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511215429445.png" alt="TMOD"></p><h3 id="定时器配置"><a href="#定时器配置" class="headerlink" title="定时器配置"></a>定时器配置</h3><p>使用<code>stc-isp</code>中的定时器计算器进行配置</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511221245336.png"></p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p><strong>定时器时钟</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"lcd1602.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"timer0.h"</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Sec<span class="token punctuation">,</span> Min<span class="token punctuation">,</span> Hour<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Timer0Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Clock:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"  :  :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> Sec<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> Min<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Hour<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Timer0_Routine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">1</span>  <span class="token comment" spellcheck="true">// 中断 先执行这部分在执行主程序</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> T0Count<span class="token punctuation">;</span>    TL0 <span class="token operator">=</span> <span class="token number">0x18</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Initial timer value</span>    TH0 <span class="token operator">=</span> <span class="token number">0xFC</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Initial timer value</span>    T0Count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T0Count <span class="token operator">>=</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 1s 执行一次</span>    <span class="token punctuation">{</span>        T0Count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        Sec<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Sec <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Sec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            Min<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Min <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                Hour<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Hour <span class="token operator">>=</span> <span class="token number">24</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Hour <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>按键控制流水灯</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Timer0.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Key.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;INTRINS.H></span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> KeyNum<span class="token punctuation">,</span> LEDMode<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    P2 <span class="token operator">=</span> <span class="token number">0xFE</span><span class="token punctuation">;</span>    <span class="token function">Timer0Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        KeyNum <span class="token operator">=</span> <span class="token function">Key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>KeyNum<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>KeyNum <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                LEDMode<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>LEDMode <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span>LEDMode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Timer0_Routine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">1</span>  <span class="token comment" spellcheck="true">// 中断 先执行这部分在执行主程序</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> T0Count<span class="token punctuation">;</span>    TL0 <span class="token operator">=</span> <span class="token number">0x18</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Initial timer value</span>    TH0 <span class="token operator">=</span> <span class="token number">0xFC</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Initial timer value</span>    T0Count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T0Count <span class="token operator">>=</span> <span class="token number">500</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 1s 执行一次</span>    <span class="token punctuation">{</span>        T0Count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>LEDMode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            P2 <span class="token operator">=</span> <span class="token function">_crol_</span><span class="token punctuation">(</span>P2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>LEDMode <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            P2 <span class="token operator">=</span> <span class="token function">_cror_</span><span class="token punctuation">(</span>P2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-串口通信"><a href="#二-串口通信" class="headerlink" title="二. 串口通信"></a>二. 串口通信</h2><h3 id="串口介绍"><a href="#串口介绍" class="headerlink" title="串口介绍"></a>串口介绍</h3><blockquote><p>  串口是一种应用十分广泛的通讯接口，串口成本低、容易使用、通信线路简单，可实现两个设备的互相通信。<br>  单片机的串口可以使单片机与单片机、单片机与电脑、单片机与各式各样的模块互相通信，极大的扩展了单片机的应用范围，增强了单片机系统的硬件实力。51单片机内部自带UART（Universal Asynchronous Receiver Transmitter，通用异步收发器），可实现单片机的串口通信。</p></blockquote><h3 id="硬件电路"><a href="#硬件电路" class="headerlink" title="硬件电路"></a>硬件电路</h3><ul><li>简单双向串口通信有两根通信线（发送端TXD和接收端RXD）</li><li>TXD与RXD要交叉连接 （一个发送端、一个接收端）</li><li>当只需单向的数据传输时，可以直接一根通信线</li><li>当电平标准不一致时，需要加电平转换芯片</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220510222923452.png"></p><h3 id="电平标准"><a href="#电平标准" class="headerlink" title="电平标准"></a>电平标准</h3><p>电平标准是数据1和数据0的表达方式，是传输线缆中人为规定的电压与数据的对应关系，串口常用的电平标准有如下三种：</p><ul><li>TTL电平：+5V表示1，0V表示0</li><li>RS232电平：-3-15V表示1，+3+15V表示0</li><li>RS485电平：两线压差+2+6V表示1，-2-6V表示0（差分信号）</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220510223011003.png"></p><h3 id="常见通信接口比较"><a href="#常见通信接口比较" class="headerlink" title="常见通信接口比较"></a>常见通信接口比较</h3><p><strong>相关术语</strong></p><ul><li>全双工：通信双方可以在同一时刻互相传输数据</li><li>半双工：通信双方可以互相传输数据，但必须分时复用一根数据线</li><li>单工：通信只能有一方发送到另一方，不能反向传输</li><li>异步：通信双方各自约定通信速率</li><li>同步：通信双方靠一根时钟线来约定通信速率</li><li>总线：连接各个设备的数据传输线路（类似于一条马路，把路边各住户连接起来，使住户可以相互交流）</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511172706579.png"></p><h3 id="51单片机的UART"><a href="#51单片机的UART" class="headerlink" title="51单片机的UART"></a>51单片机的UART</h3><blockquote><p>  STC89C52有1个UART</p><ul><li>模式0：同步移位寄存器</li><li><strong>模式1：8位UART，波特率可变（常用）</strong></li><li><strong>模式2：9位UART，波特率固定</strong></li><li>模式3：9位UART，波特率可变</li></ul></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511173438310.png" alt="image-20220511173438310"></p><h3 id="串口参数及时序图-了解"><a href="#串口参数及时序图-了解" class="headerlink" title="串口参数及时序图(了解)"></a>串口参数及时序图(了解)</h3><ul><li>波特率：串口通信的速率（发送和接收各数据位的间隔时间）</li><li>检验位：用于数据验证</li><li>停止位：用于数据帧间隔</li></ul><blockquote><p>  校验方法: 奇偶校验 0,1校验</p><p>  以奇校验为例</p><p>  0000 0011 1(偶数补1)</p><p>  1110 0000 0(奇数补0)</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/94dae65dd76146a19042500b7ea3d156.png"></p><h3 id="串口模式图"><a href="#串口模式图" class="headerlink" title="串口模式图"></a>串口模式图</h3><blockquote><p>  SBUF：串口数据缓存寄存器，物理上是两个独立的寄存器，但占用相同的地址。写操作时，写入的是发送寄存器，读操作时，读出的是接收寄存器</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511175055139.png" alt="image-20220511175055139"></p><h3 id="串口相关寄存器"><a href="#串口相关寄存器" class="headerlink" title="串口相关寄存器"></a>串口相关寄存器</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511175416787.png" alt="image-20220511175416787"></p><blockquote><p>  51单片机使用: <strong>SCON SBUF</strong></p></blockquote><h3 id="串口和中断系统"><a href="#串口和中断系统" class="headerlink" title="串口和中断系统"></a>串口和中断系统</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/ff4a335bbdea469a8590f6b442c364e8.png"></p><h3 id="串口模式的配置"><a href="#串口模式的配置" class="headerlink" title="串口模式的配置"></a>串口模式的配置</h3><p>使用<code>stc-isp</code>中的串口助手进行配置</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511183039800.png"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511212103441.png"></p><blockquote><p>  文本模式: 以十六进制编码成ASCLL形式显示</p><p>  HEX模式: 以二进制/十六进制显示</p></blockquote><p><strong>SCON:</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511212819296.png"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220511212832414.png"></p><p><strong>SBUF: 串口的数据都保存在此寄存器中, 数值为0~65535</strong></p><h3 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h3><p><strong>电脑向单片机发数据控制LED灯, 单片机向串口发数据</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"UART.h"</span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//串口初始化</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">UART_Routine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">4</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>RI<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果接收标志位为1，接收到了数据</span>    <span class="token punctuation">{</span>        P2<span class="token operator">=</span><span class="token operator">~</span>SBUF<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取数据，取反后输出到LED</span>        <span class="token function">UART_SendByte</span><span class="token punctuation">(</span>SBUF<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将受到的数据发回串口</span>        RI<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接收标志位清0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="附录-模块化编程"><a href="#附录-模块化编程" class="headerlink" title="附录: 模块化编程"></a>附录: 模块化编程</h2><h3 id="定时器部分"><a href="#定时器部分" class="headerlink" title="定时器部分"></a>定时器部分</h3><p><code>Timer0.h</code></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifdef</span> __TIMER0_H__</span><span class="token macro property">#<span class="token directive keyword">define</span> __TIMER0_H__</span><span class="token keyword">void</span> <span class="token function">Timer0Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Timer0.c</code></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token keyword">void</span> <span class="token function">Timer0Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    TMOD <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0xF0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置定时器模式</span>    TMOD <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置定时器模式</span>    TL0 <span class="token operator">=</span> <span class="token number">0x18</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置定时初值</span>    TH0 <span class="token operator">=</span> <span class="token number">0xFC</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置定时初值</span>    TF0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清除TF0标志</span>    TR0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定时器0开始计时</span>    ET0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 中断初值</span>    EA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 中断初值</span>    PT0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//void Timer0_Routine() interrupt 1  // 中断 先执行这部分在执行主程序</span><span class="token comment" spellcheck="true">//{</span><span class="token comment" spellcheck="true">//static unsigned int T0Count;</span><span class="token comment" spellcheck="true">//TL0 = 0x18;//Initial timer value</span><span class="token comment" spellcheck="true">//TH0 = 0xFC;//Initial timer value</span><span class="token comment" spellcheck="true">//T0Count++;</span><span class="token comment" spellcheck="true">//if (T0Count >= 1000)  // 1s 执行一次</span><span class="token comment" spellcheck="true">//{</span><span class="token comment" spellcheck="true">//T0Count = 0;</span><span class="token comment" spellcheck="true">//P2_0 = ~P2_0;</span><span class="token comment" spellcheck="true">//}</span><span class="token comment" spellcheck="true">//}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="串口部分"><a href="#串口部分" class="headerlink" title="串口部分"></a>串口部分</h3><p><code>UART.h</code></p><pre><code>#ifndef __UART_H__#define __UART_H__void UART_Init();void UART_SendByte(unsigned char Byte);#endif</code></pre><p><code>UART.c</code></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token comment" spellcheck="true">/**  * @brief  串口初始化，4800bps@12.000MHz  * @param  无  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SCON<span class="token operator">=</span><span class="token number">0x50</span><span class="token punctuation">;</span>    PCON <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x80</span><span class="token punctuation">;</span>    TMOD <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0x0F</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置定时器模式</span>    TMOD <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置定时器模式</span>    TL1 <span class="token operator">=</span> <span class="token number">0xF3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设定定时初值</span>    TH1 <span class="token operator">=</span> <span class="token number">0xF3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设定定时器重装值</span>    ET1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//禁止定时器1中断</span>    TR1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//启动定时器1</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  串口发送一个字节数据  * @param  Byte 要发送的一个字节数据  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">UART_SendByte</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Byte<span class="token punctuation">)</span><span class="token punctuation">{</span>    SBUF<span class="token operator">=</span>Byte<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>TI<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TI<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H></span></span><span class="token comment" spellcheck="true">/**  * @brief  串口初始化，4800bps@12.000MHz  * @param  无  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SCON<span class="token operator">=</span><span class="token number">0x50</span><span class="token punctuation">;</span>    PCON <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x80</span><span class="token punctuation">;</span>    TMOD <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0x0F</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置定时器模式</span>    TMOD <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置定时器模式</span>    TL1 <span class="token operator">=</span> <span class="token number">0xF3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设定定时初值</span>    TH1 <span class="token operator">=</span> <span class="token number">0xF3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设定定时器重装值</span>    ET1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//禁止定时器1中断</span>    TR1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//启动定时器1</span>    EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    ES<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * @brief  串口发送一个字节数据  * @param  Byte 要发送的一个字节数据  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">UART_SendByte</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Byte<span class="token punctuation">)</span><span class="token punctuation">{</span>    SBUF<span class="token operator">=</span>Byte<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>TI<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TI<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*串口中断函数模板void UART_Routine() interrupt 4{    if(RI==1)    {                RI=0;    }}*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;51单片机学习笔记-三&quot;&gt;&lt;a href=&quot;#51单片机学习笔记-三&quot; class=&quot;headerlink&quot; title=&quot;51单片机学习笔记(三)&quot;&gt;&lt;/a&gt;51单片机学习笔记(三)&lt;/h1&gt;&lt;h2 id=&quot;一-定时器&quot;&gt;&lt;a href=&quot;#一-定时器&quot; cla</summary>
      
    
    
    
    <category term="嵌入式开发" scheme="https://roranrui.cn/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="51单片机" scheme="https://roranrui.cn/tags/51%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    <category term="Hardware" scheme="https://roranrui.cn/tags/Hardware/"/>
    
  </entry>
  
  <entry>
    <title>C++11_新特性</title>
    <link href="https://roranrui.cn/posts/7dec669e/"/>
    <id>https://roranrui.cn/posts/7dec669e/</id>
    <published>2022-05-10T07:41:32.000Z</published>
    <updated>2022-05-11T01:24:30.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-11新特性学习笔记"><a href="#C-11新特性学习笔记" class="headerlink" title="C++11新特性学习笔记"></a>C++11新特性学习笔记</h1><h2 id="一-枚举"><a href="#一-枚举" class="headerlink" title="一. 枚举"></a>一. 枚举</h2><blockquote><p>  C/C++语言可以使用#define和const创建符号常量，而使用enum工具不仅能够创建符号常量，还能定义新的数据类型，但是必须按照一定的规则进行.</p></blockquote><p>枚举类型的定义格式为：<code>enum &lt;类型名&gt; {&lt;枚举常量表&gt;};</code></p><h3 id="对枚举型的变量赋值"><a href="#对枚举型的变量赋值" class="headerlink" title="对枚举型的变量赋值"></a>对枚举型的变量赋值</h3><p>可以使用赋值运算符来赋值:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">enum</span> bits <span class="token punctuation">{</span>one <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> two <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> seven <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> eight <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="枚举的取值范围"><a href="#枚举的取值范围" class="headerlink" title="枚举的取值范围"></a>枚举的取值范围</h3><p><strong>枚举取值范围</strong>的概念：枚举的上限是 大于最大<strong>枚举量</strong>的 最小的2的幂，减去1；</p><p>枚举的下限有两种情况：</p><ol><li><strong>枚举量</strong>的最小值不小于0，则枚举下限取0；</li><li><strong>枚举量</strong>的最小值小于0，则枚举下限是 小于最小<strong>枚举量</strong>的 最大的2的幂，加上1。</li></ol><p><code>enum enumType1 { First=-5，Second=14，Third=10 };</code>则枚举的上限是16-1=15（16大于最大<strong>枚举量</strong>14，且为2的幂）；  枚举的下限是-8+1=-7（-8小于最小<strong>枚举量</strong>-5，且为2的幂）；</p><h2 id="二-typdef"><a href="#二-typdef" class="headerlink" title="二. typdef"></a>二. typdef</h2><blockquote><p>  typdef与define都是替一个对象取一个别名，以此来增强程序的可读性，但是它们在使用和作用上有几点不同：<br>  （1）原理不同<br>       #define是c语言中定义的语法，它是预处理指令，在预处理时进行简单而机械的字符串替换，不做正确性检查，不管含义是否正确照样带入，只有在编译已被展开的源程序时才会发现可能的错误并报错。<br>       typdef是关键字，它在编译时处理，所以typdef有类型检查的功能它在自己的作用域内给一个已经存在的类型一个别名，但是不能在一个函数定义里面使用标识符typdef</p><p>  （2） 功能不同<br>       typdef用来定义类型的别名，这些类型不止包含内部类型（int、double、char等），还包括自定义类型（如struct），可以起到使类型易于记忆的功能。<br>       #define不只是可以为类型取别名，还可以定义常量、变量、编译开关等。<br>  （3）作用域不同<br>       #define没有作用域的限制，只要是之前预定义过的宏，在以后的程序中都可以使用，而typdef有自己的作用域。</p></blockquote><h3 id="用途一："><a href="#用途一：" class="headerlink" title="用途一："></a>用途一：</h3><p>定义一种类型的别名，而不只是简单的宏替换。可以用作同时声明指针型的多个对象。比如：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">char</span><span class="token operator">*</span> pa<span class="token punctuation">,</span> pb<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这多数不符合我们的意图，它只声明了一个指向字符变量的指针和一个字符变量；</span><span class="token comment" spellcheck="true">//以下则可行：</span><span class="token keyword">typedef</span> <span class="token keyword">char</span><span class="token operator">*</span> PCHAR<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 一般用大写</span>PCHAR pa<span class="token punctuation">,</span> pb<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可行，同时声明了两个指向字符变量的指针</span><span class="token keyword">char</span> <span class="token operator">*</span>pa<span class="token punctuation">,</span> <span class="token operator">*</span>pb<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//虽然也可行，但相对来说没有用typedef的形式直观，尤其在需要大量指针的地方，typedef的方式更省事。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用途二："><a href="#用途二：" class="headerlink" title="用途二："></a>用途二：</h3><p>为复杂的声明定义一个新的简单的别名。方法是：在原来的声明里逐步用别名替换一部分复杂声明，如此循环，把带变量名的部分留到最后替换，得到的就是原声明的最简化版。</p><p>原声明：</p><p><code>int *(*a[5])(int, char*);</code><br>变量名为a，直接用一个新别名pFun替换a就可以了：</p><p><code>typedef int *(*pFun)(int, char*);</code> </p><p>原声明的最简化版：<br><code>pFun a[5];</code></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-11新特性学习笔记&quot;&gt;&lt;a href=&quot;#C-11新特性学习笔记&quot; class=&quot;headerlink&quot; title=&quot;C++11新特性学习笔记&quot;&gt;&lt;/a&gt;C++11新特性学习笔记&lt;/h1&gt;&lt;h2 id=&quot;一-枚举&quot;&gt;&lt;a href=&quot;#一-枚举&quot; class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C++-std::move总结</title>
    <link href="https://roranrui.cn/posts/62884e14/"/>
    <id>https://roranrui.cn/posts/62884e14/</id>
    <published>2022-05-08T07:06:43.000Z</published>
    <updated>2022-05-08T07:20:37.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-std-move总结"><a href="#C-std-move总结" class="headerlink" title="C++-std::move总结"></a>C++-std::move总结</h1><h2 id="一-移动语义"><a href="#一-移动语义" class="headerlink" title="一. 移动语义"></a>一. 移动语义</h2><p>移动语义可以使得编译器使用不那么昂贵的移动操作，来替换昂过的复制操作。同拷贝构造函数、拷贝赋值运算符赋予人们复制意义的能力一样，移动构造函数、移动赋值运算符也赋予人们移动语义的能力。更通俗的说：移动语义是通过移动构造函数或者移动赋值运算符实现的</p><p>举个例子，对于C++标准库提供的<code>std::shared_ptr&lt;&gt;</code>智能指针，当对其进行复制操作时，需要增加其引用计数，而引用计数是个原子类型，因此增加引用计数是个耗时操作；而当对其进行移动操作的时候，则引用计数会保持不变，也即无需进行引用计数的操作。</p><h2 id="二-左值引用和右值引用"><a href="#二-左值引用和右值引用" class="headerlink" title="二. 左值引用和右值引用"></a>二. 左值引用和右值引用</h2><p>已知左值引用的形式为 <code>T&amp; t</code></p><p>右值引用是在左值引用的基础上多加一个<code>&amp;</code>，形式变为 <code>T&amp;&amp; t</code></p><p>这种通过 <code>&amp;</code> 的个数区分左值引用和右值引用的方法，在大多数的普通函数中没有问题，但是放到模板参数或者 <code>auto</code> 关键字之后的位置就不太灵了，因为这些地方会推导实际的类型，正是有了参数推导，才使得模板中出现了“万能引用”的说法，也就是下面这样：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> year <span class="token operator">=</span> <span class="token number">2020</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  函数 <code>func</code> 即能接受变量 <code>year</code> 这样的左值作为参数，也能接受 <code>2020</code> 这样的常数作为右值，简直太完美。那么这里是怎样推导的呢？这就要请出一个引用的“折叠”规则了，描述如下：</p><p>  A&amp; &amp; 折叠成 A&amp;<br>  A&amp; &amp;&amp; 折叠成 A&amp;<br>  A&amp;&amp; &amp; 折叠成 A&amp;<br>  A&amp;&amp; &amp;&amp; 折叠成 A&amp;&amp;</p></blockquote><h2 id="三-std-move使用与作用"><a href="#三-std-move使用与作用" class="headerlink" title="三. std::move使用与作用"></a>三. std::move使用与作用</h2><p>把左值转化成右值的转化函数， <code>std::move</code> 函数的实现</p><pre class="line-numbers language-cpp"><code class="language-cpp">  <span class="token comment" spellcheck="true">/**   *  @brief  Convert a value to an rvalue.   *  @param  __t  A thing of arbitrary type.   *  @return The parameter cast to an rvalue-reference to allow moving it.  */</span>  <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> _Tp<span class="token operator">></span>    <span class="token keyword">constexpr</span> <span class="token keyword">typename</span> std<span class="token operator">::</span>remove_reference<span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token operator">::</span>type<span class="token operator">&amp;&amp;</span>    <span class="token function">move</span><span class="token punctuation">(</span>_Tp<span class="token operator">&amp;&amp;</span> __t<span class="token punctuation">)</span> <span class="token keyword">noexcept</span>    <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> std<span class="token operator">::</span>remove_reference<span class="token operator">&lt;</span>_Tp<span class="token operator">></span><span class="token operator">::</span>type<span class="token operator">&amp;&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>__t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>std::move 的内部只做了一个强制类型转换，除此之外啥也没干，其实就是对传入的参数重新解释了一下，并没有实质性的动作。</p><p><strong>作用</strong>:</p><p>那么为什么要使用 std::move 这个名字呢？这个名字更多的是起到提醒的作用，告诉使用者这里可能进行了到右值的转化，相关的对象后续可能发生移动，“被掏空”了，如果你继续使用这个对象，行为是未定义的，后果自负。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-std-move总结&quot;&gt;&lt;a href=&quot;#C-std-move总结&quot; class=&quot;headerlink&quot; title=&quot;C++-std::move总结&quot;&gt;&lt;/a&gt;C++-std::move总结&lt;/h1&gt;&lt;h2 id=&quot;一-移动语义&quot;&gt;&lt;a href=&quot;#一</summary>
      
    
    
    
    <category term="C++学习" scheme="https://roranrui.cn/categories/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++-Lambda表达式</title>
    <link href="https://roranrui.cn/posts/7d872b64/"/>
    <id>https://roranrui.cn/posts/7d872b64/</id>
    <published>2022-05-08T05:51:44.000Z</published>
    <updated>2022-05-08T06:45:36.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-Lambda表达式"><a href="#C-Lambda表达式" class="headerlink" title="C++ Lambda表达式"></a>C++ Lambda表达式</h1><blockquote><p>   Lambda表达式是现代C++在C ++ 11和更高版本中的一个新的语法糖 ，在C++11、C++14、C++17和C++20中Lambda表达的内容还在不断更新。 lambda表达式（也称为lambda函数）是在调用或作为函数参数传递的位置处定义匿名函数对象的便捷方法。通常，lambda用于封装传递给算法或异步方法的几行代码 。本文主要介绍Lambda的工作原理以及使用方法。</p></blockquote><h2 id="一-Lambda表达式定义"><a href="#一-Lambda表达式定义" class="headerlink" title="一. Lambda表达式定义"></a>一. Lambda表达式定义</h2><p> ISO C ++标准官网展示了一个简单的lambda 表示式实例:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">void</span> <span class="token function">abssort</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span><span class="token function">sort</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">+</span> n<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// Lambda expression begins</span>        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;</span> std<span class="token operator">::</span><span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// end of lambda expression</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三个参数传递的是排序规则, 直接将排序函数的实现写在应该传递函数的位置，省去了定义排序函数的过程，对于这种不需要复用，且短小的函数，直接传递函数体可以增加代码的可读性。</p><h3 id="语法定义"><a href="#语法定义" class="headerlink" title="语法定义"></a>语法定义</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/f86a9e30f7474aff10be27e4b51c6f64.png"></p><ol><li><strong>捕获列表</strong>。在C ++规范中也称为Lambda导入器， 捕获列表总是出现在Lambda函数的开始处。实际上，[]是Lambda引出符。编译器根据该引出符判断接下来的代码是否是Lambda函数，捕获列表能够捕捉上下文中的变量以供Lambda函数使用。</li><li>参数列表。与普通函数的参数列表一致。如果不需要参数传递，则可以连同括号“()”一起省略。</li><li><strong>可变规格</strong><em>。mutable修饰符， 默认情况下Lambda函数总是一个const函数，mutable可以取消其常量性。在使用该修饰符时，参数列表不可省略（即使参数为空）。</em></li><li><strong>异常说明</strong>。用于Lamdba表达式内部函数抛出异常。</li><li><strong>返回类型</strong>。 追踪返回类型形式声明函数的返回类型。我们可以在不需要返回值的时候也可以连同符号”-&gt;”一起省略。此外，在返回类型明确的情况下，也可以省略该部分，让编译器对返回类型进行推导。</li><li><strong>lambda函数体</strong>。内容与普通函数一样，不过除了可以使用参数之外，还可以使用所有捕获的变量。</li></ol><h4 id="捕获列表"><a href="#捕获列表" class="headerlink" title="捕获列表"></a>捕获列表</h4><ul><li>[]表示不捕获任何变量</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">auto</span> function <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello World!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>[var]表示值传递方式捕获变量var</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">auto</span> function <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">{</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>[=]表示值传递方式捕获所有父作用域的变量（包括this）</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">auto</span> function <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">{</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"index: "</span><span class="token operator">&lt;&lt;</span> index <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span>                 <span class="token operator">&lt;&lt;</span> <span class="token string">"num: "</span><span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>[&amp;var]表示引用传递捕捉变量var</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">auto</span> function <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>num<span class="token punctuation">]</span><span class="token punctuation">{</span>        num <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"num: "</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>[&amp;]表示引用传递方式捕捉所有父作用域的变量（包括this）</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">auto</span> function <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">{</span>        num <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        index <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"index: "</span><span class="token operator">&lt;&lt;</span> index <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span>             <span class="token operator">&lt;&lt;</span> <span class="token string">"num: "</span><span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>[this]表示值传递方式捕捉当前的this指针</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">Lambda</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">auto</span> function <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">{</span>             <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Lambda demo<span class="token punctuation">;</span>    demo<span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了单独使用外, 也可一起组合使用, 如:</p><ul><li><p>[=,&amp;a,&amp;b]表示以引用传递的方式捕捉变量a和b，以值传递方式捕捉其它所有变量。</p></li><li><p>[&amp;,a,this]表示以值传递的方式捕捉变量a和this，引用传递方式捕捉其它所有变量。</p></li></ul><blockquote><p>  不过值得注意的是，捕捉列表不允许变量重复传递。下面一些例子就是典型的重复，会导致编译时期的错误。例如：</p><ul><li>[=,a]这里已经以值传递方式捕捉了所有变量，但是重复捕捉a了，会报错的;</li><li>[&amp;,&amp;this]这里&amp;已经以引用传递方式捕捉了所有变量，再捕捉this也是一种重复。</li></ul></blockquote><h4 id="参数列表"><a href="#参数列表" class="headerlink" title="参数列表"></a>参数列表</h4><blockquote><p>  除了捕获列表之外，lambda还可以接受输入参数。参数列表是可选的，并且在大多数方面类似于函数的参数列表。</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">auto</span> function <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> first<span class="token punctuation">,</span> <span class="token keyword">int</span> second<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> first <span class="token operator">+</span> second<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">function</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="异常说明"><a href="#异常说明" class="headerlink" title="异常说明"></a>异常说明</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// C4297 expected </span><span class="token punctuation">{</span>      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="返回类型"><a href="#返回类型" class="headerlink" title="返回类型"></a>返回类型</h4><p>同函数, 若无return语句, 则编译器返回推导类型为void</p><h4 id="函数体"><a href="#函数体" class="headerlink" title="函数体"></a>函数体</h4><p>Lambda表达式的lambda主体（标准语法中的<em>复合语句</em>）可以包含普通方法或函数的主体可以包含的任何内容。</p><h2 id="二-Lambda工作原理"><a href="#二-Lambda工作原理" class="headerlink" title="二. Lambda工作原理"></a>二. Lambda工作原理</h2><blockquote><p>  编译器会把一个lambda表达式生成一个匿名类的匿名对象，并在类中重载函数调用运算符,实现了一个operator()方法。</p><p>  <strong>仿函数与Lamdba表达式的作用是一致的</strong></p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">auto</span> print <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello World!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>等价于</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">print_class</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello World！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用构造的类创建对象，print此时就是一个函数对象</span><span class="token keyword">auto</span> print <span class="token operator">=</span> <span class="token function">print_class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三-一些简单案例"><a href="#三-一些简单案例" class="headerlink" title="三. 一些简单案例"></a>三. 一些简单案例</h3><p><strong>遍历算法</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">myPrint</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">myPrint2</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// 顺序插入数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/// 逆序输出数据</span>    <span class="token comment" spellcheck="true">/// 第一种</span><span class="token comment" spellcheck="true">//    for (auto it = v.size() - 1; it > 0; it++)</span><span class="token comment" spellcheck="true">//    {</span><span class="token comment" spellcheck="true">//        cout &lt;&lt; it &lt;&lt; endl;</span><span class="token comment" spellcheck="true">//    }</span>    <span class="token comment" spellcheck="true">/// 第二种</span><span class="token comment" spellcheck="true">//    for_each(v.begin(), v.end(), myPrint);</span>    <span class="token comment" spellcheck="true">/// 第三种</span><span class="token comment" spellcheck="true">//    for_each(v.begin(), v.end(), myPrint2());</span>    <span class="token comment" spellcheck="true">///第四种</span><span class="token comment" spellcheck="true">//    for_each(v.begin(), v.end(), [](int x){cout &lt;&lt; x &lt;&lt; endl;});</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>线程创建</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// vector 容器存储线程</span>    vector<span class="token operator">&lt;</span>thread<span class="token operator">></span> workers<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        workers<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">thread</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"thread function\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"main thread\n"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过 for_each 循环每一个线程</span>    <span class="token comment" spellcheck="true">// 第三个参数赋值一个task任务</span>    <span class="token comment" spellcheck="true">// 符号'[]'会告诉编译器我们正在用一个匿名函数</span>    <span class="token comment" spellcheck="true">// lambda函数将它的参数作为线程的引用t</span>    <span class="token comment" spellcheck="true">// 然后一个一个的join</span>    <span class="token function">for_each</span><span class="token punctuation">(</span>workers<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> workers<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>thread <span class="token operator">&amp;</span>t<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-Lambda表达式&quot;&gt;&lt;a href=&quot;#C-Lambda表达式&quot; class=&quot;headerlink&quot; title=&quot;C++ Lambda表达式&quot;&gt;&lt;/a&gt;C++ Lambda表达式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;   Lambda表达式是现代C+</summary>
      
    
    
    
    <category term="C++学习" scheme="https://roranrui.cn/categories/C-%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下配置OpenCV</title>
    <link href="https://roranrui.cn/posts/9223e133/"/>
    <id>https://roranrui.cn/posts/9223e133/</id>
    <published>2022-05-07T13:34:56.000Z</published>
    <updated>2022-05-07T15:07:04.213Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu下配置OpenCV的环境"><a href="#Ubuntu下配置OpenCV的环境" class="headerlink" title="Ubuntu下配置OpenCV的环境"></a>Ubuntu下配置OpenCV的环境</h1><blockquote><p>  个人先看看这篇文章: <a href="https://roranrui.cn/posts/f18a3b77/">OpenCV在CLion下的环境配置 | 若然无亦的Blog (roranrui.cn)</a></p></blockquote><h2 id="一-前置准备"><a href="#一-前置准备" class="headerlink" title="一. 前置准备"></a>一. 前置准备</h2><ul><li><p>下载OpenCV源码: <a href="https://opencv.org/releases/">https://opencv.org/releases/</a></p></li><li><p>下载OpenCV_Contrib拓展库: <a href="https://github.com/opencv/opencv_contrib">https://github.com/opencv/opencv_contrib</a></p><ul><li><blockquote><p>如果官网下载失败, 可以尝试从这里下载:</p><p><a href="https://pan.baidu.com/s/1OOPVQVbZEPuBqU0NHCDQaA">https://pan.baidu.com/s/1OOPVQVbZEPuBqU0NHCDQaA</a></p><p>提取码: rrwy</p></blockquote></li></ul></li><li><p>下载QT:  <a href="https://www.qt.io/download">https://www.qt.io/download</a></p></li><li><p>安装cmake, gcc, g++:</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> cmake<span class="token function">sudo</span> apt <span class="token function">install</span> gcc<span class="token function">sudo</span> apt <span class="token function">install</span> g++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>安装依赖环境:</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span>  build-essential <span class="token function">sudo</span> apt <span class="token function">install</span> cmake <span class="token function">git</span> libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev   <span class="token function">sudo</span> apt <span class="token function">install</span> python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​第三行中，可能会出现 【无法定位软件包libjasper-dev 的错误提示】</p><p>​依次输入以下命令:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> add-apt-repository <span class="token string">"deb http://security.ubuntu.com/ubuntu xenial-security main"</span><span class="token function">sudo</span> apt update<span class="token function">sudo</span> apt upgrade<span class="token function">sudo</span> apt <span class="token function">install</span> libjasper1 libjasper-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将下载到的OpenCV文件解压, 同级目录下新建一个<code>build</code>文件夹</p><blockquote><p>这里我将带版本号的文件夹的版本号去掉了 即opencv-4.5.4 -&gt; opencv</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507215022064.png" alt="image-20220507215022064"></p><hr><h2 id="二-编译"><a href="#二-编译" class="headerlink" title="二. 编译"></a>二. 编译</h2><p><strong>在bulid路径下执行:</strong></p><p><strong>cmake编译参数:</strong></p><pre class="line-numbers language-bash"><code class="language-bash">cmake <span class="token punctuation">..</span>/opencv -DCMAKE_BUILD_TYPE<span class="token operator">=</span>Release \-DOPENCV_GENERATE_PKGCONFIG<span class="token operator">=</span>ON \-DOPENCV_EXTRA_MODULES_PATH<span class="token operator">=</span>/home/roranrui/mylibs/opencv/opencv_contrib/modules -DBUILD_DOCS<span class="token operator">=</span>ON -DBUILD_EXAMPLES<span class="token operator">=</span>ON \-DOPENCV_GENERATE_PKGCONFIG<span class="token operator">=</span>ON \-DWITH_GTK_2_X<span class="token operator">=</span>ON \-DWITH_OPENGL<span class="token operator">=</span>ON<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>-DOPENCV_EXTRA_MODULES_PATH=</p><p>这里换成自己的路径</p><h3 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题:"></a>出现问题:</h3><p><strong>卡住</strong>(大概率发生)</p><p>如果没有连接外网，执行过程会卡住，是因为文件下载不下来，等他卡完（一会儿就会跳过结束）这时候，去build文件夹，打开CMakeDownloadLog.txt文件，这里面记录了下载失败的文件，搜索关键词cmake_download，我这里有13个</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507220344961.png" alt="一般是这几个"></p><blockquote><p>  可以在这里下载这些缺失的文件: <a href="https://pan.baidu.com/s/1MTw7nEjrTZBlHoQ4x1KAlg">https://pan.baidu.com/s/1MTw7nEjrTZBlHoQ4x1KAlg</a>提取码: rrwy</p></blockquote><p>使用方法：ippicv_2020_lnx_intel64_20191018_general.tgz这个文件放在<code>/home/roranrui/mylibs/opencv/opencv/3rdparty/ippicv/</code>文件夹下，并打开该文件夹下的<strong>ippicv.cmake</strong>文件，修改如下:</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507220659915.png" alt="image-20220507220659915"></p><p>face_landmark_model.dat这个文件放在<code>/home/roranrui/mylibs/opencv/opencv_contrib/modules/face/</code>文件夹，并修改该文件夹下的<strong>CMakeLists.txt</strong>文件如下：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507220833500.png" alt="image-20220507220833500"></p><p>其余的文件均放在opencv_contrib/modules/xfeatures2d/src/文件夹下</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507220344961.png" alt="这几个"></p><p>build文件夹下继续执行构建命令 -j 后面是线程数</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">make</span> -j4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译完成后:</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/20201027182832744.png"></p><p>再执行:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">make</span> <span class="token function">install</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就ok</p><hr><h2 id="三-配置路径"><a href="#三-配置路径" class="headerlink" title="三. 配置路径"></a>三. 配置路径</h2><h3 id="如何确定自己的共享链接库位置以及版本？"><a href="#如何确定自己的共享链接库位置以及版本？" class="headerlink" title="如何确定自己的共享链接库位置以及版本？"></a><strong>如何确定自己的共享链接库位置以及版本？</strong></h3><p><strong>ubutnu终端中输入：</strong></p><pre class="line-numbers language-bash"><code class="language-bash">ldconfig -p <span class="token operator">|</span><span class="token function">grep</span> opencv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507221600067.png" alt="image-20220507221600067"></p><p>默认情况下编译opencv4等其他版本如果没有修改CMAKE_PREFIX_PATH中的路径。则都会存在/usr/local/lib目录下。</p><p>于是lib库目录就为：<code>LIBS += /usr/local/lib/libopencv*</code></p><p><code>usr即（Unix system resources</code>）下。<br>终端执行：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /etc/ld.so.conf.d/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> opencv.conf <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 将/usr/local/lib ，/usr/lib编辑写入。ESC 后wq保存退出即可。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507221751575.png" alt="image-20220507221751575"></p><h3 id="如何确定ubuntu下想用的OpenCV版本Inlcude路径？"><a href="#如何确定ubuntu下想用的OpenCV版本Inlcude路径？" class="headerlink" title="如何确定ubuntu下想用的OpenCV版本Inlcude路径？"></a><strong>如何确定ubuntu下想用的OpenCV版本Inlcude路径？</strong></h3><blockquote><p>在比较新的opencv版本中一般只包括一个头文件#include&lt;opencv2/opencv.hpp&gt;就能实现大多数功能。这是因为在新的版本中一些core等模块的头文件都给统一进去了。</p></blockquote><p>终端打开: </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/ld.so.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加:</p><pre class="line-numbers language-bash"><code class="language-bash">include /usr/local/includeinclude /usr/local/include/opencv4include /usr/local/include/opencv4/opencv2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编辑后保存。</p><p>将自己编译的opencv4头文件路径添加进去。</p><p>更新并保存配置：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> ldconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意：如果找不到/usr/local路径，就要去看一下路径在不在环境变量内：没有的话添加如下图内容即可。</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/bash.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/20191206105729813.png" alt="img"></p><p>验证, 终端输入</p><pre class="line-numbers language-bash"><code class="language-bash">pkg-config --modversion opencv4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现版本号即成功:</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507222159389.png" alt="image-20220507222159389"></p><hr><h2 id="四-配置IDE"><a href="#四-配置IDE" class="headerlink" title="四. 配置IDE"></a>四. 配置IDE</h2><h3 id="QT"><a href="#QT" class="headerlink" title="QT"></a>QT</h3><p>1.打开QT Creator，新建一个项目名为test，选择Qt Consle Applacation后面一直确定默认就行了，注意一下项目路径。</p><p>2 .pro文件：添加下面内容：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">INCLUDEPATH+</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/include \            /usr/local/include/opencv4 \            /usr/local/include/opencv4/opencv2</span><span class="token attr-name">LIBS</span> <span class="token attr-value">+= /usr/local/lib/libopencv*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>稍微说明一下上面的路径：</p><p>INCLUDEPATH 为自己为Ubuntu电脑所编译的opencv的头文件目录（也可称为include目录）</p><p>LIBS 为Ubuntu电脑内opencv的共享链接库（.so.4.1即版本号），在windows中被称为动态链接库（即.dll文件也是带有版本号的）。</p><p>Ubuntu中opencv的共享链接库为（我编译的是4.1版本因此为）：</p><p>libopencv_xphoto.so.4.1</p><p>libopencv_xfeatures2d.so.4.1等等（许多图像处理可用到的库我就不一一列举）</p><p>因此可以在QT中LIBS += /usr/local/lib/libopencv* 设置*通配符即可，而不用一一都给写上（PS：如果不嫌麻烦也可都写上，效果一样）</p></blockquote><p>main.cpp 中测试</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;QCoreApplication></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;opencv2/opencv.hpp></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> cv<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Mat src<span class="token punctuation">;</span>    src<span class="token operator">=</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">"/home/roranrui/图片/roranrui.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">namedWindow</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果:</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507222454837.png" alt="image-20220507222454837"></p><hr><h3 id="CLion"><a href="#CLion" class="headerlink" title="CLion"></a>CLion</h3><p>CMakeLists.txt 文件添加:</p><pre class="line-numbers language-cmake"><code class="language-cmake">find_package(OpenCV REQUIRED)message(STATUS "OpenCV library status:")message(STATUS "version: ${OpenCV_VERSION}")message(STATUS "libraries: ${OpenCV_LIBS}")message(STATUS "    include path: ${OpenCV_INCLUDE_DIRS}")add_executable(My_Learning main.cpp)target_link_libraries(My_Learning ${OpenCV_LIBS})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中, target_link_libraries()处需要与你的可执行程序同名</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507224548996.png" alt="编译成功提示"></p><p><strong>测试程序</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/opencv.hpp></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> cv<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Mat img <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">"/home/roranrui/图片/roranrui.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello, World!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507222454837.png" alt="image-20220507222454837"></p><p>成功</p><hr><h2 id="五-其他问题"><a href="#五-其他问题" class="headerlink" title="五. 其他问题"></a>五. 其他问题</h2><p>提示出现: <strong>Failed to load module canberra-gtk-module</strong></p><p>解决: </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libcanberra-gtk-module<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ubuntu下配置OpenCV的环境&quot;&gt;&lt;a href=&quot;#Ubuntu下配置OpenCV的环境&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu下配置OpenCV的环境&quot;&gt;&lt;/a&gt;Ubuntu下配置OpenCV的环境&lt;/h1&gt;&lt;blockquo</summary>
      
    
    
    
    <category term="环境配置" scheme="https://roranrui.cn/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="环境配置" scheme="https://roranrui.cn/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Scrcpy-实现手机电脑多屏幕协同</title>
    <link href="https://roranrui.cn/posts/607cae0/"/>
    <id>https://roranrui.cn/posts/607cae0/</id>
    <published>2022-05-07T06:57:14.000Z</published>
    <updated>2022-05-07T09:12:00.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scrcpy-实现手机电脑多屏幕协同"><a href="#Scrcpy-实现手机电脑多屏幕协同" class="headerlink" title="Scrcpy-实现手机电脑多屏幕协同"></a>Scrcpy-实现手机电脑多屏幕协同</h1><blockquote><p>  多屏协同，是原一碰传功能的升级版本，一碰传重点在传输，而升级后的多屏协同，它不仅仅是平板/电脑和手机之间文件互传，更是利用平板/电脑的运算能力和专业系统能力，实现平板/电脑和手机的无缝协同，键盘、鼠标成为手机的外设，在一个大屏设备上完成两个设备的任务，回微信、回邮件等，同时也利用平板/电脑更专业的应用生态</p></blockquote><h2 id="一-什么是Scrcpy"><a href="#一-什么是Scrcpy" class="headerlink" title="一. 什么是Scrcpy"></a>一. 什么是Scrcpy</h2><p>​简单地来说，scrcpy就是通过adb调试的方式来将手机屏幕投到电脑上，并可以通过电脑控制您的Android设备。它可以通过USB连接，也可以通过Wifi连接（类似于隔空投屏），而且不需要任何root权限，不需要在手机里安装任何程序。scrcpy同时适用于GNU / Linux，Windows和macOS。</p><p><strong>特性：</strong></p><ul><li>亮度（原生，仅显示设备屏幕）</li><li>性能（30~60fps）</li><li>质量（1920×1080或以上）</li><li>低延迟（35~70ms）</li><li>启动时间短（显示第一张图像约1秒）</li><li>非侵入性（设备上没有安装任何东西）</li></ul><h3 id="使用scrcpy的要求"><a href="#使用scrcpy的要求" class="headerlink" title="使用scrcpy的要求"></a>使用scrcpy的要求</h3><ol><li>Android设备至少需要API 21（Android 5.0以上版本）;</li><li>确保在您的设备上启用了adb调试</li><li>在某些设备上，您还需要启用其他选项以使用键盘和鼠标控制它。</li></ol><blockquote><p>  adb的全称为Android Debug Bridge，就是起到调试桥的作用。通过adb我们可以在<a href="https://baike.baidu.com/item/Eclipse">Eclipse</a>中方便通过DDMS来调试Android程序，说白了就是<a href="https://baike.baidu.com/item/debug">debug</a>工具。—百度百科</p></blockquote><h4 id="如何开启adb调试"><a href="#如何开启adb调试" class="headerlink" title="如何开启adb调试"></a>如何开启adb调试</h4><p><strong>以笔者的手机为例(红米K40 MIUI版本13.0.2)</strong></p><h5 id="①进入开发者模式"><a href="#①进入开发者模式" class="headerlink" title="①进入开发者模式"></a>①进入开发者模式</h5><p>依次进入: 设置-&gt;我的设备-&gt;全部参数   点击MIUI版本多次, 就可以开启开发者模式</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507150849001.png" alt="image-20220507150849001"></p><h5 id="②开启usb调试"><a href="#②开启usb调试" class="headerlink" title="②开启usb调试"></a>②开启usb调试</h5><p>依次进入: 设置-&gt;更多设置-&gt;开发者选项 开启<strong>USB调试</strong>, <strong>USB调试(安全设置)</strong></p><blockquote><p>  开发者选项中含有其他可能会影响系统运行的选项, 请勿随意开启任何功能</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507151311210.png" alt="image-20220507151311210"></p><h3 id="下载与配置Scrcpy"><a href="#下载与配置Scrcpy" class="headerlink" title="下载与配置Scrcpy"></a>下载与配置Scrcpy</h3><p>Github地址：<a href="https://github.com/Genymobile/scrcpy">Genymobile/scrcpy: Display and control your Android device</a></p><p>进入release发行</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507151447381.png" alt="image-20220507151447381"></p><p>根据自己的需求下载对应版本的文件即可</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507151534779.png" alt="image-20220507151534779"></p><p>解压的目录:</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507151637282.png" alt="image-20220507151637282"></p><p>接下来需要将该目录加入系统环境变量</p><p>在WINDOWS10下, 依次进入: 设置-&gt;系统-&gt;关于</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507151813267.png" alt="image-20220507151813267"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507151826437.png" alt="选择环境变量"></p><p>在系统变量处点击编辑 将解压目录的地址添加进去 就可以在cmd中直接操作了!</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507151954837.png" alt="image-20220507151954837"></p><hr><p><code>win + R</code>打开cmd输入<code>adb version</code>验证是否配置成功</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507171159024.png" alt="image-20220507171159024"></p><h2 id="二-实现多屏协同"><a href="#二-实现多屏协同" class="headerlink" title="二. 实现多屏协同"></a>二. 实现多屏协同</h2><h3 id="方案一-使用USB进行连接"><a href="#方案一-使用USB进行连接" class="headerlink" title="方案一: 使用USB进行连接"></a>方案一: 使用USB进行连接</h3><ol><li>手机通过USB连接到PC上，首次连接会弹出是否信任该电脑，点击始终信任即可。</li><li>命令行运行<code>adb usb</code>查看是否连接成功</li></ol><pre class="line-numbers language-bash"><code class="language-bash">adb usb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507152533354.png" alt="image-20220507152533354"></p><p>同时手机会显示已连接到usb调试</p><p>第一次连接:</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507152728600.png" alt="image-20220507152728600"></p><p>此时连接成功后, 直接运行<code>scrcpy</code>即可</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507152845362.png" alt="image-20220507152845362"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507152838116.png" alt="image-20220507152838116"></p><h3 id="方案二-使用无线连接"><a href="#方案二-使用无线连接" class="headerlink" title="方案二: 使用无线连接"></a>方案二: 使用无线连接</h3><blockquote><p>  此连接方式更加方便快捷，若宽带速率高，使用效果更佳，使用方法也非常简单。</p><p>  为保证传输速率和质量, 建议使用手机连接电脑端热点</p></blockquote><ol><li>确保PC和手机在同一Wifi中</li><li><strong>手机先通过USB与PC相连</strong></li><li>在PC上运行 adb tcpip 服务端口，如端口为5555</li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507153208942.png" alt="image-20220507153208942"></p><ol start="4"><li><p>拔下你的设备，断开USB连接</p></li><li><p>在PC上运行 adb connect 手机IP:服务端口(手机IP可通过手机的<code>状态信息</code>, 或wifi网络详情查看)，或者登录路由器查看，一般以192.168开头）</p></li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507153315694.png" alt="image-20220507153315694"></p><ol start="6"><li>运行<code>scrcpy</code> 即可实现无线同屏</li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>投屏运行成功后, cmd窗口不可关闭, 因为此时该窗口相当于一个<code>进程</code>, 如果关闭, 投屏也将关闭</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220507154117089.png" alt="image-20220507154117089"></p><hr><h2 id="三-其他操作"><a href="#三-其他操作" class="headerlink" title="三. 其他操作"></a>三. 其他操作</h2><h3 id="比特率修改"><a href="#比特率修改" class="headerlink" title="比特率修改"></a>比特率修改</h3><p>无线投屏, 可能传输速率会导致性能变慢, 默认的scrcpy比特率是8Mbps，这对于Wi-Fi连接来说可能太多了。根据使用情况，降低比特率和分辨率可能是一个很好的折中方案。</p><pre class="line-numbers language-bash"><code class="language-bash">scrcpy --bit-rate 2M <span class="token comment" spellcheck="true"># 或者简写</span>scrcpy -b2M -m800<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="降低分辨率"><a href="#降低分辨率" class="headerlink" title="降低分辨率"></a>降低分辨率</h3><p>有时候，可以通过降低镜像的分辨率来提高性能。</p><p>要同时限制宽度和高度到某个值 (例如 1024)：</p><pre class="line-numbers language-cpp"><code class="language-cpp">scrcpy <span class="token operator">--</span>max<span class="token operator">-</span>size <span class="token number">1024</span>scrcpy <span class="token operator">-</span>m <span class="token number">1024</span>  # 简写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="限制帧率"><a href="#限制帧率" class="headerlink" title="限制帧率"></a>限制帧率</h3><p>要限制采集的帧率：</p><pre class="line-numbers language-cpp"><code class="language-cpp">scrcpy <span class="token operator">--</span>max<span class="token operator">-</span>fps <span class="token number">15</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="启动时关闭设备屏幕"><a href="#启动时关闭设备屏幕" class="headerlink" title="启动时关闭设备屏幕"></a>启动时关闭设备屏幕</h3><p>使用命令行选项在启动时镜像时可以关闭设备屏幕，这一点也挺实用：</p><pre class="line-numbers language-bash"><code class="language-bash">scrcpy --turn-screen-offscrcpy -S<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>窗口的标题默认为设备型号。可以通过如下命令修改：</p><pre class="line-numbers language-bash"><code class="language-bash">scrcpy --window-title <span class="token string">'My device'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="无边框"><a href="#无边框" class="headerlink" title="无边框"></a>无边框</h3><p>禁用窗口边框：</p><pre class="line-numbers language-bash"><code class="language-bash">scrcpy --window-borderless<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><p>可以通过以下命令旋转窗口：</p><pre class="line-numbers language-bash"><code class="language-bash">scrcpy --rotation 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可选的值有：</p><ul><li><code>0</code>: 无旋转</li><li><code>1</code>: 逆时针旋转 90°</li><li><code>2</code>: 旋转 180°</li><li><code>3</code>: 顺时针旋转 90°</li></ul><p>也可以使用 Ctrl+← <em>(左箭头)</em> 和 Ctrl+→ <em>(右箭头)</em> 随时更改。</p><h3 id="查看设备信息"><a href="#查看设备信息" class="headerlink" title="查看设备信息"></a>查看设备信息</h3><pre class="line-numbers language-bash"><code class="language-bash">adb devices<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td>切换全屏模式</td><td>Ctrl+f</td></tr><tr><td>向左旋转显示屏</td><td>Ctrl+← <em>（左）</em></td></tr><tr><td>向右旋转显示屏</td><td>Ctrl+→ <em>（右）</em></td></tr><tr><td>将窗口大小调整为 1：1（像素完美）</td><td>Ctrl+g</td></tr><tr><td>调整窗口大小以删除黑色边框</td><td>Ctrl+w|<em>双击¹</em></td></tr><tr><td>点击<code>HOME</code></td><td>Ctrl+h|<em>中键单击</em></td></tr><tr><td>点击<code>BACK</code></td><td>Ctrl+b|<em>右键单击²</em></td></tr><tr><td>点击<code>APP_SWITCH</code></td><td>Ctrl+s|<em>第四次点击³</em></td></tr><tr><td>点击（解锁屏幕）⁴<code>MENU</code></td><td>Ctrl+m</td></tr></tbody></table><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Scrcpy-实现手机电脑多屏幕协同&quot;&gt;&lt;a href=&quot;#Scrcpy-实现手机电脑多屏幕协同&quot; class=&quot;headerlink&quot; title=&quot;Scrcpy-实现手机电脑多屏幕协同&quot;&gt;&lt;/a&gt;Scrcpy-实现手机电脑多屏幕协同&lt;/h1&gt;&lt;blockquo</summary>
      
    
    
    
    <category term="软件插件分享" scheme="https://roranrui.cn/categories/%E8%BD%AF%E4%BB%B6%E6%8F%92%E4%BB%B6%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="经验分享" scheme="https://roranrui.cn/tags/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>C++多线程进阶三</title>
    <link href="https://roranrui.cn/posts/64bc088f/"/>
    <id>https://roranrui.cn/posts/64bc088f/</id>
    <published>2022-05-06T11:12:07.000Z</published>
    <updated>2022-05-08T09:13:50.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程进阶-三"><a href="#多线程进阶-三" class="headerlink" title="多线程进阶(三)"></a>多线程进阶(三)</h1><blockquote><p>  本篇内容比较抽象, 了解即可</p></blockquote><h2 id="一-WINDOWS临界区"><a href="#一-WINDOWS临界区" class="headerlink" title="一. WINDOWS临界区"></a>一. WINDOWS临界区</h2><blockquote><p>  临界区又称关键代码段，指的是一小段代码在代码执行前，它需要独占一些资源。</p></blockquote><p><strong>初始化</strong></p><p>程序中通常将多线程同时访问的某个资源作为临界区，需要定义一个CRITICAL_SECTION类型的变量，然后调用InitializeCriticalSection函数对变量进行初始化；</p><p><strong>函数原型</strong>：<code>VOID InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection );</code><br>参数说明：lpCriticalSection：一个CRITICAL_SECTION结构指针，表示用于初始化的临界区；<br>InitializeCriticalSection函数在内部设置了CRITICAL_SECTION结构的某些成员变量，所以它不会失败。</p><p><strong>定义临界区</strong><br>为了将某一段代码定义为临界区，需要调用EnterCriticalSection函数；<br><strong>函数原型</strong>：<code>VOID WINAPI EnterCriticalSection(__inout LPCRITICAL_SECTION lpCriticalSection);</code></p><p>该函数的作用是判断是否有线程访问临界区资源：</p><p>如果没有，就改变CRITICAL_SECTION结构的成员变量的值，赋予当前线程访问权，函数立即返回；<br>如果有线程正在访问资源，则进入等待状态，直到没有线程访问。</p><p><strong>释放资源</strong><br>函数原型：<code>void WINAPI LeaveCriticalSection( _Inout_LPCRITICAL_SECTION lpCriticalSection);</code></p><p><strong>释放CRITICAL_SECTION结构指针</strong><br>函数原型：<code>void WINAPI DeleteCriticalSection(_Inout_ LPCRITICAL_SECTION lpCriticalSection)t</code></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> __WINDOWSJQ_</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">// 把收到的消息传入队列</span>    <span class="token keyword">void</span> <span class="token function">inMsgRecvQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"收到消息，并放入队列 "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span>  __WINDOWSJQ_</span>            <span class="token function">EnterCriticalSection</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_winsec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进入临界区</span>            <span class="token comment" spellcheck="true">//EnterCriticalSection(&amp;my_winsec);//可以再次进入临界区,程序不会出错</span>            msgRecvQueue<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">LeaveCriticalSection</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_winsec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//离开临界区</span>            <span class="token comment" spellcheck="true">//LeaveCriticalSection(&amp;my_winsec);//如果进入两次，必须离开两次不会报错</span><span class="token macro property">#<span class="token directive keyword">elif</span></span>            my_mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            msgRecvQueue<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            my_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">//  __WINDOWSJQ_</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"消息入队结束"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 从队列中取出消息</span>    <span class="token keyword">void</span> <span class="token function">outMsgRecvQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span>  __WINDOWSJQ_</span>            <span class="token function">EnterCriticalSection</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_winsec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进入临界区</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>msgRecvQueue<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 队列不为空</span>                <span class="token keyword">int</span> num <span class="token operator">=</span> msgRecvQueue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"从消息队列中取出 "</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                msgRecvQueue<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 消息队列为空</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"消息队列为空 "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">LeaveCriticalSection</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_winsec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//离开临界区</span><span class="token macro property">#<span class="token directive keyword">elif</span></span>            my_mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>msgRecvQueue<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 队列不为空</span>                <span class="token keyword">int</span> num <span class="token operator">=</span> msgRecvQueue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"从消息队列中取出 "</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                msgRecvQueue<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                my_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 消息队列为空</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"消息队列为空 "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                my_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">//  __WINDOWSJQ_</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"消息出队结束"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __WINDOWSJQ_</span>        <span class="token function">InitializeCriticalSection</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_winsec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用临界区之前要初始化</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// __WINDOWSJQ_</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> msgRecvQueue<span class="token punctuation">;</span>    mutex my_mutex<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __WINDOWSJQ_</span>    CRITICAL_SECTION my_winsec<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//windows中的临界区，非常类似C++11中的mutex</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// __WINDOWSJQ_</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    A myobj<span class="token punctuation">;</span>    thread<span class="token function">myInMsgObj</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>A<span class="token operator">::</span>outMsgRecvQueue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myobj<span class="token punctuation">)</span><span class="token punctuation">;</span>    thread<span class="token function">myOutMsgObj</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>A<span class="token operator">::</span>inMsgRecvQueue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>myobj<span class="token punctuation">)</span><span class="token punctuation">;</span>    myInMsgObj<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    myOutMsgObj<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  Windows临界区，同一个线程是可以重复进入的，但是进入的次数与离开的次数必须相等。<br>  C++互斥量则不允许同一个线程重复加锁。</p><p>  windows临界区是在windows编程中的内容，了解一下即可，效果几乎可以等同于c++11的mutex</p><p>  #include &lt;windows.h&gt;<br>  windows中的临界区同mutex一样，可以保护一个代码段。</p><p>  但windows的临界区可以进入多次，离开多次，但是进入的次数与离开的次数必须相等，不会引起程序报异常出错。</p></blockquote><hr><h2 id="二-自动析构"><a href="#二-自动析构" class="headerlink" title="二. 自动析构"></a>二. 自动析构</h2><blockquote><p>  C++：lock_guard防止忘了释放信号量，自动释放<br>  windows：可以写个类自动释放临界区：</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CWinLock</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">CWinLock</span><span class="token punctuation">(</span>CRITICAL_SECTION <span class="token operator">*</span>pCritmp<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        my_winsec <span class="token operator">=</span>pCritmp<span class="token punctuation">;</span>        <span class="token function">EnterCriticalSection</span><span class="token punctuation">(</span>my_winsec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">CWinLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">LeaveCriticalSection</span><span class="token punctuation">(</span>my_winsec<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    CRITICAL_SECTION <span class="token operator">*</span>my_winsec<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="三-其他mutex互斥量"><a href="#三-其他mutex互斥量" class="headerlink" title="三. 其他mutex互斥量"></a>三. 其他mutex互斥量</h2><h3 id="1-std-recursive-mutex"><a href="#1-std-recursive-mutex" class="headerlink" title="1.  std::recursive_mutex"></a>1.  std::recursive_mutex</h3><ul><li>std::mutex 独占式互斥量</li><li>std::recursive_mutex：递归独占互斥量, 允许在同一个线程中同一个互斥量多次被 lock() ，（但是递归加锁的次数是有限制的，太多可能会报异常），效率要比mutex低。</li></ul><p>如果真的用了 recursive_mutex 要考虑代码是否有优化空间，如果能调用一次 lock()就不要调用多次。</p><h3 id="2-std-timed-mutex"><a href="#2-std-timed-mutex" class="headerlink" title="2. std::timed_mutex"></a>2. std::timed_mutex</h3><p>std::timed_mutex：是待超时的独占互斥量</p><ul><li><strong>try_lock_for()：</strong></li></ul><p>等待一段时间，如果拿到了锁，或者超时了未拿到锁，就继续执行（有选择执行）如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">std<span class="token operator">::</span>chrono<span class="token operator">::</span>milliseconds <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>my_mymutex<span class="token punctuation">.</span><span class="token function">try_lock_for</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//......拿到锁返回ture</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    std<span class="token operator">::</span>chrono<span class="token operator">::</span>milliseconds <span class="token function">sleeptime</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>this_thread<span class="token operator">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>sleeptime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>try_lock_until()：</strong></li></ul><p>是一个未来的时间点，在这个未来的时间没到的时间内，如果拿到了锁就往下走；如果时间到了，没拿到锁程序流程也往下走。</p><pre class="line-numbers language-cpp"><code class="language-cpp">std<span class="token operator">::</span>chrono<span class="token operator">::</span>milliseconds <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>my_mymutex<span class="token punctuation">.</span><span class="token function">try_lock_until</span><span class="token punctuation">(</span>chrono<span class="token operator">::</span>steady_clock<span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//......拿到锁返回ture</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    std<span class="token operator">::</span>chrono<span class="token operator">::</span>milliseconds <span class="token function">sleeptime</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>this_thread<span class="token operator">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>sleeptime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>   两者的区别就是一个参数是时间段，一个参数是时间点</p></blockquote><p><strong>其他:</strong></p><p>std::recursive_timed_mutex：是待超时的递归独占互斥量</p><hr><h2 id="四-线程池概念"><a href="#四-线程池概念" class="headerlink" title="四. 线程池概念"></a>四. 线程池概念</h2><blockquote><p>  场景设想：服务器程序， 每来一个客户端，就创建一个新线程为这个客户提供服务。</p></blockquote><p>问题：</p><p>1、2万个玩家，不可能给每个玩家创建一个新线程，此程序写法在这种场景下不通。</p><p>2、程序稳定性问题：编写代码中，“时不时地<strong>突然</strong>”创建一个线程，这种写法，一般情况下不会出错，但是不稳定的；</p><p>线程池：把一堆线程弄到一起，统一管理。这种统一管理调度，循环利用的方式，就叫做线程池。</p><p>实现方式：程序启动时，一次性创建好一定数量的线程。这种方式让人更放心，觉得程序代码更稳定。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220506201905184.png" alt="WIN10下的线程池"></p><p><strong>线程创建数量：</strong></p><ol><li><p>线程创建的数量极限的问题</p><p>一般来讲，2000个线程基本就是极限；再创建就会崩溃。</p></li><li><p>线程创建数量建议</p><ol><li>采用某些计数开发程序提供的建议，遵照建议和指示来确保程序高效执行。</li><li>创建多线程完成业务；考虑可能被阻塞的线程数量，创建多余最大被阻塞线程数量的线程，如100个线程被阻塞再充值业务，开110个线程就是很合适的</li><li>线程创建数量尽量不要超过500个，尽量控制在200个之内；</li></ol></li></ol><h2 id="五-一些补充"><a href="#五-一些补充" class="headerlink" title="五. 一些补充"></a>五. 一些补充</h2><h3 id="1-虚假唤醒"><a href="#1-虚假唤醒" class="headerlink" title="1. 虚假唤醒"></a>1. 虚假唤醒</h3><p>notify_one或者notify_all唤醒wait()后，实际有些线程可能不满足唤醒的条件，就会造成虚假唤醒，可以在wait中再次进行判断解决虚假唤醒。</p><p><strong>解决：</strong></p><p>wait中要有第二个参数（lambda），并且这个lambda中要正确判断所处理的公共数据是否存在。</p><pre class="line-numbers language-cpp"><code class="language-cpp">my_cond<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>ulock1<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>msgRecvQueue<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-atomic操作"><a href="#2-atomic操作" class="headerlink" title="2. atomic操作"></a>2. atomic操作</h3><p>如:</p><pre class="line-numbers language-cpp"><code class="language-cpp">std<span class="token operator">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">atm</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> atm <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里只有读取atm是原子操作，但是整个这一行代码 <code>cout &lt;&lt; atm &lt;&lt; endl</code>; 并不是原子操作，导致最终显示在屏幕上的值是一个“曾经值”。</p><p>读取内容:</p><pre class="line-numbers language-cpp"><code class="language-cpp">std<span class="token operator">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">atm</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> atm_2 <span class="token operator">=</span> atm<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>应使用: <code>atomic&lt;int&gt; atm2(atm.load());</code>  以原子方式读atomic对象的值。</p><p>写入内容:</p><pre class="line-numbers language-cpp"><code class="language-cpp">atm2<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>  原子操作实质上是：不允许在进行原子对象操作时进行CPU的上下文切换</p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;多线程进阶-三&quot;&gt;&lt;a href=&quot;#多线程进阶-三&quot; class=&quot;headerlink&quot; title=&quot;多线程进阶(三)&quot;&gt;&lt;/a&gt;多线程进阶(三)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;  本篇内容比较抽象, 了解即可&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="多线程" scheme="https://roranrui.cn/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
    <category term="多线程编程" scheme="https://roranrui.cn/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++多线程进阶二</title>
    <link href="https://roranrui.cn/posts/351142c7/"/>
    <id>https://roranrui.cn/posts/351142c7/</id>
    <published>2022-05-04T15:03:50.000Z</published>
    <updated>2022-05-06T15:53:06.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程进阶-二"><a href="#多线程进阶-二" class="headerlink" title="多线程进阶(二)"></a>多线程进阶(二)</h1><h2 id="一-原子操作-std-atomic"><a href="#一-原子操作-std-atomic" class="headerlink" title="一. 原子操作 std::atomic"></a>一. 原子操作 std::atomic</h2><h3 id="1-原子操作概念引出范例："><a href="#1-原子操作概念引出范例：" class="headerlink" title="1. 原子操作概念引出范例："></a>1. 原子操作概念引出范例：</h3><blockquote><p>  互斥量：<a href="https://so.csdn.net/so/search?q=%E5%A4%9A%E7%BA%BF%E7%A8%8B&amp;spm=1001.2101.3001.7020">多线程</a>编程中 用于保护共享数据：先锁住， 操作共享数据， 解锁。</p></blockquote><p>有两个线程，对一个变量进行操作，一个线程读这个变量的值，一个线程往这个变量中写值。</p><p>即使是一个简单变量的读取和写入操作，如果不加锁，也有可能会导致读写值混乱（一条C语句会被拆成3、4条汇编语句来执行，所以仍然有可能混乱）</p><h3 id="2-基本的std-atomic用法范例"><a href="#2-基本的std-atomic用法范例" class="headerlink" title="2. 基本的std::atomic用法范例"></a>2. 基本的std::atomic用法范例</h3><blockquote><p>  可以把原子操作理解成一种：不需要用到互斥量加锁（无锁）技术的多线程并发编程方式。</p></blockquote><p><strong>原子操作：在多线程中不会被打断的程序执行片段。</strong></p><p>从效率上来说，原子操作要比互斥量的方式效率要高。</p><p>互斥量的加锁一般是针对一个代码段，而原子操作针对的一般都是一个变量。</p><p>原子操作，一般都是指“不可分割的操作”；也就是说这种操作状态要么是完成的，要么是没完成的，不可能出现半完成状态。</p><p>std::atomic来代表原子操作，是个类模板。其实std::atomic是用来封装某个类型的值的</p><p>需要添加<code>#include &lt;atomic&gt;</code></p><p><strong>未使用原子操作:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;future></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**  * @brief 线程入口函数  * @param 无  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">mythread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"main thread started"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\tthread id: "</span> <span class="token operator">&lt;&lt;</span> this_thread<span class="token operator">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    thread <span class="token function">t1</span><span class="token punctuation">(</span>mythread<span class="token punctuation">)</span><span class="token punctuation">;</span>    thread <span class="token function">t2</span><span class="token punctuation">(</span>mythread<span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"理论结果: 2000000"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"实际结果: "</span> <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"end"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220504231352549.png" alt="image-20220504231352549"></p><p>可以看到程序不稳定, 可使用mutex来解决:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">mythread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        my_mutex<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        my_mutex<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是使用mutex效率低…</p><p>所以, 引出新的操作:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;atomic></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>atomic<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> count<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**  * @brief 线程入口函数  * @param 无  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">mythread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"main thread started"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\tthread id: "</span> <span class="token operator">&lt;&lt;</span> this_thread<span class="token operator">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    thread <span class="token function">t1</span><span class="token punctuation">(</span>mythread<span class="token punctuation">)</span><span class="token punctuation">;</span>    thread <span class="token function">t2</span><span class="token punctuation">(</span>mythread<span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"理论结果: 2000000"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t实际结果: "</span> <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"end"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220504231832324.png" alt="image-20220504231832324"></p><p>注意: </p><p><strong>原子操作一般用于操作单个变量, 而涉及多个变量的, 还是要使用互斥量</strong></p><blockquote><p>  <strong>原子操作一般是指不可分割的操作, 这种操作没用中间状态, 只有完成和没完成状态</strong></p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;atomic></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>atomic<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">g_ifEnd</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//封装了一个类型为bool的 对象（值）</span><span class="token keyword">void</span> <span class="token function">mythread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token operator">::</span>chrono<span class="token operator">::</span>milliseconds <span class="token function">dura</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>g_ifEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"thread id = "</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>this_thread<span class="token operator">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"运行中"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        std<span class="token operator">::</span>this_thread<span class="token operator">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>dura<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"thread id = "</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>this_thread<span class="token operator">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"运行结束"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token operator">::</span>thread <span class="token function">t1</span><span class="token punctuation">(</span>mythread<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>thread <span class="token function">t2</span><span class="token punctuation">(</span>mythread<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>chrono<span class="token operator">::</span>milliseconds <span class="token function">dura</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>this_thread<span class="token operator">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>dura<span class="token punctuation">)</span><span class="token punctuation">;</span>    g_ifEnd <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"程序执行完毕"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  上述程序中, 如果count++ 换成 count = count + 1, 则结果仍会出现错误</p></blockquote><p>一般atomic原子操作，针对<code>++，--，+=，-=，&amp;=，|=，^=</code>是支持的，其他操作不一定支持。</p><hr><h2 id="二-std-async深入理解"><a href="#二-std-async深入理解" class="headerlink" title="二. std::async深入理解"></a>二. std::async深入理解</h2><h3 id="1-std-async参数详述"><a href="#1-std-async参数详述" class="headerlink" title="1. std::async参数详述"></a>1. std::async参数详述</h3><p>async 用来创建一个<strong>异步任务</strong></p><ul><li>std::launch::deferred【延迟调用】</li><li>std::launch::async【强制创建一个线程】</li></ul><blockquote><p>  std::async()我们一般不叫创建线程（他能够创建线程），我们一般叫它创建一个异步任务。</p><p>  std::async和std::thread最明显的不同，就是 async 有时候并不创建新线程。</p></blockquote><h4 id="①如果用std-launch-deferred-来调用async"><a href="#①如果用std-launch-deferred-来调用async" class="headerlink" title="①如果用std::launch::deferred 来调用async"></a>①如果用std::launch::deferred 来调用async</h4><p>延迟到调用 get() 或者 wait() 时执行，如果不调用就不会执行</p><h4 id="②如果用std-launch-async来调用async"><a href="#②如果用std-launch-async来调用async" class="headerlink" title="②如果用std::launch::async来调用async"></a>②如果用std::launch::async来调用async</h4><p><strong>强制</strong>这个异步任务在新线程上执行，这意味着，系统必须要创建出新线程来运行入口函数。</p><h4 id="③如果同时用-std-launch-async-std-launch-deferred"><a href="#③如果同时用-std-launch-async-std-launch-deferred" class="headerlink" title="③如果同时用 std::launch::async | std::launch::deferred"></a>③如果同时用 std::launch::async | std::launch::deferred</h4><p>这里这个 | 意味着async的行为可能是 std::launch::async 创建新线程立即执行， 也可能是 std::launch::deferred 没有创建新线程并且延迟到调用get()执行，由<strong>系统根据实际情况来决定</strong>采取哪种方案</p><h4 id="④不带额外参数-std-async-mythread"><a href="#④不带额外参数-std-async-mythread" class="headerlink" title="④不带额外参数 std::async(mythread)"></a>④不带额外参数 std::async(mythread)</h4><p>只给async 一个入口函数名，此时的系统给的默认值是 std::launch::async | std::launch::deferred 和 ③ 一样，有系统自行决定<strong>异步</strong>还是<strong>同步</strong>运行。</p><hr><h3 id="2-std-async和std-thread-区别"><a href="#2-std-async和std-thread-区别" class="headerlink" title="2. std::async和std::thread()区别"></a>2. std::async和std::thread()区别</h3><blockquote><ul><li>std::thread()如果系统资源紧张可能出现创建线程失败的情况，如果创建线程失败那么程序就可能崩溃，而且不容易拿到函数返回值（不是拿不到）</li><li>std::async()创建异步任务。可能创建线程也可能不创建线程，并且容易拿到线程入口函数的返回值；</li></ul></blockquote><p>由于系统资源限制：</p><ul><li>①如果用std::thread创建的线程太多，则可能创建失败，系统报告异常，崩溃。</li><li>②如果用std::async，一般就不会报异常，因为如果系统资源紧张，无法创建新线程的时候，async不加额外参数的调用方式就不会创建新线程。而是在后续调用get()请求结果时执行在这个调用get()的线程上。</li></ul><blockquote><p>  如果你强制async一定要创建新线程就要使用 std::launch::async 标记。承受的代价是，系统资源紧张时可能崩溃。</p></blockquote><ul><li>③根据经验，一个程序中线程数量 不宜超过100~200 。</li></ul><hr><h3 id="3-async不确定性问题的解决"><a href="#3-async不确定性问题的解决" class="headerlink" title="3. async不确定性问题的解决"></a>3. async不确定性问题的解决</h3><blockquote><p>  不加额外参数的async调用时让系统自行决定，是否创建新线程。</p></blockquote><p><code>std::future&lt;int&gt; result = std::async(mythread);</code><br>问题焦点在于这个写法，任务到底有没有被推迟执行。</p><p>通过wait_for返回状态来判断：</p><pre class="line-numbers language-cpp"><code class="language-cpp">std<span class="token operator">::</span>future_status status <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">wait_for</span><span class="token punctuation">(</span>std<span class="token operator">::</span>chrono<span class="token operator">::</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// std::future_status status = result.wait_for(6s);</span><span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> std<span class="token operator">::</span>future_status<span class="token operator">::</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//超时：表示线程还没有执行完</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"超时了，线程还没有执行完"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> std<span class="token operator">::</span>future_status<span class="token operator">::</span>ready<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//表示线程成功放回</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"线程执行成功，返回"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> std<span class="token operator">::</span>future_status<span class="token operator">::</span>deferred<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"线程延迟执行"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;多线程进阶-二&quot;&gt;&lt;a href=&quot;#多线程进阶-二&quot; class=&quot;headerlink&quot; title=&quot;多线程进阶(二)&quot;&gt;&lt;/a&gt;多线程进阶(二)&lt;/h1&gt;&lt;h2 id=&quot;一-原子操作-std-atomic&quot;&gt;&lt;a href=&quot;#一-原子操作-std-ato</summary>
      
    
    
    
    <category term="多线程" scheme="https://roranrui.cn/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
    <category term="多线程编程" scheme="https://roranrui.cn/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>视频拍摄频闪解决方案</title>
    <link href="https://roranrui.cn/posts/9c58482b/"/>
    <id>https://roranrui.cn/posts/9c58482b/</id>
    <published>2022-05-04T13:58:06.000Z</published>
    <updated>2022-05-07T15:11:06.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="视频频闪的快速解决方案"><a href="#视频频闪的快速解决方案" class="headerlink" title="视频频闪的快速解决方案"></a>视频频闪的快速解决方案</h1><blockquote><p>  文章转载自: <a href="https://extremeer.github.io/media/ff2c776f/">Extremeer 极振科技传媒工作室</a></p><p>  作者: Marzzz 已授权</p></blockquote><hr><blockquote><p>  在拍摄视频时，有时镜头前的灯光或屏幕录制下来后会有相应频闪，灯光忽明忽暗。频闪与帧率、快门速度、用电频率的关系息息相关。本文所指频闪只是由于交流电频率导致的频闪，LED与屏幕刷新率等频闪不在此考虑范畴内。</p></blockquote><h2 id="1-小白方案"><a href="#1-小白方案" class="headerlink" title="1. 小白方案"></a>1. 小白方案</h2><p>对于不想深入了解的同学，可以直接套用下列方案来规避大部分频闪。</p><table><thead><tr><th>所在地区</th><th>设置帧率</th><th>快门速度（可选）</th></tr></thead><tbody><tr><td>中国及欧亚的大多数地区</td><td>25fps；50fps</td><td>1/50；1/100</td></tr><tr><td>北美、日本、韩国等地区</td><td>30fps；60fps</td><td>1/60；1/120</td></tr></tbody></table><hr><h2 id="2-高阶方案"><a href="#2-高阶方案" class="headerlink" title="2. 高阶方案"></a>2. 高阶方案</h2><h3 id="①-用电频率"><a href="#①-用电频率" class="headerlink" title="① 用电频率"></a>① 用电频率</h3><p>交流电的频率和性质决定了灯光会一明一暗的进行交变脉冲，Hz表示每秒交变几次。交流电频率50Hz，周期0.02s，在电流整流后电路将后半个周期电流反向，从而使灯光脉冲频率为100Hz，周期为0.01s。</p><p>不同地区的用电频率是不一样的，这也导致出现了不同的视频制式来适应不同的频率。</p><p>地区用电频率视频制式常见帧率<br>欧洲和亚洲的大多数地区50HzPAL25fps; 50fps<br>北美、日本、韩国等地区60HzNTSC30fps; 60fps<br>在人眼前这种脉冲闪烁也许非常微小甚至完全无法感受到，但对于手机及相机来说有时设置不当这种脉冲就会十分明显。</p><h3 id="②-帧率（FPS）"><a href="#②-帧率（FPS）" class="headerlink" title="② 帧率（FPS）"></a>② 帧率（FPS）</h3><blockquote><p>  帧率，用于测量显示帧数的量度。FPS（Frames Per Second）指每秒拍摄的帧数。一般说，帧率影响画面流畅度，帧率越大，画面越流畅；帧率越小，画面越有跳动感。</p></blockquote><p>当快门速度一定且与光闪烁频率无整除关系时：</p><ul><li>帧率与光闪烁频率若有倍数关系，每一帧的起始采样点就相同，那么在相同快门的情况下每一帧的亮度就相同。</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220504220941910.png" alt="image-20220504220941910"></p><p>​红色面积的横轴代表快门速度，红色面积代表每一帧的进光量<br>​数字位置代表每一帧的开始，两个数字的间隔代表每一帧<br>​<strong>可以看到每一帧的亮度是相同的</strong></p><ul><li>反之，帧率与光闪烁频率若无倍数关系，每一帧的起始采样点就不同，每一帧的亮度就不同而造成频闪。</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220504221251359.png" alt="image-20220504221251359"></p><p>​红色面积的横轴代表快门速度，红色面积代表每一帧的进光量<br>​数字位置代表每一帧的开始，两个数字的间隔代表每一帧<br>​<strong>可以看到每一帧的亮度是不同的</strong><br>​而在规避频闪的方法中，匹配帧率通常是最简单的。</p><p><strong>帧率方案：设置帧率，让光源闪烁频率被这个帧率整除。</strong></p><blockquote><p>   假设在中国PAL制式下拍摄视频，因为用电频率是50Hz，光闪烁频率为100Hz，则大多数时候只需要设置25或者50fps，就能在多数情况下避免频闪。</p><p>  如果在如北美NTSC制式下拍摄视频，就相应选择30或者60fps。</p></blockquote><h3 id="③-快门速度（不推荐）"><a href="#③-快门速度（不推荐）" class="headerlink" title="③ 快门速度（不推荐）"></a>③ 快门速度（不推荐）</h3><blockquote><p>  快门速度，指的是相机快门进行一次开启到闭合的时间。</p></blockquote><p>当帧率一定且与光闪烁频率无整除关系时：</p><ul><li>若快门速度与光闪烁频率有倍数关系，那么每一帧曝光的时候进光量就会固定等于一周期的量从而稳定无频闪。</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220504221314818.png" alt="image-20220504221314818"></p><ul><li>反之，若快门速度与光闪烁频率无倍数关系，那么每一帧曝光的时候进光量就会受光闪烁的不同时刻影响导致每一帧亮度不同从而造成频闪。</li></ul><p>​<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220504221415493.png" alt="image-20220504221415493"><br><strong>快门方案：设置快门速度，让光源闪烁频率被这个快门速度整除。</strong></p><p>如：中国供电频率50Hz，光闪烁频率为100Hz，将快门速度设定为1/50或1/100即可解决。</p><p>这个选项通常不好确定。在调整快门速度的同时，你也要避免慢速快门而导致运动模糊的产生。</p><h3 id="④-帧率与快门速度的混合运用"><a href="#④-帧率与快门速度的混合运用" class="headerlink" title="④ 帧率与快门速度的混合运用"></a>④ 帧率与快门速度的混合运用</h3><ol><li>通常，在中国使用PAL制（即fps调整到25或50），无论多少快门速度都不会产生频闪。原因是相机的采样间隔是和灯光的周期是同步的，例如50帧的时候采样周期是20ms，是灯光周期10ms的整数倍，在每一个周期内，采样的起始点是一样的。所以无论多少快门速度，每一帧的亮度都是相同的。</li><li>而在中国使用NTSC制（即fps调整到30或60），假如视频帧率为60帧，意味着每次采样的时间点是在这个周期中的不同地方，这时只有快门速度等于光闪频率的倍数的时候才不会有频闪。</li><li>实际上，以部分索尼相机为例，在人造光源下，索尼相机的快门速度最高到1/100，如果超过1/100，如1/2500，虽然也是50Hz的整数倍，但在NTSC制下，仍然会出现频闪，甚至1/125都会。</li><li>PAL制下也并不能为所欲为，过高的快门速度，画面上会出现不明显的明暗条带，从上至下规律移动，且随着快门升高，画面上会出现细小的横纹。</li></ol><hr><h2 id="3-插件方案"><a href="#3-插件方案" class="headerlink" title="3.插件方案"></a>3.插件方案</h2><p>如果素材已经拍摄，则可以使用相关插件进行后期补救。</p><ul><li>如果使用Adobe Premiere Pro或Adobe After Effects，则可以使用插件DEFlicker进行消除。（需要下载）。</li><li>如果使用达芬奇Davinci Resolve在版本14以上可以使用自带效果去闪烁。</li></ul><p><strong>但请注意一切后期都不如前期做好准备。</strong></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;视频频闪的快速解决方案&quot;&gt;&lt;a href=&quot;#视频频闪的快速解决方案&quot; class=&quot;headerlink&quot; title=&quot;视频频闪的快速解决方案&quot;&gt;&lt;/a&gt;视频频闪的快速解决方案&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;  文章转载自: &lt;a href=&quot;htt</summary>
      
    
    
    
    <category term="视频相关" scheme="https://roranrui.cn/categories/%E8%A7%86%E9%A2%91%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="经验分享" scheme="https://roranrui.cn/tags/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
    <category term="视频制作" scheme="https://roranrui.cn/tags/%E8%A7%86%E9%A2%91%E5%88%B6%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV学习笔记一</title>
    <link href="https://roranrui.cn/posts/44e644ae/"/>
    <id>https://roranrui.cn/posts/44e644ae/</id>
    <published>2022-05-03T14:48:29.000Z</published>
    <updated>2022-05-06T15:46:16.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenCV学习笔记"><a href="#OpenCV学习笔记" class="headerlink" title="OpenCV学习笔记"></a>OpenCV学习笔记</h1><blockquote><p>  基于OpenCV 4.5.4</p><p>  参考自: 《OpenCV3编程入门——毛星云》</p></blockquote><h2 id="一-OpenCV基础"><a href="#一-OpenCV基础" class="headerlink" title="一. OpenCV基础"></a>一. OpenCV基础</h2><h3 id="1-基础图像容器Mat"><a href="#1-基础图像容器Mat" class="headerlink" title="1. 基础图像容器Mat"></a>1. 基础图像容器Mat</h3><blockquote><p>  Mat 是一个类，有两个数据部分组成，矩阵头（包含矩阵尺寸、存储方法、存储地址等信息）和一个指向所有存储像素值的矩阵。</p></blockquote><p>拷贝构造函数和赋值运算符只复制信息头，与原对象共用一个矩阵，若改一个，则都受影响。<br>使用函数<code>clone()</code>或<code>copyTo()</code>可以复制矩阵。</p><p><strong>使用Mat创建图像</strong><br><code>Mat M = (2, 2, CV_8UC3, Scalar(0, 0, 255));</code></p><p>参数解释:</p><ul><li>2，2为二维矩阵的大小</li><li>CV_[位数][带符号与否][类型前缀]C[通道数]</li><li>Scalar(a,b,c,d)四个参数，是一个类。表示颜色</li><li>在RGB中，前三个依次为B,G,R，最后一个可不写。</li></ul><h3 id="2-常用数据结构"><a href="#2-常用数据结构" class="headerlink" title="2. 常用数据结构"></a>2. 常用数据结构</h3><h4 id="Point类"><a href="#Point类" class="headerlink" title="Point类"></a>Point类</h4><blockquote><p>  用于表示一个点</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp">Point point<span class="token punctuation">;</span>point<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>point<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>Point <span class="token function">point</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Scalar类"><a href="#Scalar类" class="headerlink" title="Scalar类"></a>Scalar类</h4><blockquote><p>  颜色表示</p></blockquote><p><code>Scalar（0，0，255）</code> 依次是B, G, R的值(OpenCV存储RGB的顺序是BGR)</p><h4 id="Size类"><a href="#Size类" class="headerlink" title="Size类"></a>Size类</h4><blockquote><p>  用于表示图像的宽和高</p></blockquote><p><code>Size（5，5）</code>表示宽高都为5</p><h4 id="Rect类"><a href="#Rect类" class="headerlink" title="Rect类"></a>Rect类</h4><p>Rect类的成员变量有下:</p><ul><li><strong>x, y, width, height, 分别为左上角点的坐标和矩形的宽和高。</strong></li></ul><p>常用的成员函数有：</p><ul><li>Size()返回值为Size();</li><li>area()返回矩形的面积。</li><li>Constrins(Point)判断点是否在矩形内；</li><li>inside（Rect）函数判断矩形是否在矩形内；</li><li>tl()返回左上角点的坐标；</li><li>br()返回右下角点的坐标。还可对矩形进行交集、并集、平移和缩放操作。</li></ul><h4 id="RotateRect类"><a href="#RotateRect类" class="headerlink" title="RotateRect类*"></a>RotateRect类*</h4><blockquote><p>  RotatedRect是一个存储旋转矩形的类，通常用来存储最小外包矩形函数minAreaRect( )和椭圆拟合函数fitEllipse( )返回的结果。存储的值，完全取决在于函数的返回</p></blockquote><p><strong>类的声明:</strong>              </p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">RotatedRect</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span><span class="token operator">:</span>                    <span class="token function">RotatedRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//构造函数</span>        <span class="token function">RotatedRect</span><span class="token punctuation">(</span><span class="token keyword">const</span> Point2f<span class="token operator">&amp;</span> center<span class="token punctuation">,</span> <span class="token keyword">const</span> Size2f<span class="token operator">&amp;</span> size<span class="token punctuation">,</span> <span class="token keyword">float</span> angle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">RotatedRect</span><span class="token punctuation">(</span><span class="token keyword">const</span> CvBox2D<span class="token operator">&amp;</span> box<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token keyword">void</span> <span class="token function">points</span><span class="token punctuation">(</span>Point2f pts<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//返回矩形的4个顶点      </span>        Rect <span class="token function">boundingRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//返回包含旋转矩形的最小矩形     </span>        <span class="token keyword">operator</span> <span class="token function">CvBox2D</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//转换到旧式的cvbox2d结构</span>            <span class="token keyword">float</span> angle<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//旋转角度，当角度为0、90、180、270等时，矩形就成了一个直立的矩形  </span>        Point2f center<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//矩形的质心      </span>        Size2f size<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//矩形的边长      </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OpenCV中，坐标的原点在左上角，与x轴平行的方向为角度为0，逆时针旋转角度为负，顺时针旋转角度为正 </p><h5 id="minAreaRect"><a href="#minAreaRect" class="headerlink" title="minAreaRect( )"></a>minAreaRect( )</h5><p>函数返回的参数，请看下图：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/20170712170137455" alt="img"></p><p>角度参数angle 是矩形最下面的点（y坐标最大）P[0]发出的平行于x轴的射线，逆时针旋转，与碰到的第一个边的夹角（这个边的边长就作为width），取值范围[-90~0]。</p><h5 id="points-Point2f-pts"><a href="#points-Point2f-pts" class="headerlink" title="points(Point2f pts[])"></a>points(Point2f pts[])</h5><p>可以计算出矩形的四个角点。 计算出来的角点是 固定的顺序 ，如图所示。</p><blockquote><p>  在利用minAreaRect函数去求一个外接矩形时，函数对于矩形长和宽的选择取决于这个外接矩形的边与水平轴的角度距离，即将水平轴逆时针旋转，最先与其平行的边的长度作为宽度width，另外一条边则为height，而角度则直接取该边与水平轴的夹角。应该意识到，在minAreaRect函数中，RotatedRect的width和height的选取跟矩形的尺寸无关，并非长的就是height，短的就是width。</p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;OpenCV学习笔记&quot;&gt;&lt;a href=&quot;#OpenCV学习笔记&quot; class=&quot;headerlink&quot; title=&quot;OpenCV学习笔记&quot;&gt;&lt;/a&gt;OpenCV学习笔记&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;  基于OpenCV 4.5.4&lt;/p&gt;
&lt;p&gt; </summary>
      
    
    
    
    <category term="OpenCV学习笔记" scheme="https://roranrui.cn/categories/OpenCV%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
    <category term="OpenCv" scheme="https://roranrui.cn/tags/OpenCv/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记一</title>
    <link href="https://roranrui.cn/posts/832cf3b9/"/>
    <id>https://roranrui.cn/posts/832cf3b9/</id>
    <published>2022-05-03T13:25:30.000Z</published>
    <updated>2022-05-06T16:03:45.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS学习笔记一"><a href="#CSS学习笔记一" class="headerlink" title="CSS学习笔记一"></a>CSS学习笔记一</h1><blockquote><p>  文章转载至: MurphyChen’s Notes(<a href="https://docs.mphy.top/)%E4%BB%85%E4%BE%9B%E5%AD%A6%E4%B9%A0%E4%BA%A4%E6%B5%81%E4%BD%BF%E7%94%A8">https://docs.mphy.top/)仅供学习交流使用</a></p><p>  如有侵权, 请立即联系我删除!</p></blockquote><h2 id="1-CSS-简介"><a href="#1-CSS-简介" class="headerlink" title="1. CSS 简介"></a>1. CSS 简介</h2><h3 id="1-1-HTML-的局限性"><a href="#1-1-HTML-的局限性" class="headerlink" title="1.1 HTML 的局限性"></a>1.1 HTML 的局限性</h3><p>HTML 是网友的骨架，只关注内容的语义。例如<code>&lt;h1&gt;</code>表示大标题，<code>&lt;p&gt;</code>表示段落。</p><p>早期的时候，HTML 只能做一些简单的样式，网页非常丑，而且使 HTML 代码臃肿。</p><h3 id="1-2-CSS-网页的美容师"><a href="#1-2-CSS-网页的美容师" class="headerlink" title="1.2 CSS-网页的美容师"></a>1.2 CSS-网页的美容师</h3><p>CSS 是 层叠样式表（Cascading Style Sheets）的简称。</p><p>CSS 也是一种标记语言。</p><p>CSS 主要用于设置 HTML 页面中的文本内容（字体、大小、对齐方式）、图片的外形（宽高、边框样式、边距等）以及版面的布局和外观显示样式。</p><p>HTML 呈现结构，CSS 决定样式，结构与样式分离。</p><h3 id="1-2-CSS-语法规范"><a href="#1-2-CSS-语法规范" class="headerlink" title="1.2 CSS 语法规范"></a>1.2 CSS 语法规范</h3><p>CSS 规则由两个部分组成：选择器和一条或多条声明。</p><h3 id="1-3-CSS-代码风格"><a href="#1-3-CSS-代码风格" class="headerlink" title="1.3 CSS 代码风格"></a>1.3 CSS 代码风格</h3><ul><li>展开式</li><li>选择器，属性名，属性关键字全部小写</li><li>空格规范</li></ul><h2 id="2-CSS-基础选择器"><a href="#2-CSS-基础选择器" class="headerlink" title="2. CSS 基础选择器"></a>2. CSS 基础选择器</h2><h3 id="2-1-选择器的作用"><a href="#2-1-选择器的作用" class="headerlink" title="2.1 选择器的作用"></a>2.1 选择器的作用</h3><p>选择器就是根据不同需求把不同标签选择出来。</p><h3 id="2-2-选择器分类"><a href="#2-2-选择器分类" class="headerlink" title="2.2 选择器分类"></a>2.2 选择器分类</h3><p>选择器分为基础选择器和复合选择器两大类。</p><ul><li>基础选择器由单个选择器组成</li><li>基础选择器包括：标签选择器、类选择器、id 选择器和通配符选择器</li></ul><h3 id="2-3-标签选择器"><a href="#2-3-标签选择器" class="headerlink" title="2.3 标签选择器"></a>2.3 标签选择器</h3><p>直接用 HTML 标签名作为选择器，按标签名称分类，<strong>为页面某一类标签指定统一的 CSS 样式。</strong></p><p>语法</p><pre class="line-numbers language-HTML"><code class="language-HTML">标签名 {    属性1： 属性值1;    属性2： 属性值2;    属性3： 属性值3;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点 标签选择器可以把某一标签全部选择出来，快速为同类型标签设置统一样式。</p><p>缺点 不能设置差异化样式，只能选择全部当前标签。</p><h3 id="2-4-类选择器"><a href="#2-4-类选择器" class="headerlink" title="2.4 类选择器"></a>2.4 类选择器</h3><p>差异化选择不同标签，单独选一个或者某个标签。</p><p>语法</p><p>使用 <code>class</code> 属性来调用 class 类，样式点定义，结构类调用，一个或多个，开发最常用。</p><p>类选择器用 <code>.</code> 号显示。</p><p>注意</p><ol><li>类选择器用 <code>.</code> 标识，紧跟类名。</li><li>小写，使用 <code>-</code> 连接单词。</li><li>不要用纯数字、中文。</li><li>命名有意义。</li></ol><h3 id="2-4-1-类选择器-多类名"><a href="#2-4-1-类选择器-多类名" class="headerlink" title="2.4.1 类选择器-多类名"></a>2.4.1 类选择器-多类名</h3><p>类名间用空格分开</p><pre class="line-numbers language-HTML"><code class="language-HTML"><p class="class-name1 class-name2"></p><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-5-id-选择器"><a href="#2-5-id-选择器" class="headerlink" title="2.5 id 选择器"></a>2.5 id 选择器</h3><p>id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。</p><p>HTML 元素以 id 属性来设置 id 选择器，用 <code>#</code> 来定义。</p><pre class="line-numbers language-HTML"><code class="language-HTML">#id名 {    属性1: 属性值1;    ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>样式 <code>#</code> 定义，结构 id 调用，别人切勿使用。</p><p>id 选择器与类选择器的区别</p><ol><li>类选择器可以被多个元素调用。</li><li>id 选择器只能允许一个标签调用。</li><li>类选择器使用的较多，id 选择器用于唯一特性的标签。</li></ol><h3 id="2-6-通配符选择器"><a href="#2-6-通配符选择器" class="headerlink" title="2.6 通配符选择器"></a>2.6 通配符选择器</h3><p>语法</p><pre class="line-numbers language-HTML"><code class="language-HTML">* {    属性1: 属性值1;    ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>用 <code>*</code> 定义通配符选择器，选取页面中所有标签。</li><li>不需要调用，自动给所有标签。</li><li>特殊情况使用</li></ul><pre class="line-numbers language-HTML"><code class="language-HTML">* {    margin: 0;    padding: 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-7-基础选择器总结"><a href="#2-7-基础选择器总结" class="headerlink" title="2.7 基础选择器总结"></a>2.7 基础选择器总结</h3><table><thead><tr><th>基础选择器</th><th>作用</th><th>特点</th><th>使用情况</th><th>用法</th></tr></thead><tbody><tr><td>标签选择器</td><td>选中所有相同标签</td><td>不能差异化选择</td><td>较多</td><td><code>p{color:red;}</code></td></tr><tr><td>类选择器</td><td>选出一个或多个标签</td><td>可以根据需求选择</td><td>较多</td><td><code>.nav {color: red;}</code></td></tr><tr><td>id 选择器</td><td>一次只能选出一个标签</td><td>一个 id 属性在页面中只能出现一次</td><td>一般配合 js 使用</td><td><code>#nav {color: red;}</code></td></tr><tr><td>通配符选择器</td><td>选择所有标签元素</td><td>选择的太多，有部分不需要</td><td>特殊情况使用</td><td><code>* {color: red; }</code></td></tr></tbody></table><ul><li>每个选择器都有自己的使用场景，都要掌握。</li><li>如果是修改样式，类选择器是使用最多的。</li></ul><h2 id="3-CSS-字体属性"><a href="#3-CSS-字体属性" class="headerlink" title="3. CSS 字体属性"></a>3. CSS 字体属性</h2><h3 id="3-1-字体系列"><a href="#3-1-字体系列" class="headerlink" title="3.1 字体系列"></a>3.1 字体系列</h3><p>CSS 使用 <code>font-family</code> 属性定义文本字体系列。 尽量使用默认字体，保证不同浏览器的兼容性。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"微软雅黑"</span>, Arial, Helvetica, sans-serif<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-2-字体大小"><a href="#3-2-字体大小" class="headerlink" title="3.2 字体大小"></a>3.2 字体大小</h3><p>CSS 使用 <code>font-size</code> 属性定义字体大小。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>px</code> 大小是我们网页常用单位</li><li>谷歌浏览器默认是 <code>16px</code></li><li>可以给 <code>body</code> 指定整个页面文字大小</li></ul><h3 id="3-3-字体粗细"><a href="#3-3-字体粗细" class="headerlink" title="3.3 字体粗细"></a>3.3 字体粗细</h3><p>CSS 使用 <code>font-weight</code> 属性设置字体粗细</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">p </span><span class="token punctuation">{</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实际开发中，更常用数字来表示加粗或变细。<code>400</code>为<code>normal</code>，<code>700</code> 为 <code>bold</code>。 |属性值|描述| |-|-| |normal|默认值| |bold|定义粗体| |100-900|400 等价于 normal，700 等价于 bold，无单位|</p><h3 id="3-4-文字样式"><a href="#3-4-文字样式" class="headerlink" title="3.4 文字样式"></a>3.4 文字样式</h3><p>CSS 使用 <code>font-style</code> 属性设置文本风格。</p><pre class="line-numbers language-html"><code class="language-html">p { font-style: italic; }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>正常显示</td></tr><tr><td>italic</td><td><em>斜体</em></td></tr></tbody></table><p>注意：平常很少给字体加斜体，而是给斜体标签（em,i）给位不倾斜字体。</p><h3 id="3-5-字体复合属性写法"><a href="#3-5-字体复合属性写法" class="headerlink" title="3.5 字体复合属性写法"></a>3.5 字体复合属性写法</h3><p>将各种字体属性写在同一选择器下，节约代码。</p><p>规则</p><p>严格遵守顺序，且 <code>font-sieze</code> 和 <code>font-family</code> 必须有。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">font</span><span class="token punctuation">:</span> font-style font-weight font-size/line-hight font-family<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-6-字体属性总结"><a href="#3-6-字体属性总结" class="headerlink" title="3.6 字体属性总结"></a>3.6 字体属性总结</h3><table><thead><tr><th>字体属性</th><th>表示</th><th>注意</th></tr></thead><tbody><tr><td>font-size</td><td>字号</td><td>单位是 <code>px</code></td></tr><tr><td>font-family</td><td>字体</td><td>按照团队约定来写</td></tr><tr><td>font-weight</td><td>字体粗细</td><td>400=normal，700=bold</td></tr><tr><td>font-style</td><td>字体样式</td><td>italic，normal，常用 normal</td></tr><tr><td>font</td><td>属性连写</td><td>顺序不能变，字体和字号属性必须有</td></tr></tbody></table><h2 id="4-CSS-文本属性"><a href="#4-CSS-文本属性" class="headerlink" title="4. CSS 文本属性"></a>4. CSS 文本属性</h2><p>CSS Text（文本）属性定义文本外观，比如颜色、对齐、装饰、缩进、行间距等。</p><h3 id="4-1-文本颜色"><a href="#4-1-文本颜色" class="headerlink" title="4.1 文本颜色"></a>4.1 文本颜色</h3><p><code>color</code> 属性定义文本颜色。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>属性值 |表示颜色|属性值| |-|-| |预定义的颜色值|red,green,pink| |十六进制|#FF0000，#FF6600| |RGB 代码|rgb(255,0,0)|</p><p>实际开发中，最常用的是十六进制。</p><h3 id="4-2-对齐文本"><a href="#4-2-对齐文本" class="headerlink" title="4.2 对齐文本"></a>4.2 对齐文本</h3><p><code>text-align</code> 属性用于设置元素文本内容的对齐方式。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>解释</th></tr></thead><tbody><tr><td>left</td><td>左对齐（默认）</td></tr><tr><td>right</td><td>右对齐</td></tr><tr><td>center</td><td>居中对齐</td></tr></tbody></table><h3 id="4-3-装饰文本"><a href="#4-3-装饰文本" class="headerlink" title="4.3 装饰文本"></a>4.3 装饰文本</h3><p><code>text-decoration</code> 属性规定添加到文本的修饰。可以给文本添加下划线、删除线、上划线等。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认，无装饰（最常用）</td></tr><tr><td>underline</td><td>下划线，a 标签自带（常用）</td></tr><tr><td>overline</td><td>上划线。（几乎不用）</td></tr><tr><td>line-through</td><td>删除线。（不常用）</td></tr></tbody></table><h3 id="4-4-文本缩进"><a href="#4-4-文本缩进" class="headerlink" title="4.4 文本缩进"></a>4.4 文本缩进</h3><p><code>text-indent</code>定义段落首行缩进。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">p </span><span class="token punctuation">{</span>  <span class="token property">text-indet</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>em</code> 是一个相对单位，<code>1em</code> 就是一个字符所占大小。当 <code>text-indent=2em</code>，则恰好缩进两个文字。</p><h3 id="4-5-行间距"><a href="#4-5-行间距" class="headerlink" title="4.5 行间距"></a>4.5 行间距</h3><p><code>line-height</code> 设置行间的距离，行间距=文本高度+上间距+下间距</p><h3 id="4-6-文本属性总结"><a href="#4-6-文本属性总结" class="headerlink" title="4.6 文本属性总结"></a>4.6 文本属性总结</h3><table><thead><tr><th>属性</th><th>表示</th><th>注意</th></tr></thead><tbody><tr><td>color</td><td>文本颜色</td><td>通常十六进制缩写</td></tr><tr><td>text-align</td><td>文本对齐</td><td></td></tr><tr><td>text-indent</td><td>文本缩进</td><td>记住 <code>text-indent: 2em;</code></td></tr><tr><td>text-decoration</td><td>文本装饰</td><td>记住下划线和去除下划线</td></tr><tr><td>line-height</td><td>行高</td><td></td></tr></tbody></table><h2 id="5-CSS-引用方式"><a href="#5-CSS-引用方式" class="headerlink" title="5. CSS 引用方式"></a>5. CSS 引用方式</h2><p>按照 CSS 书写的位置不同，CSS 样式表可以分为三大类：</p><ol><li>行内样式表（行内式）</li><li>内部样式表（嵌入式）</li><li>外部样式表（链接式）</li></ol><h3 id="5-1-内部样式表"><a href="#5-1-内部样式表" class="headerlink" title="5.1 内部样式表"></a>5.1 内部样式表</h3><p>将 CSS 代码写在 HTML 页面内部，单独放在一个 <code>&lt;style&gt;</code> 标签中。</p><ul><li><code>&lt;style&gt;</code> 理论上可以放在 HTML 文档中任何一个地方，一般放在 <code>&lt;head&gt;</code> 标签中。</li><li>方便控制整个页面中的元素样式。</li></ul><p>练习时使用，实际开发不用。</p><h3 id="5-2-行内样式表"><a href="#5-2-行内样式表" class="headerlink" title="5.2 行内样式表"></a>5.2 行内样式表</h3><p>行内样式表（内联样式表）是在元素标签内部的 <code>style</code> 属性中设定 CSS 样式，适合修改简单样式。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>行内样式表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置当前标签样式</li><li>书写繁琐，不推荐大量使用。</li></ul><h3 id="5-3-外部样式表"><a href="#5-3-外部样式表" class="headerlink" title="5.3 外部样式表"></a>5.3 外部样式表</h3><p>实际开发中都是外部样式表，适用于样式比较多的情况。 核心：样式单独写到 CSS 文件中，再将 CSS 文件引入到 HTML 页面中。</p><p>引入格式</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css文件路径<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS学习笔记一&quot;&gt;&lt;a href=&quot;#CSS学习笔记一&quot; class=&quot;headerlink&quot; title=&quot;CSS学习笔记一&quot;&gt;&lt;/a&gt;CSS学习笔记一&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;  文章转载至: MurphyChen’s Notes(&lt;a hr</summary>
      
    
    
    
    <category term="前端学习" scheme="https://roranrui.cn/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="css" scheme="https://roranrui.cn/tags/css/"/>
    
    <category term="前端" scheme="https://roranrui.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Git简单使用教程</title>
    <link href="https://roranrui.cn/posts/31939754/"/>
    <id>https://roranrui.cn/posts/31939754/</id>
    <published>2022-05-03T07:43:22.000Z</published>
    <updated>2022-05-06T16:03:45.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git简单使用教程"><a href="#Git简单使用教程" class="headerlink" title="Git简单使用教程"></a>Git简单使用教程</h1><h2 id="1-Git的安装"><a href="#1-Git的安装" class="headerlink" title="1. Git的安装"></a>1. Git的安装</h2><ul><li><p><a href="https://git-scm.com/">git安装网址</a></p></li><li><p><a href="https://git-scm.com/book/zh/v2">git官方参考手册</a></p></li><li><p>Ubuntu下安装：<code>sudo apt-get install git</code></p></li></ul><hr><h2 id="2-Git搭建本地仓库"><a href="#2-Git搭建本地仓库" class="headerlink" title="2. Git搭建本地仓库"></a>2. Git搭建本地仓库</h2><p>​选择你要搭建仓库的文件夹, <code>git bush here</code>, 出现输入终端:</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/image-20220503151044126.png" alt="image-20220503151044126"></p><p>此时, 如果是第一次使用, 应该设置一下名字和邮箱, 命令如下:</p><pre class="line-numbers language-git"><code class="language-git">git config --global user.name <span class="token string">"xxxx"</span>git config --global user.email <span class="token string">"xxxx.@xxx.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>建立仓库:</strong></p><p>先初始化仓库</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入上面的命令后, 就会出现一个文件夹<code>.git</code></p><p><strong>接下来添加文件:</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span>  <span class="token punctuation">(</span>不要忘记后面这点<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>  这个命令是将仓库中的除了<code>.gitignore</code>中排除的其他文件都添加到缓存区</p></blockquote><p><strong>增加到版本库中:</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">'备注信息'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>删除暂存区:</strong></p><ul><li>保证当前工作区中没有<code>add</code>过的文件</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> fileName --cached<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查看版本:</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> log --oneline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>回退版本:</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> reset --hard 后面加版本号<span class="token function">git</span> log  回滚最近的一个版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>至此, 一个本地仓库就搭建完成了, 可以在本地对代码进行版本控制</p><hr><h2 id="3-本地仓库关联到远程仓库"><a href="#3-本地仓库关联到远程仓库" class="headerlink" title="3. 本地仓库关联到远程仓库"></a>3. 本地仓库关联到远程仓库</h2><p><strong>连接远程仓库</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript">git remote add origin 仓库的地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查看远程仓库</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript">git remote <span class="token operator">-</span>v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>删除远程仓库</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript">git remote rm origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>本地库的改动提交到远程库：</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>更新本地库至远程库的最新改动:</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> pull<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><h3 id="与查询有关的："><a href="#与查询有关的：" class="headerlink" title="与查询有关的："></a>与查询有关的：</h3><ul><li><p>查询仓库状态：<code>git status</code> </p></li><li><p>查询远程仓库状态: <code>git remote -v</code></p></li><li><p>比较文件差异（请在git add之前使用）：<code>git diff 文件名</code> </p></li><li><p>查看仓库历史记录(详细)：<code>git log</code> </p></li><li><p>查看仓库历史记录(单行)：<code>git log --pretty=online</code> 或 <code>git log --online</code> </p></li><li><p>查看所有版本的commit ID：<code>git reflog</code></p></li></ul><h3 id="与撤销有关的："><a href="#与撤销有关的：" class="headerlink" title="与撤销有关的："></a>与撤销有关的：</h3><ul><li>撤销工作区的修改：<code>git checkout -- 文件名</code> </li><li>撤销暂存区的修改：<code>git reset HEAD 文件名</code> </li><li>回退到历史版本：<code>git reset --hard 该版本ID</code> </li><li>回退到上个版本：<code>git reset --hard HEAD^</code> 上上版本是<code>HEAD^^</code>，也可用<code>HEAD~2</code>表示，以此类推</li></ul><h3 id="与标签有关的："><a href="#与标签有关的：" class="headerlink" title="与标签有关的："></a>与标签有关的：</h3><ul><li>为当前版本打标签：<code>git tag 标签名</code> </li><li>为历史版本打标签：<code>git tag 标签名 该版本ID</code> </li><li>指定标签说明：<code>git tag –a 标签名 –m "标签说明" [可选：版本ID]</code> </li><li>查看所有标签：<code>git tag</code> </li><li>查看某一标签：<code>git show 标签名</code> </li><li>删除某一标签：<code>git tag –d 标签名</code></li></ul><h3 id="与添加有关的："><a href="#与添加有关的：" class="headerlink" title="与添加有关的："></a>与添加有关的：</h3><ul><li>将当前目录变为仓库：<code>git init</code></li><li>将文件添加到暂存区：<code>git add 文件名 [可选：另一个文件名]</code></li><li>将暂存区提交到仓库：<code>git commit –m "描述"</code></li></ul><h2 id="4-分支管理"><a href="#4-分支管理" class="headerlink" title="4. 分支管理"></a>4. 分支管理</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><pre class="line-numbers language-javascript"><code class="language-javascript">git branch dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><pre class="line-numbers language-javascript"><code class="language-javascript">git checkout dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建分支并切换分支"><a href="#创建分支并切换分支" class="headerlink" title="创建分支并切换分支"></a>创建分支并切换分支</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> checkout -b dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> branch -d dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="上提交新的版本"><a href="#上提交新的版本" class="headerlink" title="上提交新的版本"></a>上提交新的版本</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> commit -a -m <span class="token string">'dev1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> merge dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="分支的合并后显示log"><a href="#分支的合并后显示log" class="headerlink" title="分支的合并后显示log"></a>分支的合并后显示log</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> log --oneline --graph --decorate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="在分支开发的过程中遇到其他问题需要切换其他分支"><a href="#在分支开发的过程中遇到其他问题需要切换其他分支" class="headerlink" title="在分支开发的过程中遇到其他问题需要切换其他分支"></a>在分支开发的过程中遇到其他问题需要切换其他分支</h3><ul><li>保留写好的内容在切换到主干</li><li>保留内容 <code>git stash</code></li></ul><hr><h2 id="仓库地址选择-HTTPS-or-SSH"><a href="#仓库地址选择-HTTPS-or-SSH" class="headerlink" title="仓库地址选择(HTTPS or SSH)"></a>仓库地址选择(HTTPS or SSH)</h2><p>如果选择SSH协议，必须将本地的公钥添加到相应代码托管平台上(以github为例)。</p><p><strong>SSH Key</strong></p><p>生成SSH Key：<code>ssh-keygen –t rsa –C "你的邮箱@xx.com"</code> 生成Key时弹出选项，回车选择默认即可。 Key保存位置：<code>/root/.ssh</code> 登陆GitHub，创建new SSH key，其内容为<code>/root/.ssh/id_rsa.pub</code>中文本</p><h2 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h2><h3 id="rejected"><a href="#rejected" class="headerlink" title="! [rejected]"></a>! [rejected]</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/7702/2018072410120456" alt="img"></p><p>执行命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> pull origin master --allow-unrelated-histories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="拓展-git-submodules"><a href="#拓展-git-submodules" class="headerlink" title="拓展: git submodules"></a>拓展: git submodules</h2><h3 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h3><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git简单使用教程&quot;&gt;&lt;a href=&quot;#Git简单使用教程&quot; class=&quot;headerlink&quot; title=&quot;Git简单使用教程&quot;&gt;&lt;/a&gt;Git简单使用教程&lt;/h1&gt;&lt;h2 id=&quot;1-Git的安装&quot;&gt;&lt;a href=&quot;#1-Git的安装&quot; class=&quot;</summary>
      
    
    
    
    <category term="Git" scheme="https://roranrui.cn/categories/Git/"/>
    
    
    <category term="Git" scheme="https://roranrui.cn/tags/Git/"/>
    
    <category term="Linux" scheme="https://roranrui.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu美化教程</title>
    <link href="https://roranrui.cn/posts/2b81f8a1/"/>
    <id>https://roranrui.cn/posts/2b81f8a1/</id>
    <published>2022-05-01T13:26:36.000Z</published>
    <updated>2022-05-25T13:29:38.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu美化教程"><a href="#Ubuntu美化教程" class="headerlink" title="Ubuntu美化教程"></a>Ubuntu美化教程</h1><blockquote><p>  基于Ubuntu20.04.4LTS</p></blockquote><h2 id="一-壁纸美化"><a href="#一-壁纸美化" class="headerlink" title="一. 壁纸美化"></a>一. 壁纸美化</h2><h3 id="壁纸设置"><a href="#壁纸设置" class="headerlink" title="壁纸设置:"></a>壁纸设置:</h3><p>右键桌面-&gt;设置壁纸即可</p><p>效果: </p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/dsad.png"></p><h3 id="登录背景修改"><a href="#登录背景修改" class="headerlink" title="登录背景修改"></a>登录背景修改</h3><p><strong>到这个网址下载一个包</strong>: <strong><a href="https://github.com/thiggy01/gdm-background">https://github.com/thiggy01/gdm-background</a></strong></p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/20210116230551731.png" alt="在这里插入图片描述"></p><p>解压</p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/2021011623071684.png" alt="在这里插入图片描述"></p><p><strong>点击打开这个文件夹有以下文件 , 会看到有以下文件 :</strong></p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/20210116230909852.png" alt="在这里插入图片描述"></p><p>终端中打开这个文件夹</p><p>安装编译包:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> <span class="token function">make</span> gcc libgtk-3-dev libpolkit-gobject-1-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/20210116231935597.png" alt="在这里插入图片描述"></p><p>输入:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查版本</p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/20210116232037877.png" alt="在这里插入图片描述"></p><p>编译之前下载好的包:</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后就能找到<strong>GDM Background 这个软件</strong></p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220501224321364.png" alt="image-20220501224321364"></p><p><strong>然后将你喜欢的背景图片拖入到这个窗口里:</strong></p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/20210116232737497.png" alt="在这里插入图片描述"></p><p>之后就替换成功;</p><p>效果:</p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/2022-05-02_18-37.png" alt="2022-05-02_18-37"></p><hr><h2 id="二-终端美化"><a href="#二-终端美化" class="headerlink" title="二. 终端美化"></a>二. 终端美化</h2><h3 id="配置安装oh-my-zsh"><a href="#配置安装oh-my-zsh" class="headerlink" title="配置安装oh-my-zsh"></a>配置安装oh-my-zsh</h3><blockquote><p>  人生苦短，我用zsh…<br>  zsh完全兼容bash，并且<a href="https://so.csdn.net/so/search?q=oh-my-zsh&amp;spm=1001.2101.3001.7020">oh-my-zsh</a>的功能比bash强大很多，赶紧来试试！</p></blockquote><p><strong>下载安装oh-my-zsh</strong></p><pre class="line-numbers language-bash"><code class="language-bash">sh -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">wget</span> -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>若提示无法建立SSL连接，末尾再加上<code>--no-check-certificate</code>。原因是wget在使用HTTPS协议时，默认会去验证网站的证书，而这个证书验证经常会失败。加上该选项，就表示不检查。</p><p><strong>bash切换为zsh</strong><br>把默认bash更换为默认zsh，输入<code>chsh -s /bin/zsh</code>，不会立即生效，需要重启系统</p><p><strong>oh-my-zsh插件配置</strong><br>下载的插件都放在.oh-my-zsh/plugins/目录下，下面是几个常用的非常不错的插件。</p><p>autojump: <code>apt-get install autojump</code></p><p>autosuggestions: <code>git clone git://github.com/zsh-users/zsh-autosuggestions</code></p><p>自动语法高亮：<a href="https://github.com/zsh-users/zsh-syntax-highlighting">https://github.com/zsh-users/zsh-syntax-highlighting</a><br>自动输入建议：<a href="https://github.com/zsh-users/zsh-autosuggestions">https://github.com/zsh-users/zsh-autosuggestions</a><br>打开远程仓库：<a href="https://github.com/paulirish/git-open">https://github.com/paulirish/git-open</a></p><p>下载到指定目录后，编辑.zshrc文件如下，找到plugins字段：</p><pre class="line-numbers language-bash"><code class="language-bash">plugins<span class="token operator">=</span><span class="token punctuation">(</span>其他的插件 zsh-syntax-highlighting zsh-autosuggestions git-open autojump zsh-syntax-highlighting zsh-autosuggestions<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再<code>source ~/.zshrc</code>使配置生效</p><h3 id="安装xfce4"><a href="#安装xfce4" class="headerlink" title="安装xfce4"></a>安装xfce4</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update <span class="token comment" spellcheck="true">#更新软件源</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> xfce4-terminal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>配置</p><ul><li>在右下角的dash菜单栏中找到Xfce4终端；打开</li><li>在“编辑”—&gt;“首选项”—-&gt;“外观”—-&gt;”背景图片”选择你想设置的图片；</li><li>更多终端设置，自行探索；</li></ul><blockquote><p>  设置快捷键<br>  正常使用是我们按ctr(常用^表示)+Alt+T打开我们使用的终端；现在我们设置新终端的快捷方式；</p></blockquote><ul><li>在右上角–&gt;有线连接—-&gt;有线设置—-&gt;设备—&gt;键盘 将其选中</li><li>在键盘的最下面有个”+”加号；点击</li><li>然后输入：<br>名称：你想对快捷键设置的名字<br>命令：xfce4-terminal</li></ul><p>效果:</p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220502181409943.png" alt="image-20220502181409943"></p><hr><h2 id="三-软件生态"><a href="#三-软件生态" class="headerlink" title="三. 软件生态"></a>三. 软件生态</h2><h3 id="星火商店"><a href="#星火商店" class="headerlink" title="星火商店"></a>星火商店</h3><p>首先我们到官网下载星火商店以及依赖(20.04)：<a href="https://spark-app.store/">https://spark-app.store/</a></p><p>先安装依赖</p><p>然后再安装包</p><h3 id="deepin-wine"><a href="#deepin-wine" class="headerlink" title="deepin-wine"></a>deepin-wine</h3><p>可在星火商店下载</p><hr><h2 id="四-Dock栏优化"><a href="#四-Dock栏优化" class="headerlink" title="四. Dock栏优化"></a>四. Dock栏优化</h2><p>安装</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> dconf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>依次打开:</p><pre><code>/org/gnome/shell/extensions/dash-to-dock/</code></pre><p>个人配置:</p><pre class="line-numbers language-bash"><code class="language-bash">background-opacity 0  // 透明custom-background-color <span class="token boolean">true</span>customize-alphas <span class="token boolean">true</span>dock-fixed <span class="token boolean">true</span>dock-position <span class="token string">'BOTTOM'</span>extend-height <span class="token boolean">false</span>show-apps-at-top <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果:</p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220502182034386.png" alt="image-20220502182034386"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ubuntu美化教程&quot;&gt;&lt;a href=&quot;#Ubuntu美化教程&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu美化教程&quot;&gt;&lt;/a&gt;Ubuntu美化教程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;  基于Ubuntu20.04.4LTS&lt;/p&gt;
</summary>
      
    
    
    
    <category term="美化教程" scheme="https://roranrui.cn/categories/%E7%BE%8E%E5%8C%96%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Linux" scheme="https://roranrui.cn/tags/Linux/"/>
    
    <category term="经验分享" scheme="https://roranrui.cn/tags/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
    <category term="桌面美化" scheme="https://roranrui.cn/tags/%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>关于jetbrainsIDE的设置</title>
    <link href="https://roranrui.cn/posts/4a81cec7/"/>
    <id>https://roranrui.cn/posts/4a81cec7/</id>
    <published>2022-05-01T06:36:22.000Z</published>
    <updated>2022-05-25T13:29:00.114Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jetbrains-IDE设置"><a href="#jetbrains-IDE设置" class="headerlink" title="jetbrains IDE设置"></a>jetbrains IDE设置</h1><h2 id="一-美化"><a href="#一-美化" class="headerlink" title="一. 美化"></a>一. 美化</h2><h3 id="背景图像美化"><a href="#背景图像美化" class="headerlink" title="背景图像美化"></a>背景图像美化</h3><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220501143718297.png" alt="外观->背景图像"></p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220501143841490.png" alt="效果"></p><h3 id="字体配色方案"><a href="#字体配色方案" class="headerlink" title="字体配色方案"></a>字体配色方案</h3><p><a href="https://github.com/topics/jetbrains-theme">指路</a></p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220501144625849.png" alt="编辑器->配色方案"></p><hr><h2 id="二-高效设置"><a href="#二-高效设置" class="headerlink" title="二. 高效设置"></a>二. 高效设置</h2><h3 id="调整窗口字体显示大小"><a href="#调整窗口字体显示大小" class="headerlink" title="调整窗口字体显示大小"></a>调整窗口字体显示大小</h3><p>巨好用的一个功能！强烈安利！</p><p>勾选上 <em>Preferences / Settings | Editor | General</em> 下的 <em>Change font size with Command + Mouse Wheel</em> 选项之后，我们就可以直接使用 <code>Ctrl+鼠标滚轮</code>(Windows&amp;Linux)来更改窗口字体的大小</p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220501145041883.png" alt="image-20220501145041883"></p><p>开启更改所有选项卡的字体大小功能</p><h3 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h3><p>修改 <em>Preferences / Settings | Editor | Font</em> 选项下的字体设置，字体推荐使用 JetBrains Mono ，字体大小建议 16/18，根据个人需要选择是否需要开启连字。</p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220501145148929.png" alt="image-20220501145148929"></p><h3 id="配置类注释模板"><a href="#配置类注释模板" class="headerlink" title="配置类注释模板"></a>配置类注释模板</h3><p>修改 <em>Preferences / Settings | Editor | File adn Code Templates</em> 下的 <code>Class</code> 和 <code>Enum</code> 的模板。</p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220501150659503.png" alt="image-20220501150659503"></p><p>你可以根据自己的习惯对 IDEA 自带的编码模板进行修改，并且，你还可以添加新的编码模板来提高编码速度。非常实用！</p><h3 id="显示方法分割线"><a href="#显示方法分割线" class="headerlink" title="显示方法分割线"></a>显示方法分割线</h3><p>勾选上 <em>Preferences / Settings | Editor | General | Appearance</em> 下的 Show method separators 选项之后，方法分割线就有了，这会小幅提高代码的可读性。</p><p><img src="https://gcore.jsdelivr.net/gh/roranrui/img_bed/img/image-20220501151302639.png" alt="image-20220501151302639"></p><hr><h2 id="三-插件推荐"><a href="#三-插件推荐" class="headerlink" title="三. 插件推荐"></a>三. 插件推荐</h2><p>在此仅推荐两个</p><h3 id="Tabnine：基于-AI-的代码提示"><a href="#Tabnine：基于-AI-的代码提示" class="headerlink" title="Tabnine：基于 AI 的代码提示"></a>Tabnine：基于 AI 的代码提示</h3><p>Tabnine 这个插件用于智能代码补全，它基于数百万 Java 程序，能够根据程序上下文提示补全代码。Tabnine 和 IDEA 自带的智能提示两者互补。</p><h3 id="Rainbow-Brackets-彩虹括号"><a href="#Rainbow-Brackets-彩虹括号" class="headerlink" title="Rainbow Brackets : 彩虹括号"></a>Rainbow Brackets : 彩虹括号</h3><p>使用各种鲜明的颜色来展示你的括号，效果图如下。可以看出代码层级变得更加清晰了，可以说非常实用友好了！</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jetbrains-IDE设置&quot;&gt;&lt;a href=&quot;#jetbrains-IDE设置&quot; class=&quot;headerlink&quot; title=&quot;jetbrains IDE设置&quot;&gt;&lt;/a&gt;jetbrains IDE设置&lt;/h1&gt;&lt;h2 id=&quot;一-美化&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="美化教程" scheme="https://roranrui.cn/categories/%E7%BE%8E%E5%8C%96%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="经验分享" scheme="https://roranrui.cn/tags/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
    <category term="IDE美化" scheme="https://roranrui.cn/tags/IDE%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>C++多线程进阶一</title>
    <link href="https://roranrui.cn/posts/e916c6e/"/>
    <id>https://roranrui.cn/posts/e916c6e/</id>
    <published>2022-05-01T05:24:50.000Z</published>
    <updated>2022-05-06T15:53:09.406Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程进阶-一"><a href="#多线程进阶-一" class="headerlink" title="多线程进阶(一)"></a>多线程进阶(一)</h1><h2 id="一-条件变量"><a href="#一-条件变量" class="headerlink" title="一. 条件变量"></a>一. 条件变量</h2><blockquote><p>  重复加锁, 影响效率, 可通过双重锁定的方式, 减少加锁, 提升效率</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">IsoutMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 双重锁定, 提升效率</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>msgRecvQueue<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        unique_lock<span class="token operator">&lt;</span>mutex<span class="token operator">></span> <span class="token function">ulock1</span><span class="token punctuation">(</span>mtx1<span class="token punctuation">)</span><span class="token punctuation">;</span>        unique_lock<span class="token operator">&lt;</span>mutex<span class="token operator">></span> <span class="token function">ulock2</span><span class="token punctuation">(</span>mtx2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>msgRecvQueue<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"删除元素 "</span> <span class="token operator">&lt;&lt;</span> msgRecvQueue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            msgRecvQueue<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mtx1<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mtx2<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本方法仍不够完美, 以下给出更优的解决办法</p><h3 id="1-condition-variable"><a href="#1-condition-variable" class="headerlink" title="1. condition_variable"></a>1. condition_variable</h3><blockquote><p>  std::condition_variable实际上是一个类，是一个和条件相关的类，说白了就是等待一个条件达成。</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">outMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> command <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        unique_lock<span class="token operator">&lt;</span>mutex<span class="token operator">></span> <span class="token function">ulock1</span><span class="token punctuation">(</span>mtx1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果第二个参数lambda表达式返回值是false, 那么wait()将解锁互斥量, 并堵塞本行</span>        <span class="token comment" spellcheck="true">// 直到其他线程调用notify_one()为止</span>        my_cond<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>ulock1<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span>                     <span class="token punctuation">{</span>                         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>msgRecvQueue<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                         <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        command <span class="token operator">=</span> msgRecvQueue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        msgRecvQueue<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ulock1<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"删除元素 "</span> <span class="token operator">&lt;&lt;</span> command <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"END"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>wait()用来等一个东西</p><p>如果第二个参数的lambda表达式返回值是false，那么wait()将解锁互斥量，并阻塞到本行<br>如果第二个参数的lambda表达式返回值是true，那么wait()直接返回并继续执行。</p><p>阻塞到什么时候为止呢？阻塞到其他某个线程调用notify_one()成员函数为止；</p><p>如果没有第二个参数，那么效果跟第二个参数lambda表达式返回false效果一样</p><p>wait()将解锁互斥量，并阻塞到本行，阻塞到其他某个线程调用notify_one()成员函数为止。</p><p>当其他线程用<code>notify_one()</code>将本线程wait()唤醒后，这个wait恢复后</p><ol><li><p>wait()不断尝试获取互斥量锁，如果获取不到那么流程就卡在wait()这里等待获取，如果获取到了，那么wait()就继续执行，获取到了锁</p></li><li><p>如果wait有第二个参数就判断这个lambda表达式。</p><p>a)如果表达式为false，那wait又对互斥量解锁，然后又休眠，等待再次被notify_one()唤醒<br>b)如果lambda表达式为true，则wait返回，流程可以继续执行（此时互斥量已被锁住）。</p></li><li><p>如果wait没有第二个参数，则wait返回，流程走下去。</p></li></ol><blockquote><p>  <strong>流程只要走到了wait()下面则互斥量一定被锁住了。</strong></p></blockquote><p>完整代码:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;condition_variable></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Msg "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" got."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            unique_lock<span class="token operator">&lt;</span>mutex<span class="token operator">></span> <span class="token function">myGuard</span><span class="token punctuation">(</span>mtx1<span class="token punctuation">,</span> adopt_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            lock(mtx1, mtx2);</span>            msgRecvQueue<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            my_cond<span class="token punctuation">.</span><span class="token function">notify_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            mtx1.unlock();</span><span class="token comment" spellcheck="true">//            mtx2.unlock();</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">outMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> command <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            unique_lock<span class="token operator">&lt;</span>mutex<span class="token operator">></span> <span class="token function">ulock1</span><span class="token punctuation">(</span>mtx1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果第二个参数lambda表达式返回值是false, 那么wait()将解锁互斥量, 并堵塞本行</span>            <span class="token comment" spellcheck="true">// 直到其他线程调用notify_one()为止</span>            my_cond<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>ulock1<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>msgRecvQueue<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            command <span class="token operator">=</span> msgRecvQueue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            msgRecvQueue<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ulock1<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"删除元素 "</span> <span class="token operator">&lt;&lt;</span> command <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"END"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> msgRecvQueue<span class="token punctuation">;</span>    mutex mtx1<span class="token punctuation">;</span>    mutex mtx2<span class="token punctuation">;</span>    condition_variable my_cond<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 生成一个条件变量对象</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    A my_a<span class="token punctuation">;</span>    thread <span class="token function">ts1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>A<span class="token operator">::</span>outMsg<span class="token punctuation">,</span> <span class="token operator">&amp;</span>my_a<span class="token punctuation">)</span><span class="token punctuation">;</span>    thread <span class="token function">ts2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>A<span class="token operator">::</span>getMsg<span class="token punctuation">,</span> <span class="token operator">&amp;</span>my_a<span class="token punctuation">)</span><span class="token punctuation">;</span>    ts1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ts2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二、深入思考</p><p>上面的代码可能导致出现一种情况：<br>因为outMsg()与getMsg()并不是一对一执行的，所以当程序循环执行很多次以后，可能在msgRecvQueue 中已经有了很多消息，但是，outMsg()还是被唤醒一次只处理一条数据。这时可以考虑把outMsg()多执行几次，或者对getMsg()进行限流。</p><h4 id="notify-all"><a href="#notify-all" class="headerlink" title="notify_all()"></a>notify_all()</h4><blockquote><p>  notify_one()：通知一个线程的wait()</p><p>  notify_all()：通知所有线程的wait()</p></blockquote><h2 id="二-创建后台任务并返回值–future类"><a href="#二-创建后台任务并返回值–future类" class="headerlink" title="二. 创建后台任务并返回值–future类"></a>二. 创建后台任务并返回值–future类</h2><h3 id="std-asyncstd-future"><a href="#std-asyncstd-future" class="headerlink" title="std::asyncstd::future"></a>std::asyncstd::future</h3><p><strong>std::async</strong>是一个函数模板，用来启动一个异步任务，启动起来一个异步任务之后，它返回一个<strong>std::future</strong>对象，这个对象是个类模板。</p><p>异步任务的定义:</p><blockquote><p>  启动一个异步任务就是自动创建一个线程，并开始 执行对应的线程入口函数，它返回一个std::future对象，这个std::future对象中就含有线程入口函数所返回的结果，我们可以通过调用future对象的成员函数get()来获取结果。</p></blockquote><p>“future”将来的意思，也有人称呼std::future提供了一种访问异步操作结果的机制，就是说这个结果你可能没办法马上拿到，但是在不久的将来，这个线程执行完毕的时候，你就能够拿到结果了，所以，大家这么理解：future中保存着一个值，这个值是在将来的某个时刻能够拿到。</p><ul><li><p>std::future对象的get()成员函数会等待线程执行结束并返回结果，拿不到结果它就会一直等待，感觉有点像join()。但是，它是可以获取结果的。</p></li><li><p>std::future对象的wait()成员函数，用于等待线程返回，本身并不返回结果，这个效果和 std::thread 的join()更像。</p></li></ul><p>使用get()返回:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;future></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">mythread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mythread started"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\tthread id: "</span> <span class="token operator">&lt;&lt;</span> this_thread<span class="token operator">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    chrono<span class="token operator">::</span>milliseconds <span class="token function">dura</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5s</span>    this_thread<span class="token operator">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>dura<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mythread finished"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\tthread id: "</span> <span class="token operator">&lt;&lt;</span> this_thread<span class="token operator">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"main thread started"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\tthread id: "</span> <span class="token operator">&lt;&lt;</span> this_thread<span class="token operator">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res <span class="token operator">=</span> <span class="token function">async</span><span class="token punctuation">(</span>mythread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// get()获取返回值</span>    cout <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"end"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  get()只能调用一次!!!!</p><p>  因为get()函数的设计是一个移动语义，相当于将result中的值移动到了a中，再次get就报告了异常。</p></blockquote><hr><h3 id="std-launch类型（枚举类型）"><a href="#std-launch类型（枚举类型）" class="headerlink" title="std::launch类型（枚举类型）"></a>std::launch类型（枚举类型）</h3><p>我们通过向std::async()传递一个参数，该参数是std::launch类型（枚举类型），来达到一些特殊的目的：</p><ol><li><strong>std::lunch::deferred：</strong><br>（defer推迟，延期）表示线程入口函数的调用会被延迟，一直到std::future的wait()或者get()函数被调用时（由主线程调用）才会执行；如果wait()或者get()没有被调用，则不会执行。<br>实际上根本就没有创建新线程。std::launch::deferred意思时延迟调用，并没有创建新线程，是在主线程中调用的线程入口函数。</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp">main thread startedthread id<span class="token operator">:</span> <span class="token number">1</span>num<span class="token operator">:</span> <span class="token number">230</span>mythread startedthread id<span class="token operator">:</span> <span class="token number">1</span>mythread finishedthread id<span class="token operator">:</span> <span class="token number">1</span><span class="token number">5</span><span class="token keyword">continue</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p><strong>std::launch::async</strong>:</p><p>在调用async函数的时候就开始创建新线程。</p></li></ol><pre class="line-numbers language-cpp"><code class="language-cpp">main thread startedthread id<span class="token operator">:</span> <span class="token number">1</span><span class="token keyword">continue</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>num<span class="token operator">:</span> <span class="token number">230</span>mythread startedthread id<span class="token operator">:</span> <span class="token number">2</span>mythread finishedthread id<span class="token operator">:</span> <span class="token number">2</span><span class="token number">5</span>end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="std-packaged-task"><a href="#std-packaged-task" class="headerlink" title="std::packaged_task"></a>std::packaged_task</h3><blockquote><p>  <strong>std::packaged_task：打包任务，把任务包装起来。</strong></p></blockquote><p>类模板，它的模板参数是各种可调用对象，通过packaged_task把各种可调用对象包装起来，方便将来作为线程入口函数来调用。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">230</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"main thread started"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\tthread id: "</span> <span class="token operator">&lt;&lt;</span> this_thread<span class="token operator">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    packaged_task<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token function">mypt</span><span class="token punctuation">(</span>mythread<span class="token punctuation">)</span><span class="token punctuation">;</span>    thread <span class="token function">t1</span><span class="token punctuation">(</span><span class="token function">ref</span><span class="token punctuation">(</span>mypt<span class="token punctuation">)</span><span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// res 保存mypt将要返回的值</span>    future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res <span class="token operator">=</span> mypt<span class="token punctuation">.</span><span class="token function">get_future</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"continue..."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// get()获取返回值</span>    cout <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// wait()不返回结果</span><span class="token comment" spellcheck="true">//    res.wait();</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"end"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  packaged_task包装起来的可调用对象还可以直接调用，从这个角度来讲，packaged_task对象也是一个可调用对象</p></blockquote><p><strong>lambda的直接调用:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">230</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"main thread started"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\tthread id: "</span> <span class="token operator">&lt;&lt;</span> this_thread<span class="token operator">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    packaged_task<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token function">mypt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"num: "</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mythread started"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\tthread id: "</span> <span class="token operator">&lt;&lt;</span> this_thread<span class="token operator">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        chrono<span class="token operator">::</span>milliseconds <span class="token function">dura</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5s</span>        this_thread<span class="token operator">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>dura<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mythread finished"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\tthread id: "</span> <span class="token operator">&lt;&lt;</span> this_thread<span class="token operator">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    thread <span class="token function">t1</span><span class="token punctuation">(</span><span class="token function">ref</span><span class="token punctuation">(</span>mypt<span class="token punctuation">)</span><span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// res 保存mypt将要返回的值</span>    future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res <span class="token operator">=</span> mypt<span class="token punctuation">.</span><span class="token function">get_future</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"continue..."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// get()获取返回值</span>    cout <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// wait()不返回结果</span><span class="token comment" spellcheck="true">//    res.wait();</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"end"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="std-promise"><a href="#std-promise" class="headerlink" title="std::promise"></a>std::promise</h3><blockquote><p>  <em>std::promise，类模板</em><br>  我们能够在某个线程中给它赋值，然后我们可以在其他线程中，把这个值取出来</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;future></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">mythread</span><span class="token punctuation">(</span>std<span class="token operator">::</span>promise<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token keyword">int</span> clac<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mythread() start"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"threadid = "</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>this_thread<span class="token operator">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    std<span class="token operator">::</span>chrono<span class="token operator">::</span>milliseconds <span class="token function">dura</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>this_thread<span class="token operator">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>dura<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mythread() end"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"threadid = "</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>this_thread<span class="token operator">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> clac<span class="token punctuation">;</span>    tmp<span class="token punctuation">.</span><span class="token function">set_value</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果保存到了tmp这个对象中</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span> vector<span class="token operator">&lt;</span>std<span class="token operator">::</span>packaged_task<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">>></span> task_vec<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token operator">::</span>promise<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> myprom<span class="token punctuation">;</span>    std<span class="token operator">::</span>thread <span class="token function">t1</span><span class="token punctuation">(</span>mythread<span class="token punctuation">,</span> std<span class="token operator">::</span><span class="token function">ref</span><span class="token punctuation">(</span>myprom<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在这里线程已经执行完了</span>    std<span class="token operator">::</span>future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> fu1 <span class="token operator">=</span> myprom<span class="token punctuation">.</span><span class="token function">get_future</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//promise和future绑定，用于获取线程返回值</span>    <span class="token keyword">auto</span> result <span class="token operator">=</span> fu1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"result = "</span> <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="三-std-future-深入理解"><a href="#三-std-future-深入理解" class="headerlink" title="三. std::future 深入理解"></a>三. std::future 深入理解</h2><h3 id="future其他成员函数"><a href="#future其他成员函数" class="headerlink" title="future其他成员函数"></a>future其他成员函数</h3><ol><li><code>std::future_status status = result.wait_for(std::chrono::seconds(几秒))</code>;</li></ol><blockquote><p>  卡住当前流程，等待<code>std::async()</code>的异步任务运行一段时间，然后返回其状态<code>std::future_status</code>。</p></blockquote><ul><li>如果<code>std::async()</code>的参数是<code>std::launch::deferred</code>（延迟执行），则不会卡住主流程。</li><li><code>std::future_status</code>是枚举类型，表示异步任务的执行状态。类型的取值有:<ul><li><code>std::future_status::timeout</code></li><li><code>std::future_status::ready</code></li><li><code>std::future_status::deferred</code></li></ul></li></ul><p>代码示例:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;future></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**  * @brief 线程入口函数  * @param int类型 num 数字  * @retval 5  */</span><span class="token keyword">int</span> <span class="token function">mythread</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"num: "</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mythread started"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\tthread id: "</span> <span class="token operator">&lt;&lt;</span> this_thread<span class="token operator">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    chrono<span class="token operator">::</span>milliseconds <span class="token function">dura</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5s</span>    this_thread<span class="token operator">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>dura<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mythread finished"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\tthread id: "</span> <span class="token operator">&lt;&lt;</span> this_thread<span class="token operator">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">230</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"main thread started"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\tthread id: "</span> <span class="token operator">&lt;&lt;</span> this_thread<span class="token operator">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res <span class="token operator">=</span> <span class="token function">async</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/*launch::deferred,*/</span> mythread<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"continue..."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// 枚举类型</span>    future_status status <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">wait_for</span><span class="token punctuation">(</span>chrono<span class="token operator">::</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> future_status<span class="token operator">::</span>timeout<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/// 超时了</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"timeout!!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> future_status<span class="token operator">::</span>ready<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/// 成功返回</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"线程成功执行!!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> future_status<span class="token operator">::</span>deferred<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/// 延迟执行</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"线程延迟执行!!!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"end"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="std-shared-future"><a href="#std-shared-future" class="headerlink" title="std::shared_future"></a>std::shared_future</h3><blockquote><ul><li><p>std::future的 get() 成员函数是转移数据</p></li><li><p>std::shared_future 的 get()成员函数是复制数据</p></li></ul></blockquote><p>即<code>shared_future</code>的<code>get()</code>可以重复调用</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;mutex></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;future></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**  * @brief 线程入口函数  * @param int类型 num 数字  * @retval 5  */</span><span class="token keyword">int</span> <span class="token function">mythread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mythread started"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\tthread id: "</span> <span class="token operator">&lt;&lt;</span> this_thread<span class="token operator">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    chrono<span class="token operator">::</span>milliseconds <span class="token function">dura</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5s</span>    this_thread<span class="token operator">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>dura<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mythread finished"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\tthread id: "</span> <span class="token operator">&lt;&lt;</span> this_thread<span class="token operator">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"main thread started"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\tthread id: "</span> <span class="token operator">&lt;&lt;</span> this_thread<span class="token operator">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    packaged_task<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token function">mypt</span><span class="token punctuation">(</span>mythread<span class="token punctuation">)</span><span class="token punctuation">;</span>    thread <span class="token function">t1</span><span class="token punctuation">(</span><span class="token function">ref</span><span class="token punctuation">(</span>mypt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res_1 <span class="token operator">=</span> mypt<span class="token punctuation">.</span><span class="token function">get_future</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// 判断future中的值是不是一个有效值</span>    <span class="token keyword">bool</span> flag_get <span class="token operator">=</span> res_1<span class="token punctuation">.</span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">///执行完毕后result_s里有值，而result里空了</span>    <span class="token comment" spellcheck="true">///std::shared_future&lt;int> result_s(std::move(result));</span>    <span class="token comment" spellcheck="true">///通过get_future返回值直接构造一个shared_future对象</span>    <span class="token comment" spellcheck="true">///std::shared_future&lt;int> result_s(mypt.get_future());</span>    shared_future<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">result_s</span><span class="token punctuation">(</span>res_1<span class="token punctuation">.</span><span class="token function">share</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> myres1 <span class="token operator">=</span> result_s<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> myres2 <span class="token operator">=</span> result_s<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"myres1 = "</span> <span class="token operator">&lt;&lt;</span> myres1 <span class="token operator">&lt;&lt;</span> <span class="token string">" myres2 = "</span> <span class="token operator">&lt;&lt;</span> myres2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"end"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;多线程进阶-一&quot;&gt;&lt;a href=&quot;#多线程进阶-一&quot; class=&quot;headerlink&quot; title=&quot;多线程进阶(一)&quot;&gt;&lt;/a&gt;多线程进阶(一)&lt;/h1&gt;&lt;h2 id=&quot;一-条件变量&quot;&gt;&lt;a href=&quot;#一-条件变量&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="多线程" scheme="https://roranrui.cn/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="C++" scheme="https://roranrui.cn/tags/C/"/>
    
    <category term="多线程编程" scheme="https://roranrui.cn/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
